**Instructions:**

1. **Add Support for PatchTST:**
   - Implement support for PatchTST models for time-series forecasting within the repository.

2. **ONNX Export Integration:**
   - Ensure that ONNX export support is integrated, referencing the related work being done in [optimum PR #2101](https://github.com/huggingface/optimum/pull/2101).

3. **Example of ONNX Export:**
   - Provide and verify the following usage example for ONNX export:
     ```sh
     git clone https://github.com/huggingface/transformers.js.git
     cd transformers.js
     pip install -q -r scripts/requirements.txt
     pip install --upgrade git+https://github.com/huggingface/optimum@add-patchtst-onnx
     python -m scripts.convert --quantize --model_id ibm/test-patchtst
     ```

4. **`PatchTSTForPrediction` Usage Example:**
   - Include an example implementation for `PatchTSTForPrediction`:
     ```js
     import { PatchTSTForPrediction, Tensor } from '@huggingface/transformers';

     const model_id = "onnx-community/test-patchtst";
     const model = await PatchTSTForPrediction.from_pretrained(model_id, { dtype: "fp32" });

     // Define input example
     const dims = [64, 512, 7];
     const prod = dims.reduce((a, b) => a * b, 1);
     const past_values = new Tensor('float32',
         Float32Array.from({ length: prod }, (_, i) => i / prod),
         dims,
     );

     const { prediction_outputs } = await model({ past_values });
     console.log(prediction_outputs);
     ```
   - The outputs should match PyTorch results within a 1e-5 absolute tolerance.

5. **`PatchTSMixerForPrediction` Usage Example:**
   - Provide a usage example for `PatchTSMixerForPrediction`:
     ```js
     import { PatchTSMixerForPrediction, Tensor } from '@huggingface/transformers';

     const model_id = "onnx-community/granite-timeseries-patchtsmixer";
     const model = await PatchTSMixerForPrediction.from_pretrained(model_id, { dtype: "fp32" });

     const dims = [64, 512, 7];
     const prod = dims.reduce((a, b) => a * b, 1);
     const past_values = new Tensor('float32',
         Float32Array.from({ length: prod }, (_, i) => i / prod),
         dims,
     );

     const { prediction_outputs } = await model({ past_values });
     console.log(prediction_outputs);
     ```

6. **Documentation Update:**
   - Ensure that all changes and usage examples are reflected in the documentation, which can be reviewed [here](https://moon-ci-docs.huggingface.co/docs/transformers.js/pr_1048). This documentation will be accessible until 30 days after the last update.

7. **Issue Closure:**
   - The changes should close the related issue: [transformers.js issue #1047](https://github.com/huggingface/transformers.js/issues/1047). 

Implement these changes and verify functionality as described in the usage examples.