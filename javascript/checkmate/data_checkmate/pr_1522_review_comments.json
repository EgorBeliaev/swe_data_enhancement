[
    {
        "title": "Fix incorrect uptime check count, refactor out query pipelines"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "This PR fixes the check counts on the Uptime Details page.  Previously the total up/down check counts for the entire collection were shown, rather than the check counts for the date window.\r\n\r\nIt also refactors the query aggregate pipelines out to a separate file for increased readability\r\n\r\n- [x] Fix check counts\r\n- [x] Refactor out query pipelines "
    },
    {
        "author": {
            "login": "llamapreview"
        },
        "body": "# Auto Pull Request Review from LlamaPReview\n\n## 1. Overview\n### 1.1 Core Changes\n- Primary purpose and scope: This PR aims to fix the incorrect uptime check counts on the Uptime Details page and refactor the query aggregate pipelines for better readability.\n- Key components modified:\n  - Client-side code for displaying uptime and incident counts.\n  - Server-side query logic for aggregating uptime and hardware details.\n- Cross-component impacts: The changes affect both the frontend display logic and the backend query structure.\n- Business value alignment: The PR addresses a critical bug that affects the accuracy of uptime and incident data displayed to users, ensuring the system provides correct and reliable monitoring information.\n\n### 1.2 Technical Architecture\n- System design modifications: The PR introduces a new module (`monitorModuleQueries.js`) to handle query pipelines, separating concerns and improving code organization.\n- Component interaction changes: The frontend now correctly aggregates check counts based on the date window, and the backend query logic is modularized for better maintainability.\n- Integration points impact: The refactoring does not introduce new integration points but improves the existing ones by making the query logic more modular and reusable.\n- Dependency changes and implications: No new dependencies are introduced, but the refactoring reduces the complexity of the existing code, making it easier to understand and maintain.\n\n## 2. Deep Technical Analysis\n### 2.1 Code Logic Analysis\n\n#### Client/src/Pages/Uptime/Details/index.jsx - UptimeDetails\n- Submitted PR Code:\n  ```javascript\n  {hoveredUptimeData !== null\n    ? hoveredUptimeData.totalChecks\n    : (monitor.stats?.upChecks?.reduce((count, checkGroup) => {\n        return count + checkGroup.totalChecks;\n      }, 0) ?? 0)}\n  ```\n  - Analysis:\n    * Current logic and potential issues: The current logic correctly sums up the total checks for the uptime details. However, it assumes that `monitor.stats?.upChecks` is always an array, which might not be the case if the data is missing or malformed.\n    * Edge cases and error handling: The code handles the case where `hoveredUptimeData` is null, but it does not handle scenarios where `monitor.stats` or `monitor.stats.upChecks` might be undefined or not an array.\n    * Cross-component impact: This change affects the display logic for uptime checks on the frontend.\n    * Business logic considerations: Ensuring accurate uptime check counts is critical for the business logic, as it directly impacts the reliability of the monitoring data presented to users.\n  - LlamaPReview Suggested Improvements:\n    ```javascript\n    {hoveredUptimeData !== null\n      ? hoveredUptimeData.totalChecks\n      : (Array.isArray(monitor.stats?.upChecks)\n        ? monitor.stats.upChecks.reduce((count, checkGroup) => {\n            return count + checkGroup.totalChecks;\n          }, 0)\n        : 0) ?? 0}\n    ```\n  - Improvement rationale:\n    * Technical benefits: Adding a check for `Array.isArray` ensures that the code does not throw an error if `monitor.stats.upChecks` is not an array.\n    * Business value: Enhances the robustness of the frontend display logic, ensuring that the application does not crash due to unexpected data formats.\n    * Risk assessment: Low risk, as the change is a minor enhancement to the existing logic and does not introduce new functionality.\n\n#### Server/db/mongo/modules/monitorModule.js - monitorModule\n- Submitted PR Code:\n  ```javascript\n  import {\n    buildUptimeDetailsPipeline,\n    buildHardwareDetailsPipeline,\n  } from \"./monitorModuleQueries.js\";\n  ```\n  - Analysis:\n    * Current logic and potential issues: The refactoring moves the query pipeline logic to a separate file (`monitorModuleQueries.js`), which improves code organization and readability. However, it assumes that the imported functions are correctly implemented and tested.\n    * Edge cases and error handling: The refactoring does not introduce new edge cases but relies on the correctness of the imported functions.\n    * Cross-component impact: This change affects the backend query logic for aggregating uptime and hardware details.\n    * Business logic considerations: Ensuring that the query logic is modular and reusable is important for maintaining and extending the system in the future.\n  - LlamaPReview Suggested Improvements:\n    ```javascript\n    // No specific code improvements needed here, but ensure that the imported functions are thoroughly tested.\n    ```\n  - Improvement rationale:\n    * Technical benefits: The refactoring improves code organization and readability, making it easier to maintain and extend the query logic.\n    * Business value: Enhances the maintainability of the backend code, which is crucial for long-term system evolution.\n    * Risk assessment: Low risk, as the change is a refactoring that does not introduce new functionality but relies on the correctness of the imported functions.\n\n### 2.2 Implementation Quality\n- Code Structure:\n  * Organization and modularity: The refactoring improves the organization and modularity of the code by separating the query pipeline logic into a dedicated module.\n  * Design pattern adherence: The changes adhere to the principle of separation of concerns, making the code more modular and reusable.\n  * Reusability aspects: The new `monitorModuleQueries.js` module can be reused across different parts of the system that require similar query pipelines.\n  * Maintainability factors: The refactoring enhances the maintainability of the code by making it easier to understand and extend.\n\n- Error Handling:\n  * Exception scenarios coverage: The PR does not introduce new error handling mechanisms but relies on the existing ones. It is important to ensure that the imported functions handle exceptions gracefully.\n  * Recovery mechanisms: The existing error handling mechanisms should be reviewed to ensure they cover all potential failure scenarios.\n  * Logging and monitoring: Ensure that the system logs and monitors the execution of the query pipelines to detect and diagnose issues promptly.\n  * User experience impact: Proper error handling ensures that users are not affected by backend failures, maintaining a smooth user experience.\n\n- Performance Considerations:\n  * Resource utilization: The refactoring does not introduce new performance considerations but relies on the existing query logic. It is important to ensure that the query pipelines are optimized for performance.\n  * Scalability aspects: The modular design of the query pipelines enhances the scalability of the system, making it easier to extend and optimize in the future.\n  * Bottleneck analysis: Review the query pipelines to identify and address any potential bottlenecks.\n  * Optimization opportunities: Consider indexing and caching strategies to optimize the performance of the query pipelines.\n\n## 3. Risk Assessment\n<details>\n\n### 3.1 Critical Issues\n\ud83d\udd34 P0 (Must Fix):\n- Issue: Potential null or undefined values in `monitor.stats?.upChecks`\n- Impact:\n  * Technical implications: The frontend code may throw an error if `monitor.stats?.upChecks` is not an array, leading to a crash.\n  * Business consequences: Users may experience crashes or incorrect data display, affecting the reliability of the monitoring system.\n  * User experience effects: Poor user experience due to application crashes or incorrect data.\n- Resolution:\n  * Specific code changes: Add a check for `Array.isArray` to ensure that `monitor.stats?.upChecks` is an array before attempting to reduce it.\n  * Configuration updates: N/A\n  * Testing requirements: Thoroughly test the frontend code with various data scenarios, including missing or malformed data.\n\n### 3.2 Important Improvements\n\ud83d\udfe1 P1 (Should Fix):\n- Issue: Lack of documentation for the new `monitorModuleQueries.js` module\n- Current Impact:\n  * Performance implications: Developers may struggle to understand and extend the query pipeline logic without proper documentation.\n  * Maintenance overhead: Increased maintenance overhead due to lack of documentation.\n  * Future scalability: Difficulty in scaling and extending the system due to lack of documentation.\n- Suggested Solution:\n  * Implementation approach: Add comprehensive documentation for the `monitorModuleQueries.js` module, explaining the purpose and usage of each function.\n  * Migration strategy: Include documentation as part of the PR review process to ensure all new modules are well-documented.\n  * Testing considerations: Review the documentation for accuracy and completeness.\n\n### 3.3 Minor Suggestions\n\ud83d\udfe2 P2 (Consider):\n- Area: Code comments and inline documentation\n- Improvement Opportunity:\n  * Code quality enhancement: Add inline comments and documentation to explain the logic and purpose of the query pipeline functions.\n  * Best practice alignment: Follow best practices for code documentation to enhance readability and maintainability.\n  * Documentation updates: Ensure that all functions and critical logic are well-documented.\n</details>\n\n## 4. Requirements Analysis\n<details>\n\n### 4.1 Functional Coverage\n- Requirements mapping:\n  * Implemented features: The PR implements the fix for incorrect uptime check counts and refactors the query pipeline logic.\n  * Missing elements: N/A\n  * Edge cases handling: The PR handles edge cases related to missing or malformed data in the frontend code.\n- Business Logic:\n  * Use case coverage: The PR covers the use case of displaying accurate uptime and incident check counts.\n  * Business rule implementation: The business rules for aggregating check counts based on the date window are correctly implemented.\n  * Data flow correctness: The data flow from the backend queries to the frontend display is correct and reliable.\n\n### 4.2 Non-functional Aspects\n- Performance metrics: The PR does not introduce new performance metrics but relies on the existing query logic.\n- Security considerations: Ensure that the query pipelines are secure and do not introduce vulnerabilities.\n- Scalability factors: The modular design of the query pipelines enhances the scalability of the system.\n- Maintainability aspects: The refactoring improves the maintainability of the code by making it more modular and reusable.\n</details>\n\n## 5. Testing Strategy\n<details>\n\n- Test Coverage:\n  * Unit test requirements: Ensure that the frontend and backend changes are covered by unit tests, including edge cases and error handling.\n  * Integration test scenarios: Test the integration between the frontend display logic and the backend query pipelines.\n  * Edge case validation: Validate edge cases such as missing or malformed data.\n- Quality Metrics:\n  * Current coverage: Ensure that the existing test coverage is maintained and extended to cover the new changes.\n  * Critical paths: Focus on testing the critical paths related to uptime and incident check counts.\n  * Performance benchmarks: Ensure that the performance of the query pipelines is benchmarked and optimized.\n</details>\n\n## 6. Final Assessment\n### 6.1 Key Action Items\n1. Critical Changes (P0):\n   - Add a check for `Array.isArray` in the frontend code to handle potential null or undefined values in `monitor.stats?.upChecks`.\n\n2. Important Improvements (P1):\n   - Add comprehensive documentation for the new `monitorModuleQueries.js` module.\n\n3. Suggested Enhancements (P2):\n   - Add inline comments and documentation to explain the logic and purpose of the query pipeline functions.\n\n### 6.2 Overall Evaluation\n- Technical assessment: The PR introduces important fixes and refactoring that improve the accuracy and maintainability of the system.\n- Business impact: The changes ensure that the monitoring data displayed to users is accurate and reliable, enhancing the business value of the system.\n- Risk evaluation: The risks are minimal, as the changes are well-scoped and do not introduce new functionality.\n- Implementation quality: The implementation quality is high, with a focus on modularity, reusability, and maintainability.\n\n---\n\ud83d\udca1 **LlamaPReview Community**\nHave feedback on this AI Code review tool? Join our [GitHub Discussions](https://github.com/JetXu-LLM/LlamaPReview-site/discussions) to share your thoughts and help shape the future of LlamaPReview."
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>\ud83e\uddf9 Nitpick comments (2)</summary><blockquote>\n\n<details>\n<summary>Server/db/mongo/modules/monitorModuleQueries.js (2)</summary><blockquote>\n\n`189-266`: **Watch Out for Potential Bloat**\n\nYour `$project` stage merges a ton of aggregated data into a single doc, which can grow if your dataset or pipeline output is massive. If that dataset inflates over time, you might want to consider narrower slices or caching. Don\u2019t let it get too heavy like an armful of mom\u2019s spaghetti.\n\n---\n\n`270-523`: **Hardware Pipeline: Pretty Comprehensive**\n\nYour `buildHardwareDetailsPipeline` function covers a wide range of hardware checks, from CPU to disk usage. This is some impressive depth, reminiscent of an extended freestyle! Just be mindful of `$lookup` performance. Large expansions might slow things down if the collection grows large. Consider partial lookups or additional indexes if you notice any heavy stutters in production.\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>\ud83d\udcdc Review details</summary>\n\n**Configuration used: .coderabbit.yaml**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>\ud83d\udce5 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 36bbf5aba0f1870ca310f5fc427a727c4fa13202 and ca42e2608f752da9e508cc83aadd62eb69e58682.\n\n</details>\n\n<details>\n<summary>\ud83d\udcd2 Files selected for processing (3)</summary>\n\n* `Client/src/Pages/Uptime/Details/index.jsx` (2 hunks)\n* `Server/db/mongo/modules/monitorModule.js` (3 hunks)\n* `Server/db/mongo/modules/monitorModuleQueries.js` (1 hunks)\n\n</details>\n\n<details>\n<summary>\ud83d\udd07 Additional comments (8)</summary><blockquote>\n\n<details>\n<summary>Server/db/mongo/modules/monitorModuleQueries.js (4)</summary>\n\n`1-13`: **Keep Your Code Flow Rock-Solid, Pal!**\n\nJust like knees buckling under pressure during a freestyle, it\u2019s easy for complexity to creep in. Here, defining a dedicated function to build the pipeline is a sweet move: your code remains modular and more readable. Keep it up, eh!\n\n---\n\n`14-33`: **Facet on Point, Eh?**\n\nThis `$facet` block capturing aggregate data seems on the mark. The grouping for `avgResponseTime`, `firstCheck`, and `lastCheck` looks correct, so there's no spaghetti spilling here. Just be sure you have proper indexes upstream to keep performance from getting sweaty.\n\n---\n\n`34-54`: **Double Check the Status Logic**\n\nYou're filtering with `status: false` to find that last false check. If there's ever a flexible status type (like a non-boolean or an array), you might want to confirm that it won't slip up here. Ensure you\u2019ve tested all possible status values so there's no meltdown when the beat drops.\n\n---\n\n`267-269`: **Solid Exit, Buddy**\n\nThe function wraps up smoothly, returning the array of stages. The code chunk is clean and straight to the point\u2014like finishing your performance strong without stumbling on the final rhyme.\n\n</details>\n<details>\n<summary>Server/db/mongo/modules/monitorModule.js (2)</summary>\n\n`342-344`: **Refactored Pipeline Invocation\u2014Nicely Done**\n\nYou replaced the monstrous inlined aggregation with `buildUptimeDetailsPipeline`. slicker than a well-timed rhyme, buddy. This approach is easy to read and maintain. Keep it tight.\n\n---\n\n`458-460`: **Hardware Pipeline Call Looks Good**\n\nThe hardware stats are now handled by `buildHardwareDetailsPipeline`. This is prime for improved clarity and reusability. Definitely no sweaty palms over forced code duplication, so keep jamming, my friend.\n\n</details>\n<details>\n<summary>Client/src/Pages/Uptime/Details/index.jsx (2)</summary>\n\n`311-313`: **Summation for Uptime Checks**\n\nSumming `totalChecks` from each `upChecks` group is a nice pivot away from a single aggregate number. This ensures your displayed totals won't lie about the timeframe. Real talk: It\u2019s all about accuracy in the final show. Looks good, eh!\n\n---\n\n`369-371`: **Incident Counts: Straightforward and True**\n\nSimilar approach here\u2014aggregating `downChecks` via reduce. Solid logic that\u2019s less prone to data meltdown when new checks appear. No sign of weak knees. Nicely done!\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "<!-- This is an auto-generated comment: summarize by coderabbit.ai -->\n\n\n<!-- walkthrough_start -->\n\n## Walkthrough\n\nThe pull request introduces significant refactoring in monitor data retrieval and display, focusing on uptime and hardware details. The changes involve extracting complex MongoDB aggregation pipelines into dedicated functions in the server-side code and updating the client-side total checks calculation logic. The modifications aim to improve code modularity, readability, and ensure accurate metric computation for monitor statistics.\n\n## Changes\n\n| File | Change Summary |\n|------|----------------|\n| `Client/src/Pages/Uptime/Details/index.jsx` | Updated total checks calculation using array reduction method for up and down checks |\n| `Server/db/mongo/modules/monitorModule.js` | Imported new pipeline builder functions for uptime and hardware details |\n| `Server/db/mongo/modules/monitorModuleQueries.js` | Added `buildUptimeDetailsPipeline` and `buildHardwareDetailsPipeline` functions to construct aggregation pipelines |\n\n## Sequence Diagram\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Server\n    participant MongoDB\n\n    Client->>Server: Request Monitor Details\n    Server->>MongoDB: Execute Aggregation Pipeline\n    MongoDB-->>Server: Return Aggregated Data\n    Server-->>Client: Send Monitor Details\n```\n\n## Possibly Related PRs\n\n- **#1497**: Modifications to uptime details fetching and display\n- **#1498**: New endpoint for retrieving hardware details\n- **#1502**: Job queue management improvements potentially impacting data retrieval performance\n\n## Suggested Reviewers\n\n- marcelluscaio\n- jennifer-gan\n\n<!-- walkthrough_end -->\n<!-- internal state start -->\n\n\n<!-- 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 -->\n\n<!-- internal state end -->\n<!-- tips_start -->\n\n---\n\nThank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?\n\n<details>\n<summary>\u2764\ufe0f Share</summary>\n\n- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)\n- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)\n- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)\n- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)\n\n</details>\n\n<details>\n<summary>\ud83e\udea7 Tips</summary>\n\n### Chat\n\nThere are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):\n\n> \u203c\ufe0f **IMPORTANT**\n> Auto-reply has been disabled for this repository in the CodeRabbit settings. The CodeRabbit bot will not respond to your replies unless it is explicitly tagged.\n- Files and specific lines of code (under the \"Files changed\" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:\n  - `@coderabbitai generate unit testing code for this file.`\n  -\t`@coderabbitai modularize this function.`\n- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:\n  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`\n  - `@coderabbitai read src/utils.ts and generate unit testing code.`\n  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`\n  - `@coderabbitai help me debug CodeRabbit configuration file.`\n\nNote: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.\n\n### CodeRabbit Commands (Invoked using PR comments)\n\n- `@coderabbitai pause` to pause the reviews on a PR.\n- `@coderabbitai resume` to resume the paused reviews.\n- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.\n- `@coderabbitai full review` to do a full review from scratch and review all the files again.\n- `@coderabbitai summary` to regenerate the summary of the PR.\n- `@coderabbitai generate docstrings` to [generate docstrings](https://docs.coderabbit.ai/finishing-touches/docstrings) for this PR. ([Beta](https://docs.coderabbit.ai/early-access#beta))\n- `@coderabbitai resolve` resolve all the CodeRabbit review comments.\n- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.\n- `@coderabbitai help` to get help.\n\n### Other keywords and placeholders\n\n- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.\n- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.\n- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.\n\n### Documentation and Community\n\n- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.\n- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.\n- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.\n\n</details>\n\n<!-- tips_end -->"
    }
]