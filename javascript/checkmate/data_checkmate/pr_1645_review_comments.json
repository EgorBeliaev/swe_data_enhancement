[
    {
        "title": "hotfix: checks query params"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "This PR is a hotfix for a missing status param for the `getChecksByTeam` and `getChecksByMonitor` endpoints.\r\n\r\nThis was set to false by default, it should be set to true by default, and false if a status parameter is provided, ie for incidents page."
    },
    {
        "author": {
            "login": "llamapreview"
        },
        "body": "# Auto Pull Request Review from LlamaPReview\n\n## 1. Overview\n### 1.1 PR Summary\n- **Business value and requirements alignment**: This PR addresses a critical issue in the `getChecksByTeam` and `getChecksByMonitor` endpoints, ensuring that the status parameter is set correctly by default. This aligns with the business requirement of displaying the correct data to users.\n- **Key components modified**: The `getChecksByTeam` and `getChecksByMonitor` endpoints, the `getChecksByTeam` and `getChecksByMonitor` queries in the IncidentTable component, and the `getChecksByMonitor` and `getChecksByTeam` functions in the NetworkService.\n- **Impact assessment**: This PR has a high impact on the system's behavior, as it changes the default value of the status parameter in the `getChecksByTeam` and `getChecksByMonitor` endpoints. This could lead to incorrect data being displayed to users if not handled correctly.\n- **System dependencies and integration impacts**: This PR affects the IncidentTable component, which is a critical component of Checkmate. Changes in this component could lead to inconsistencies or incorrect data being displayed to users.\n\n## 2. Detailed Technical Analysis\n### 2.1 Code Logic Deep-Dive\n#### Core Logic Changes\n\n- **Client/src/Pages/Incidents/IncidentTable/index.jsx**\n  - **Submitted PR Code**:\n```javascript\n    // ...\n    let res;\n    if (selectedMonitor === \"0\") {\n      res = await networkService.getChecksByTeam({\n        authToken: authToken,\n        status: false,\n        teamId: user.teamId,\n        // ...\n      });\n    } else {\n      res = await networkService.getChecksByMonitor({\n        authToken: authToken,\n        status: false,\n        monitorId: selectedMonitor,\n        // ...\n      });\n    }\n    // ...\n```\n  - **Analysis**:\n    - The `status` parameter is set to `false` regardless of whether it's an incident page or not. This is incorrect as per the PR description, which states that it should be `true` by default and `false` only if a status parameter is provided.\n    - Edge cases and error handling: There's no error handling if the API call fails. This could lead to unexpected behavior and a poor user experience.\n  - **LlamaPReview Suggested Improvements**:\n```javascript\n    // ...\n    let res;\n    if (selectedMonitor === \"0\") {\n      res = await networkService.getChecksByTeam({\n        authToken: authToken,\n        status: isIncidentPage ? false : true,\n        teamId: user.teamId,\n        // ...\n      });\n    } else {\n      res = await networkService.getChecksByMonitor({\n        authToken: authToken,\n        status: isIncidentPage ? false : true,\n        monitorId: selectedMonitor,\n        // ...\n      });\n    }\n    // ...\n```\n  - **Improvement rationale**:\n    - Technical benefits: This ensures that the `status` parameter is set correctly based on whether it's an incident page or not.\n    - Business value: This ensures that the correct data is displayed to the user, improving the user experience.\n    - Risk assessment: Without this change, the system could display incorrect data to the user, leading to a poor user experience and potential confusion.\n\n- **Client/src/Utils/NetworkService.js**\n  - **Submitted PR Code**:\n```javascript\n    // ...\n    async getChecksByMonitor(config) {\n      // ...\n      if (config.status !== undefined) params.append(\"status\", config.status);\n      // ...\n    }\n\n    async getChecksByTeam(config) {\n      // ...\n      if (config.status !== undefined) params.append(\"status\", config.status);\n      // ...\n    }\n    // ...\n```\n  - **Analysis**:\n    - The `status` parameter is only appended to the query string if it's explicitly defined in the config object. This means that if the config object doesn't include a `status` parameter, none will be sent to the server, even if it's `true` by default.\n  - **LlamaPReview Suggested Improvements**:\n```javascript\n    // ...\n    async getChecksByMonitor(config) {\n      // ...\n      const status = config.status !== undefined ? config.status : true;\n      if (status !== undefined) params.append(\"status\", status);\n      // ...\n    }\n\n    async getChecksByTeam(config) {\n      // ...\n      const status = config.status !== undefined ? config.status : true;\n      if (status !== undefined) params.append(\"status\", status);\n      // ...\n    }\n    // ...\n```\n  - **Improvement rationale**:\n    - Technical benefits: This ensures that the `status` parameter is always sent to the server, even if it's `true` by default.\n    - Business value: This ensures that the server receives the correct data, improving the system's overall behavior.\n    - Risk assessment: Without this change, the server could receive incorrect data, leading to unexpected behavior and potential system instability.\n\n- **Server/db/mongo/modules/checkModule.js**\n  - **Submitted PR Code**:\n```javascript\n    // ...\n    const matchStage = {\n      monitorId: ObjectId.createFromHexString(monitorId),\n      status: false,\n      // ...\n    };\n    // ...\n```\n  - **Analysis**:\n    - The `status` field is hardcoded to `false`. This is incorrect as per the PR description, which states that it should be `true` by default and `false` only if a status parameter is provided.\n  - **LlamaPReview Suggested Improvements**:\n```javascript\n    // ...\n    const matchStage = {\n      monitorId: ObjectId.createFromHexString(monitorId),\n      status: typeof status !== \"undefined\" ? false : undefined,\n      // ...\n    };\n    // ...\n```\n  - **Improvement rationale**:\n    - Technical benefits: This ensures that the `status` field is set correctly based on whether a status parameter is provided or not.\n    - Business value: This ensures that the correct data is retrieved from the database, improving the system's overall behavior.\n    - Risk assessment: Without this change, the system could retrieve incorrect data from the database, leading to unexpected behavior and potential system instability.\n\n- **Server/validation/joi.js**\n  - **Submitted PR Code**:\n```javascript\n    // ...\n    const getChecksQueryValidation = joi.object({\n      // ...\n      status: joi.boolean(),\n    });\n    // ...\n```\n  - **Analysis**:\n    - The `status` field is defined as a boolean, but it's not used in the validation of the query parameters. This means that the server could receive invalid data, leading to unexpected behavior and potential system instability.\n  - **LlamaPReview Suggested Improvements**:\n```javascript\n    // ...\n    const getChecksQueryValidation = joi.object({\n      // ...\n      status: joi.boolean().optional(),\n    });\n    // ...\n```\n  - **Improvement rationale**:\n    - Technical benefits: This ensures that the `status` field is optional, allowing the server to receive valid data even if it's not provided.\n    - Business value: This ensures that the server can handle invalid data gracefully, improving the system's overall behavior.\n    - Risk assessment: Without this change, the server could receive invalid data, leading to unexpected behavior and potential system instability.\n\n### 2.2 Implementation Quality \n- **Code organization and structure**: The code is well-organized and follows a consistent structure. However, there is a lack of error handling in the API calls, which could lead to unexpected behavior and a poor user experience.\n- **Design patterns usage**: The code uses appropriate design patterns, such as the use of async/await for handling promises.\n- **Error handling approach**: There is a lack of error handling in the API calls. This should be addressed to improve the system's overall behavior and user experience.\n- **Resource management**: The code manages resources appropriately, using async/await to handle promises and prevent memory leaks.\n\n## 3. Critical Findings \n<details>\n\n### 3.1 Potential Issues\n- **\ud83d\udd34 Critical Issues**\n  - **Issue description**: The `status` parameter is not set correctly by default in the `getChecksByTeam` and `getChecksByMonitor` endpoints. This could lead to incorrect data being displayed to users.\n  - **Impact**: This could lead to a poor user experience and potential confusion.\n  - **Recommendation**: Update the code to set the `status` parameter correctly by default, as suggested in the \"Code Logic Deep-Dive\" section.\n- **\ud83d\udfe1 Warnings**\n  - **Warning description**: There is a lack of error handling in the API calls in the IncidentTable component.\n  - **Potential risks**: This could lead to unexpected behavior and a poor user experience.\n  - **Suggested improvements**: Add error handling to the API calls to improve the system's overall behavior and user experience.\n\n### 3.2 Code Quality Concerns\n- **Maintainability aspects**: The code is well-organized and follows a consistent structure, making it easy to maintain. However, there is a lack of error handling, which could make it difficult to diagnose issues in the future.\n- **Readability issues**: The code is well-documented and follows a consistent coding style, making it easy to read and understand.\n- **Performance bottlenecks**: There are no obvious performance bottlenecks in the code. However, the lack of error handling could potentially lead to performance issues if not addressed.\n\n</details>\n\n## 4. Security Assessment \n<details>\n\n- **Authentication/Authorization impacts**: This PR does not directly address authentication or authorization. However, the changes could potentially expose sensitive data if not handled correctly. For example, if all checks are retrieved instead of just incidents, this could include sensitive information about system health.\n- **Data handling concerns**: The changes in this PR could potentially expose sensitive data if not handled correctly. For example, if all checks are retrieved instead of just incidents, this could include sensitive information about system health.\n- **Input validation**: The changes in this PR do not directly address input validation. However, the validation of the query parameters in the server should be updated to handle the optional `status` field, as suggested in the \"Code Logic Deep-Dive\" section.\n- **Security best practices**: The code follows security best practices, such as using HTTPS for API calls and validating user input on the server.\n- **Potential security risks**: The changes in this PR could potentially expose sensitive data if not handled correctly. For example, if all checks are retrieved instead of just incidents, this could include sensitive information about system health.\n- **Mitigation strategies**: To mitigate these risks, it's important to ensure that the changes do not expose sensitive data and that the system's overall behavior is not compromised.\n- **Security testing requirements**: The changes in this PR should be tested to ensure that they do not expose sensitive data and that the system's overall behavior is not compromised.\n\n</details>\n\n## 5. Testing Strategy \n<details>\n\n### 5.1 Test Coverage\n- **Unit test analysis**: There are no unit tests for the changes in this PR. It's important to add unit tests to ensure that the changes behave as expected.\n- **Integration test requirements**: Integration tests should be added to ensure that the changes do not break the system's overall behavior.\n- **Edge cases coverage**: Edge cases should be tested to ensure that the changes behave as expected in all scenarios.\n\n### 5.2 Test Recommendations\n#### Suggested Test Cases\n```javascript\n  // Test that the status parameter is set correctly by default\n  it(\"should set the status parameter correctly by default\", async () => {\n    const networkService = new NetworkService();\n    const authToken = \"test_token\";\n    const user = { teamId: \"test_team_id\" };\n    const selectedMonitor = \"0\";\n    const isIncidentPage = false;\n    const res = await networkService.getChecksByTeam({\n      authToken,\n      user,\n      selectedMonitor,\n      isIncidentPage,\n    });\n    expect(res.data.status).toBe(true);\n  });\n\n  // Test that the status parameter is set correctly when a status parameter is provided\n  it(\"should set the status parameter correctly when a status parameter is provided\", async () => {\n    const networkService = new NetworkService();\n    const authToken = \"test_token\";\n    const user = { teamId: \"test_team_id\" };\n    const selectedMonitor = \"0\";\n    const isIncidentPage = false;\n    const status = false;\n    const res = await networkService.getChecksByTeam({\n      authToken,\n      user,\n      selectedMonitor,\n      isIncidentPage,\n      status,\n    });\n    expect(res.data.status).toBe(false);\n  });\n\n  // Test that the API call fails gracefully when the server is down\n  it(\"should fail gracefully when the server is down\", async () => {\n    const networkService = new NetworkService();\n    const authToken = \"test_token\";\n    const user = { teamId: \"test_team_id\" };\n    const selectedMonitor = \"0\";\n    const isIncidentPage = false;\n    const status = false;\n    jest.spyOn(networkService, \"getChecksByTeam\").mockRejectedValue(new Error(\"Server down\"));\n    await expect(\n      networkService.getChecksByTeam({\n        authToken,\n        user,\n        selectedMonitor,\n        isIncidentPage,\n        status,\n      })\n    ).rejects.toThrow(\"Server down\");\n  });\n```\n- **Coverage improvements**: The tests should cover all scenarios, including when the status parameter is provided and when it's not. Also, the tests should cover the edge cases where the status parameter is set to `true` and `false`.\n- **Performance testing needs**: There are no obvious performance bottlenecks in the code. However, the performance of the API calls should be tested to ensure that they do not introduce any performance issues.\n\n</details>\n\n## 6. Documentation & Maintenance \n<details>\n\n- **Documentation updates needed**: The documentation should be updated to reflect the changes in the `getChecksByTeam` and `getChecksByMonitor` endpoints.\n- **Long-term maintenance considerations**: The changes in this PR should be maintained to ensure that the system's overall behavior is not compromised. Also, the tests should be maintained to ensure that the changes behave as expected.\n\n</details>\n\n## 7. Deployment & Operations \n<details>\n\n- **Deployment impact and strategy**: This PR has a high impact on the system's behavior, as it changes the default value of the status parameter in the `getChecksByTeam` and `getChecksByMonitor` endpoints. This could lead to incorrect data being displayed to users if not handled correctly. Therefore, it's important to thoroughly test the changes before deploying them to production.\n- **Key operational considerations**: The changes in this PR could potentially expose sensitive data if not handled correctly. Therefore, it's important to ensure that the system's overall behavior is not compromised and that the changes do not expose sensitive data.\n\n</details>\n\n## 8. Summary & Recommendations\n### 8.1 Key Action Items\n1. **Update the code to set the `status` parameter correctly by default in the `getChecksByTeam` and `getChecksByMonitor` endpoints, as suggested in the \"Code Logic Deep-Dive\" section.**\n2. **Add error handling to the API calls in the IncidentTable component to improve the system's overall behavior and user experience.**\n3. **Update the validation of the query parameters in the server to handle the optional `status` field, as suggested in the \"Code Logic Deep-Dive\" section.**\n4. **Add unit tests to ensure that the changes behave as expected.**\n5. **Add integration tests to ensure that the changes do not break the system's overall behavior.**\n6. **Update the documentation to reflect the changes in the `getChecksByTeam` and `getChecksByMonitor` endpoints.**\n7. **Thoroughly test the changes before deploying them to production.**\n\n### 8.2 Future Considerations\n- **Technical evolution path**: The changes in this PR should be maintained to ensure that the system's overall behavior is not compromised. Also, the tests should be maintained to ensure that the changes behave as expected.\n- **Business capability evolution**: The changes in this PR align with the business requirement of displaying the correct data to users. Therefore, they should be maintained to ensure that the system continues to meet the business's needs.\n- **System integration impacts**: The changes in this PR affect the IncidentTable component, which is a critical component of Checkmate. Therefore, they should be tested thoroughly to ensure that they do not introduce any integration issues.\n\n---\n\ud83d\udca1 **Help Shape LlamaPReview**\nHow's this review format working for you? [Vote in our Github Discussion Polls](https://github.com/JetXu-LLM/LlamaPReview-site/discussions/9) to help us improve your review experience!"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "<!-- This is an auto-generated comment: summarize by coderabbit.ai -->\n<!-- This is an auto-generated comment: failure by coderabbit.ai -->\n\n> [!CAUTION]\n> ## Review failed\n> \n> The pull request is closed.\n\n<!-- end of auto-generated comment: failure by coderabbit.ai -->\n\n<!-- internal state start -->\n\n\n<!-- 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= -->\n\n<!-- internal state end -->\n<!-- walkthrough_start -->\n\n## Walkthrough\n\nThe pull request introduces a new `status` parameter across multiple components of the application, enabling more granular filtering of checks. This change spans the client-side incident table, network service, server-side check module, and validation schemas. The modification allows for retrieving checks based on their specific status, providing more flexible data querying capabilities throughout the application's check-related functionality.\n\n## Changes\n\n| File | Change Summary |\n|------|----------------|\n| `Client/src/Pages/Incidents/IncidentTable/index.jsx` | Added `status: false` parameter to API calls in `fetchPage` function |\n| `Client/src/Utils/NetworkService.js` | Updated `getChecksByMonitor` and `getChecksByTeam` methods to support optional `status` parameter |\n| `Server/db/mongo/modules/checkModule.js` | Modified `getChecksByMonitor` to conditionally handle `status` query parameter |\n| `Server/validation/joi.js` | Added `status` (boolean) to `getChecksQueryValidation` and `getTeamChecksQueryValidation` schemas |\n\n## Sequence Diagram\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant NetworkService\n    participant Server\n    participant Database\n\n    Client->>NetworkService: Request checks with status\n    NetworkService->>Server: GET request with status parameter\n    Server->>Database: Query checks with optional status filter\n    Database-->>Server: Return filtered checks\n    Server-->>NetworkService: Respond with checks\n    NetworkService-->>Client: Provide filtered check data\n```\n\n<!-- walkthrough_end -->\n\n---\n\n<details>\n<summary>\ud83d\udcdc Recent review details</summary>\n\n**Configuration used: .coderabbit.yaml**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>\ud83d\udce5 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 6c0a64d90352cc023c3e6c62deacfde3ba3eecd6 and 875c13b5feb92d5d8506dcdb02daa801c3bff8c4.\n\n</details>\n\n<details>\n<summary>\ud83d\udcd2 Files selected for processing (4)</summary>\n\n* `Client/src/Pages/Incidents/IncidentTable/index.jsx` (2 hunks)\n* `Client/src/Utils/NetworkService.js` (2 hunks)\n* `Server/db/mongo/modules/checkModule.js` (1 hunks)\n* `Server/validation/joi.js` (2 hunks)\n\n</details>\n\n</details>\n<!-- finishing_touch_checkbox_start -->\n\n<details>\n<summary>\u2728 Finishing Touches</summary>\n\n- [ ] <!-- {\"checkboxId\": \"7962f53c-55bc-4827-bfbf-6a18da830691\"} --> \ud83d\udcdd Generate Docstrings (Beta)\n\n</details>\n\n<!-- finishing_touch_checkbox_end -->\n<!-- tips_start -->\n\n---\n\nThank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?\n\n<details>\n<summary>\u2764\ufe0f Share</summary>\n\n- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)\n- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)\n- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)\n- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)\n\n</details>\n\n<details>\n<summary>\ud83e\udea7 Tips</summary>\n\n### Chat\n\nThere are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):\n\n> \u203c\ufe0f **IMPORTANT**\n> Auto-reply has been disabled for this repository in the CodeRabbit settings. The CodeRabbit bot will not respond to your replies unless it is explicitly tagged.\n- Files and specific lines of code (under the \"Files changed\" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:\n  - `@coderabbitai generate unit testing code for this file.`\n  -\t`@coderabbitai modularize this function.`\n- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:\n  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`\n  - `@coderabbitai read src/utils.ts and generate unit testing code.`\n  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`\n  - `@coderabbitai help me debug CodeRabbit configuration file.`\n\nNote: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.\n\n### CodeRabbit Commands (Invoked using PR comments)\n\n- `@coderabbitai pause` to pause the reviews on a PR.\n- `@coderabbitai resume` to resume the paused reviews.\n- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.\n- `@coderabbitai full review` to do a full review from scratch and review all the files again.\n- `@coderabbitai summary` to regenerate the summary of the PR.\n- `@coderabbitai generate docstrings` to [generate docstrings](https://docs.coderabbit.ai/finishing-touches/docstrings) for this PR. ([Beta](https://docs.coderabbit.ai/early-access#beta))\n- `@coderabbitai resolve` resolve all the CodeRabbit review comments.\n- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.\n- `@coderabbitai help` to get help.\n\n### Other keywords and placeholders\n\n- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.\n- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.\n- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.\n\n### Documentation and Community\n\n- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.\n- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.\n- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.\n\n</details>\n\n<!-- tips_end -->"
    }
]