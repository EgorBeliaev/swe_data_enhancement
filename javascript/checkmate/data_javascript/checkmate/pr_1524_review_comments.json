[
    {
        "title": "Inform Admin incase of server issue."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Describe your changes\r\n\r\nCreated toast notifications that will alert the admin whenever there is a server issue and would inform admin too when there would be proper functioning of the server.\r\n\r\n## Issue number\r\n1482: https://github.com/bluewave-labs/checkmate/issues/assigned/jasneetsingh6114\r\n\r\n## Please ensure all items are checked off before requesting a review:\r\n\r\n- [ Done] I deployed the application locally.\r\n- [ Done] I have performed a self-review and testing of my code.\r\n- [ Done] I have included the issue # in the PR.\r\n- [Done ] I have labelled the PR correctly.\r\n- [ Done] The issue I am working on is assigned to me.\r\n- [ I didn't hard-coded any values] I didn't use any hardcoded values (otherwise it will not scale, and will make it difficult to maintain consistency across the application).\r\n- [Done ] I made sure font sizes, color choices etc are all referenced from the theme.\r\n- [Done ] My PR is granular and targeted to one specific feature.\r\n- [Done] I took a screenshot and attached to this PR if there is a UI change.\r\n![Screenshot 2025-01-06 203810](https://github.com/user-attachments/assets/a3b37058-4c91-4b5d-8fa5-35efb7fa4cf0)\r\n![Screenshot 2025-01-06 205058](https://github.com/user-attachments/assets/f1f51687-6700-4d67-a92f-393457fd9d13)\r\n\r\n\r\n\r\n"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>\ud83e\uddf9 Nitpick comments (2)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (2)</summary><blockquote>\n\n`14-17`: **Don't let 'this.user' and 'this.isAdmin' miss their chance to update**\n\nJust like seizing the moment, ensure `this.user` and `this.isAdmin` are updated within the store subscription to keep the user's status current. This will prevent any stale user information from lingering in your service.\n\n---\n\n`50-62`: **Don't let unknown errors make your knees weak**\n\nIf `error.response` is undefined, possibly due to network issues or unexpected errors, consider handling these cases. Adding an `else` clause to manage such scenarios will make your error handling more robust.\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>\ud83d\udcdc Review details</summary>\n\n**Configuration used: .coderabbit.yaml**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>\ud83d\udce5 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 624ea5068459efe405329c199bdbad99d3e76a5b and 4398010a9f9672cc071529e701ada70a20fd07a7.\n\n</details>\n\n<details>\n<summary>\ud83d\udcd2 Files selected for processing (1)</summary>\n\n* `Client/src/Utils/NetworkService.js` (3 hunks)\n\n</details>\n\n<details>\n<summary>\ud83d\udd07 Additional comments (2)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (2)</summary>\n\n`32-37`: **When the server recovers, you capture the opportunity**\n\nGreat job notifying admins when the server is back up and running smoothly after issues. This ensures they're promptly informed when things return to normal.\n\n---\n\n`64-70`: **Keeping the toast notifications in rhythm**\n\nYour debounce implementation prevents overwhelming the admin with too many notifications. It's a smooth way to manage toast frequency and keep the interface clean.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->"
    },
    {
        "author": {
            "login": "llamapreview"
        },
        "body": "# Auto Pull Request Review from LlamaPReview\n\n## 1. Overview\n### 1.1 PR Summary\n- **Business value and requirements alignment**: The PR introduces toast notifications to alert the admin about server issues and proper functioning, improving server monitoring and response time.\n- **Key components modified**: `Client/src/Utils/NetworkService.js`\n- **Impact assessment**: The PR impacts the user interface (UI) and the network service layer, which handles API requests and responses. It introduces a debounce mechanism to prevent excessive toast notifications and handles errors differently based on the admin's role.\n- **System dependencies and integration impacts**: The PR interacts with `react-toastify`, `axios`, `authSlice`, and `uptimeMonitorsSlice`. It also depends on the admin's role and permissions for displaying notifications.\n\n### 1.2 Architecture Changes\n- **System design modifications**: None\n- **Component interactions**: The PR introduces new interactions between the network service layer and the toast notification component. It also modifies the error handling logic in the network service layer.\n- **Integration points**: The PR integrates with the existing UI, network service layer, and authentication/authorization mechanisms.\n\n## 2. Detailed Technical Analysis\n### 2.1 Code Logic Deep-Dive\n#### Core Logic Changes\n- **Client/src/Utils/NetworkService.js** - `handleError` function\n  - **Submitted PR Code**:\n    ```javascript\n    handleError(error) {\n      if (error.response) {\n        const status = error.response.status;\n        if (status === 401) {\n          this.dispatch(clearAuthState());\n          this.dispatch(clearUptimeMonitorState());\n          this.navigate(\"/login\");\n        } else if (this.isAdmin && status >= 500) {\n          this.debounceToast(\"Checkmate server is not running or has issues. Please check.\", \"error\");\n          this.errorOccurred = true;\n        }\n      }\n    }\n    ```\n  - **Analysis**:\n    - The current logic handles 401 errors and 500 errors for admin users. However, it does not handle other error status codes or network errors. It also does not consider the case where the admin is not logged in or does not have the required permissions.\n    - **Edge cases and error handling**: The current implementation does not handle other error status codes or network errors. It also does not consider the case where the admin is not logged in or does not have the required permissions.\n    - **Cross-component impact**: Changes in error handling might affect other components that rely on the network service layer for error handling.\n    - **Business logic considerations**: The current logic assumes that a 500 status indicates a server issue. However, it might not cover all server issues or might be triggered by client-side errors.\n  - **LlamaPReview Suggested Improvements**:\n    ```javascript\n    handleError(error) {\n      if (error.response) {\n        const status = error.response.status;\n        if (status === 401) {\n          this.dispatch(clearAuthState());\n          this.dispatch(clearUptimeMonitorState());\n          this.navigate(\"/login\");\n        } else if (this.isAdmin && (status >= 500 || status === 0)) { // Include status code 0 for network errors\n          this.debounceToast(\"Checkmate server is not running or has issues. Please check.\", \"error\");\n          this.errorOccurred = true;\n        }\n      } else if (error.request) { // Handle network errors\n        this.debounceToast(\"Checkmate server is not responding. Please check your network connection.\", \"error\");\n      } else {\n        console.error(\"An error occurred:\", error.message);\n      }\n    }\n    ```\n  - **Improvement rationale**:\n    - **Technical benefits**: The improved logic handles network errors and other error status codes, providing more comprehensive error handling.\n    - **Business value**: More comprehensive error handling ensures that the admin is notified of a wider range of server issues, enabling quicker resolution.\n    - **Risk assessment**: The improved logic reduces the risk of missed server issues and improves the overall system's reliability.\n\n- **Client/src/Utils/NetworkService.js** - `debounceToast` function\n  - **Submitted PR Code**:\n    ```javascript\n    debounceToast(message, type, debounceDuration = 5000) {\n      const now = Date.now();\n      if (now - this.lastToastTimestamp > debounceDuration) {\n        this.lastToastTimestamp = now;\n        type === \"success\" ? toast.success(message) : toast.error(message);\n      }\n    }\n    ```\n  - **Analysis**:\n    - The current debounce logic prevents excessive toast notifications by only displaying a new notification if a certain duration has passed since the last notification. However, it does not consider the case where the admin closes the notification before the debounce duration has passed.\n    - **Edge cases and error handling**: The current implementation does not handle the case where the admin closes the notification before the debounce duration has passed, potentially leading to excessive notifications.\n    - **Cross-component impact**: Changes in the debounce logic might affect other components that rely on toast notifications for displaying messages.\n    - **Business logic considerations**: The current logic assumes that the debounce duration is sufficient for the admin to read and act upon the notification. However, it might not be optimal for all use cases.\n  - **LlamaPReview Suggested Improvements**:\n    ```javascript\n    debounceToast(message, type, debounceDuration = 5000) {\n      const now = Date.now();\n      if (now - this.lastToastTimestamp > debounceDuration) {\n        this.lastToastTimestamp = now;\n        const toastId = toast[type](message, {\n          autoClose: debounceDuration,\n          onClose: () => {\n            this.lastToastTimestamp = 0; // Reset the timestamp when the toast is closed\n          },\n        });\n      }\n    }\n    ```\n  - **Improvement rationale**:\n    - **Technical benefits**: The improved logic resets the debounce timestamp when the admin closes the notification, preventing excessive notifications even if the admin closes the notification before the debounce duration has passed.\n    - **Business value**: More robust debounce logic ensures that the admin is not overwhelmed with excessive notifications, improving the overall user experience.\n    - **Risk assessment**: The improved logic reduces the risk of notification spam and improves the overall system's usability.\n\n### 2.2 Implementation Quality \n- **Code organization and structure**: The PR maintains a clear and organized structure, with the new functions (`handleError` and `debounceToast`) added to the `NetworkService` class.\n- **Design patterns usage**: The PR uses the observer pattern for subscribing to store changes and the debounce pattern for preventing excessive toast notifications.\n- **Error handling approach**: The PR introduces more comprehensive error handling, covering a wider range of error status codes and network errors.\n- **Resource management**: The PR does not introduce any new resources that need to be managed.\n\n## 3. Critical Findings \n<details>\n\n### 3.1 Potential Issues\n- **\ud83d\udd34 Critical Issues**\n  - **Issue description**: The current `handleError` function does not handle other error status codes or network errors, potentially leading to missed server issues or unexpected behavior.\n  - **Impact**: Missed server issues might lead to delayed resolution and increased downtime. Unexpected behavior might cause confusion or frustration for the admin user.\n  - **Recommendation**: Implement the suggested improvements to handle other error status codes and network errors, as outlined in the \"Code Logic Deep-Dive\" section.\n\n- **\ud83d\udfe1 Warnings**\n  - **Warning description**: The current debounce logic does not reset the debounce timestamp when the admin closes the notification, potentially leading to excessive notifications if the admin closes the notification before the debounce duration has passed.\n  - **Potential risks**: Excessive notifications might overwhelm the admin, leading to notification fatigue or missed critical alerts.\n  - **Suggested improvements**: Implement the suggested improvements to reset the debounce timestamp when the admin closes the notification, as outlined in the \"Code Logic Deep-Dive\" section.\n\n### 3.2 Code Quality Concerns\n- **Maintainability aspects**: The PR maintains good maintainability, with clear and concise code that is easy to understand and modify.\n- **Readability issues**: The PR does not introduce any readability issues, with clear variable and function names and consistent formatting.\n- **Performance bottlenecks**: The PR does not introduce any performance bottlenecks, with efficient debounce logic and minimal overhead.\n\n</details>\n\n## 4. Security Assessment \n<details>\n\n- **Authentication/Authorization impacts**: The PR introduces new error handling logic that checks the admin's role before displaying error notifications. This change ensures that only authorized users receive sensitive server issue notifications.\n- **Data handling concerns**: The PR does not introduce any new data handling concerns, with the existing data handling mechanisms remaining unchanged.\n- **Input validation**: The PR does not introduce any new input validation concerns, with the existing input validation mechanisms remaining unchanged.\n- **Security best practices**: The PR adheres to security best practices, with proper authentication and authorization checks and secure data handling mechanisms.\n- **Potential security risks**: The PR does not introduce any new potential security risks, with the existing security mechanisms remaining unchanged.\n- **Mitigation strategies**: The PR introduces new error handling logic that checks the admin's role before displaying error notifications, mitigating the risk of unauthorized access to sensitive server issue notifications.\n- **Security testing requirements**: Conduct security testing to ensure that the new error handling logic is secure and cannot be bypassed by unauthorized users.\n\n</details>\n\n## 5. Testing Strategy \n<details>\n\n### 5.1 Test Coverage\n- **Unit test analysis**: Write unit tests to cover the new `handleError` and `debounceToast` functions, ensuring they behave as expected under various scenarios.\n- **Integration test requirements**: Conduct integration testing to ensure the new notifications work correctly with the existing UI and network service layer. Test the new error handling logic to ensure it covers all relevant edge cases and behaves as expected.\n\n### 5.2 Test Recommendations\n#### Suggested Test Cases\n```javascript\n// Test handleError function\ntest('handleError should handle 401 errors correctly', () => {\n  // Arrange\n  const networkService = new NetworkService(store, dispatch, navigate);\n  const error = { response: { status: 401 } };\n\n  // Act\n  networkService.handleError(error);\n\n  // Assert\n  expect(dispatch).toHaveBeenCalledWith(clearAuthState());\n  expect(dispatch).toHaveBeenCalledWith(clearUptimeMonitorState());\n  expect(navigate).toHaveBeenCalledWith(\"/login\");\n});\n\ntest('handleError should handle 500 errors for admin users correctly', () => {\n  // Arrange\n  const networkService = new NetworkService({ getState: () => ({ auth: { user: { role: ['admin'] } } }) }, dispatch, navigate);\n  const error = { response: { status: 500 } };\n\n  // Act\n  networkService.handleError(error);\n\n  // Assert\n  expect(networkService.debounceToast).toHaveBeenCalledWith(\"Checkmate server is not running or has issues. Please check.\", \"error\");\n  expect(networkService.errorOccurred).toBe(true);\n});\n\n// Test debounceToast function\ntest('debounceToast should prevent excessive notifications', () => {\n  // Arrange\n  const networkService = new NetworkService(store, dispatch, navigate);\n  const debounceDuration = 5000;\n  const now = Date.now();\n  networkService.lastToastTimestamp = now - debounceDuration - 1; // Set lastToastTimestamp to just before the debounce duration\n\n  // Act\n  networkService.debounceToast(\"Test message\", \"success\");\n\n  // Assert\n  expect(networkService.lastToastTimestamp).toBe(now); // lastToastTimestamp should be updated to the current timestamp\n  expect(toast.success).toHaveBeenCalledWith(\"Test message\", { autoClose: debounceDuration, onClose: expect.any(Function) });\n});\n```\n- **Coverage improvements**: Ensure that the new functions are covered by unit tests and that the new error handling logic is covered by integration tests.\n- **Performance testing needs**: Conduct performance testing to ensure that the new debounce logic and error handling logic can handle high traffic and edge cases without introducing performance bottlenecks.\n\n</details>\n\n## 6. Documentation & Maintenance \n<details>\n\n- **Documentation updates needed**: Update the documentation to reflect the new error handling logic and debounce mechanism.\n- **Long-term maintenance considerations**: Ensure that the new error handling logic and debounce mechanism are properly documented and tested, making it easier for future maintainers to understand and modify the code.\n- **Technical debt and monitoring requirements**: Monitor the new error handling logic and debounce mechanism to ensure they continue to behave as expected and do not introduce new technical debt.\n\n</details>\n\n## 7. Deployment & Operations \n<details>\n\n- **Deployment impact and strategy**: The PR does not introduce any new deployment considerations, with the existing deployment strategy remaining unchanged.\n- **Key operational considerations**: The PR introduces new error handling logic and a debounce mechanism, which should be monitored to ensure they continue to behave as expected and do not introduce new operational issues.\n\n</details>\n\n## 8. Summary & Recommendations\n### 8.1 Key Action Items\n1. **Implement suggested improvements for the `handleError` function** to handle other error status codes and network errors, as outlined in the \"Code Logic Deep-Dive\" section.\n2. **Implement suggested improvements for the `debounceToast` function** to reset the debounce timestamp when the admin closes the notification, as outlined in the \"Code Logic Deep-Dive\" section.\n3. **Write unit tests** to cover the new `handleError` and `debounceToast` functions, ensuring they behave as expected under various scenarios.\n4. **Conduct integration testing** to ensure the new notifications work correctly with the existing UI and network service layer. Test the new error handling logic to ensure it covers all relevant edge cases and behaves as expected.\n5. **Update the documentation** to reflect the new error handling logic and debounce mechanism.\n6. **Monitor the new error handling logic and debounce mechanism** to ensure they continue to behave as expected and do not introduce new technical debt or operational issues.\n\n### 8.2 Future Considerations\n- **Technical evolution path**: As the system evolves, consider introducing more granular error handling and notification mechanisms to provide more detailed information to the admin user.\n- **Business capability evolution**: As the business capabilities evolve, consider introducing new notification channels or notification preferences to provide more flexible and personalized notification experiences.\n- **System integration impacts**: As the system integrates with new components or services, consider introducing new error handling logic or notification mechanisms to ensure seamless integration and proper notification.\n\n---\n\ud83d\udca1 **Help Shape LlamaPReview**\nHow's this review format working for you? [Vote in our Github Discussion Polls](https://github.com/JetXu-LLM/LlamaPReview-site/discussions/9) to help us improve your review experience!"
    },
    {
        "author": {
            "login": "ajhollid"
        },
        "body": "@jasneetsingh6114 as mentioned earlier the admin check is not necessary for this functionality, it can be removed.\r\n\r\nThe logic for checking if the server is responding or not is not quite correct either.\r\n\r\nAll that needs to be done in this PR is the following:\r\n\r\n```js\r\nif (error.response) {\r\n   // current response error implementation\r\n} else if (error.request) {\r\n    // Show a toast informing the user the server didn't respond\r\n}\r\n\r\nThat's all that is needed here, this should be like a 5 line PR.\r\n\r\nSimple is often best :smile: "
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>\ud83e\uddf9 Nitpick comments (3)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (3)</summary><blockquote>\n\n`40-61`: **Consider handling unexpected errors.**\n\nIn the `handleError` method, you check for `error.response` and `error.request`. However, there might be cases where neither is defined. Adding an `else` clause to handle unexpected errors could improve robustness.\n\n\n\nApply this diff to address the suggestion:\n\n```diff\n     } else if (error.request) {\n         // Show a toast informing the user the server didn't respond\n         createToast({\n             variant: \"error\",\n             body: \"The server did not respond. Please check your network or try again later.\",\n         });\n+    } else {\n+        // Handle unexpected errors\n+        console.error('An unexpected error occurred:', error);\n     }\n```\n\n---\n\n`49-52`: **Enhance the clarity of the server error message.**\n\nThe message \"Checkmate server is not running or has issues. Please check.\" might be unclear to some users. Consider rephrasing it to be more user-friendly.\n\n\n\nSuggested change:\n\n```diff\n     createToast({\n         variant: \"error\",\n-        body: \"Checkmate server is not running or has issues. Please check.\",\n+        body: \"An error occurred on the server. Please try again later.\",\n     });\n```\n\n---\n\n`58-59`: **Adjust the network error message for precision.**\n\nThe message suggests checking the network, but the issue might not be the user's connection. Rephrasing could provide better guidance.\n\n\n\nSuggested change:\n\n```diff\n     createToast({\n         variant: \"error\",\n-        body: \"The server did not respond. Please check your network or try again later.\",\n+        body: \"The server did not respond. Please try again later.\",\n     });\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>\ud83d\udcdc Review details</summary>\n\n**Configuration used: .coderabbit.yaml**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>\ud83d\udce5 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 4398010a9f9672cc071529e701ada70a20fd07a7 and 1dcc10fae797597bcec0b800a292a7a0df8babd0.\n\n</details>\n\n<details>\n<summary>\ud83d\udcd2 Files selected for processing (1)</summary>\n\n* `Client/src/Utils/NetworkService.js` (4 hunks)\n\n</details>\n\n<details>\n<summary>\ud83d\udd07 Additional comments (3)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (3)</summary>\n\n`6-6`: **Import statement is appropriate.**\n\nImporting `createToast` from `./toastUtils` allows for consistent toast notifications throughout the application.\n\n---\n\n`28-32`: **Refactored error handling enhances maintainability.**\n\nBy delegating error processing to the `handleError` method, the code becomes cleaner and easier to manage.\n\n---\n\n`805-807`: **New `health` method is correctly implemented.**\n\nThe `health` endpoint provides a simple way to check server status. The implementation aligns with project standards.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "**Actionable comments posted: 0**\n\n<details>\n<summary>\u267b\ufe0f Duplicate comments (1)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (1)</summary><blockquote>\n\n`40-61`: _:hammer_and_wrench: Refactor suggestion_\n\n**Yo! Remove the admin-specific comment, dawg!**\n\nThe comment on line 48 suggests admin-only notifications, but according to the feedback, server error toasts should be shown to all users. Let's keep it consistent with the requirements.\n\n```diff\n-\t\t\t\t// Display toast for server errors to all users\n+\t\t\t\t// Display toast for server errors\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>\ud83e\uddf9 Nitpick comments (1)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (1)</summary><blockquote>\n\n`49-52`: **Yo, we need to prevent toast spam!**\n\nConsider implementing rate limiting for the toast notifications to prevent overwhelming users when multiple server errors occur in rapid succession.\n\n```diff\n \t\t\t\tcreateToast({\n+\t\t\t\t\tid: 'server-error-toast', // Prevent duplicate toasts\n \t\t\t\t\tvariant: \"error\",\n \t\t\t\t\tbody: \"Checkmate server is not running or has issues. Please check.\",\n+\t\t\t\t\tduration: 5000, // Auto-dismiss after 5 seconds\n \t\t\t\t});\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>\ud83d\udcdc Review details</summary>\n\n**Configuration used: .coderabbit.yaml**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>\ud83d\udce5 Commits</summary>\n\nReviewing files that changed from the base of the PR and between 1dcc10fae797597bcec0b800a292a7a0df8babd0 and 74f23c17923f779d2920aea361a69ea2151d0616.\n\n</details>\n\n<details>\n<summary>\ud83d\udcd2 Files selected for processing (1)</summary>\n\n* `Client/src/Utils/NetworkService.js` (3 hunks)\n\n</details>\n\n<details>\n<summary>\ud83d\udd07 Additional comments (2)</summary><blockquote>\n\n<details>\n<summary>Client/src/Utils/NetworkService.js (2)</summary>\n\n`6-6`: **LGTM! Import looks good.**\n\nThe import of createToast is necessary for the new server status notification feature.\n\n---\n\n`30-32`: **Clean implementation, my G! \ud83d\udd25**\n\nThe error handling has been properly centralized in the handleError method while maintaining the Promise rejection chain.\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->"
    },
    {
        "author": {
            "login": "jasneetsingh6114"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jasneetsingh6114"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jasneetsingh6114"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jasneetsingh6114"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ajhollid"
        },
        "body": "Thanks for your patience and for making requested changes, this looks good :+1: \r\n\r\nI understand your reasoning for debouncing the toast, but I think that we should address that at a higher level and resolve the issue of multiple network requests entirely.\r\n\r\nThank you for your contribution to the project!"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "<!-- This is an auto-generated comment: summarize by coderabbit.ai -->\n\n\n\n\n<!-- walkthrough_start -->\n\n## Walkthrough\n\nThe changes to the `NetworkService.js` file focus on enhancing error handling and user feedback mechanisms. A new `handleError` method has been introduced to process API error responses, specifically addressing authentication and server errors. Additionally, a `health` method has been added to send GET requests to the `/health` endpoint. The modifications improve the overall structure of error management, providing clearer user notifications through toast messages.\n\n## Changes\n\n| File | Change Summary |\n|------|----------------|\n| `Client/src/Utils/NetworkService.js` | - Added `handleError(error)` method for comprehensive error processing <br> - Added `health()` method to send GET requests to `/health` <br> - Refactored error handling in Axios response interceptor to use `handleError` <br> - Introduced toast notifications for various error statuses |\n\n## Sequence Diagram\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant NetworkService\n    participant API\n    participant Store\n    participant ToastNotification\n\n    Client->>NetworkService: Make API Request\n    NetworkService->>API: Send Request\n    alt API Response\n        API-->>NetworkService: Successful Response\n        alt Previous Error Existed\n            NetworkService->>ToastNotification: Show Success Toast\n            NetworkService->>Store: Reset Error State\n        end\n    else API Error\n        API-->>NetworkService: Error Response\n        NetworkService->>NetworkService: handleError()\n        alt Authentication Error\n            NetworkService->>Store: Clear Auth State\n            NetworkService->>Client: Redirect to Login\n        else Server Error\n            NetworkService->>ToastNotification: Show Error Toast\n        end\n    end\n```\n\n<!-- walkthrough_end -->\n<!-- internal state start -->\n\n\n<!-- FAHghAtBAEAqAWBLAztF0CGA7TBXALgPYQDmAplmQE4b5kAm0AxoQLasX4Bc0ADldEIAjAFZkm+RADcyqIQE9mhetQxChifADoMiaFAB8wY+CjGAxOegAFAErQAyrnYYq84wjJ9cAGx/QqMgBHXFl8aEl8HwZoACIASSwAM0IqVmgAQXpWRBxcpgxkL0Ik6CKqGQEUZFDY6AB3QrLcIRz8OkYFCPgvXHLoEULKMnxkXJJ4ADYARmmAFkwsRnREFSxJJMQYprtoLGchamhpgFYAJgXCHABxTQAJFq04Hr4qRFZXRWExCWli0vwSFQu3QRDQrF40Q46wihEK4SwhA2iAKkiuqEBtAaiD8mGiVHCgK8GGyuTQOCJ0DIMhhJUwZWolTQyBqZCeWXomkQVwwfnkABpul5EcjUdysKh6jj/LkUmkhZhSTh6j0KS9ykz0ElcFhfldxq9CLxqD5FBgSLosFoPECbPYSfRAizZMzWXsDkd5gAOM6LZa6ny4FSoIqVXnMHpMADWGMIVIluEC0BCvM0ZqWSglKDousUhzlXkCITCBowAWpW3qT08eEBqWg8CaLGSiDSMUxhJeGF4kJRtHFDaahwo0BUkMI8hiPkIBT5guwjDLRR8SQggSklb9ERLWBIggBLxYKkHMmgw5wxqoco49GrL2qoUHcjII5YVECElN0B8ajI0UXGaFGMJCUIwYKUhgBDwKk84Zoig5UPQR4xFIvKhKgjanue0B9O2cYfLk+CWmUs5qDiaZbs2YzIDmTBmkwVCECyCrdr2YpXHexJQfWjaoLyyBxhQNSBGBjbhCkMJjAAXi6C5KNOAhMNBKKyUmgRJNQFBMDESSMeklJEhwsGiV4IKoCkTC4YwVz0sgxpMIgmxMNAGm0ImbLGAAYomRJpKkZCChB3ECLx5JMIGKiMMgDEvhK0GjLCo5kKw6L4DQdCLIoACq8QRtg5CoE6viSLuLl6d06C4Lw9C0GyzxeNFgRCfFfFJrQRFKXhCq7HK5YbmQVb1d4uJFuh4QFDghyYEw2nOounZeCkfiEFKpVZbYAAyPAANq7KcFwALoABTwO0vDIFwAD0l0kJo8CPCwrCXUIgYDRgMgQD+QjIJdnXRh8dCXbwvg+Jd+1zAAlNawCWNAADCbDQglTguG4NpeI9SOoDZe3nAs+QRcSo4oJZLIDvw7yuDieYjPUsUKrhAiDMgwyjOMUyzAsckkKkUbJRAQj1P4gQWohBqUu8kLJZw/Y2XSRDwnsSKOX2aISk81y8/zgsylgIStjEKojD0AgGXCNHQBwLLmi6Vnkt19pJpSyAYBwmAYtBRQuYQOr+gqj28FcnDmYQPgqFQTyJOWdnogFAxDC+bO7hz8zMD+bybO2YkNEg0T+1cmwkImss4L1ZuKyKKvsRKzKYKhOJqHnZJLo2Ik4ZIPgUZs0SBeq9lV7CitWy7BU4UUfuAuguyuMKSIKi7HBPHcK3UtQgrM6zYzJzMqdkAAHvwsjj9ifjjJQzFglVNUZZSyGJQQ5EyQq+/ZuL5vjWwgeUOsqCOUlYwiWhprKgfNWACyFpgEgTVGBSkBBVEMuASAFTVoKZKvBeKICkuLbOf9nau0WjqPUWBUz4EUC/Giv81QY0/kHH+gpNANB9mHM8XgUpJjIEkJyWwYSXy9gw9KJtujYGYIEfspUyyUHqOCKWSMS5PGMByLkPI5yYBENBU+i5oyIiFgwcgJlmitGqAOOSuROSoizliIkih6hMMYOuTcDCBIcUyEkOgAgyxCDeBw78hBCBRnnGo0OncoqIOQRYhag8LaVyciXEM0FfCMBFCw787xNBdRJDkGuVxTSCn4EaJi2CsS8n8IzOJtjkmylSDeHOI5naMiOJVLATov5jBkHeLUL56BCAwNGckZjap8TKEgVx9sJbrAoJFPAnItKLXrJSaJqtxTIHnKk0qvVPFwnDpgRogRz58RSqVUp5ZRaclKhqI4NE3LIGhgAeTDH4Xu1D2DB3LEkaIEh6QsD8GoVI/ZTwcLlISOM6lcheAlhCKEMs1b7gVArKJysYlq2WfGYShSIkCUDNC9AQgkTwCpJw8QkhTxySotmTg2I4HkJKnuAOtDRjQ0MCYSAMAJkwsgkQUgFBVAdCUM89YPB+CCFEISv4chFDIRoOoTQOg9CMtMDABAKw+I4HZcQcglB0oxExpwHgNApE1FRnmcVyhVBSu0LofQEAjBMrMMAOGndOCXWQFQJgl0sodx+gAOVprzBwjIVJaBEBdYAsRQ0wysBkeInKNW1RCYamFSl8qyHRsTTh5I0rKFwLNS2ygq6xMSpSAABt6/ANiQF+oqCpQtacgL20Lfa7h+AnUurdR6y6Jay1RgrRubSgbkCFvZHsAa0jUjhEuXQJG3sBCFpirVWA79q26TYNAAdl04X4HdTiftT4WEjgdAwTiVJ3w8QXJ3Uq05brOVgUgKhmQ97ckKrIFpXhCLUG0rwIgIUhz03Uj0z9B6hqHw3D7ShZ6vDUEYl+pYZ69y9TmAABmmGUIi+A+hKGDDu7CgRIQ9MNndT5xTEoSOHYWxs0GyAAFFj1UGrRwOs9BBQqhRHi7S6waCdxkh7cD1HBzQYNBelE0MaykdPZR6jtHjbKENLNIoXGj2Qejs+rcaVEBIOoLGCuCLFnojPIUGINlnYobQ8hJ4nl6wIaQxB1IyKGGcjsrQTqfEiGxjTmQVwtZVSSGrluKqkg3YHM0PWcdsk4LvVUwMgtLwBMXhtqZoL9SBBWaoKgI647jMmtQCceD8Gtw/JkBDeh4Q7M4fkIM9dStRQlz6Yss5CXXToXZPQTkatikCjQKUeCzTY61w/GQP4jAl36XVAlwrQyVplffhVxy8hsG9H6D8ggCofy9LpF1iUHlgAZCHVIuj0EGMrp6LyQEhbBShWwvusCcZb4/hZIxpASkGRLEGdcCjsByzFgtuBF4hbLqHZ8Md+M9BA6EXaagXbUn6CEBdEkzCxIsCKF4K4fBbjlV2JGImGulI1te0GwqDI96mLQBe290aYRbn3J8I8r2ibdwugoGR7Sz8eNkfoDB5g3YyKd0kC6eW32O2+v9dpat4Va1dFY2lVMWDSpJcttgG2k6TEQkYhuQ5/QNIMG6b0wEjFEF4vKws6u1yLARv+9ypZkWvAqBF+lc3dJ96BwJPpgQwMXoonjJELYyBjAwAALKScXE1hgPARPkao5Bo6SWIbVrJCL5ixafXlsF2QaPOB60OvWM211m6fBeoT12pPfbC3AF9/7xUkVg9/cBEdKP9tY+oHj6WgXlahd1obY651We2388T83tkQai8wHiBCUdZeg8rtnXQed8JF3lVXeu7P26yRp8bZn1tW7215+7QG/vIaw3F6tTallGY6SqujdyrViMdUBAwPq5wHw3BnmNeHNQGhzWyoP/K3lbQAD6qxkDf/sQGgYG/0uQJEtWtU/zmAAGYABOL0RDeDDAGApIGAyYAAdjOBmngzQP2hgLIDQMQxJAwAIIwDOHgySHoGwOIPANAGZWOCQiYGmHIIwHwJgLQJODYKEG0iYHgyEHgMQLOBgLOGIIwHg3oCSC9G6SEEoJoM/zQLmCSDOCgMYLQKEKgKSDQNUPoEELIJYIwCgJmAwEmDwNINOGmEoJmEmBoNoKgC/00F/3oH/0ALpnoG/1ZUMCAA= -->\n\n<!-- internal state end -->\n<!-- finishing_touch_checkbox_start -->\n\n## Finishing Touches\n\n- [ ] <!-- {\"checkboxId\": \"7962f53c-55bc-4827-bfbf-6a18da830691\"} --> \ud83d\udcdd Generate Docstrings (Beta)\n\n<!-- finishing_touch_checkbox_end -->\n<!-- tips_start -->\n\n---\n\nThank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?\n\n<details>\n<summary>\u2764\ufe0f Share</summary>\n\n- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)\n- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)\n- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)\n- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)\n\n</details>\n\n<details>\n<summary>\ud83e\udea7 Tips</summary>\n\n### Chat\n\nThere are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):\n\n> \u203c\ufe0f **IMPORTANT**\n> Auto-reply has been disabled for this repository in the CodeRabbit settings. The CodeRabbit bot will not respond to your replies unless it is explicitly tagged.\n- Files and specific lines of code (under the \"Files changed\" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:\n  - `@coderabbitai generate unit testing code for this file.`\n  -\t`@coderabbitai modularize this function.`\n- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:\n  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`\n  - `@coderabbitai read src/utils.ts and generate unit testing code.`\n  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`\n  - `@coderabbitai help me debug CodeRabbit configuration file.`\n\nNote: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.\n\n### CodeRabbit Commands (Invoked using PR comments)\n\n- `@coderabbitai pause` to pause the reviews on a PR.\n- `@coderabbitai resume` to resume the paused reviews.\n- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.\n- `@coderabbitai full review` to do a full review from scratch and review all the files again.\n- `@coderabbitai summary` to regenerate the summary of the PR.\n- `@coderabbitai generate docstrings` to [generate docstrings](https://docs.coderabbit.ai/finishing-touches/docstrings) for this PR. ([Beta](https://docs.coderabbit.ai/early-access#beta))\n- `@coderabbitai resolve` resolve all the CodeRabbit review comments.\n- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.\n- `@coderabbitai help` to get help.\n\n### Other keywords and placeholders\n\n- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.\n- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.\n- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.\n\n### Documentation and Community\n\n- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.\n- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.\n- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.\n\n</details>\n\n<!-- tips_end -->"
    },
    {
        "author": {
            "login": "gorkem-bwl"
        },
        "body": "Out of curiosity are those the toast messages same as the ones in components folder? "
    },
    {
        "author": {
            "login": "jasneetsingh6114"
        },
        "body": "I see the configuration of toast in file(https://github.com/bluewave-labs/checkmate/blob/develop/Client/src/Utils/toastUtils.jsx) which is commonly used under components. Presently, I haven't used exactly those same toast but if you want me I can update the code with using those particular toast."
    },
    {
        "author": {
            "login": "gorkem-bwl"
        },
        "body": "> I see the configuration of toast in file(https://github.com/bluewave-labs/checkmate/blob/develop/Client/src/Utils/toastUtils.jsx) which is commonly used under components. Presently, I haven't used exactly those same toast but if you want me I can update the code with using those particular toast.\r\n\r\nYes. If there is a same functionality under components, there is no need to reinvent the wheel. "
    },
    {
        "author": {
            "login": "ajhollid"
        },
        "body": "Thanks for the submission @jasneetsingh6114, I'll have a look at it as soon as I can!"
    },
    {
        "author": {
            "login": "ajhollid"
        },
        "body": "@jasneetsingh6114 I had a brief look and I think you can safely remove all the admin checks and just display the toast for all users.\r\n\r\nAll users should be aware the server isn't responding"
    }
]