**Instructions for Making Changes Based on the GitHub PR Discussion:**

1. **Implement Reusable Table:**
   - Replace all individual table implementations across the application with the new `DataTable` component, ensuring consistent styling and functionality.
   - Use the most recent Infrastructure table as a basis to build this component.
   - Ensure `DataTable` receives `headers` and `data` props only.

2. **Headers Configuration:**
   - Configure the `headers` array to define table columns with `id`, `content`, and `render` functions for dynamic data rendering.
   - Extract any repetitive arrow icon logic into a helper component.

3. **Data Structure:**
   - Ensure data rows are passed as an array of objects, each containing necessary information such as `id`, `host`, `status`, etc.

4. **Pagination and Clickable Rows:**
   - Integrate the pagination component into `DataTable` directory.
   - Ensure the table is capable of handling row clicks by using the `onRowClick` property within the `config` prop.

5. **Styling & Theming:**
   - Implement theme-aware styling for the `Skeleton` component to maintain visual consistency across light and dark themes.
   - Use the `rowSX` property in the `config` prop for row styling.
   
6. **Configuration Options:**
   - Make `onRowClick` an optional property in `PropTypes` or provide a default no-operation function to handle cases when it's not supplied.

7. **Integration and Refactor:**
   - Remove the `BasicTable` component and related styles as they are replaced by `DataTable`.
   - Ensure all references to the deleted component are updated.

**Note:** The changes aim to enhance table component reusability and maintain consistency throughout the application while integrating robust styling and interaction features. Address any review nitpicks related to theming, interaction handling, and code clarity as mentioned.