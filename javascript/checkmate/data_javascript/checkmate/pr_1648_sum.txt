Refactor the Uptime Details components to improve maintainability and consistency:

1. **Modularize UI Components:**
   - Break down the UI into smaller components like `MonitorHeader`, `StatusBoxes`, `ChartBoxes`, `ResponseTable`, and `TimeFramePicker`.
   - Use the reusable `Table` component instead of unique table implementations.

2. **Implement Error Handling:**
   - Use optional chaining and safety checks, especially in accessing properties like `firstDataPoint._id`.
   - Introduce error boundaries around chart components to handle potential rendering issues.

3. **Consistent Loading States:**
   - Implement consistent loading states and skeleton components for visual feedback on data fetching.

4. **Optimize Performance and Code Structure:**
   - Use hooks like `useMemo` and `useCallback` to avoid unnecessary renders and computations.
   - Refactor state and prop management by providing defaults and specific validations (e.g., `PropTypes` usage).

5. **Route and Navigation Enhancements:**
   - Update routes to ensure consistent parameter handling across components and hooks, such as `monitorId`.
   - Set up path aliases to simplify import paths.

6. **Enhancements and Verification:**
   - Address discrepancies in props' types, e.g., adjust `percentage` prop from `string` to `number`.
   - Ensure parameter changes are debounced using appropriate hooks.
   - Avoid redundant recreations of arrays or functions within component renders.

7. **Documentation and Consistency:**
   - Consider generating docstrings for better code documentation.
   - Use a consistent naming convention across refactored components and functions.