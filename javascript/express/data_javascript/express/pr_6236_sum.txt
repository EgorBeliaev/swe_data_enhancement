**Instruction for Refactoring Node Module Imports:**

1. **Purpose**: Refactor the import statements in the codebase to prefix built-in Node.js modules with the `node:` directive.

2. **Rationale**:
   - Allows clear differentiation between built-in modules and external dependencies.
   - Reduces the risk of inadvertently importing unwanted dependencies when a built-in is intended.
   - Offers improved interoperability with other JavaScript runtimes that mimic Node compatibility, beneficial mainly during development.
   
3. **Implementation Details**:
   - Update import statements to use the `node:` prefix for built-in Node.js modules.
   - This change is possible due to the reliance on Node version >= 18.
   - The prefix is a syntactical improvement and not mandatory for CJS or ESM, with some exceptions.

4. **Considerations**: 
   - While Node prioritizes built-in modules, prefixing them as a best practice can enhance code clarity.
   - This change does not promise performance improvements but provides codebase organization benefits.

This refactor is an optional enhancement aligning with the latest best practices for code clarity and maintainability.