### Instruction for Changes in the Repository:

1. **Deprecate Non-Integer Status Codes**: 
   - Implement functionality to deprecate non-integer status codes in version 4.
   - Use `res.status` for setting status codes throughout, but be cautious of compatibility issues, as this might have already been identified as a breaking change due to unexpected override behaviors.

2. **Deprecation Messages**:
   - Add deprecation messages specifically for:
     - String values like `'200'` and `'304.5'`, which are interpreted as valid by Node.js. These should be disallowed in v5.
     - Non-integer numeric values like `200.5`, which are currently accepted but will be rejected in v5.

3. **Deprecation Check Implementation**:
   - Consider creating a `checkForDeprecatedStatus` function to consistently handle status code checks across the codebase.
   - Ensure this check is integrated wherever a status code is set in the response object to provide proper warning.

4. **Testing Adjustments**:
   - Add tests to cover all new changes and ensure coverage, especially considering potential discrepancies between different Node.js environments.
   - For any failing tests specific to io.js, implement conditional skips due to discrepancies with Node.js behavior.

These changes aim to prepare users for breaking changes in Express v5 while maintaining v4 functionality without immediate disruptions.