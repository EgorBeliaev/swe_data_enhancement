[
    {
        "title": "Throw on invalid status codes"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Closes #3143\r\n\r\n\r\n### Will throw a `RangeError` if status code:\r\n\r\n* is less than 100\r\n* is greater than 999\r\n\r\nThis aligns with Node.js' behavior of throwing if given something outside that range\r\n\r\n### Will throw a `TypeError` if status code is:\r\n\r\n* Not an integer (string representation of integer included)\r\n\r\nThis is a choice we are making to limit the acceptable input.\r\n\r\n### Use `res.status` internally when setting status codes\r\n\r\nthe PR also ensures we use `res.status` internally when setting status codes, to allow us to use the validation logic internally.\r\n\r\n\r\n### Test changes\r\n\r\nI cleaned up the tests to test acceptable range, and invalid codes, and removed the `iojs` logic as its not supported in v5.\r\n\r\n### TODO:\r\n- [x] Update the PR description to be specific to the actual changes in this PR, possibly reopen the PR since direction has changed\r\n  - Notably, this PR currently throws on strings, redefines the valid range of codes to between 1xx and 9xx, throws on non-integer floats (e.g. `500.5`, but allows `500.00` bc it is the same to JS), throws a RangeError if we get a status code outside 1xx to 9xx range\r\n- [x] Ensure the tests are accurate to these changes, and clean up the tests in here \r\n- [ ] Update the v5 docs to reflect said changes (separate PR to expressjs.com)\r\n\nrelated: https://github.com/expressjs/discussions/issues/233"
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "gireeshpunathil"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "LinusU"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "blakeembrey"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "blakeembrey"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "wesleytodd"
        },
        "body": "Some of the comments are unaddressed, so didn't want to approve, but I think once those are addressed this looks good."
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ctcpip"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "wesleytodd"
        },
        "body": ""
    },
    {
        "author": {
            "login": "blakeembrey"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "I realized after opening this that Node.js does not throw on inputs like `500.5`, this PR however does. From the other PR, I think we decided to throw on these cases, but I wanted to make clear that from my limited testing Node.js is not throwing on floats."
    },
    {
        "author": {
            "login": "gireeshpunathil"
        },
        "body": "> I wanted to make clear that from my limited testing Node.js is not throwing on floats.\r\n\r\n@jonchurch - my assertion is that `500.5` is definitely invalid, so throwing is the right thing to do."
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "Yea, I don't have any issues with this throwing on a float; we want to throw on whatever Node.js throws on as the _minimum bar_. If we can also help the users by also throwing on _definitely nonsensical inputs_ (like status codes with fractions) that makes sense of course :) !"
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "Fixed the tests. Now the CI fails on Node.js 0.10 because there is no `Number.isInteger` function available there. \r\n\r\nAssuming we're dropping that version, then this should be good to go pending any requested changes. "
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "> Fixed the tests. Now the CI fails on Node.js 0.10 because there is no Number.isInteger function available there.\r\n> \r\n> Assuming we're dropping that version, then this should be good to go pending any requested changes.\r\n\r\nA few of us thumbs upped that, but also wanted to call out that yes it is being dropped, so let 0.10 fail on this PR; 0.10 will be removed from the branch's CI prior to this change, so that version failing will turn to passing as things are merged."
    },
    {
        "author": {
            "login": "gireeshpunathil"
        },
        "body": "as per the TC discussion, this is ready to merge, who is going to do that? @dougwilson , I see your red-X on this - is that still valid, or you are going to remove it and land?"
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "Thinking more about this and something bothers me. I took the approach the previous PR did, since it had been reviewed, but now I'm questioning the use of `res.status` internally to set statuses. \r\n\r\nIf someone monkey-patches `res.status` it will alter the internal behavior of setting status codes on responses. That's not different though for other functions used in response, like `res.type` for example.\r\n\r\nMy question has two parts:\r\n\r\n* Is it a breaking change to be relying on `res.status()` to set status codes internally?\r\n* Do we want to distinguish between private vs public methods? (there are only two things marked private in `response` according to jsdoc comments)\r\n\r\nSee an example of the change in the diff: https://github.com/expressjs/express/pull/4212/files#diff-d86a59ede7d999db4b7bc43cb25a1c11L137-R142\r\n"
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "> Is it a breaking change to be relying on res.status() to set status codes internally?\r\n\r\nYes, as stated in https://github.com/expressjs/express/pull/4223#issuecomment-602102852 , but this PR is already a breaking change, right? So I'm not sure if it's super relevant. The change itself makes sense to make, just like we call `res.type` internally and not directly get the `content-type` response header. Even getting headers we internally use `req.get` and not `req.headers`.\r\n\r\n> Do we want to distinguish between private vs public methods? (there are only two things marked private in response according to jsdoc comments)\r\n\r\nI'm not really following on what this part of the question really is. The main reason the internals use Express' own API is especially useful for AOP type of design patterns, if the user so chooses to do them. The Node.js HTTP APIs do the same patterns as well, AFAIK."
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "I wasn't clear. Re: breaking, I meant that someone's v4 `res.status` monkey patch might affect code in unexpected ways under v5, because it is used in more places than before.\r\n\r\nYou've answered my second question I believe. We aren't interested in making some methods private and off limits to users.\r\n\r\nThanks, I wanted to bring up this point (re: effects of monkey-patching res.status with these changes) just so someone else could check it.\r\n\r\nRealizing that we use a lot of these helper methods internally would indicate that this change is not out of step with what is standard."
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "Just read that linked comment and saw you did directly address the concern already \ud83d\udc4d "
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "Yep! I did, though, not directly address the monkey patching messing something up; that is indeed the case, but I don't think any more so than other aspects of Node.js and Javascript. I think that it is going to be possible for users to override something and cause a breakage, but I'm not sure that the effort in order to prevent such a thing is really worth it. From support experience, I think it is extremely rare for such an issue to really show up, haha."
    },
    {
        "author": {
            "login": "abenhamdine"
        },
        "body": "I think this PR should target branch https://github.com/expressjs/express/tree/5.0 and not master.\r\nAnd if it's ok, it should be merged aswell in v5 branch."
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "Reparented this branch onto 5.x, I had branched off of master before. And updated the target branch to `5.x`.\r\n\r\n## I need to checkin w/ @expressjs/express-tc about new changes here\r\n- Are we cool with locking down valid status codes to between 1xx and 5xx ranges? That is a new direction I went here, and more strict that Node.js itself enforces. Im in favor of sane defaults, I don't want people building servers that go beyond acceptable HTTP codes. Cut an issue to track that specifically #5623\r\n- Throwing on codes w/ floats like `500.5`. Node will truncate them and send them out as `500`, the PR still accepts floats which are integers like `500.00` however, and then node would truncate to `500`\r\n\r\nThere is work outstanding here, but largely trivial:\r\n\r\n- [x] Update the PR description to be specific to the actual changes in this PR, possibly reopen the PR since direction has changed\r\n  - Notably, this PR currently throws on strings, redefines the valid range of codes to between 1xx and 5xx, throws on non-integer floats (e.g. `500.5`, but allows `500.00` bc it is the same to JS), throws a RangeError if we get a status code outside 1xx to 5xx range\r\n- [ ] Ensure the tests are accurate to these changes, and clean up the tests in here \r\n- [ ] Update the v5 docs to reflect said changes\r\n\r\nmarking as draft until the above are complete"
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "pr desc updated, check that for TODOs outstanding"
    },
    {
        "author": {
            "login": "wesleytodd"
        },
        "body": "I am landing this despite the pending 22 test and the coverage report. I think we agree it is good and if we have to fix CI we can do it along with dropping node 18. I am getting to the point where I think we should merge all these pending ones and live with 5.0 being broken until we land the node@18 change anyway."
    }
]