[
    {
        "title": "res.format(): call default using `obj` as the context"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "... so that it may refer to the other handlers via `this`. This is useful for cases where you want to delegate the `default` behavior to one of the other registered handlers, e.g.:\r\n\r\n```js\r\napp.get('/:item', (req, res) => res.format({\r\n  json() { res.send(req.item) }\r\n, text() { res.send(req.item.toString()) }\r\n, xml()  { res.send(req.item.toXML()) }\r\n, default() { this.json() }\r\n}))\r\n```\r\n\r\nWithout this, I have to pre-declare the default `json` handler separately, making it inconsistent with how the non-default handlers are declared and making the overall code more complex:\r\n\r\n```js\r\napp.get('/:item', (req, res) => {\r\n  function sendJSON() { res.send(req.item) }\r\n  res.format({\r\n    json: sendJSON\r\n  , text() { res.send(req.item.toString()) }\r\n  , xml()  { res.send(req.item.toXML()) }\r\n  , default: sendJSON\r\n  })\r\n})\r\n```\r\n\r\nThe regular (non-`default`) handlers are already called with the `obj` as their context, so this would match their behavior too."
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shesek"
        },
        "body": "And a question: is there a reason `(req, res, next)` aren't sent to the default handler?"
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "This is very interesting, thank you! The `res.format` piece is pretty old and hasn't been visited in a while, and I don't even know the answer to your question since that decision was made before I was involved in the project.\r\n\r\nAs for the PR, most users are using the `=>` syntax these days and so the `this` is no longer a useful way to make functionality available to the called function. What do you think about instead passing it as an argument? Also, argument or `this`, shouldn't all the invocations (even the non-default ones) act the same? If one would want to call `this.json()` in the `default` handler, it doesn't seem too far-fetched to think one would want to called `this.text()` in the html handler in order to wrap the output in HTML."
    },
    {
        "author": {
            "login": "shesek"
        },
        "body": "> As for the PR, most users are using the `=>` syntax these days and so the this is no longer a useful way to make functionality available to the called function.\r\n\r\nYou're correct, but the object method syntax (used in the OP) is also quite convenient here (and is even shorter by one character).\r\n\r\n> What do you think about instead passing it as an argument?\r\n\r\nSince the non-default handlers are already receiving 3 arguments, this would have to be the 4th, right?\r\n\r\nHow about we `fn.call(formatObj, req, res, next, formatObj)`, so that it'll be available both via `this` and as an argument?\r\n\r\n> Also, argument or `this`, shouldn't all the invocations (even the non-default ones) act the same? If one would want to call `this.json()` in the `default` handler, it doesn't seem too far-fetched to think one would want to called `this.text()` in the html handler\r\n\r\nWith this PR, the default and non-default handlers are both called with the `this` context set to the format object. The only difference in their invocations is the lack of `(req, res, next)` which I was pointing out."
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "I know this is old and was forgotten about, but still seems relevant. I updated your PR to add a test case. I think the point about `default` having a different context from the others is the most compelling. I don't think the context was ever really considered originally, but having it consistent is quite useful at least."
    }
]