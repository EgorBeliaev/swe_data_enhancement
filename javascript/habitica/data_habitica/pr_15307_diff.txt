diff --git a/test/content/events.test.js b/test/content/events.test.js
index 03ffd08ed92..bf24b37bfd8 100644
--- a/test/content/events.test.js
+++ b/test/content/events.test.js
@@ -10,7 +10,7 @@ describe('events', () => {
   });
 
   it('returns empty array when no events are active', () => {
-    clock = sinon.useFakeTimers(new Date('2024-01-06'));
+    clock = sinon.useFakeTimers(new Date('2024-01-08'));
     const events = getRepeatingEvents();
     expect(events).to.be.empty;
   });
@@ -27,14 +27,14 @@ describe('events', () => {
   it('returns nye event at beginning of the year', () => {
     clock = sinon.useFakeTimers(new Date('2025-01-01'));
     const events = getRepeatingEvents();
-    expect(events).to.have.length(1);
+    expect(events).to.have.length(2);
     expect(events[0].key).to.equal('nye');
   });
 
   it('returns nye event at end of the year', () => {
     clock = sinon.useFakeTimers(new Date('2024-12-30'));
     const events = getRepeatingEvents();
-    expect(events).to.have.length(1);
+    expect(events).to.have.length(2);
     expect(events[0].key).to.equal('nye');
   });
 });
diff --git a/test/content/food.test.js b/test/content/food.test.js
index 5cdb2b80bce..4b64df7edf6 100644
--- a/test/content/food.test.js
+++ b/test/content/food.test.js
@@ -72,7 +72,7 @@ describe('food', () => {
     });
 
     it('sets canDrop for pie if it is pie season', () => {
-      clock = sinon.useFakeTimers(new Date(2024, 2, 14));
+      clock = sinon.useFakeTimers(new Date(2024, 2, 15));
       const datedContent = require('../../website/common/script/content').default;
       each(datedContent.food, foodItem => {
         if (foodItem.key.indexOf('Pie_') !== -1) {
diff --git a/test/content/index.test.js b/test/content/index.test.js
index 265824b97cd..c7cb9c7bef8 100644
--- a/test/content/index.test.js
+++ b/test/content/index.test.js
@@ -131,7 +131,7 @@ describe('content index', () => {
   });
 
   it('marks pie as buyable and droppable during pi day', () => {
-    clock = sinon.useFakeTimers(new Date('2024-03-14'));
+    clock = sinon.useFakeTimers(new Date('2024-03-15'));
     const { food } = content;
     Object.keys(food).forEach(key => {
       if (key === 'Saddle') {
diff --git a/website/common/script/content/constants/events.js b/website/common/script/content/constants/events.js
index 507cb7c3a56..88c742ddc5d 100644
--- a/website/common/script/content/constants/events.js
+++ b/website/common/script/content/constants/events.js
@@ -11,8 +11,8 @@ const gemsPromo = {
 
 export const REPEATING_EVENTS = {
   nye: {
-    start: new Date('1970-12-28T08:00-05:00'),
-    end: new Date('1970-01-04T23:59-05:00'),
+    start: new Date('1970-12-28T04:00-05:00'),
+    end: new Date('1970-01-04T03:59-05:00'),
     season: 'nye',
     npcImageSuffix: '_nye',
     content: [
@@ -25,15 +25,15 @@ export const REPEATING_EVENTS = {
     ],
   },
   birthday: {
-    start: new Date('1970-01-30T08:00-05:00'),
-    end: new Date('1970-02-08T23:59-05:00'),
+    start: new Date('1970-01-30T04:00-05:00'),
+    end: new Date('1970-02-01T03:59-05:00'),
     season: 'birthday',
     npcImageSuffix: '_birthday',
     foodSeason: 'Cake',
   },
   valentines: {
-    start: new Date('1970-02-13T08:00-05:00'),
-    end: new Date('1970-02-17T23:59-05:00'),
+    start: new Date('1970-02-10T04:00-05:00'),
+    end: new Date('1970-02-17T03:59-05:00'),
     season: 'valentines',
     npcImageSuffix: '_valentines',
     content: [
@@ -46,13 +46,13 @@ export const REPEATING_EVENTS = {
     ],
   },
   piDay: {
-    start: new Date('1970-03-13T08:00-05:00'),
-    end: new Date('1970-03-15T23:59-05:00'),
+    start: new Date('1970-03-14T04:00-04:00'),
+    end: new Date('1970-03-16T03:59-04:00'),
     foodSeason: 'Pie',
   },
   aprilFoolsResale: {
-    start: new Date('1970-04-07T08:00-05:00'),
-    end: new Date('1970-04-30T23:59-05:00'),
+    start: new Date('1970-04-07T04:00-04:00'),
+    end: new Date('1970-05-01T03:59-04:00'),
     content: [
       {
         type: 'hatchingPotionQuests',
@@ -72,24 +72,39 @@ export const REPEATING_EVENTS = {
     ],
   },
   namingDay: {
-    start: new Date('1970-07-30T08:00-05:00'),
-    end: new Date('1970-08-01T23:59-05:00'),
+    start: new Date('1970-07-31T04:00-04:00'),
+    end: new Date('1970-08-02T03:59-04:00'),
     foodSeason: 'Cake',
   },
+  fallGemFest: {
+    start: new Date('1970-09-23T04:00-04:00'),
+    end: new Date('1970-09-27T23:59-04:00'),
+    gemsPromo,
+  },
+  spookyGemFest: {
+    start: new Date('1970-10-28T04:00-04:00'),
+    end: new Date('1970-11-01T23:59-04:00'),
+    gemsPromo,
+  },
   habitoween: {
-    start: new Date('1970-10-30T08:00-05:00'),
-    end: new Date('1970-11-01T23:59-05:00'),
+    start: new Date('1970-10-30T04:00-04:00'),
+    end: new Date('1970-11-01T23:59-04:00'),
     foodSeason: 'Candy',
     season: 'habitoween',
     npcImageSuffix: '_halloween',
   },
   harvestFeast: {
-    start: new Date('1970-11-22T08:00-05:00'),
-    end: new Date('1970-11-27T20:00-05:00'),
+    start: new Date('1970-11-20T04:00-05:00'),
+    end: new Date('1970-12-01T03:59-05:00'),
     season: 'thanksgiving',
     npcImageSuffix: '_thanksgiving',
     foodSeason: 'Pie',
   },
+  giftOneGetOne: {
+    start: new Date('1970-12-19T04:00-05:00'),
+    end: new Date('1970-01-06T23:59-05:00'),
+    promo: 'g1g1',
+  },
 };
 
 export function getRepeatingEvents (date) {
