[
    {
        "title": "feat: ability to decorate esm module name before importing it"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "### Description of the Change\r\nThis PR adds ability to decorate ESM-module name right before it will be imported by passing `esmDecorator` function to `loadFilesAsync` method.\r\n\r\n### Why should this be in core?\r\n\r\nIt helps to deal with ESM cashing issues just by adding some query parameters to modue name:\r\n```js\r\nmocha.loadFilesAsync({\r\n    esmDecorator: file => `${file}?foo=bar`\r\n})\r\n```\r\nAnd it backwards compatible.\r\nNote though that the sub-dependencies of the test files will not be reloaded.\r\n\r\n### Applicable issues\r\n- https://github.com/mochajs/mocha/issues/4655\r\n\r\nIt is an enhancement (minor release).\r\n"
    },
    {
        "author": {
            "login": "giltayar"
        },
        "body": "Besides the comment I added, I am not sure why we need this. What is the use case behind it? Who will use this additional parameter and for what use case.\r\n\r\nUntil we understand this, I'm not sure we should merge this PR."
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": ""
    },
    {
        "author": {
            "login": "giltayar"
        },
        "body": ""
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": ""
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": ""
    },
    {
        "author": {
            "login": "juergba"
        },
        "body": "@j0tunn thank you"
    },
    {
        "author": {
            "login": "linux-foundation-easycla"
        },
        "body": "<a href=\"https://easycla.lfx.linuxfoundation.org/#/?version=2\"><img src=\"https://s3.amazonaws.com/cla-project-logo-prod/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ></a><br/><br />The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: j0tunn / name: Anton Usmansky  (93082f281085b099e8b5950350550b14dca4c0d9)</li></ul>"
    },
    {
        "author": {
            "login": "juergba"
        },
        "body": "@giltayar could you have a look a this PR, please?"
    },
    {
        "author": {
            "login": "coveralls"
        },
        "body": "\n[![Coverage Status](https://coveralls.io/builds/54153946/badge)](https://coveralls.io/builds/54153946)\n\nCoverage increased (+0.002%) to 94.328% when pulling **93082f281085b099e8b5950350550b14dca4c0d9 on j0tunn:master** into **8f3c37b6b77b6754cd9445204c536c1a0671450a on mochajs:master**.\n"
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": "> Who will use this additional parameter and for what use case.\r\n\r\nAny who has problems with esm modules caching while using mocha by API:\r\n- https://github.com/mochajs/mocha/issues/4924\r\n- https://github.com/mochajs/mocha/issues/4655\r\n\r\n[node.js doc](https://nodejs.org/api/esm.html#file-urls) suggests only one whay to deal with it - different queries.\r\n\r\nThere are not too many such cases for now because most of the existing community uses CJS modules for tests for now. But there will be more.\r\nYou have a bunch of code for dealing with CJS modules cache, but nothing for ESM-modules. And while this cache problem is not solved you can't say you have full support of ESM modules. "
    },
    {
        "author": {
            "login": "giltayar"
        },
        "body": "@j0tunn Ah. I didn't know that `Mocha.prototype.loadFileAsync` was used as an API. In that case it makes total sense given that decorating the urls is the only way to load a different instance of the test files.\r\n\r\nNote though that the sub-dependencies of the test files will _not_ be loaded. You will probably need an ESM loader for that.\r\n\r\nSo if you change the small change that I requested, *and add appropriate tests*, this PR will be approved by me. But don't forget those tests..."
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": "@giltayar done"
    },
    {
        "author": {
            "login": "giltayar"
        },
        "body": "@juergba from my point of view, we're good to go on this PR, which makes a lot of sense for developers using the API in an ESM setting."
    },
    {
        "author": {
            "login": "juergba"
        },
        "body": "@giltayar thank you for your review. \ud83d\udc4d \r\n\r\nI will have a look at this PR on coming weekend, @j0tunn please have some patience."
    },
    {
        "author": {
            "login": "juergba"
        },
        "body": "@j0tunn Mocha has its own `--require` option which is able to load ESM modules as well. How does it behave with this PR?\r\n\r\nCould you provide a short sample for me to do some testing, please?\r\n\r\n@fvictorio would you mind reviewing this PR? Does it fix your issue?\r\n"
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": "@juergba \r\n> @j0tunn Mocha has its own --require option which is able to load ESM modules as well. How does it behave with this PR?\r\n\r\nAs far as I understand `--require` option is about cli. This PR is about API. These are for different use cases. They are not conflicting if that is your question.\r\n\r\n> Could you provide a short sample for me to do some testing, please?\r\n\r\nThere is a short sample in PR description. In case of using `mocha` by API someone can use this feature like this in its own code to avoid esm-modules cache problem:\r\n```js\r\nmocha.loadFilesAsync({\r\n    esmDecorator: file => `${file}?foo=${new Date()}`\r\n});\r\n```"
    },
    {
        "author": {
            "login": "fvictorio"
        },
        "body": "Thanks a lot for working on this @j0tunn!\r\n\r\nI can confirm this seems to fix my issue if I do something like this:\r\n\r\n```typescript\r\n        await (mocha as any).loadFilesAsync({\r\n          esmDecorator: (file) => `${file}?invalidateCache=${Math.random()}`\r\n        });\r\n```\r\n\r\nNotice the `as any`: I think this will need a PR in `@types/mocha`. I can do that, but I'm not familiar with the process. Do you have to wait until this is released before updating the types?"
    },
    {
        "author": {
            "login": "juergba"
        },
        "body": "> [...] I think this will need a PR in `@types/mocha` [...]\r\n\r\nI don't know, `@types/mocha` isn't maintained by us. Normally we publish first, then the types get adapted.\r\n\r\n> I can confirm this seems to fix my issue if I do something like this\r\n\r\nI won't merge this PR without any testing, this could take some time though.\r\n\r\n> Note though that the sub-dependencies of the test files will not be loaded.\r\n\r\n@j0tunn could you add this statement to this PR's description, please?\r\n"
    },
    {
        "author": {
            "login": "j0tunn"
        },
        "body": "> @j0tunn could you add this statement to this PR's description, please?\r\n\r\nDone."
    }
]