**Instruction for Developer:**

1. **Add PatchTST Model Support**:
   - Implement support for `PatchTST` in the time-series forecasting module.

2. **ONNX Export**:
   - Implement ONNX export support as indicated: Refer to the ongoing work in the linked PR at Huggingface Optimum [PR #2101](https://github.com/huggingface/optimum/pull/2101).

3. **Example for Export**:
   - Ensure the ability to export the `PatchTST` model using the following command sequence:
     ```bash
     git clone https://github.com/huggingface/transformers.js.git
     cd transformers.js
     pip install -q -r scripts/requirements.txt
     pip install --upgrade git+https://github.com/huggingface/optimum@add-patchtst-onnx
     python -m scripts.convert --quantize --model_id ibm/test-patchtst
     ```

4. **Model Usage Example in JavaScript**:
   - Implement and verify the usage of `PatchTSTForPrediction` in JavaScript:
     ```javascript
     import { PatchTSTForPrediction, Tensor } from '@huggingface/transformers';

     const model_id = "onnx-community/test-patchtst";
     const model = await PatchTSTForPrediction.from_pretrained(model_id, { dtype: "fp32" });

     const dims = [64, 512, 7];
     const prod = dims.reduce((a, b) => a * b, 1);
     const past_values = new Tensor('float32',
         Float32Array.from({ length: prod }, (_, i) => i / prod),
         dims,
     );
     const { prediction_outputs } = await model({ past_values });
     console.log(prediction_outputs);
     ```

5. **Verification**:
   - Ensure that the outputs match PyTorch predictions within an absolute tolerance of 1e-5.

6. **Documentation**:
   - Update documentation as needed; note that updates will be visible temporarily at this [doc endpoint](https://moon-ci-docs.huggingface.co/docs/transformers.js/pr_1048) for review.

7. **Additional Model Example**:
   - Include support and example for `PatchTSMixerForPrediction`:
     ```javascript
     import { PatchTSMixerForPrediction, Tensor } from '@huggingface/transformers';

     const model_id = "onnx-community/granite-timeseries-patchtsmixer";
     const model = await PatchTSMixerForPrediction.from_pretrained(model_id, { dtype: "fp32" });

     const dims = [64, 512, 7];
     const prod = dims.reduce((a, b) => a * b, 1);
     const past_values = new Tensor('float32',
         Float32Array.from({ length: prod }, (_, i) => i / prod),
         dims,
     );
     const { prediction_outputs } = await model({ past_values });
     console.log(prediction_outputs);
     ```

8. **Issue Closure**:
   - Completing the above tasks should close [issue #1047](https://github.com/huggingface/transformers.js/issues/1047).