[
    {
        "title": "Add support for `PatchTST` (time-series-forecasting)"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "\r\nThis PR adds support for PatchTST models (time-series-forecasting).\r\n\r\nONNX export support is being added here: https://github.com/huggingface/optimum/pull/2101\r\n\r\nExport example:\r\n```sh\r\ngit clone https://github.com/huggingface/transformers.js.git\r\ncd transformers.js\r\npip install -q -r scripts/requirements.txt\r\npip install --upgrade git+https://github.com/huggingface/optimum@add-patchtst-onnx\r\n```\r\n\r\nfollowed by\r\n```sh\r\npython -m scripts.convert --quantize --model_id ibm/test-patchtst\r\n```\r\n\r\n---\r\n\r\nCloses https://github.com/huggingface/transformers.js/issues/1047\r\n\r\nExample usage:\r\n```js\r\nimport { PatchTSTForPrediction, Tensor } from '@huggingface/transformers';\r\n\r\nconst model_id = \"onnx-community/test-patchtst\";\r\nconst model = await PatchTSTForPrediction.from_pretrained(model_id, { dtype: \"fp32\" });\r\n\r\n// Example input\r\nconst dims = [64, 512, 7];\r\nconst prod = dims.reduce((a, b) => a * b, 1);\r\nconst past_values = new Tensor('float32',\r\n    Float32Array.from({ length: prod }, (_, i) => i / prod),\r\n    dims,\r\n);\r\nconst { prediction_outputs } = await model({ past_values });\r\nconsole.log(prediction_outputs);\r\n```\r\n\r\noutputs match pytorch within 1e-5 atol.\r\n"
    },
    {
        "author": {
            "login": "HuggingFaceDocBuilderDev"
        },
        "body": "The docs for this PR live [here](https://moon-ci-docs.huggingface.co/docs/transformers.js/pr_1048). All of your documentation changes will be reflected on that endpoint. The docs are available until 30 days after the last update."
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": "Example usage for `PatchTSMixerForPrediction`:\r\n```js\r\nimport { PatchTSMixerForPrediction, Tensor } from '@huggingface/transformers';\r\n\r\nconst model_id = \"onnx-community/granite-timeseries-patchtsmixer\";\r\nconst model = await PatchTSMixerForPrediction.from_pretrained(model_id, { dtype: \"fp32\" });\r\n\r\nconst dims = [64, 512, 7];\r\nconst prod = dims.reduce((a, b) => a * b, 1);\r\nconst past_values = new Tensor('float32',\r\n    Float32Array.from({ length: prod }, (_, i) => i / prod),\r\n    dims,\r\n);\r\nconst { prediction_outputs } = await model({ past_values });\r\nconsole.log(prediction_outputs);\r\n```"
    }
]