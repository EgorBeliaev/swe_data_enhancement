[
    {
        "title": "Add function to apply mask to RawImage."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "I'm working on an app to remove the background from an image.  \r\nThis PR adds the ability to very easily apply the result of the model as a mask to a RawImage.  \r\nThe image alpha channel will be replaced with the values of the mask.\r\n\r\nHere is an example of the sort of thing I am doing.\r\n```javascript\r\nconst image = await RawImage.fromURL('https://picsum.photos/600/400');\r\nconst padded = image.clone().pad([0, 0, 100, 100]);\r\nconst model = await AutoModel.from_pretrained(modelName);\r\nconst processed = await processor(padded);\r\nconst output = model({ 'input': processed.pixel_values });\r\n\r\n// Resize the mask to match the image since many models have pretrained sizes.\r\n// `output` is a square so resize and centre crop to remove padding.\r\nconst imageSize = Math.max(image.width, image.height);\r\nconst mask = await RawImage.fromTensor(output)\r\n.resize(imageSize, imageSize)\r\n.then(async image => image.center_crop(image.width, image.height));\r\n\r\n// Finally, apply the mask and save it.\r\nimage.applyMask(mask)\r\n.then(image => image.save('masked_image.png'));\r\n```"
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": ""
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": ""
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": ""
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": ""
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": ""
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": "Updated it to support 3-channel and 4-channel images. Will merge now, and will add unit tests in follow-up PR. (Couldn't do now since I can't merge main into the PR; permission error)"
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": "Useful PR! \ud83d\udd25 Could you reference the similar function / usage / inspiration? e.g., how PIL does mask application?"
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": "> Useful PR! \ud83d\udd25 Could you reference the similar function / usage / inspiration? e.g., how PIL does mask application?\r\n\r\n@xenova, I am not completely familiar with the Python Imaging Library, however it looks like a similar thing is achieved with the following snippet - assuming I understand the docs correctly \ud83d\ude05\r\n\r\n```python\r\nfrom PIL import Image\r\n\r\nbackground = Image.open('background.png')\r\nforeground = Image.open('foreground.png')\r\nmask = Image.open('mask.png').convert('L')\r\n\r\nresult = Image.composite(background, foreground, mask)\r\nresult.save('masked_image.png')\r\n```\r\n\r\nThe mask is `convert`ed to greyscale ([docs here](https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes)).\r\n\r\nThe foreground image would map to what `RawImage` would represent, and the background image is used to fill in the gaps that are created in accordance with mask ([docs here](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.composite)).  \r\nMy implementation instead uses a single image, and will instead use transparent pixels instead of filling them with another image.\r\n\r\nThis was a great resource for learning how that library and function works:  \r\nhttps://note.nkmk.me/en/python-pillow-composite/"
    },
    {
        "author": {
            "login": "xenova"
        },
        "body": "Thanks! I followed that resource you provided and found https://note.nkmk.me/en/python-pillow-putalpha/ - perhaps it's more applicable? If so, I say we rename `applyMask` to `putalpha` :) WDYT?"
    },
    {
        "author": {
            "login": "BritishWerewolf"
        },
        "body": "> Thanks! I followed that resource you provided and found https://note.nkmk.me/en/python-pillow-putalpha/ - perhaps it's more applicable? If so, I say we rename `applyMask` to `putalpha` :) WDYT?\r\n\r\nYes - that's a much more apt name!"
    }
]