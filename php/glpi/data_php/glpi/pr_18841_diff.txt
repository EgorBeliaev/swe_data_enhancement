diff --git a/phpunit/abstracts/AbstractActorFieldTest.php b/phpunit/abstracts/AbstractActorFieldTest.php
new file mode 100644
index 00000000000..08f37d7cbf3
--- /dev/null
+++ b/phpunit/abstracts/AbstractActorFieldTest.php
@@ -0,0 +1,335 @@
+<?php
+
+/**
+ * ---------------------------------------------------------------------
+ *
+ * GLPI - Gestionnaire Libre de Parc Informatique
+ *
+ * http://glpi-project.org
+ *
+ * @copyright 2015-2025 Teclib' and contributors.
+ * @licence   https://www.gnu.org/licenses/gpl-3.0.html
+ *
+ * ---------------------------------------------------------------------
+ *
+ * LICENSE
+ *
+ * This file is part of GLPI.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ * ---------------------------------------------------------------------
+ */
+
+namespace tests\units\Glpi\Form\Destination\CommonITILField;
+
+use Computer;
+use DbTestCase;
+use Glpi\Form\Destination\CommonITILField\ITILActorFieldConfig;
+use Glpi\Form\Destination\CommonITILField\ITILActorFieldStrategy;
+use Glpi\Form\Destination\FormDestinationTicket;
+use Glpi\Form\Form;
+use Glpi\Form\QuestionType\QuestionTypeItem;
+use Glpi\Form\QuestionType\QuestionTypeItemExtraDataConfig;
+use Glpi\Tests\FormBuilder;
+use Glpi\Tests\FormTesterTrait;
+use Group;
+use User;
+
+abstract class AbstractActorFieldTest extends DbTestCase
+{
+    use FormTesterTrait;
+
+    abstract protected function sendFormAndAssertTicketActors(
+        Form $form,
+        ITILActorFieldConfig $config,
+        array $answers,
+        array $expected_actors_ids
+    );
+
+    abstract public function getFieldClass(): string;
+
+    public function testUserActorsFromSpecificItemQuestions(): void
+    {
+        // Login is required to assign actors
+        $this->login();
+
+        $field_inst = new ($this->getFieldClass())();
+        $config_class = $field_inst->getConfigClass();
+
+        $form = $this->createAndGetFormWithItemQuestions();
+        $config = new $config_class(
+            strategies: [ITILActorFieldStrategy::USER_FROM_OBJECT_ANSWER],
+            specific_question_ids: [$this->getQuestionId($form, "Computer question")]
+        );
+        $users = $this->createItems(User::class, [
+            ['name' => 'testUserActorsFromSpecificItemQuestions User 1'],
+            ['name' => 'testUserActorsFromSpecificItemQuestions User 2'],
+        ]);
+        $computers = $this->createItems(Computer::class, [
+            [
+                'name' => 'testUserActorsFromSpecificItemQuestions Computer 1',
+                'entities_id' => $this->getTestRootEntity(true),
+                'users_id_tech' => $users[0]->getID()
+            ],
+            [
+                'name' => 'testUserActorsFromSpecificItemQuestions Computer 2',
+                'entities_id' => $this->getTestRootEntity(true),
+                'users_id' => $users[1]->getID()
+            ],
+        ]);
+
+        // No answers
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // Answer with first computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[0]->getID(),
+                ]
+            ],
+            expected_actors_ids: []
+        );
+
+        // Answer with second computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[1]->getID(),
+                ]
+            ],
+            expected_actors_ids: [$users[1]->getID()]
+        );
+    }
+
+    public function testTechUserActorsFromSpecificItemQuestions(): void
+    {
+        // Login is required to assign actors
+        $this->login();
+
+        $field_inst = new ($this->getFieldClass())();
+        $config_class = $field_inst->getConfigClass();
+
+        $form = $this->createAndGetFormWithItemQuestions();
+        $config = new $config_class(
+            strategies: [ITILActorFieldStrategy::TECH_USER_FROM_OBJECT_ANSWER],
+            specific_question_ids: [$this->getQuestionId($form, "Computer question")]
+        );
+        $users = $this->createItems(User::class, [
+            ['name' => 'testTechUserActorsFromSpecificItemQuestions User 1'],
+            ['name' => 'testTechUserActorsFromSpecificItemQuestions User 2'],
+        ]);
+        $computers = $this->createItems(Computer::class, [
+            [
+                'name' => 'testTechUserActorsFromSpecificItemQuestions Computer 1',
+                'entities_id' => $this->getTestRootEntity(true),
+                'users_id_tech' => $users[0]->getID()
+            ],
+            [
+                'name' => 'testTechUserActorsFromSpecificItemQuestions Computer 2',
+                'entities_id' => $this->getTestRootEntity(true),
+                'users_id' => $users[1]->getID()
+            ],
+        ]);
+
+        // No answers
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // Answer with first computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[0]->getID(),
+                ]
+            ],
+            expected_actors_ids: [$users[0]->getID()]
+        );
+
+        // Answer with second computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[1]->getID(),
+                ]
+            ],
+            expected_actors_ids: []
+        );
+    }
+
+    public function testGroupActorsFromSpecificItemQuestions(): void
+    {
+        // Login is required to assign actors
+        $this->login();
+
+        $field_inst = new ($this->getFieldClass())();
+        $config_class = $field_inst->getConfigClass();
+
+        $form = $this->createAndGetFormWithItemQuestions();
+        $config = new $config_class(
+            strategies: [ITILActorFieldStrategy::GROUP_FROM_OBJECT_ANSWER],
+            specific_question_ids: [$this->getQuestionId($form, "Computer question")]
+        );
+        $groups = $this->createItems(Group::class, [
+            ['name' => 'testGroupActorsFromSpecificItemQuestions Group 1'],
+            ['name' => 'testGroupActorsFromSpecificItemQuestions Group 2'],
+        ]);
+        $computers = $this->createItems(Computer::class, [
+            [
+                'name' => 'testGroupActorsFromSpecificItemQuestions Computer 1',
+                'entities_id' => $this->getTestRootEntity(true),
+                '_groups_id' => [$groups[0]->getID()]
+            ],
+            [
+                'name' => 'testGroupActorsFromSpecificItemQuestions Computer 2',
+                'entities_id' => $this->getTestRootEntity(true),
+                '_groups_id_tech' => [$groups[1]->getID()]
+            ],
+        ]);
+
+        // No answers
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // Answer with first computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[0]->getID(),
+                ]
+            ],
+            expected_actors_ids: [$groups[0]->getID()]
+        );
+
+        // Answer with second computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[1]->getID(),
+                ]
+            ],
+            expected_actors_ids: []
+        );
+    }
+
+    public function testTechGroupActorsFromSpecificItemQuestions(): void
+    {
+        // Login is required to assign actors
+        $this->login();
+
+        $field_inst = new ($this->getFieldClass())();
+        $config_class = $field_inst->getConfigClass();
+
+        $form = $this->createAndGetFormWithItemQuestions();
+        $config = new $config_class(
+            strategies: [ITILActorFieldStrategy::TECH_GROUP_FROM_OBJECT_ANSWER],
+            specific_question_ids: [$this->getQuestionId($form, 'Computer question')]
+        );
+        $groups = $this->createItems(Group::class, [
+            ['name' => 'testGroupActorsFromSpecificItemQuestions Group 1'],
+            ['name' => 'testGroupActorsFromSpecificItemQuestions Group 2'],
+        ]);
+        $computers = $this->createItems(Computer::class, [
+            [
+                'name' => 'testGroupActorsFromSpecificItemQuestions Computer 1',
+                'entities_id' => $this->getTestRootEntity(true),
+                '_groups_id' => [$groups[0]->getID()]
+            ],
+            [
+                'name' => 'testGroupActorsFromSpecificItemQuestions Computer 2',
+                'entities_id' => $this->getTestRootEntity(true),
+                '_groups_id_tech' => [$groups[1]->getID()]
+            ],
+        ]);
+
+        // No answers
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // Answer with first computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[0]->getID(),
+                ]
+            ],
+            expected_actors_ids: []
+        );
+
+        // Answer with second computer
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $config,
+            answers: [
+                'Computer question' => [
+                    'itemtype' => Computer::class,
+                    'items_id' => $computers[1]->getID(),
+                ]
+            ],
+            expected_actors_ids: [$groups[1]->getID()]
+        );
+    }
+
+    private function createAndGetFormWithItemQuestions(): Form
+    {
+        $builder = new FormBuilder();
+        $builder->addQuestion(
+            'Computer question',
+            QuestionTypeItem::class,
+            '',
+            json_encode((new QuestionTypeItemExtraDataConfig(Computer::class))->jsonSerialize())
+        );
+
+        return $this->createForm($builder);
+    }
+}
diff --git a/phpunit/functional/Glpi/Form/Destination/CommonITILField/AssigneeFieldTest.php b/phpunit/functional/Glpi/Form/Destination/CommonITILField/AssigneeFieldTest.php
index ac77c963ce9..cad03b14419 100644
--- a/phpunit/functional/Glpi/Form/Destination/CommonITILField/AssigneeFieldTest.php
+++ b/phpunit/functional/Glpi/Form/Destination/CommonITILField/AssigneeFieldTest.php
@@ -36,27 +36,34 @@
 namespace tests\units\Glpi\Form\Destination\CommonITILField;
 
 use CommonITILActor;
-use DbTestCase;
 use Glpi\Form\AnswersHandler\AnswersHandler;
 use Glpi\Form\Destination\CommonITILField\ITILActorFieldStrategy;
 use Glpi\Form\Destination\CommonITILField\AssigneeField;
 use Glpi\Form\Destination\CommonITILField\AssigneeFieldConfig;
+use Glpi\Form\Destination\CommonITILField\ITILActorFieldConfig;
 use Glpi\Form\Destination\FormDestinationTicket;
 use Glpi\Form\Form;
 use Glpi\Form\QuestionType\QuestionTypeActorsExtraDataConfig;
 use Glpi\Form\QuestionType\QuestionTypeAssignee;
 use Glpi\Tests\FormBuilder;
-use Glpi\Tests\FormTesterTrait;
 use Group;
+use Override;
+use Session;
 use Supplier;
 use Ticket;
 use TicketTemplate;
 use TicketTemplatePredefinedField;
 use User;
 
-final class AssigneeFieldTest extends DbTestCase
+include_once __DIR__ . '/../../../../../abstracts/AbstractActorFieldTest.php';
+
+final class AssigneeFieldTest extends AbstractActorFieldTest
 {
-    use FormTesterTrait;
+    #[Override]
+    public function getFieldClass(): string
+    {
+        return AssigneeField::class;
+    }
 
     public function testAssigneeFromTemplate(): void
     {
@@ -144,6 +151,45 @@ public function testAssigneeFormFiller(): void
         );
     }
 
+    public function testAssigneeFormFillerSupervisor(): void
+    {
+        // Login is required to assign actors
+        $this->login();
+
+        $supervisor = $this->createItem(User::class, ['name' => 'testAssigneeFormFillerSupervisor Supervisor']);
+        $form = $this->createAndGetFormWithMultipleActorsQuestions();
+        $form_filler_supervisor_config = new AssigneeFieldConfig(
+            [ITILActorFieldStrategy::FORM_FILLER_SUPERVISOR]
+        );
+
+        // Need user to be logged in
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // No supervisor set
+        $auth = $this->login();
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        $this->updateItem(User::class, Session::getLoginUserID(), ['users_id_supervisor' => $supervisor->getID()]);
+
+        // Supervisor set
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: [$supervisor->getID()]
+        );
+    }
+
     public function testSpecificActors(): void
     {
         // Login is required to assign actors
@@ -391,9 +437,9 @@ public function testMultipleStrategies(): void
         );
     }
 
-    private function sendFormAndAssertTicketActors(
+    protected function sendFormAndAssertTicketActors(
         Form $form,
-        AssigneeFieldConfig $config,
+        ITILActorFieldConfig $config,
         array $answers,
         array $expected_actors_ids,
     ): void {
@@ -430,12 +476,10 @@ private function sendFormAndAssertTicketActors(
         /** @var Ticket $ticket */
         $ticket = current($created_items);
 
-        $a = $ticket->getActorsForType(CommonITILActor::ASSIGN);
-
         // Check actors
         $this->assertEquals(
-            array_map(fn(array $actor) => $actor['items_id'], $ticket->getActorsForType(CommonITILActor::ASSIGN)),
-            $expected_actors_ids
+            $expected_actors_ids,
+            array_map(fn(array $actor) => $actor['items_id'], $ticket->getActorsForType(CommonITILActor::ASSIGN))
         );
     }
 
diff --git a/phpunit/functional/Glpi/Form/Destination/CommonITILField/ObserverFieldTest.php b/phpunit/functional/Glpi/Form/Destination/CommonITILField/ObserverFieldTest.php
index bea0f93a332..a0af9431213 100644
--- a/phpunit/functional/Glpi/Form/Destination/CommonITILField/ObserverFieldTest.php
+++ b/phpunit/functional/Glpi/Form/Destination/CommonITILField/ObserverFieldTest.php
@@ -36,8 +36,8 @@
 namespace tests\units\Glpi\Form\Destination\CommonITILField;
 
 use CommonITILActor;
-use DbTestCase;
 use Glpi\Form\AnswersHandler\AnswersHandler;
+use Glpi\Form\Destination\CommonITILField\ITILActorFieldConfig;
 use Glpi\Form\Destination\CommonITILField\ObserverFieldConfig;
 use Glpi\Form\Destination\CommonITILField\ITILActorFieldStrategy;
 use Glpi\Form\Destination\CommonITILField\ObserverField;
@@ -46,16 +46,22 @@
 use Glpi\Form\QuestionType\QuestionTypeActorsExtraDataConfig;
 use Glpi\Form\QuestionType\QuestionTypeObserver;
 use Glpi\Tests\FormBuilder;
-use Glpi\Tests\FormTesterTrait;
 use Group;
+use Override;
 use Ticket;
 use TicketTemplate;
 use TicketTemplatePredefinedField;
 use User;
 
-final class ObserverFieldTest extends DbTestCase
+include_once __DIR__ . '/../../../../../abstracts/AbstractActorFieldTest.php';
+
+final class ObserverFieldTest extends AbstractActorFieldTest
 {
-    use FormTesterTrait;
+    #[Override]
+    public function getFieldClass(): string
+    {
+        return ObserverField::class;
+    }
 
     public function testObserverFromTemplate(): void
     {
@@ -126,6 +132,48 @@ public function testObserverFormFiller(): void
         );
     }
 
+    public function testObserverFormFillerSupervisor(): void
+    {
+        $supervisor = $this->createItem(User::class, ['name' => 'testObserverFormFillerSupervisor Supervisor']);
+        $user = $this->createItem(User::class, [
+            'name'                => 'testObserverFormFillerSupervisor User',
+            'password'            => 'testObserverFormFillerSupervisor User',
+            'password2'           => 'testObserverFormFillerSupervisor User',
+            'users_id_supervisor' => $supervisor->getID()
+        ], ['password', 'password2']);
+
+        $form = $this->createAndGetFormWithMultipleActorsQuestions();
+        $form_filler_supervisor_config = new ObserverFieldConfig(
+            [ITILActorFieldStrategy::FORM_FILLER_SUPERVISOR]
+        );
+
+        // Need user to be logged in
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // No supervisor set
+        $auth = $this->login();
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // Supervisor set
+        $auth = $this->login($user->fields['name'], $user->fields['name']);
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: [$auth->getUser()->fields['users_id_supervisor']]
+        );
+    }
+
     public function testSpecificActors(): void
     {
         $form = $this->createAndGetFormWithMultipleActorsQuestions();
@@ -320,9 +368,9 @@ public function testMultipleStrategies(): void
         );
     }
 
-    private function sendFormAndAssertTicketActors(
+    protected function sendFormAndAssertTicketActors(
         Form $form,
-        ObserverFieldConfig $config,
+        ITILActorFieldConfig $config,
         array $answers,
         array $expected_actors_ids,
     ): void {
@@ -361,8 +409,8 @@ private function sendFormAndAssertTicketActors(
 
         // Check actors
         $this->assertEquals(
-            array_map(fn(array $actor) => $actor['items_id'], $ticket->getActorsForType(CommonITILActor::OBSERVER)),
-            $expected_actors_ids
+            $expected_actors_ids,
+            array_map(fn(array $actor) => $actor['items_id'], $ticket->getActorsForType(CommonITILActor::OBSERVER))
         );
     }
 
diff --git a/phpunit/functional/Glpi/Form/Destination/CommonITILField/RequesterFieldTest.php b/phpunit/functional/Glpi/Form/Destination/CommonITILField/RequesterFieldTest.php
index a9816c081d4..2ddaa7b1cc5 100644
--- a/phpunit/functional/Glpi/Form/Destination/CommonITILField/RequesterFieldTest.php
+++ b/phpunit/functional/Glpi/Form/Destination/CommonITILField/RequesterFieldTest.php
@@ -36,8 +36,8 @@
 namespace tests\units\Glpi\Form\Destination\CommonITILField;
 
 use CommonITILActor;
-use DbTestCase;
 use Glpi\Form\AnswersHandler\AnswersHandler;
+use Glpi\Form\Destination\CommonITILField\ITILActorFieldConfig;
 use Glpi\Form\Destination\CommonITILField\RequesterFieldConfig;
 use Glpi\Form\Destination\CommonITILField\ITILActorFieldStrategy;
 use Glpi\Form\Destination\CommonITILField\RequesterField;
@@ -46,16 +46,22 @@
 use Glpi\Form\QuestionType\QuestionTypeActorsExtraDataConfig;
 use Glpi\Form\QuestionType\QuestionTypeRequester;
 use Glpi\Tests\FormBuilder;
-use Glpi\Tests\FormTesterTrait;
 use Group;
+use Override;
 use Ticket;
 use TicketTemplate;
 use TicketTemplatePredefinedField;
 use User;
 
-final class RequesterFieldTest extends DbTestCase
+include_once __DIR__ . '/../../../../../abstracts/AbstractActorFieldTest.php';
+
+final class RequesterFieldTest extends AbstractActorFieldTest
 {
-    use FormTesterTrait;
+    #[Override]
+    public function getFieldClass(): string
+    {
+        return RequesterField::class;
+    }
 
     public function testRequesterFromTemplate(): void
     {
@@ -126,6 +132,48 @@ public function testRequesterFormFiller(): void
         );
     }
 
+    public function testRequesterFormFillerSupervisor(): void
+    {
+        $supervisor = $this->createItem(User::class, ['name' => 'testRequesterFormFillerSupervisor Supervisor']);
+        $user = $this->createItem(User::class, [
+            'name'                => 'testRequesterFormFillerSupervisor User',
+            'password'            => 'testRequesterFormFillerSupervisor User',
+            'password2'           => 'testRequesterFormFillerSupervisor User',
+            'users_id_supervisor' => $supervisor->getID()
+        ], ['password', 'password2']);
+
+        $form = $this->createAndGetFormWithMultipleActorsQuestions();
+        $form_filler_supervisor_config = new RequesterFieldConfig(
+            [ITILActorFieldStrategy::FORM_FILLER_SUPERVISOR]
+        );
+
+        // Need user to be logged in
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // No supervisor set
+        $auth = $this->login();
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: []
+        );
+
+        // Supervisor set
+        $auth = $this->login($user->fields['name'], $user->fields['name']);
+        $this->sendFormAndAssertTicketActors(
+            form: $form,
+            config: $form_filler_supervisor_config,
+            answers: [],
+            expected_actors_ids: [$auth->getUser()->fields['users_id_supervisor']]
+        );
+    }
+
     public function testSpecificActors(): void
     {
         $form = $this->createAndGetFormWithMultipleActorsQuestions();
@@ -320,9 +368,9 @@ public function testMultipleStrategies(): void
         );
     }
 
-    private function sendFormAndAssertTicketActors(
+    protected function sendFormAndAssertTicketActors(
         Form $form,
-        RequesterFieldConfig $config,
+        ITILActorFieldConfig $config,
         array $answers,
         array $expected_actors_ids,
     ): void {
@@ -361,8 +409,8 @@ private function sendFormAndAssertTicketActors(
 
         // Check actors
         $this->assertEquals(
-            array_map(fn(array $actor) => $actor['items_id'], $ticket->getActorsForType(CommonITILActor::REQUESTER)),
-            $expected_actors_ids
+            $expected_actors_ids,
+            array_map(fn(array $actor) => $actor['items_id'], $ticket->getActorsForType(CommonITILActor::REQUESTER))
         );
     }
 
diff --git a/src/Glpi/Form/Destination/CommonITILField/ITILActorField.php b/src/Glpi/Form/Destination/CommonITILField/ITILActorField.php
index 22c9026521d..5a6ce254d7d 100644
--- a/src/Glpi/Form/Destination/CommonITILField/ITILActorField.php
+++ b/src/Glpi/Form/Destination/CommonITILField/ITILActorField.php
@@ -40,6 +40,7 @@
 use Glpi\Form\AnswersSet;
 use Glpi\Form\Destination\AbstractConfigField;
 use Glpi\Form\Form;
+use Glpi\Form\QuestionType\QuestionTypeItem;
 use InvalidArgumentException;
 use Override;
 
@@ -72,8 +73,12 @@ public function renderConfigForm(
         $twig = TemplateRenderer::getInstance();
         return $twig->render('pages/admin/form/itil_config_fields/itilactor.html.twig', [
             // Possible configuration constant that will be used to to hide/show additional fields
-            'CONFIG_SPECIFIC_VALUE'  => ITILActorFieldStrategy::SPECIFIC_VALUES->value,
-            'CONFIG_SPECIFIC_ANSWER' => ITILActorFieldStrategy::SPECIFIC_ANSWERS->value,
+            'CONFIG_SPECIFIC_VALUE'                    => ITILActorFieldStrategy::SPECIFIC_VALUES->value,
+            'CONFIG_SPECIFIC_ANSWER'                   => ITILActorFieldStrategy::SPECIFIC_ANSWERS->value,
+            'CONFIG_SPECIFIC_USER_OBJECT_ANSWER'       => ITILActorFieldStrategy::USER_FROM_OBJECT_ANSWER->value,
+            'CONFIG_SPECIFIC_TECH_USER_OBJECT_ANSWER'  => ITILActorFieldStrategy::TECH_USER_FROM_OBJECT_ANSWER->value,
+            'CONFIG_SPECIFIC_GROUP_OBJECT_ANSWER'      => ITILActorFieldStrategy::GROUP_FROM_OBJECT_ANSWER->value,
+            'CONFIG_SPECIFIC_TECH_GROUP_OBJECT_ANSWER' => ITILActorFieldStrategy::TECH_GROUP_FROM_OBJECT_ANSWER->value,
 
             // General display options
             'options' => $display_options,
@@ -93,6 +98,18 @@ public function renderConfigForm(
                 'input_name'      => $input_name . "[" . ITILActorFieldConfig::SPECIFIC_QUESTION_IDS . "]",
                 'possible_values' => $this->getITILActorQuestionsValuesForDropdown($form),
             ],
+
+            // Specific additional config for the following strategies:
+            // - USER_FROM_OBJECT_ANSWER
+            // - TECH_USER_OBJECT_ANSWER
+            // - GROUP_FROM_OBJECT_ANSWER
+            // - TECH_GROUP_OBJECT_ANSWER
+            'object_answer_extra_field' => [
+                'aria_label'      => __("Select questions..."),
+                'values'          => $config->getSpecificQuestionIds() ?? [],
+                'input_name'      => $input_name . "[" . ITILActorFieldConfig::SPECIFIC_QUESTION_IDS . "]",
+                'possible_values' => $this->getItemWithAssignableItemtypeQuestionsValuesForDropdown($form),
+            ],
         ]);
     }
 
@@ -178,6 +195,30 @@ function ($carry, $question) {
         );
     }
 
+    private function getItemWithAssignableItemtypeQuestionsValuesForDropdown(Form $form): array
+    {
+        $allowed_item_questions = array_filter(
+            $form->getQuestionsByType(QuestionTypeItem::class),
+            function ($question) {
+                $question_itemtype = (new QuestionTypeItem())->getDefaultValueItemtype($question);
+                if ($question_itemtype === null) {
+                    return false;
+                }
+
+                return class_uses($question_itemtype)['Glpi\Features\AssignableItem'] ?? false;
+            }
+        );
+
+        return array_reduce(
+            $allowed_item_questions,
+            function ($carry, $question) {
+                $carry[$question->getId()] = $question->fields['name'];
+                return $carry;
+            },
+            []
+        );
+    }
+
     #[Override]
     public function canHaveMultipleStrategies(): bool
     {
diff --git a/src/Glpi/Form/Destination/CommonITILField/ITILActorFieldStrategy.php b/src/Glpi/Form/Destination/CommonITILField/ITILActorFieldStrategy.php
index 9ab81a7d8c1..a15352504e3 100644
--- a/src/Glpi/Form/Destination/CommonITILField/ITILActorFieldStrategy.php
+++ b/src/Glpi/Form/Destination/CommonITILField/ITILActorFieldStrategy.php
@@ -36,25 +36,36 @@
 namespace Glpi\Form\Destination\CommonITILField;
 
 use Glpi\Form\AnswersSet;
+use Group;
 use Session;
 use User;
 
 enum ITILActorFieldStrategy: string
 {
-    case FORM_FILLER               = 'form_filler';
-    case FROM_TEMPLATE             = 'from_template';
-    case SPECIFIC_VALUES           = 'specific_values';
-    case SPECIFIC_ANSWERS          = 'specific_answer';
-    case LAST_VALID_ANSWER         = 'last_valid_answer';
+    case FORM_FILLER                   = 'form_filler';
+    case FORM_FILLER_SUPERVISOR        = 'form_filler_supervisor';
+    case FROM_TEMPLATE                 = 'from_template';
+    case SPECIFIC_VALUES               = 'specific_values';
+    case SPECIFIC_ANSWERS              = 'specific_answer';
+    case LAST_VALID_ANSWER             = 'last_valid_answer';
+    case USER_FROM_OBJECT_ANSWER       = 'user_from_object_answer';
+    case TECH_USER_FROM_OBJECT_ANSWER  = 'tech_user_from_object_answer';
+    case GROUP_FROM_OBJECT_ANSWER      = 'group_from_object_answer';
+    case TECH_GROUP_FROM_OBJECT_ANSWER = 'tech_group_from_object_answer';
 
     public function getLabel(string $label): string
     {
         return match ($this) {
-            self::FORM_FILLER       => __('User who filled the form'),
-            self::FROM_TEMPLATE     => __('From template'),
-            self::SPECIFIC_VALUES   => __('Specific actors'),
-            self::SPECIFIC_ANSWERS  => __('Answer from specific questions'),
-            self::LAST_VALID_ANSWER => sprintf(__('Answer to last "%s" question'), $label),
+            self::FORM_FILLER                   => __('User who filled the form'),
+            self::FORM_FILLER_SUPERVISOR        => __('Supervisor of the user who filled the form'),
+            self::FROM_TEMPLATE                 => __('From template'),
+            self::SPECIFIC_VALUES               => __('Specific actors'),
+            self::SPECIFIC_ANSWERS              => __('Answer from specific questions'),
+            self::LAST_VALID_ANSWER             => sprintf(__('Answer to last "%s" question'), $label),
+            self::USER_FROM_OBJECT_ANSWER       => __('User from GLPI object answer'),
+            self::TECH_USER_FROM_OBJECT_ANSWER  => __('Tech user from GLPI object answer'),
+            self::GROUP_FROM_OBJECT_ANSWER      => __('Group from GLPI object answer'),
+            self::TECH_GROUP_FROM_OBJECT_ANSWER => __('Tech group from GLPI object answer'),
         };
     }
 
@@ -64,18 +75,39 @@ public function getITILActorsIDs(
         AnswersSet $answers_set
     ): ?array {
         return match ($this) {
-            self::FROM_TEMPLATE    => null,
-            self::FORM_FILLER      => $this->getActorsIdsFromCurrentUser(),
-            self::SPECIFIC_VALUES  => $config->getSpecificITILActorsIds(),
-            self::SPECIFIC_ANSWERS => $this->getActorsIdsForSpecificAnswers(
+            self::FROM_TEMPLATE          => null,
+            self::FORM_FILLER            => $this->getActorsIdsFromCurrentUser(),
+            self::FORM_FILLER_SUPERVISOR => $this->getActorsIdsFromSupervisorOfCurrentUser(),
+            self::SPECIFIC_VALUES        => $config->getSpecificITILActorsIds(),
+            self::SPECIFIC_ANSWERS       => $this->getActorsIdsForSpecificAnswers(
                 $config->getSpecificQuestionIds(),
                 $itil_actor_field,
                 $answers_set,
             ),
-            self::LAST_VALID_ANSWER => $this->getActorsIdsForLastValidAnswer(
+            self::LAST_VALID_ANSWER      => $this->getActorsIdsForLastValidAnswer(
                 $itil_actor_field,
                 $answers_set,
             ),
+            self::USER_FROM_OBJECT_ANSWER => $this->getActorsIdsFromObjectAnswers(
+                $config->getSpecificQuestionIds(),
+                $answers_set,
+                User::getForeignKeyField()
+            ),
+            self::TECH_USER_FROM_OBJECT_ANSWER => $this->getActorsIdsFromObjectAnswers(
+                $config->getSpecificQuestionIds(),
+                $answers_set,
+                User::getForeignKeyField() . '_tech'
+            ),
+            self::GROUP_FROM_OBJECT_ANSWER => $this->getActorsIdsFromObjectAnswers(
+                $config->getSpecificQuestionIds(),
+                $answers_set,
+                Group::getForeignKeyField()
+            ),
+            self::TECH_GROUP_FROM_OBJECT_ANSWER => $this->getActorsIdsFromObjectAnswers(
+                $config->getSpecificQuestionIds(),
+                $answers_set,
+                Group::getForeignKeyField() . '_tech'
+            ),
         };
     }
 
@@ -91,6 +123,26 @@ private function getActorsIdsFromCurrentUser(): ?array
         ];
     }
 
+    private function getActorsIdsFromSupervisorOfCurrentUser(): ?array
+    {
+        $users_id = Session::getLoginUserID();
+        if (!is_numeric($users_id)) {
+            return null;
+        }
+
+        $user = new User();
+        $user->getFromDB($users_id);
+        $supervisor_id = $user->fields['users_id_supervisor'];
+
+        if (!is_numeric($supervisor_id)) {
+            return null;
+        }
+
+        return [
+            User::class => [(int) $supervisor_id],
+        ];
+    }
+
     private function getActorsIdsForSpecificAnswers(
         ?array $question_ids,
         ITILActorField $itil_actor_field,
@@ -163,4 +215,69 @@ private function getActorsIdsForLastValidAnswer(
             $answers_set
         );
     }
+
+    private function getActorsIdsFromObjectAnswers(
+        ?array $question_ids,
+        AnswersSet $answers_set,
+        string $fk_field
+    ): ?array {
+        if (empty($question_ids)) {
+            return null;
+        }
+
+        return array_reduce($question_ids, function ($carry, $question_id) use ($answers_set, $fk_field) {
+            $actors_ids = $this->getActorsIdsFromObjectAnswer(
+                $question_id,
+                $answers_set,
+                $fk_field
+            );
+
+            if ($actors_ids === null) {
+                return $carry;
+            }
+
+            return array_merge_recursive($carry, $actors_ids);
+        }, []);
+    }
+
+    private function getActorsIdsFromObjectAnswer(
+        ?int $question_id,
+        AnswersSet $answers_set,
+        string $fk_field
+    ): ?array {
+        if ($question_id === null) {
+            return null;
+        }
+
+        $answer = $answers_set->getAnswerByQuestionId($question_id);
+        if ($answer === null) {
+            return null;
+        }
+
+        $value = $answer->getRawAnswer();
+        if (
+            getItemForItemtype($value['itemtype']) === false
+            || !is_numeric($value['items_id'])
+        ) {
+            return null;
+        }
+
+        $item = getItemForItemtype($value['itemtype']);
+        if (!$item->getFromDB($value['items_id'])) {
+            return null;
+        }
+
+        if (!isset($item->fields[$fk_field])) {
+            return null;
+        }
+
+        $actors_ids = $item->fields[$fk_field];
+        if (!is_array($actors_ids)) {
+            $actors_ids = [$actors_ids];
+        }
+
+        return [
+            getItemtypeForForeignKeyField(str_replace('_tech', '', $fk_field)) => $actors_ids,
+        ];
+    }
 }
diff --git a/templates/pages/admin/form/itil_config_fields/itilactor.html.twig b/templates/pages/admin/form/itil_config_fields/itilactor.html.twig
index a5c9eb77af1..33f9dd76ceb 100644
--- a/templates/pages/admin/form/itil_config_fields/itilactor.html.twig
+++ b/templates/pages/admin/form/itil_config_fields/itilactor.html.twig
@@ -70,6 +70,7 @@
         specific_answer_extra_field.possible_values,
         "",
         options|merge({
+            rand: random(),
             field_class: '',
             no_label: true,
             multiple: true,
@@ -79,3 +80,32 @@
         })
     ) }}
 </div>
+
+{% set group_object_strategies = [
+    CONFIG_SPECIFIC_USER_OBJECT_ANSWER,
+    CONFIG_SPECIFIC_TECH_USER_OBJECT_ANSWER,
+    CONFIG_SPECIFIC_GROUP_OBJECT_ANSWER,
+    CONFIG_SPECIFIC_TECH_GROUP_OBJECT_ANSWER
+] %}
+{% for strategy in group_object_strategies %}
+    <div
+        class="d-none"
+        data-glpi-itildestination-field-config-display-condition="{{ strategy }}"
+    >
+        {{ fields.dropdownArrayField(
+            object_answer_extra_field.input_name,
+            '',
+            object_answer_extra_field.possible_values,
+            "",
+            options|merge({
+                rand: random(),
+                field_class: '',
+                no_label: true,
+                multiple: true,
+                values: object_answer_extra_field.values,
+                aria_label: object_answer_extra_field.aria_label,
+                mb: '',
+            })
+        ) }}
+    </div>
+{% endfor %}
diff --git a/tests/cypress/e2e/form/destination_config_fields/actors.cy.js b/tests/cypress/e2e/form/destination_config_fields/actors.cy.js
new file mode 100644
index 00000000000..af919a25972
--- /dev/null
+++ b/tests/cypress/e2e/form/destination_config_fields/actors.cy.js
@@ -0,0 +1,195 @@
+/**
+ * ---------------------------------------------------------------------
+ *
+ * GLPI - Gestionnaire Libre de Parc Informatique
+ *
+ * http://glpi-project.org
+ *
+ * @copyright 2015-2025 Teclib' and contributors.
+ * @licence   https://www.gnu.org/licenses/gpl-3.0.html
+ *
+ * ---------------------------------------------------------------------
+ *
+ * LICENSE
+ *
+ * This file is part of GLPI.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ *
+ * ---------------------------------------------------------------------
+ */
+
+const actorTypes = [
+    {
+        name: 'Requester',
+        type: 'requester',
+        dataAttr: 'requester',
+        defaultValue: 'User who filled the form'
+    },
+    {
+        name: 'Assignee',
+        type: 'assignee',
+        dataAttr: 'assign',
+        defaultValue: 'From template'
+    },
+    {
+        name: 'Observer',
+        type: 'observer',
+        dataAttr: 'observer',
+        defaultValue: 'From template'
+    }
+];
+
+describe('Actors configuration', () => {
+    actorTypes.forEach((actorConfig) => {
+        describe(`${actorConfig.name} configuration`, () => {
+            beforeEach(() => {
+                cy.login();
+                cy.changeProfile('Super-Admin', true);
+
+                cy.createFormWithAPI().as('form_id').visitFormTab('Form');
+
+                // Create actor, group and computer test data
+                cy.get('@form_id').then((form_id) => {
+                    const actor_name = `Test ${actorConfig.name} - ${form_id}`;
+                    const userParams = {
+                        name: actor_name,
+                    };
+
+                    // Add technician profile for assignees
+                    if (actorConfig.type === 'assignee') {
+                        userParams._profiles_id = 6;
+                    }
+
+                    cy.createWithAPI('User', userParams).as('actor_id');
+
+                    // Create a Group
+                    cy.createWithAPI('Group', {
+                        name: `Test Group - ${form_id}`,
+                    }).as('group_id');
+
+                    // Create a Computer with users and groups
+                    cy.get('@group_id').then((group_id) => {
+                        cy.createWithAPI('Computer', {
+                            name: `Test Computer - ${form_id}`,
+                            users_id: 7,
+                            users_id_tech: 7,
+                            groups_id: group_id,
+                            groups_id_tech: group_id,
+                        }).as('computer_id');
+                    });
+
+                    // Create actor question
+                    cy.findByRole('button', {'name': "Add a new question"}).click();
+                    cy.focused().type(`My ${actorConfig.name} question`);
+                    cy.getDropdownByLabelText('Question type').selectDropdownValue('Actors');
+                    cy.getDropdownByLabelText('Question sub type').selectDropdownValue(`${actorConfig.name}s`);
+                    cy.getDropdownByLabelText("Select an actor...").selectDropdownValue(actor_name);
+                    cy.findByRole('button', {'name': 'Save'}).click();
+                    cy.checkAndCloseAlert('Item successfully updated');
+
+                    // Create computer question
+                    cy.findByRole('button', {'name': "Add a new question"}).click();
+                    cy.focused().type("My Computer question");
+                    cy.getDropdownByLabelText('Question type').selectDropdownValue('Item');
+                    cy.getDropdownByLabelText('Question sub type').selectDropdownValue('GLPI Objects');
+                    cy.getDropdownByLabelText("Select an itemtype").selectDropdownValue('Computers');
+                    cy.findByRole('button', {'name': 'Save'}).click();
+
+                    // Go to destination tab
+                    cy.findByRole('tab', { 'name': "Items to create 1" }).click();
+                });
+            });
+
+            it('can use all possibles configuration options', () => {
+                const regionName = `${actorConfig.name}s configuration`;
+                const dropdownLabel = `${actorConfig.name}s`;
+
+                cy.findByRole('region', { 'name': regionName }).as("config");
+                cy.get('@config').getDropdownByLabelText(dropdownLabel).as("dropdown");
+
+                // Test default value
+                cy.get('@dropdown').should('have.text', actorConfig.defaultValue);
+
+                // Test hidden dropdowns
+                cy.get('@config').getDropdownByLabelText('Select actors...').should('not.exist');
+                cy.get('@config').getDropdownByLabelText('Select questions...').should('not.exist');
+
+                // Test common options
+                const commonOptions = [
+                    'From template',
+                    'User who filled the form',
+                    'Specific actors',
+                    'Answer from specific questions',
+                    `Answer to last "${actorConfig.name}s" question`,
+                    'User from GLPI object answer',
+                    'Tech user from GLPI object answer',
+                    'Group from GLPI object answer',
+                    'Tech group from GLPI object answer',
+                    'Supervisor of the user who filled the form'
+                ];
+
+                // Test each option
+                commonOptions.forEach((option) => {
+                    cy.get('@dropdown').selectDropdownValue(option);
+
+                    // Handle specific cases that need additional input
+                    if (option === 'Specific actors') {
+                        cy.get('@config').getDropdownByLabelText('Select actors...').as('specific_dropdown');
+                        cy.get('@form_id').then((form_id) => {
+                            const actor_name = `Test ${actorConfig.name} - ${form_id}`;
+                            cy.get('@specific_dropdown').selectDropdownValue(actor_name);
+                        });
+                    } else if (option === 'Answer from specific questions') {
+                        cy.get('@config').getDropdownByLabelText('Select questions...').as('question_dropdown');
+                        cy.get('@question_dropdown').selectDropdownValue(`My ${actorConfig.name} question`);
+                    } else if (option.includes('from GLPI object answer')) {
+                        cy.get('@config').getDropdownByLabelText('Select questions...').as('object_dropdown');
+                        cy.get('@object_dropdown').selectDropdownValue('My Computer question');
+                    }
+
+                    cy.findByRole('button', { 'name': 'Update item' }).click();
+                    cy.checkAndCloseAlert('Item successfully updated');
+                    cy.get('@dropdown').should('have.text', option);
+                });
+            });
+
+            it('can create ticket using default configuration', () => {
+                const regionName = `${actorConfig.name}s configuration`;
+                const dropdownLabel = `${actorConfig.name}s`;
+
+                cy.findByRole('region', { 'name': regionName }).as("config");
+                cy.get('@config').getDropdownByLabelText(dropdownLabel).as("dropdown");
+
+                // Set to "User who filled the form"
+                cy.get('@dropdown').selectDropdownValue('User who filled the form');
+                cy.findByRole('button', { 'name': 'Update item' }).click();
+                cy.checkAndCloseAlert('Item successfully updated');
+
+                // Preview and submit form
+                cy.findByRole('tab', { 'name': "Form" }).click();
+                cy.findByRole('link', { 'name': "Preview" })
+                    .invoke('removeAttr', 'target')
+                    .click();
+                cy.findByRole('button', { 'name': 'Send form' }).click();
+                cy.findByRole('link', { 'name': 'My test form' }).click();
+
+                // Verify actor in ticket
+                cy.findByRole('region', { 'name': "Actors" }).within(() => {
+                    cy.get(`select[data-actor-type="${actorConfig.dataAttr}"]`).contains('E2E Tests');
+                });
+            });
+        });
+    });
+});
diff --git a/tests/cypress/e2e/form/destination_config_fields/assignee.cy.js b/tests/cypress/e2e/form/destination_config_fields/assignee.cy.js
index 53576f7e471..3452b17d868 100644
--- a/tests/cypress/e2e/form/destination_config_fields/assignee.cy.js
+++ b/tests/cypress/e2e/form/destination_config_fields/assignee.cy.js
@@ -46,6 +46,22 @@ describe('Assignee configuration', () => {
                 _profiles_id: 6, // Technician
             }).as('assignee_id');
 
+            // Create a Group
+            cy.createWithAPI('Group', {
+                name: `Test Group - ${form_id}`,
+            }).as('group_id');
+
+            // Create a Computer with users_id, users_id_tech, groups_id and groups_id_tech
+            cy.get('@group_id').then((group_id) => {
+                cy.createWithAPI('Computer', {
+                    name: `Test Computer - ${form_id}`,
+                    users_id: 7, // E2E Tests user
+                    users_id_tech: 7, // E2E Tests user
+                    groups_id: group_id,
+                    groups_id_tech: group_id,
+                }).as('computer_id');
+            });
+
             cy.findByRole('button', {'name': "Add a new question"}).click();
             cy.focused().type("My Assignee question");
             cy.getDropdownByLabelText('Question type').selectDropdownValue('Actors');
@@ -54,6 +70,15 @@ describe('Assignee configuration', () => {
             cy.findByRole('button', {'name': 'Save'}).click();
             cy.checkAndCloseAlert('Item successfully updated');
 
+            cy.findByRole('button', {'name': "Add a new question"}).click();
+            cy.focused().type("My Computer question");
+            cy.getDropdownByLabelText('Question type').selectDropdownValue('Item');
+            cy.getDropdownByLabelText('Question sub type').selectDropdownValue('GLPI Objects');
+            cy.getDropdownByLabelText("Select an itemtype").selectDropdownValue('Computers');
+
+            // Save form
+            cy.findByRole('button', {'name': 'Save'}).click();
+
             // Go to destination tab
             cy.findByRole('tab', { 'name': "Items to create 1" }).click();
         });
@@ -116,6 +141,49 @@ describe('Assignee configuration', () => {
         cy.findByRole('button', { 'name': 'Update item' }).click();
         cy.checkAndCloseAlert('Item successfully updated');
         cy.get('@assignees_dropdown').should('have.text', 'Answer to last "Assignees" question');
+
+        // Switch to "Supervisor of the user who filled the form"
+        cy.get('@assignees_dropdown').selectDropdownValue('Supervisor of the user who filled the form');
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@assignees_dropdown').should('have.text', 'Supervisor of the user who filled the form');
+
+        // Switch to "User from GLPI object answer"
+        cy.get('@assignees_dropdown').selectDropdownValue('User from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('user_object_answer_dropdown');
+        cy.get('@user_object_answer_dropdown').selectDropdownValue('My Computer question');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@assignees_dropdown').should('have.text', 'User from GLPI object answer');
+        cy.get('@user_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Tech user from GLPI object answer"
+        cy.get('@assignees_dropdown').selectDropdownValue('Tech user from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('tech_user_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@assignees_dropdown').should('have.text', 'Tech user from GLPI object answer');
+        cy.get('@tech_user_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Group from GLPI object answer"
+        cy.get('@assignees_dropdown').selectDropdownValue('Group from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('group_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@assignees_dropdown').should('have.text', 'Group from GLPI object answer');
+        cy.get('@group_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Tech group from GLPI object answer"
+        cy.get('@assignees_dropdown').selectDropdownValue('Tech group from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('tech_group_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@assignees_dropdown').should('have.text', 'Tech group from GLPI object answer');
+        cy.get('@tech_group_object_answer_dropdown').should('have.text', '×My Computer question');
     });
 
     it('can create ticket using default configuration', () => {
diff --git a/tests/cypress/e2e/form/destination_config_fields/observer.cy.js b/tests/cypress/e2e/form/destination_config_fields/observer.cy.js
index 78d17ea2f6f..83f2cd96cf0 100644
--- a/tests/cypress/e2e/form/destination_config_fields/observer.cy.js
+++ b/tests/cypress/e2e/form/destination_config_fields/observer.cy.js
@@ -45,6 +45,22 @@ describe('Observer configuration', () => {
                 name: observer_name,
             }).as('observer_id');
 
+            // Create a Group
+            cy.createWithAPI('Group', {
+                name: `Test Group - ${form_id}`,
+            }).as('group_id');
+
+            // Create a Computer with users_id, users_id_tech, groups_id and groups_id_tech
+            cy.get('@group_id').then((group_id) => {
+                cy.createWithAPI('Computer', {
+                    name: `Test Computer - ${form_id}`,
+                    users_id: 7, // E2E Tests user
+                    users_id_tech: 7, // E2E Tests user
+                    groups_id: group_id,
+                    groups_id_tech: group_id,
+                }).as('computer_id');
+            });
+
             cy.findByRole('button', {'name': "Add a new question"}).click();
             cy.focused().type("My Observer question");
             cy.getDropdownByLabelText('Question type').selectDropdownValue('Actors');
@@ -53,6 +69,15 @@ describe('Observer configuration', () => {
             cy.findByRole('button', {'name': 'Save'}).click();
             cy.checkAndCloseAlert('Item successfully updated');
 
+            cy.findByRole('button', {'name': "Add a new question"}).click();
+            cy.focused().type("My Computer question");
+            cy.getDropdownByLabelText('Question type').selectDropdownValue('Item');
+            cy.getDropdownByLabelText('Question sub type').selectDropdownValue('GLPI Objects');
+            cy.getDropdownByLabelText("Select an itemtype").selectDropdownValue('Computers');
+
+            // Save form
+            cy.findByRole('button', {'name': 'Save'}).click();
+
             // Go to destination tab
             cy.findByRole('tab', { 'name': "Items to create 1" }).click();
         });
@@ -115,6 +140,43 @@ describe('Observer configuration', () => {
         cy.findByRole('button', { 'name': 'Update item' }).click();
         cy.checkAndCloseAlert('Item successfully updated');
         cy.get('@observers_dropdown').should('have.text', 'Answer to last "Observers" question');
+
+        // Switch to "User from GLPI object answer"
+        cy.get('@observers_dropdown').selectDropdownValue('User from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('user_object_answer_dropdown');
+        cy.get('@user_object_answer_dropdown').selectDropdownValue('My Computer question');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@observers_dropdown').should('have.text', 'User from GLPI object answer');
+        cy.get('@user_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Tech user from GLPI object answer"
+        cy.get('@observers_dropdown').selectDropdownValue('Tech user from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('tech_user_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@observers_dropdown').should('have.text', 'Tech user from GLPI object answer');
+        cy.get('@tech_user_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Group from GLPI object answer"
+        cy.get('@observers_dropdown').selectDropdownValue('Group from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('group_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@observers_dropdown').should('have.text', 'Group from GLPI object answer');
+        cy.get('@group_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Tech group from GLPI object answer"
+        cy.get('@observers_dropdown').selectDropdownValue('Tech group from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('tech_group_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@observers_dropdown').should('have.text', 'Tech group from GLPI object answer');
+        cy.get('@tech_group_object_answer_dropdown').should('have.text', '×My Computer question');
     });
 
     it('can create ticket using default configuration', () => {
diff --git a/tests/cypress/e2e/form/destination_config_fields/requester.cy.js b/tests/cypress/e2e/form/destination_config_fields/requester.cy.js
index 315d35c00e7..94602ca368e 100644
--- a/tests/cypress/e2e/form/destination_config_fields/requester.cy.js
+++ b/tests/cypress/e2e/form/destination_config_fields/requester.cy.js
@@ -50,6 +50,30 @@ describe('Requester configuration', () => {
             cy.getDropdownByLabelText('Question type').selectDropdownValue('Actors');
             cy.getDropdownByLabelText('Question sub type').selectDropdownValue('Requesters');
             cy.getDropdownByLabelText("Select an actor...").selectDropdownValue(requester_name);
+
+            // Create a Group
+            cy.createWithAPI('Group', {
+                name: `Test Group - ${form_id}`,
+            }).as('group_id');
+
+            // Create a Computer with users_id, users_id_tech, groups_id and groups_id_tech
+            cy.get('@group_id').then((group_id) => {
+                cy.createWithAPI('Computer', {
+                    name: `Test Computer - ${form_id}`,
+                    users_id: 7, // E2E Tests user
+                    users_id_tech: 7, // E2E Tests user
+                    groups_id: group_id,
+                    groups_id_tech: group_id,
+                }).as('computer_id');
+            });
+
+            cy.findByRole('button', {'name': "Add a new question"}).click();
+            cy.focused().type("My Computer question");
+            cy.getDropdownByLabelText('Question type').selectDropdownValue('Item');
+            cy.getDropdownByLabelText('Question sub type').selectDropdownValue('GLPI Objects');
+            cy.getDropdownByLabelText("Select an itemtype").selectDropdownValue('Computers');
+
+            // Save form
             cy.findByRole('button', {'name': 'Save'}).click();
             cy.checkAndCloseAlert('Item successfully updated');
 
@@ -84,6 +108,12 @@ describe('Requester configuration', () => {
         cy.checkAndCloseAlert('Item successfully updated');
         cy.get('@requesters_dropdown').should('have.text', 'User who filled the form');
 
+        // Switch to "Supervisor of the user who filled the form"
+        cy.get('@requesters_dropdown').selectDropdownValue('Supervisor of the user who filled the form');
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@requesters_dropdown').should('have.text', 'Supervisor of the user who filled the form');
+
         // Switch to "Specific actors"
         cy.get('@requesters_dropdown').selectDropdownValue('Specific actors');
         cy.get('@config').getDropdownByLabelText('Select actors...').as('specific_requesters_dropdown');
@@ -115,6 +145,43 @@ describe('Requester configuration', () => {
         cy.findByRole('button', { 'name': 'Update item' }).click();
         cy.checkAndCloseAlert('Item successfully updated');
         cy.get('@requesters_dropdown').should('have.text', 'Answer to last "Requesters" question');
+
+        // Switch to "User from GLPI object answer"
+        cy.get('@requesters_dropdown').selectDropdownValue('User from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('user_object_answer_dropdown');
+        cy.get('@user_object_answer_dropdown').selectDropdownValue('My Computer question');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@requesters_dropdown').should('have.text', 'User from GLPI object answer');
+        cy.get('@user_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Tech user from GLPI object answer"
+        cy.get('@requesters_dropdown').selectDropdownValue('Tech user from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('tech_user_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@requesters_dropdown').should('have.text', 'Tech user from GLPI object answer');
+        cy.get('@tech_user_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Group from GLPI object answer"
+        cy.get('@requesters_dropdown').selectDropdownValue('Group from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('group_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@requesters_dropdown').should('have.text', 'Group from GLPI object answer');
+        cy.get('@group_object_answer_dropdown').should('have.text', '×My Computer question');
+
+        // Switch to "Tech group from GLPI object answer"
+        cy.get('@requesters_dropdown').selectDropdownValue('Tech group from GLPI object answer');
+        cy.get('@config').getDropdownByLabelText('Select questions...').as('tech_group_object_answer_dropdown');
+
+        cy.findByRole('button', { 'name': 'Update item' }).click();
+        cy.checkAndCloseAlert('Item successfully updated');
+        cy.get('@requesters_dropdown').should('have.text', 'Tech group from GLPI object answer');
+        cy.get('@tech_group_object_answer_dropdown').should('have.text', '×My Computer question');
     });
 
     it('can create ticket using default configuration', () => {
