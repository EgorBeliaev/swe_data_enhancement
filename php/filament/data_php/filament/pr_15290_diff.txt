diff --git a/packages/forms/src/Components/Concerns/CanDisableOptions.php b/packages/forms/src/Components/Concerns/CanDisableOptions.php
index 1f15f47f3ff..a6b0863adf0 100644
--- a/packages/forms/src/Components/Concerns/CanDisableOptions.php
+++ b/packages/forms/src/Components/Concerns/CanDisableOptions.php
@@ -3,15 +3,23 @@
 namespace Filament\Forms\Components\Concerns;
 
 use Closure;
+use Illuminate\Support\Arr;
 use Illuminate\Support\Collection;
 
 trait CanDisableOptions
 {
-    protected bool | Closure | null $isOptionDisabled = null;
+    /**
+     * @var array<bool | Closure>
+     */
+    protected array $isOptionDisabled = [];
 
-    public function disableOptionWhen(bool | Closure $callback): static
+    public function disableOptionWhen(bool | Closure | null $callback, bool $merge = false): static
     {
-        $this->isOptionDisabled = $callback;
+        if ($merge) {
+            $this->isOptionDisabled[] = $callback;
+        } else {
+            $this->isOptionDisabled = Arr::wrap($callback);
+        }
 
         return $this;
     }
@@ -38,18 +46,16 @@ public function getEnabledOptions(): array
      */
     public function isOptionDisabled($value, string $label): bool
     {
-        if ($this->isOptionDisabled === null) {
-            return false;
-        }
-
-        return (bool) $this->evaluate($this->isOptionDisabled, [
-            'label' => $label,
-            'value' => $value,
-        ]);
+        return collect($this->isOptionDisabled)
+            ->contains(fn (bool | Closure $isOptionDisabled): bool => (bool) $this->evaluate($isOptionDisabled, [
+                'label' => $label,
+                'value' => $value,
+            ]));
     }
 
     public function hasDynamicDisabledOptions(): bool
     {
-        return $this->isOptionDisabled instanceof Closure;
+        return collect($this->isOptionDisabled)
+            ->contains(fn (bool | Closure $isOptionDisabled): bool => $isOptionDisabled instanceof Closure);
     }
 }
