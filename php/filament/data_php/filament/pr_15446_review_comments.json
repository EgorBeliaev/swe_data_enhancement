[
    {
        "title": "Fix: QueryBuilder's TextConstraint for Postgres"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "<!-- FILL OUT ALL RELEVANT SECTIONS, OR THE PULL REQUEST WILL BE CLOSED. -->\r\n\r\n## Description\r\n\r\nWhen a table name or column name contains uppercase letters, both table name and column name gets wrapped between double quotes inside any `TextContraint` operator.\r\n\r\nfor example: `Flight` table name with `code` field name becomes `\"Flight.code\"` which results in column not found error. Instead, it should be `\"Flight\".code`, and if column name contains uppercase letters, it should be `\"Flight\".\"Code\"`.\r\n\r\nExample error: ```Undefined column: 7 ERROR:  column \"Flight.code\" does not exist\r\nLINE 1: ...count(*) as aggregate from \"Flight\" where (lower(\"Flight.c...\r\n                                                             ^ (Connection: pgsql, SQL: select count(*) as aggregate from \"Flight\" where (lower(\"Flight.code\"::text)::text like search_string%))```\r\n\r\nIt might not be very common when it comes to Laravel naming conventions, but I encountered this issue while building a dashboard for an app that was initially developed with Next.js and prisma, where this naming convention is common.\r\n\r\n<!-- Describe the addressed issue or the need for the new or updated functionality. -->\r\n\r\n## Functional changes\r\n\r\n- [x] Code style has been fixed by running the `composer cs` command.\r\n- [x] Changes have been tested to not break existing functionality.\r\n- [x] Documentation is up-to-date.\r\n"
    },
    {
        "author": {
            "login": "danharrin"
        },
        "body": "Thanks!"
    }
]