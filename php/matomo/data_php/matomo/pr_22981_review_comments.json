[
    {
        "title": "Start storing the processing host and process id for started invalidations"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "### Description:\r\n\r\nfixes #22970\r\n\r\n### Review\r\n\r\n* [ ] [Functional review done](https://developer.matomo.org/guides/pull-request-reviews#functional-review-done)\r\n* [ ] [Potential edge cases thought about](https://developer.matomo.org/guides/pull-request-reviews#potential-edge-cases-thought-about) (behavior of the code with strange input, with strange internal state or possible interactions with other Matomo subsystems)\r\n* [ ] [Usability review done](https://developer.matomo.org/guides/pull-request-reviews#usability-review-done) (is anything maybe unclear or think about anything that would cause people to reach out to support)\r\n* [ ] [Security review done](https://developer.matomo.org/guides/security-in-piwik#checklist)\r\n* [ ] [Wording review done](https://developer.matomo.org/guides/pull-request-reviews#translations-wording-review-done)\r\n* [ ] [Code review done](https://developer.matomo.org/guides/pull-request-reviews#code-review-done)\r\n* [ ] [Tests were added if useful/possible](https://developer.matomo.org/guides/pull-request-reviews#tests-were-added-if-usefulpossible)\r\n* [ ] [Reviewed for breaking changes](https://developer.matomo.org/guides/pull-request-reviews#reviewed-for-breaking-changes)\r\n* [ ] [Developer changelog updated if needed](https://developer.matomo.org/guides/pull-request-reviews#developer-changelog-updated-if-needed)\r\n* [ ] [Documentation added if needed](https://developer.matomo.org/guides/pull-request-reviews#documentation-added-if-needed)\r\n* [ ] Existing documentation updated if needed\r\n"
    },
    {
        "author": {
            "login": "michalkleiner"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sgiehl"
        },
        "body": ""
    },
    {
        "author": {
            "login": "caddoo"
        },
        "body": "Tested manually and it works as expected.\r\n\r\nI did spend some time thinking if that removal of dead code could cause any regressions, I couldn't really think of anything. \r\n\r\nI think @michalkleiner 's early review question is still valid, so would be good to get an answer to that as well @sgiehl \r\n\r\nJust want to de-risk the change as much as possible."
    },
    {
        "author": {
            "login": "caddoo"
        },
        "body": ""
    },
    {
        "author": {
            "login": "michalkleiner"
        },
        "body": "The storing part looks ok. Do we need to clean up the values at some point or they will remain in the table for the given invalidation?\r\n\r\nCan it happen an invalidation will be picked up multiple times and we will rewrite the data with the latest processing info, possibly losing the previous one? And if so, is that a problem?"
    },
    {
        "author": {
            "login": "sgiehl"
        },
        "body": "@michalkleiner would you mind to stop reviewing and changing unfinished PRs please? This has not yet been put into review"
    },
    {
        "author": {
            "login": "michalkleiner"
        },
        "body": "Apologies @sgiehl \ud83d\ude47 "
    },
    {
        "author": {
            "login": "sgiehl"
        },
        "body": "I've added a commit to reset the columns when an invalidation is released. Don't think that brings that much value, but might be more clean indeed.\r\n\r\nBesides that only one process should handle an invalidation, so it should not happen that one process overwrites the other. That already handled in the QueueConsumer."
    },
    {
        "data": {
            "repository": {
                "issue": {
                    "title": "Store Hostname of Archiving Server in Invalidation Records",
                    "body": "### Background  \nMatomo's archiving process relies on invalidation records to determine which data needs to be (re-)processed. Whenever an invalidation occurs, a corresponding record is created, and the archiving process identifies the next available invalidation for processing. During this process, the status of the invalidation is updated, and a timestamp is set to indicate when processing began.\n\n### Problem Statement  \nIn a multi-tenant environment with multiple archiving servers, it would be beneficial to track which server is processing a specific invalidation. Currently, there is no built-in mechanism to determine which server is handling a given invalidation, which can make troubleshooting and monitoring more challenging.\n\n### Proposed Solution  \nTo address this, we propose extending the invalidation table to include a field for storing the hostname of the archiving server as well as the current process id when an invalidation is marked as \"started.\" This enhancement would provide several benefits, including:\n\n- **Improved Monitoring and Debugging:**  \n  - Administrators can easily identify which server is processing a specific invalidation.  \n  - Administrators can easily identify if an invalidation is still processed by looking for a process with the stored id\n  - Helps in diagnosing issues, such as stuck or long-running invalidations.  \n \n- **Easier Failure Recovery:**  \n  - In cases where an archiving server crashes, the invalidation record may still be marked as \"started.\"  \n  - By knowing which server was responsible, administrators can quickly determine whether an invalidation needs to be reset.\n\n### Use Case Example  \nIf a server crashes, invalidations assigned to it would remain in the \"started\" state indefinitely. With the hostname stored in the invalidation record, administrators can easily identify affected entries and take appropriate action to reset or reprocess them.\n\n### Implementation Considerations  \n- Introduce a new columns (e.g., `processing_host`, `process_id`) in the invalidation table.  \n- Ensure the hostname and the current process id is set when an invalidation is marked as \"started.\"  \n",
                    "state": "CLOSED",
                    "comments": {
                        "nodes": []
                    }
                }
            }
        }
    }
]