[
    {
        "title": "Deprecate non integer status codes in v4"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "This relates to #4212 and actually does two things. First, it uses `res.status` everywhere that the `this.statusCode = N` was previously used in `res`. That _shouldn't_ be a breaking change. It allows us to check the status codes in order to deprecate. The changes related to using `res.status` internally are copied from #4212.  \r\n\r\nWanted to open this as an option for inclusion in v4 to warn folks about breaking changes coming in v5 for their app. \r\n\r\nThe goal here is to only print a deprecation message for behavior which will throw under v5 but does not currently throw under v4. Specifically I want to avoid users seeing a deprecation about something throwing soon, and then immediately after also seeing the Node.js throw error for bad statuses. I can already see the Github issues if that were the case.\r\n\r\nThere are two dep messages, in order to hopefully help folks understand specifically what is happening and how the behavior will change. \r\n\r\nThe two cases where a dep message will print:\r\n* String values in range of what Node.js accepts as valid, i.e. `'200'` and `'304.5'`. All strings throw under v5\r\n* Non integer values in range of what Node.js accepts as valid i.e. `200.5`.\r\n"
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "LinusU"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": ""
    },
    {
        "author": {
            "login": "LinusU"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "> First, it uses res.status everywhere that the this.statusCode = N was previously used in res. That shouldn't be a breaking change\r\n\r\nIt is unfortunate, but I tried to do this kind of change a while back and it had to be reverted as it was a breaking change. This is because folks will override `res.status` to do things and they didn't expect them to be called in places where they were not before.\r\n\r\n> Wanted to open this as an option for inclusion in v4 to warn folks about breaking changes coming in v5 for their app.\r\n\r\nThis is a good idea!\r\n\r\n> The goal here is to only print a deprecation message for behavior which will throw under v5 but does not currently throw under v4. Specifically I want to avoid users seeing a deprecation about something throwing soon, and then immediately after also seeing the Node.js throw error for bad statuses. I can already see the Github issues if that were the case.\r\n\r\nYep, I agree on this point for sure \ud83d\udc4d If we already don't accept a value, then there isn't anything to actually deprecate, since it already doesn't work, if I'm understanding correctly."
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "@dougwilson Yes you understand the aim of when to print the message, only on behavior that goes from non-throwing at all to throwing in v5.\r\n\r\nThat's a shame about `res.status`, would have been such an easy way to print this dep for all statuses \ud83d\ude2d.\r\n\r\nIs there anything you suggest? Reverting those changes so only `res.status` includes this check is the simplest, but I really want to try and give a dep notice to anyone who will see throws in v5. I could make a `checkForDeprecatedStatus` function and utilize it everywhere a status code is set in response. What would you think about that?"
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "> What would you think about that?\r\n\r\nThat is fine, as the `depd` will still make the stack trace just fine as long as the helper is in the same file."
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "Hey @jonchurch before I try to get this merged tomorrow, just wanted to comment here: is this all ready from your pov and nothing outstanding you know of? Just checking in before landing it is all :+1:"
    },
    {
        "author": {
            "login": "jonchurch"
        },
        "body": "@dougwilson Yes this is ready from my pov"
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "Awesome, thank you @jonchurch ! I will add a test for the one missing line I see is being reported to fix the status failure on the PR \ud83d\udc4d "
    },
    {
        "author": {
            "login": "dougwilson"
        },
        "body": "P.S. as an updated, a few days ago I pushed up (as a separate commit) some _generalized_ tests around the full functionality of `res.status`, which would then by it's nature cover the new branches and lines added in this PR (and thus fulfilling the test coverage). Of course, it turns out that the io.js fork like has _different_ behavior in the edge cases that we are deprecating compared to all the node.js lines... I was thinking of how to best address it, as just not including those particular tests would still have some tests, except it wouldn't fully cover the new branches added here, haha.\r\n\r\nI don't think there is any reasonable way to \"feature sniff\" the difference after spending a lot of time looking into it -- but if someone knows, please correct me! I'm just going to add some code to skip those tests on the io.js builds, as it seems the only reasonable way. The fact that there is even this weird discrepancy kind of leads credence to the throwing of this behavior in Express directly in 5.0 as this is pushing towards, as the specific handling of these edge cases Express can at least make consistent when the Express API is being used."
    }
]