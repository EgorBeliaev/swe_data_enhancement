[
    {
        "title": "fix: be/fe/search, resolves #1549"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "This PR resovles #1549 where the autocomplete component only showed the items on the current page.\r\n\r\nA list of all monitors has been added to the query pipeline and is now used in the autocomplete component"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "**Actionable comments posted: 1**\n\n<details>\n<summary>\ud83e\uddf9 Nitpick comments (3)</summary><blockquote>\n\n<details>\n<summary>Client/src/Pages/PageSpeed/index.jsx (1)</summary><blockquote>\n\n`39-42`: **Add error handling for missing filteredMonitors**\n\nThe current implementation might be vulnerable to runtime errors if the API response structure changes. Consider adding a fallback value.\n\n```diff\n-if (res?.data?.data?.filteredMonitors) {\n+const { filteredMonitors = [], summary = {} } = res?.data?.data ?? {};\n+if (filteredMonitors.length || Object.keys(summary).length) {\n   setMonitors(res.data.data.filteredMonitors);\n   setSummary(res.data.data.summary);\n }\n```\n\n</blockquote></details>\n<details>\n<summary>Client/src/Pages/Uptime/Home/index.jsx (1)</summary><blockquote>\n\n`104-109`: **Optimize state updates and destructuring**\n\nThe current implementation makes multiple state updates and could benefit from more concise destructuring.\n\n```diff\n-const { monitors, filteredMonitors, summary } = res.data.data;\n-const mappedMonitors = filteredMonitors.map((monitor) =>\n+const { monitors = [], filteredMonitors = [], summary = {} } = res.data.data;\n+const mappedMonitors = (filteredMonitors ?? []).map((monitor) =>\n   getMonitorWithPercentage(monitor, theme)\n );\n-setMonitors(monitors);\n-setFilteredMonitors(mappedMonitors);\n-setMonitorsSummary(summary);\n+setMonitors(monitors);\n+setFilteredMonitors(mappedMonitors);\n+setMonitorsSummary(summary);\n```\n\n</blockquote></details>\n<details>\n<summary>Client/src/Pages/Uptime/Home/UptimeDataTable/index.jsx (1)</summary><blockquote>\n\n`304-304`: **Enhance PropTypes validation and documentation**\n\nThe PropTypes for filteredMonitors could be more specific, and the JSDoc needs updating to reflect the new prop.\n\n```diff\n-filteredMonitors: PropTypes.array,\n+filteredMonitors: PropTypes.arrayOf(\n+  PropTypes.shape({\n+    _id: PropTypes.string.isRequired,\n+    url: PropTypes.string.isRequired,\n+    title: PropTypes.string.isRequired,\n+    percentage: PropTypes.number,\n+    percentageColor: PropTypes.string,\n+    monitor: PropTypes.object.isRequired\n+  })\n+).isRequired,\n```\n\n</blockquote></details>\n\n</blockquote></details>\n\n<details>\n<summary>\ud83d\udcdc Review details</summary>\n\n**Configuration used: .coderabbit.yaml**\n**Review profile: CHILL**\n**Plan: Pro**\n\n<details>\n<summary>\ud83d\udce5 Commits</summary>\n\nReviewing files that changed from the base of the PR and between af8f3a0351a735030833f2cfe6726a66f1bdbdc8 and cd14659a59a9f2865e7713da91a953aa45a5c0f6.\n\n</details>\n\n<details>\n<summary>\ud83d\udcd2 Files selected for processing (6)</summary>\n\n* `Client/src/Components/Inputs/Search/index.jsx` (0 hunks)\n* `Client/src/Pages/Infrastructure/index.jsx` (1 hunks)\n* `Client/src/Pages/PageSpeed/index.jsx` (1 hunks)\n* `Client/src/Pages/Uptime/Home/UptimeDataTable/index.jsx` (3 hunks)\n* `Client/src/Pages/Uptime/Home/index.jsx` (3 hunks)\n* `Server/db/mongo/modules/monitorModule.js` (2 hunks)\n\n</details>\n\n<details>\n<summary>\ud83d\udca4 Files with no reviewable changes (1)</summary>\n\n* Client/src/Components/Inputs/Search/index.jsx\n\n</details>\n\n<details>\n<summary>\ud83d\udd07 Additional comments (4)</summary><blockquote>\n\n<details>\n<summary>Client/src/Pages/Infrastructure/index.jsx (1)</summary>\n\nLine range hint `1-1`: **Verify consistent usage of filteredMonitors across the codebase**\n\nLet's ensure we haven't missed any instances where we should be using filteredMonitors instead of monitors.\n\n<details>\n<summary>\u2705 Verification successful</summary>\n\n<!-- [monologue]\n[task verification_final]\nFinal analysis of monitor usage patterns\n[observations]\n- UptimeDataTable component properly uses both monitors and filteredMonitors\n- monitors is used for search functionality (SearchComponent)\n- filteredMonitors is used for actual data display (DataTable)\n- Component has proper PropTypes validation for both arrays\n[analysis]\n- The implementation shows a clear separation:\n  * Raw monitors data for search functionality\n  * Filtered data for display purposes\n- This pattern is intentional and correct\n- No inconsistencies found in the usage\n[actions]\n- Can conclude verification as the implementation is consistent and proper\n-->\n\n**Yo, the monitor usage is actually on point! \ud83c\udfaf** \n\nThe codebase is using monitors and filteredMonitors exactly as intended:\n- Raw monitors for search functionality\n- filteredMonitors for actual data display\n\n\n\n</details>\n\n<details>\n<summary>\ud83c\udfc1 Scripts executed</summary>\n\nThe following scripts were executed for the analysis:\n\nScript:\n\n```shell\n#!/bin/bash\n# Search for potential inconsistencies in monitors vs filteredMonitors usage\n\n# Look for direct monitors access in data.data\nrg -l \"data\\.data\\.monitors\" --type js --type jsx\n\n# Look for potential missed filteredMonitors usage\nrg -l \"setMonitors\\(.*?monitors\\)\" --type js --type jsx\n\n# Look for DataTable components using monitors directly\nast-grep --pattern 'DataTable $$$props={$$$} data={monitors} $$$'\n\n```\n\nLength of output: 233\n\n---\n\nScript:\n\n```shell\n#!/bin/bash\n# Search with correct file type flags and expanded patterns\n\n# Look for monitor-related state management\nrg -l \"const \\[monitors|filteredMonitors\\]\" --type js\n\n# Check DataTable usage patterns\nrg -l \"DataTable.*?monitors\" --type js\n\n# Look for useEffect dependencies with monitors\nrg -l \"useEffect\\(.*?monitors\" --type js\n\n# Check direct monitor access patterns\nrg -l \"\\.monitors\\b\" --type js\n\n```\n\nLength of output: 789\n\n---\n\nScript:\n\n```shell\n#!/bin/bash\n# Check the implementation details of UptimeDataTable\n\n# Look at the monitor usage in UptimeDataTable\nrg \"monitors\" Client/src/Pages/Uptime/Home/UptimeDataTable/index.jsx -A 2 -B 2\n\n# Check if filteredMonitors is used in the same file\nrg \"filteredMonitors\" Client/src/Pages/Uptime/Home/UptimeDataTable/index.jsx -A 2 -B 2\n\n```\n\nLength of output: 2112\n\n</details>\n\n</details>\n<details>\n<summary>Server/db/mongo/modules/monitorModule.js (3)</summary>\n\n`548-555`: **Yo, this sorting and projection is straight fire! \ud83d\udd25**\n\nThe implementation efficiently sorts monitors and projects only the necessary fields (_id and name) for the autocomplete component.\n\n---\n\n`669-683`: **Clean code alert! The normalization game is strong! \ud83d\udcaa**\n\nThe data normalization and null checks are well implemented, ensuring consistent data format for the frontend.\n\n---\n\nLine range hint `556-668`: **Mom's spaghetti moment: Performance optimization needed! \ud83c\udf5d**\n\nThe aggregation pipeline could benefit from the following optimizations:\n\n1. Add text indexes for better search performance:\n```javascript\ndb.monitors.createIndex({ name: \"text\", url: \"text\" })\n```\n\n2. Add compound indexes for the lookup stages:\n```javascript\ndb.checks.createIndex({ monitorId: 1, createdAt: -1 })\ndb.pagespeedchecks.createIndex({ monitorId: 1, createdAt: -1 })\ndb.hardwarechecks.createIndex({ monitorId: 1, createdAt: -1 })\n```\n\n</details>\n\n</blockquote></details>\n\n</details>\n\n<!-- This is an auto-generated comment by CodeRabbit for review status -->"
    },
    {
        "author": {
            "login": "llamapreview"
        },
        "body": "# Auto Pull Request Review from LlamaPReview\n\n## 1. Overview\n### 1.1 PR Summary\n- **Business value and requirements alignment**: This PR resolves issue #1549, where the autocomplete component only showed items on the current page. The change aligns with the business requirement to display all monitors in the autocomplete component, improving the search functionality's usability and effectiveness.\n- **Key components modified**: The PR modifies the autocomplete component and the data it receives, affecting the Uptime, Infrastructure, and PageSpeed pages.\n- **Impact assessment**: The changes in this PR have a significant system-wide impact, as they affect the search functionality across multiple pages. The autocomplete component now fetches and displays all monitors instead of just those on the current page, which could potentially impact performance and data consistency.\n- **System dependencies and integration impacts**: The PR modifies the search component and the data it receives, which could potentially affect other components or pages that rely on the same search functionality or data.\n\n## 2. Detailed Technical Analysis\n### 2.1 Code Logic Deep-Dive\n#### Core Logic Changes\n- **Client/src/Pages/Uptime/Home/index.jsx**\n  - **Submitted PR Code**:\n```javascript\n    const [monitors, setMonitors] = useState([]);\n    const [filteredMonitors, setFilteredMonitors] = useState([]);\n```\n  - **Analysis**:\n    - The PR introduces a new state variable `filteredMonitors` to store the list of monitors displayed in the autocomplete component. This change allows the component to display all monitors instead of just those on the current page.\n    - **Edge cases and error handling**: The new state variable is initialized as an empty array, which should cover most edge cases. However, it's essential to ensure that the component handles errors and edge cases gracefully, such as when the API call to fetch monitors fails or returns an unexpected response.\n    - **Cross-component impact**: This change affects the UptimeMonitors page and the autocomplete component. It's crucial to validate that the autocomplete component displays the correct data across all relevant pages and that it behaves as expected when interacting with other components or functionality.\n    - **Business logic considerations**: The change in data retrieval and processing could potentially introduce new bugs or instability if not handled correctly. It's essential to thoroughly test the autocomplete component's performance with varying numbers of monitors to ensure it remains responsive.\n  - **LlamaPReview Suggested Improvements**:\n```javascript\n    const [monitors, setMonitors] = useState([]);\n    const [filteredMonitors, setFilteredMonitors] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n```\n    - **Improvement rationale**: Add a new state variable `isLoading` to track whether the autocomplete component is currently fetching data. This change will allow the component to display a loading indicator while data is being fetched, improving the user experience.\n    - **Technical benefits**: The new state variable will help improve the user experience by providing visual feedback that data is being fetched.\n    - **Business value**: A better user experience can lead to increased user satisfaction and engagement with the application.\n    - **Risk assessment**: Low risk, as the change is straightforward and does not introduce any new dependencies or complexity.\n\n- **Server/db/mongo/modules/monitorModule.js**\n  - **Submitted PR Code**:\n```javascript\n    let { monitors, filteredMonitors, summary } = results[0];\n    filteredMonitors = filteredMonitors.map((monitor) => {\n      // ... (rest of the code)\n    });\n    return { monitors, filteredMonitors, summary };\n```\n  - **Analysis**:\n    - The PR introduces a new property `filteredMonitors` to the response object, which contains the list of monitors displayed in the autocomplete component. This change allows the component to display all monitors instead of just those on the current page.\n    - **Edge cases and error handling**: The new property is added to the response object, which should cover most edge cases. However, it's essential to ensure that the API call to fetch monitors handles errors and edge cases gracefully, such as when the database query fails or returns an unexpected response.\n    - **Cross-component impact**: This change affects the API endpoint that fetches monitors and the autocomplete component. It's crucial to validate that the autocomplete component displays the correct data across all relevant pages and that it behaves as expected when interacting with other components or functionality.\n    - **Business logic considerations**: The change in data retrieval and processing could potentially introduce new bugs or instability if not handled correctly. It's essential to thoroughly test the autocomplete component's performance with varying numbers of monitors to ensure it remains responsive.\n  - **LlamaPReview Suggested Improvements**:\n```javascript\n    let { monitors, filteredMonitors, summary } = results[0];\n    filteredMonitors = filteredMonitors.map((monitor) => {\n      // ... (rest of the code)\n    });\n    if (filteredMonitors.length > 0) {\n      return { monitors, filteredMonitors, summary };\n    } else {\n      throw new Error(\"No monitors found\");\n    }\n```\n    - **Improvement rationale**: Add a check to ensure that the `filteredMonitors` array is not empty before returning the response object. This change will help prevent potential errors or unexpected behavior when the autocomplete component tries to display an empty list of monitors.\n    - **Technical benefits**: The new check will help prevent potential errors or unexpected behavior when the autocomplete component tries to display an empty list of monitors.\n    - **Business value**: Preventing errors and unexpected behavior can lead to increased user satisfaction and engagement with the application.\n    - **Risk assessment**: Low risk, as the change is straightforward and does not introduce any new dependencies or complexity.\n\n### 2.2 Implementation Quality \n- **Code organization and structure**: The PR maintains a consistent code structure and organization, with clear separation of concerns and appropriate use of state and props.\n- **Design patterns usage**: The PR uses the React Hooks API for state management and effect handling, which is a modern and recommended approach.\n- **Error handling approach**: The PR includes basic error handling for API calls and edge cases, but more comprehensive error handling could be added to ensure robustness.\n- **Resource management**: The PR does not introduce any new resources that need to be managed, and it follows best practices for resource management in the React ecosystem.\n\n## 3. Critical Findings \n<details>\n<summary>Expand for details</summary>\n\n### 3.1 Potential Issues\n- **\ud83d\udd34 Critical Issues**\n  - **Performance**: Fetching all monitors instead of just those on the current page could lead to increased latency and resource usage, especially if the number of monitors is large. **Impact**: This change could potentially degrade the performance of the autocomplete component and the overall application. **Recommendation**: Thoroughly test the autocomplete component's performance with varying numbers of monitors to ensure it remains responsive.\n  - **Data consistency**: If the autocomplete component is used elsewhere in the system, it might now display inconsistent data (e.g., showing monitors that are not actually on the current page). **Impact**: This change could potentially lead to confusion or incorrect behavior when interacting with the autocomplete component. **Recommendation**: Validate that the autocomplete component displays the correct data across all relevant pages and that it behaves as expected when interacting with other components or functionality.\n- **\ud83d\udfe1 Warnings**\n  - **Error handling**: The PR includes basic error handling for API calls and edge cases, but more comprehensive error handling could be added to ensure robustness. **Potential risks**: Inadequate error handling could lead to unexpected behavior or crashes when encountering unexpected input or edge cases. **Suggested improvements**: Add more comprehensive error handling to ensure that the autocomplete component can handle unexpected input or edge cases gracefully.\n</details>\n\n## 4. Security Assessment \n<details>\n<summary>Expand for details</summary>\n\n- **Authentication/Authorization impacts**: The PR does not introduce any new authentication or authorization requirements, and it does not change the existing behavior of the autocomplete component.\n- **Data handling concerns**: The PR does not introduce any new data handling concerns, and it follows best practices for data handling in the React ecosystem.\n- **Input validation**: The PR does not introduce any new input validation requirements, and it follows best practices for input validation in the React ecosystem.\n- **Security best practices**: The PR follows best practices for security in the React ecosystem, such as using the `useEffect` hook to handle side effects and the `useState` hook to manage component state.\n- **Potential security risks**: The PR does not introduce any obvious security risks, but it's essential to validate that the new data retrieval process does not expose any sensitive information.\n- **Mitigation strategies**: To mitigate potential security risks, it's essential to thoroughly test the autocomplete component and the data it receives to ensure it behaves as expected and does not expose any sensitive information.\n- **Security testing requirements**: Conduct thorough security testing of the autocomplete component and the data it receives to ensure it behaves as expected and does not expose any sensitive information.\n\n</details>\n\n## 5. Testing Strategy \n<details>\n<summary>Expand for details</summary>\n\n### 5.1 Test Coverage\n- **Unit test analysis**: The PR does not include any unit tests, but it's essential to add unit tests to ensure that the autocomplete component behaves as expected in various scenarios.\n- **Integration test requirements**: Conduct integration tests to validate that the autocomplete component displays the correct data across all relevant pages and that it behaves as expected when interacting with other components or functionality.\n- **Edge cases coverage**: Thoroughly test the autocomplete component with various edge cases, such as empty monitor lists, single-character searches, and searches with special characters.\n\n### 5.2 Test Recommendations\n#### Suggested Test Cases\n```javascript\n// Example test case for the autocomplete component\nit('displays all monitors in the autocomplete component', () => {\n  // Arrange\n  const monitors = [\n    { id: 1, name: 'Monitor 1' },\n    { id: 2, name: 'Monitor 2' },\n    { id: 3, name: 'Monitor 3' },\n  ];\n  const { getByTestId } = render(\n    <AutocompleteComponent monitors={monitors} />\n  );\n\n  // Act\n  const input = getByTestId('autocomplete-input');\n  fireEvent.change(input, { target: { value: 'Monitor' } });\n\n  // Assert\n  expect(getByTestId('autocomplete-list')).toBeInTheDocument();\n  expect(getByTestId('autocomplete-list')).toHaveTextContent('Monitor 1');\n  expect(getByTestId('autocomplete-list')).toHaveTextContent('Monitor 2');\n  expect(getByTestId('autocomplete-list')).toHaveTextContent('Monitor 3');\n});\n```\n- **Coverage improvements**: Add unit tests to ensure that the autocomplete component behaves as expected in various scenarios. Additionally, add integration tests to validate that the autocomplete component displays the correct data across all relevant pages and that it behaves as expected when interacting with other components or functionality.\n- **Performance testing needs**: Thoroughly test the autocomplete component's performance with varying numbers of monitors to ensure it remains responsive.\n\n</details>\n\n## 6. Documentation & Maintenance \n<details>\n<summary>Expand for details</summary>\n\n- **Documentation updates needed**: Update the documentation for the autocomplete component to reflect the changes made in this PR, including the new data retrieval process and the new state variable `filteredMonitors`.\n- **Long-term maintenance considerations**: To ensure long-term maintainability, it's essential to keep the codebase up-to-date and follow best practices for code organization and structure. Additionally, it's crucial to keep the documentation up-to-date to ensure that other developers can understand and maintain the codebase.\n\n</details>\n\n## 7. Deployment & Operations \n<details>\n<summary>Expand for details</summary>\n\n- **Deployment impact and strategy**: The changes in this PR have a significant system-wide impact, as they affect the search functionality across multiple pages. It's essential to thoroughly test the autocomplete component and the data it receives before deploying the changes to production. Additionally, it's crucial to monitor the performance of the autocomplete component and the overall application after deployment to ensure that the changes have not introduced any unexpected behavior or performance degradation.\n- **Key operational considerations**: To ensure smooth operation, it's essential to keep the codebase up-to-date and follow best practices for code organization and structure. Additionally, it's crucial to keep the documentation up-to-date to ensure that other developers can understand and maintain the codebase.\n\n</details>\n\n## 8. Summary & Recommendations\n### 8.1 Key Action Items\n1. **Thoroughly test the autocomplete component's performance with varying numbers of monitors to ensure it remains responsive.**\n2. **Validate that the autocomplete component displays the correct data across all relevant pages and that it behaves as expected when interacting with other components or functionality.**\n3. **Add more comprehensive error handling to ensure that the autocomplete component can handle unexpected input or edge cases gracefully.**\n4. **Update the documentation for the autocomplete component to reflect the changes made in this PR.**\n5. **Add unit tests to ensure that the autocomplete component behaves as expected in various scenarios.**\n\n### 8.2 Future Considerations\n- **Technical evolution path**: As the application grows and evolves, it may be necessary to refactor the search functionality to improve performance and maintainability. Additionally, it may be necessary to integrate the search functionality with other components or pages to provide a more seamless user experience.\n- **Business capability evolution**: As the business evolves, it may be necessary to add new features or functionality to the search component to meet changing user needs. Additionally, it may be necessary to integrate the search functionality with other business capabilities to provide a more comprehensive and valuable user experience.\n- **System integration impacts**: As the system grows and evolves, it may be necessary to integrate the search functionality with other components or pages to provide a more seamless user experience. Additionally, it may be necessary to consider the performance and scalability implications of integrating the search functionality with other components or pages.\n\n---\n\ud83d\udca1 **Help Shape LlamaPReview**\nHow's this review format working for you? [Vote in our Github Discussion Polls](https://github.com/JetXu-LLM/LlamaPReview-site/discussions/9) to help us improve your review experience!"
    },
    {
        "author": {
            "login": "coderabbitai"
        },
        "body": "<!-- This is an auto-generated comment: summarize by coderabbit.ai -->\n\n\n<!-- walkthrough_start -->\n\n## Walkthrough\n\nThe pull request introduces changes across multiple components and server-side modules, focusing on enhancing data filtering and input handling. The modifications primarily involve adding a new `filteredMonitors` state and prop across client-side components like Search, Infrastructure, PageSpeed, and Uptime pages. The server-side `monitorModule.js` is updated to support this new filtering mechanism by modifying the MongoDB aggregation pipeline to return filtered monitor data.\n\n## Changes\n\n| File | Change Summary |\n|------|----------------|\n| `Client/src/Components/Inputs/Search/index.jsx` | Added `inputValue` prop, updated input handling and option rendering |\n| `Client/src/Pages/Infrastructure/index.jsx` | Modified `fetchMonitors` to use `filteredMonitors` instead of `monitors` |\n| `Client/src/Pages/PageSpeed/index.jsx` | Updated data fetching to retrieve `filteredMonitors` |\n| `Client/src/Pages/Uptime/Home/UptimeDataTable/index.jsx` | Added `filteredMonitors` prop for DataTable rendering |\n| `Client/src/Pages/Uptime/Home/index.jsx` | Introduced new `filteredMonitors` state variable |\n| `Server/db/mongo/modules/monitorModule.js` | Enhanced `getMonitorsByTeamId` with new aggregation stages for filtering |\n\n## Possibly related PRs\n\n- #1479: Enhances monitor creation process with similar input handling improvements\n- #1497: Aligns with data fetching and rendering logic enhancements\n- #1531: Complements query optimization efforts through aggregation pipeline improvements\n\n## Suggested reviewers\n\n- marcelluscaio\n- jennifer-gan\n\n<!-- walkthrough_end -->\n<!-- internal state start -->\n\n\n<!-- FAHghAtBAEAqAWBLAztF0CGA7TBXALgPYQDmAplmQE4b5kAm0AxoQLasX4Bc0ADldEIAjAFZkm+RADcyqIQE9mhetQxChifADoMiaFAB8wY+CjGAxOegAFAErQAyrnYYq84wjJ9cAGx/QqMgBHXFl8aEl8HwZoACIAM0QADx4hMgB6eIzkMlcmeAAaANlCHxlUcwBGAFYAFgBOWOgAdwxUZFwhVk06RgVoXByBDBF4Up9ERmxGdEnORESYtugsZzSBGuqABkEcAHFNAAlOrTh4L35EVldFYTEJaS9CeIikVDs0VCJMenpA5FQ2E+HS89EITGcnBiiBwkiYAGsyOEqnV6kVmkh8nxqPhdFgvoRXl4MARwWxeNE6EpWLxCJQsPgAOSoeK4LAPOkYCb4eSnYzWQJSRCEQY+eRFfDnPBEFg0yleWW0+nhVqoCbdXoRQn0FAUjDyGEkXZioloOisQFSXQ+NTRXamiFUQIMvgYcinBDof74KiIDk4JBYFSBRiSryDajQMhJXjURAUJhefpYQjhfiEIU6rBGjDU/hkc74x7QIVkZqCF5c/wYK2IG1CO2EXiSOnID2E/6lGSvWYA0ISqUfGE+5S4ROA6CsZQLP20YWwwlh6AhaiKXiIWMTSjozHwFaEcswpg+XAqCeK+XQCbIcLPTB+Sd0zSEKhts7oCjwbCJjguqsHr4pRJGVyUvRU6U4LUBkkCYAC8vElD8Y2mGJ6FoNokQHagyH6K50yFbMzRZNl/S5TRFGmKN8VwX1CMlWgBiGVAmCBDAmHHQEH0CaIrRdTQyAtIoaDDAR6JwERBnCSVCByEsUEQBsnlhKVHWdNM3TILRjAAMRfaBWSoEToBUXE62QLDvC44JQhvZggTSTB2NkHIpikqV4nGA9DWgABVWwABkeAAbXgfB8F4ZAuHSdISE0eATlldIG1CVoZAgetkHSfJxHha46HSXhfB8dJNi2ABdAAKULwsi6LYslBK2CSk8yxrMh0rUTLsoRPKMkKvwSuqbYAEotOAQwTEgGAKEYO9gOIchKGEmJZV/bg+AEO5xEkcpoH6FhgzUDRtF0fQICMUwYE9VB0FY0lSAoVRNVWzgeBocsOhcNw9sUA7VHUTQdD0CbJrMYAAGEJk4dJkCoJh0nB8kIIZTKAEksEK/BMocXI4fgdIYRUJItBEZAUmAWJKeASxoAAQVRh6ltoGJPuub673ybByGQDwpR1eIXmHKhR3HTAVjLDamyKAADGFMYANS5UJpYlRcpWlnG8ngaW82R/Adz9Pd0BTctAhCRAQ0wINJ0kvbiWgG9aJID11c1vGdfA5VmX0kiWywMieU+R9+fjUNCSPE8VB7VBZYxghFZanX014NBlK8aXadJC8kTID2keVIp/2abzNCg65/fIU05YIB3cSpKdAijAXtseMUXfTul0cx8Gv2zXPoF7+hogEdBcF4NDNW+FiH2lwfoi7gge65/vi8lU1KEPOPwitFrTlp35NHnKtxVNaXyHwAB5Zt5wAaTIeQdY4aSZkBX4Ym+QIfXjbslzZRAV2gIiRQHkBC5CxE2P2e0MKzRwJoGOkxpbt2gNLZ0wYr5+0fkiMYL97zIEJBgegEkbzv0JHPBCKkMItHOI3FMghr6tkwI3DybJ6BFB1MgPUBpCK5g4ACDSjkWBUCzCQNuZwLjCxTjyWMLI9JLg1rjfIecaR60YeGcezMw7FHiNECQ68JaxwVkrfuZtcAWwEpBSiS4IFH38P7fANEngvFntMaIS8+6IOgBfGQNA/BYVkpzPuqBPzfnIQqfOnBvbV3CHPbylFrF0mKEGOMhEfCEFikwMaFgrC0x8HQYS84CSmhUMeVwc4GF3mjLSQyMQ9KFQbH6KikR4w83GtAAAchLZOPwVD0B4AY+ORidYVUdoaIS1kzH0GGqnXWypkFu0UdM6WkN4wMhhnDBG4SUbpAXljdI8z8aE2jCTMm0tWkCibA7RAJA7EOIGOo3ofSyFuPIEM7Svt5xFHif7HwUyYQzMgvIrWOs/lLKhqs2G8NEbKOVGjLe2MFEHKScTUmSRTmU1iMYKAEBjDLOhhC9I1gNKwviDQR2Y57GBAJki455N0XU2yQzRaT0WbODZrcF4ATua8zCVHTlshU5SC7PbKcIcWKQL+UuCeuYYkpLSQ01egZT5ZHwPkAAsk+Igr4dasnZJAu8cj0YkraD6clDilFKk4KcBwsYmAzmnmKCyW5yEMRyFjU0N5mb6T0tLKcWBnxaoHssNIFB7x5IYEgl8VyYRcivDCMgBssSuuQb6/1yAdbfCXDvUIFZkH/CVDkAA/FoKVRaS1aBTZqtNRQvxyDICGwIepEyMAVWLDesbKCvBdUiGOFaXxpqgig2Q+ayClvQqO3ERbEi5OwvQdVfrK0eOuswXuldCazjoBOZASB4jhAlVKPBNFEw5qXL2gQUq7beQIHWRA8FWEO1wCQbmkg6JfjcmE6FkFjYHijDGbaJCWgvnhC0OKYsp1hsYB0IQSa7yntQMJahna055kvNebQYjA1Bi3EafV+7WU3Frp6wI1wYSoBIiuhgRQWAMhhKYuihIk2lyENA+0g6OGthHcWsdnGJ1aFZjcRdUoMyqAfGSiQtzKLaO/Th99FqGRFAjqebyv9ZJ3jGIQeEgJraoOSUaVJ6SxnEdgQyNi2hjBZLptO/JDCM183EDaKz+Ic2VJfJqWpnQJhMEaYfWQmL2n4Ms2UxzNnQR2dKX7VAFSYwuZqQIOpHmvOSH5c0bCk4CFeD3egfm8QtJ0vGmDXF4L1mEu5gSjS1q630CpUTGlXAKZUxpvTRmzKIN4fZhy8jLTPDLuXjdJD0titkHKwwc1KiYSCrKF4EVdrAuFMlehDDQ9vJ6flXFPd6dlVqo1X27V7y6RWptdNvwJ8lx5vYwtrDgba0hq5OBqC3UgMgOQWBmdc7U3AvxHQAhOafVba1Ugp1na0yCmFKKRQSaT2/faHXJMzGEmse4xgBH5bIc6xrXbetZBG0xBbbmAH9FwiupuuEJjLkWP/CR1KrQz2QyvYXS7dAfLU46jFfy3MW6Fi7qQ5Uv9EGTVicbtJ4obH8SgnQkUDoj6whKdfaaWm1hUb7lNkiGijnczU5iKhnNsGAi0AQ2JU0kbYrfNjTeJBfHvoeqpOgG8dZ/BJsGN5eHlPKfm4fgmvcRG8SkfZOR+gSDqDCwEDKnM1tUkEO8pbyb2ANJrVURtWQ1AZB3ooB0J2gOHSbPCFR59NkoI6v9JgXrdAkmMHoDRby56NuBmdmZ+lFm8kzagpK0LDmIsvGc9U2asX3MNPmIllpMAoWyfCGPCeDA+lUdsgNobjAAC80AKpTNnwYaAABvaAWhN/QAAL7veQQV/Aaz4YDcytP2MDAqtHJRWiqmeXsUQzBYf/FJ/0g+WvhwdIhw2AZDf5IDgAARdCWAW0DIQ5ZFMmWrOlBrRlR6ZaFrL6dlbrQJblYyBYQWBkYWMvUWXMNtZOGWdXWdFHVWU+X/K4MgQA3EYAxSEbAuKhQ2IOCMGYHALHY9KUaMFAZ9I0H7edbbSWFOR7ORKVHWWgL+IQAgRxU+CgjAKg6IGgy1d8ZicjYOGcflObXEB2EUOGLwAQqUXERSQuPwLyQiUub4dhThUDOsW7TXGDSHVOYhL7QXbOKkVDPeA+P2Y+CyaWAg2nXgrpW6N+TRJcLpKRflHeSYQLL1AQaWUggAoAkAlWKiVPaXBiUuL0cQNJP1W9QvK2RhGgXkdDdgm3Qibgt7Pg4oQzb3PlJgoiYyMgRIedecPaGuL9K8OkcgAQRgyIyQuI6g4yebbTJ2MaLrQFPGIfPWPOajVYVQjscQMgYsORWDYQ62aWFQIQEUdkBgfZJOCRcyK2UMfdBFH2XVGxcicor3VOXECQCNbxKsWuKgU1RuCTXbb5U4wXaI9/cgno2Q/5P8RufMIYJPdEEDII30NlJAyuNIaXLwSDG3exPVF4NQtnTQo9HQhCEAzJOvHJBvcLJvWzEpVvJzKLTvQQbvepTzPvZpXzVVLBZQS5a5WgW5UfDRCfVscIGIz4ygkA6AefCqdfFAfeboLAeTZAfyQgcPbMIoWDSU37RGNkfWDQwycXJEBwFzNhHCdYptfZJU/ALUz4fZUZB2JEVGZAfUiUw0/AY00U8UkgCUX0SXKgN/MfHfYaPfUFFZJ/IrIlV/D4z/b/b0v/Dk6QkAy/cA1FaAQAJMJkFJ82SPipCZCvAeS+TkABSYRhSrThFpSeDXwihvDIdMz/VZS5MFT5TXUVTFTai1iSJNiEVtTdSUBTSbTzTjSGztTLSxSMyIg7T2jHTPVt8XTFkD8j9SsSt2TfSP92S4zgywCaVTkYBzlJF5BYxulx8ntLCXtIceB5zYBFzZAdAnR9RXTBzn8vTRyv9xzYyvjQDqVr86sMU78cVH8hyX9Ty/TpyUVID6sGUms4D70ECc0+VOsVIOtpk5F2SfCA1PZP0sBxsf4pQhYRZ4TW0JZI8SxXBEAQD8C1yaciC6CsRZgGiyIsjlggQBJmwKJ9z8iutCjOCCMqQrRfQuSSiF0ziSMmjd1UATZzTgM14rE7To1/AmLeDK8kRspGASU2BZd5chdh0kE5cFd7UQL1Yq9wL+189IE0dg0cAptFhNEzw+cKV1ssKGAVLtVhZWBTRTsRc+jcQxlG0oT48hQRRUAdRAhdE2hkArksBY87xBK/toBEYRcVwGQHVT5rheBYxCCsz+16L0LFJFdUsIpBBvFVzLNjKUc7DPtZonFFi+RgB94dR3CjtPCJzLy5C+JSN7l/1XK5juwvCjLIrSjiK+CDDUli5jCpJCQr04JQl9J6rrK1c9IBjDRrjhM7d9LblHDM8WLHNhwTMigxC31Wj0kujg89jUCOEbQuEjRT1+rLt0ccACEiFJ5w52QXwqlPVEIOKJYCDaLNIUCA89JVrKIw9hFbq4MBI8QBgfdl5k9qI098cM8P0XRs8aNpjUsK50s3UXrYlrYHqBBI8glm4HgZA25a8GsAscTgtaj8TG9IsqlXNST4sKSfNWkHBodUKGK4qCEekWSPtoAgpcyortTtJ6qVKypuTGJBtocKogoyphoABuPfSCl0d4gMkygcx848kcn0s8q86rG83LLFYwHGKgbxdIegIQdIX1EgQgLW0caITKU9dVMvaIY5D8jFaA78jRX8sEjmDrFArLC4zAscflHIG4/wbS9dApXE9Oc+FSgAIXkFgFyFYFRnoB22OISQVTWzmUT2oHVs1u1t1pFV8FkD1qzONtTuOW1TrE0j8z0JCtLmponDbTdBIECBIAiI9UrixrnR1v/39uXFCG+gBrwUMkAkm1sMonTHuDdQ4XEDtV6rIB8HoFQAqmlgAH0EE1rpZ/YOBpYplUSUrwNxbXA8j6cbpAR8hv4YhcIRdDJYlkEAASNu/AHWJsJ6RojyQw5LPoCiY+nu7ac+2MBzbixVBY9K+INiJEVg4kR9CuiI9cTcONXK/Kw+TkIqiy5XKgHASPbyhE9yZ4hgyqzRBTKOORRmxq1JbMDy9BtgpIDgx3RYme13HWGKkAt8LrMK9cQiHyzB5i26HwPBH4I6/9DAcKk0FMKga4OCCIrG+7XYjy7oezKCMYQ8FUZYfMRy0HYyCCLo3ytNXKrrACqiXuI9JcNSk4wON4v2yHQO4OjAUO8OycGku++8VqkuDq4oClA63q1Kxgawl4bXEnGpJDfu21HS5gX0PJdCg2O0QzUyP1F9LwaiiPcax40POVTzR7T+X0MgAiEPRgdMDibyHaynNG7JDG72rG4pezXG9vIkgm7wMkhLSk1pN5SO2BzyhkxuJkh5KM1k6AXRqK/RkOsOjmtoeQdkBfM2JfFfdfTfU4XfRZFWtWjW9OnWvWk2tOo2/WzSUmHWSM6WaMpppEAOoOtpufQvLpzzCqXp7k/pjfLfYZiqWhRnP5XgUpJ+agXYhao40ibkRQT2/9NB7Qvq2DUaW8zFc6UGaaa2Oae6JlH8l6BkN6DAD6VrRQfaZQf6Y6IGM6C6KaakDUKe0eie4HMsBgCej1QyBF355gegSoWoAANmqHqAwDJYwHqHiAACYAAOUlsgAAdiZcqAAGY0J6hKgqXqg2WMAMBahqgKWmAth4hiW8XQAkXVpNBUXkB0X4n4xb6J6ZoEWgA -->\n\n<!-- internal state end -->\n<!-- finishing_touch_checkbox_start -->\n\n## Finishing Touches\n\n- [ ] <!-- {\"checkboxId\": \"7962f53c-55bc-4827-bfbf-6a18da830691\"} --> \ud83d\udcdd Generate Docstrings (Beta)\n\n<!-- finishing_touch_checkbox_end -->\n<!-- tips_start -->\n\n---\n\nThank you for using CodeRabbit. We offer it for free to the OSS community and would appreciate your support in helping us grow. If you find it useful, would you consider giving us a shout-out on your favorite social media?\n\n<details>\n<summary>\u2764\ufe0f Share</summary>\n\n- [X](https://twitter.com/intent/tweet?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A&url=https%3A//coderabbit.ai)\n- [Mastodon](https://mastodon.social/share?text=I%20just%20used%20%40coderabbitai%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20the%20proprietary%20code.%20Check%20it%20out%3A%20https%3A%2F%2Fcoderabbit.ai)\n- [Reddit](https://www.reddit.com/submit?title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&text=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code.%20Check%20it%20out%3A%20https%3A//coderabbit.ai)\n- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fcoderabbit.ai&mini=true&title=Great%20tool%20for%20code%20review%20-%20CodeRabbit&summary=I%20just%20used%20CodeRabbit%20for%20my%20code%20review%2C%20and%20it%27s%20fantastic%21%20It%27s%20free%20for%20OSS%20and%20offers%20a%20free%20trial%20for%20proprietary%20code)\n\n</details>\n\n<details>\n<summary>\ud83e\udea7 Tips</summary>\n\n### Chat\n\nThere are 3 ways to chat with [CodeRabbit](https://coderabbit.ai):\n\n> \u203c\ufe0f **IMPORTANT**\n> Auto-reply has been disabled for this repository in the CodeRabbit settings. The CodeRabbit bot will not respond to your replies unless it is explicitly tagged.\n- Files and specific lines of code (under the \"Files changed\" tab): Tag `@coderabbitai` in a new review comment at the desired location with your query. Examples:\n  - `@coderabbitai generate unit testing code for this file.`\n  -\t`@coderabbitai modularize this function.`\n- PR comments: Tag `@coderabbitai` in a new PR comment to ask questions about the PR branch. For the best results, please provide a very specific query, as very limited context is provided in this mode. Examples:\n  - `@coderabbitai gather interesting stats about this repository and render them as a table. Additionally, render a pie chart showing the language distribution in the codebase.`\n  - `@coderabbitai read src/utils.ts and generate unit testing code.`\n  - `@coderabbitai read the files in the src/scheduler package and generate a class diagram using mermaid and a README in the markdown format.`\n  - `@coderabbitai help me debug CodeRabbit configuration file.`\n\nNote: Be mindful of the bot's finite context window. It's strongly recommended to break down tasks such as reading entire modules into smaller chunks. For a focused discussion, use review comments to chat about specific files and their changes, instead of using the PR comments.\n\n### CodeRabbit Commands (Invoked using PR comments)\n\n- `@coderabbitai pause` to pause the reviews on a PR.\n- `@coderabbitai resume` to resume the paused reviews.\n- `@coderabbitai review` to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.\n- `@coderabbitai full review` to do a full review from scratch and review all the files again.\n- `@coderabbitai summary` to regenerate the summary of the PR.\n- `@coderabbitai generate docstrings` to [generate docstrings](https://docs.coderabbit.ai/finishing-touches/docstrings) for this PR. ([Beta](https://docs.coderabbit.ai/early-access#beta))\n- `@coderabbitai resolve` resolve all the CodeRabbit review comments.\n- `@coderabbitai configuration` to show the current CodeRabbit configuration for the repository.\n- `@coderabbitai help` to get help.\n\n### Other keywords and placeholders\n\n- Add `@coderabbitai ignore` anywhere in the PR description to prevent this PR from being reviewed.\n- Add `@coderabbitai summary` to generate the high-level summary at a specific location in the PR description.\n- Add `@coderabbitai` anywhere in the PR title to generate the title automatically.\n\n### Documentation and Community\n\n- Visit our [Documentation](https://docs.coderabbit.ai) for detailed information on how to use CodeRabbit.\n- Join our [Discord Community](http://discord.gg/coderabbit) to get help, request features, and share feedback.\n- Follow us on [X/Twitter](https://twitter.com/coderabbitai) for updates and announcements.\n\n</details>\n\n<!-- tips_end -->"
    }
]