The pull request introduces a refactoring across multiple files, consolidating various individual table implementations into a singular, reusable `DataTable` component. The key changes and instructions for integration are as follows:

1. **DataTable Component:**
   - Implement a new `DataTable` component requiring `headers` and `data` as props. Headers specify column information and rendering logic.
   - Utilize the `config` prop for styling, such as `rowSX`, and handle row clicking events via `onRowClick`.
   - Ensure `PropTypes` are set for `headers` and `data`, while making `onRowClick` optional in `propTypes`.

2. **File-Specific Adjustments:**
   - **`Client/src/Components/TabPanels/Account/TeamPanel.jsx`:** Replace `BasicTable` with `DataTable`, update state management, and ensure clear data transformation logic.
   - **`Client/src/Pages/Incidents/IncidentTable/index.jsx`:** Transition the existing table to `DataTable`, maintaining current pagination logic while checking if `onRowClick` is necessary.
   - **`Client/src/Pages/Infrastructure/index.jsx`:** Integrate the `DataTable`, focusing on enhanced column rendering and consistent data mapping.

3. **Removed Components:**
   - Delete the `BasicTable` component and its associated styles in `index.css`, as it is replaced by the new `DataTable` component.

4. **General Instructions:**
   - Review and remove commented code or clarify if necessary in places like `Client/src/Pages/Uptime/Home/UptimeTable/index.jsx`.
   - Implement any suggested modular approaches and refactor repetitive logic where applicable, such as extracting repeated logic into helper components or functions.
   - Address any theming aspects in the new `DataTable` to ensure compatibility with light/dark modes, particularly in skeleton components.

These updates aim to harmonize the table component usage across the application, providing a more consistent and maintainable codebase.