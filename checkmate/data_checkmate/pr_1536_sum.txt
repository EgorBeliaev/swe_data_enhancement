**Instruction for Changes:**

- Extract the `Search` functionality from `UptimeDataTable` into its own component named `SearchComponent`.
- In `SearchComponent`, manage search input state locally using `useState` and update it with a debounced value.
- Optimize performance by using `useCallback` for the `handleSearch` function and `useMemo` for filtered results based on the search input.
- Add logic to display an error message if no monitors match the search criteria.

**Implementation Changes:**

1. **Files & Components:**
   - `Client/src/Pages/Uptime/Home/UptimeDataTable/index.jsx`:
     - Create `SearchComponent` using `React.memo`.
     - Use `useState` for local search state.
     - Implement `handleSearch` with `useCallback`.
     - Add `useMemo` for filtering monitors based on search input.
     - Display "No monitors found" with `Typography` when applicable.
   - `Client/src/Pages/Uptime/Home/index.jsx`:
     - Update to use `debouncedSearch` prop.
     - Use `useCallback` for `triggerUpdate`.

2. **New Component Structure:**
   - `SearchComponent`: Render a search box with local search handling and filtered display.
   - Display an error message when search results are empty.

3. **Performance Optimizations:**
   - Avoid unnecessary re-renders by memoizing `handleSearch` and filtering logic in `SearchComponent`.

**Testing & Reviews:**
- Ensure unit tests for `SearchComponent` are written and cover edge cases, particularly for empty results.
- Perform integration tests to verify the new component integrates seamlessly with existing functionality.

**Performance Monitoring:**
- Closely monitor the `useTraceUpdate` in `UptimeDataTable` to handle potential performance issues.