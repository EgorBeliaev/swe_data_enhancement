### Instructions for the Programmer

1. **Refactoring Components:**
   - Refactor the Uptime home page for improved readability, reliability, and reusability.
   - Extract components to individual files and remove all ternary render expressions.

2. **Debouncing & Fetching Logic:**
   - Simplify the search debouncing mechanism.
   - Extract monitor fetching logic into a custom hook, `useMonitorFetch`, and use its internal loading state to manage skeletons.

3. **Loading State:**
   - Ensure consistent loading states across all components.

4. **Component Refactoring:**
   - Optimize component imports for better organization.
   - Implement React.memo for `MonitorDataTable` to avoid unnecessary re-renders.
   - Use `useCallback` to memoize functions like `handleSort`.

5. **Code Style and Readability Improvements:**
   - Update prop types definitions, e.g., change `percentage` from `string` to `number`.
   - Move inline styles to styled components or themes for maintainability.
   - Verify prop types usage and remove unused ones, such as `debouncedSearch` and `onSearchChange`.

6. **Debug & Cleanup:**
   - Remove or consolidate repetitive console logs and debugging statements.
   - Cleanup commented debugging notes to avoid confusion.
   - Consider adding boundary conditions where applicable, e.g., validating that `delay` is non-negative in `useDebounce`.

7. **Code Review Implementation:**
   - Address nitpick comments such as import organization and reusability improvements.

These changes aim to enhance code modularity, maintainability, and overall code quality while ensuring the user interface and experience are consistent and reliable.