diff --git a/multi_agents/agents/master.py b/multi_agents/agents/master.py
index ea50ed2fd..d62aad8e6 100644
--- a/multi_agents/agents/master.py
+++ b/multi_agents/agents/master.py
@@ -3,6 +3,7 @@
 from langgraph.graph import StateGraph, END
 from .utils.views import print_agent_output
 from ..memory.research import ResearchState
+from .utils.utils import sanitize_filename
 
 
 # Import agent classes
@@ -15,7 +16,7 @@
 class ChiefEditorAgent:
     def __init__(self, task: dict, websocket=None, stream_output=None, tone=None, headers=None):
         self.task_id = int(time.time()) # Currently time based, but can be any unique identifier
-        self.output_dir = f"./outputs/run_{self.task_id}_{task.get('query')[0:40]}"
+        self.output_dir = sanitize_filename(f"./outputs/run_{self.task_id}_{task.get('query')[0:40]}")
         self.task = task
         self.websocket = websocket
         self.stream_output = stream_output
diff --git a/multi_agents/agents/utils/utils.py b/multi_agents/agents/utils/utils.py
new file mode 100644
index 000000000..fb7bc00f0
--- /dev/null
+++ b/multi_agents/agents/utils/utils.py
@@ -0,0 +1,26 @@
+import re
+
+def sanitize_filename(filename: str) -> str:
+    """
+    Sanitize a given filename by replacing characters that are invalid 
+    in Windows file paths with an underscore ('_').
+
+    This function ensures that the filename is compatible with all 
+    operating systems by removing or replacing characters that are 
+    not allowed in Windows file paths. Specifically, it replaces 
+    the following characters: < > : " / \ | ? *
+
+    Parameters:
+    filename (str): The original filename to be sanitized.
+
+    Returns:
+    str: The sanitized filename with invalid characters replaced by an underscore.
+    
+    Examples:
+    >>> sanitize_filename('invalid:file/name*example?.txt')
+    'invalid_file_name_example_.txt'
+    
+    >>> sanitize_filename('valid_filename.txt')
+    'valid_filename.txt'
+    """
+    return re.sub(r'[<>:"/\\|?*]', '_', filename)
