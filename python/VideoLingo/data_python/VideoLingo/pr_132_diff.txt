diff --git a/core/pypi_autochoose/lang_en.py b/core/pypi_autochoose/lang_en.py
index 31c9699a..2c63fa52 100644
--- a/core/pypi_autochoose/lang_en.py
+++ b/core/pypi_autochoose/lang_en.py
@@ -1,11 +1,11 @@
 MIRRORS = {
-    "PyPI Official": "https://pypi.org/simple",
     "Alibaba Cloud": "https://mirrors.aliyun.com/pypi/simple",
     "Tsinghua University": "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple",
     "Huawei Cloud": "https://repo.huaweicloud.com/repository/pypi/simple",
     "Tencent Cloud": "https://mirrors.cloud.tencent.com/pypi/simple",
-    "上海交通大学": "https://mirror.sjtu.edu.cn/pypi/web/simple",
-    "163 Cloud": "https://mirrors.163.com/pypi/simple"
+    "S J T U": "https://mirror.sjtu.edu.cn/pypi/web/simple",
+    "163 Cloud": "https://mirrors.163.com/pypi/simple",
+    "PyPI Official": "https://pypi.org/simple"
 }
 
 MESSAGES = {
@@ -28,5 +28,9 @@
     "check_permissions": "Please check if you have sufficient permissions to modify pip configuration.",
     "all_unreachable": "All mirrors are unreachable. Please check your network connection.",
     "fast_mirror_found": "Find the image with a response time of less than 500 ms and skip the test.",
-    "no_fast_mirror": "No images with a response time of less than 500 ms were found, and all images have been tested."
+    "no_fast_mirror": "No images with a response time of less than 500 ms were found, and all images have been tested.",
+    "testing_official_mirror": "Testing PyPI official mirror...",
+    "official_mirror_fast": "PyPI official mirror is fast ({:.2f} ms). Using the official mirror.",
+    "official_mirror_acceptable": "PyPI official mirror speed is acceptable ({:.2f} ms). You may continue using it.",
+    "official_mirror_slow": "PyPI official mirror is slow ({:.2f} ms). Testing other mirrors..."
 }
diff --git a/core/pypi_autochoose/lang_zh.py b/core/pypi_autochoose/lang_zh.py
index ef07c2d8..4445b33f 100644
--- a/core/pypi_autochoose/lang_zh.py
+++ b/core/pypi_autochoose/lang_zh.py
@@ -1,11 +1,11 @@
 MIRRORS = {
-    "PyPI官方": "https://pypi.org/simple",
     "阿里云": "http://mirrors.aliyun.com/pypi/simple",
     "清华大学": "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple",
     "华为云": "https://repo.huaweicloud.com/repository/pypi/simple",
     "腾讯云": "https://mirrors.cloud.tencent.com/pypi/simple",
     "上海交通大学": "https://mirror.sjtu.edu.cn/pypi/web/simple",
-    "网易": "https://mirrors.163.com/pypi/simple"
+    "网易": "https://mirrors.163.com/pypi/simple",
+    "PyPI官方": "https://pypi.org/simple"
 }
 
 MESSAGES = {
@@ -28,5 +28,9 @@
     "check_permissions": "请检查是否有足够的权限来修改pip配置。",
     "all_unreachable": "所有镜像源都无法连接，请检查网络连接。",
     "fast_mirror_found": "找到响应时间小于500ms的镜像，跳过测试。",
-    "no_fast_mirror": "未找到响应时间小于500ms的镜像，已测试所有镜像。"    
+    "no_fast_mirror": "未找到响应时间小于500ms的镜像，已测试所有镜像。",
+    "testing_official_mirror": "测试PyPI官方源速度...请耐心等待",
+    "official_mirror_fast": "PyPI官方镜像速度很快 ({:.2f} ms)。使用官方镜像。",
+    "official_mirror_acceptable": "PyPI官方镜像速度可以接受 ({:.2f} ms)。您可以继续使用它。",
+    "official_mirror_slow": "PyPI官方镜像速度较慢 ({:.2f} ms)。测试其他镜像..."
 }
diff --git a/core/pypi_autochoose/pypi_autochoose.py b/core/pypi_autochoose/pypi_autochoose.py
index e9bd4bc9..ee5733e0 100644
--- a/core/pypi_autochoose/pypi_autochoose.py
+++ b/core/pypi_autochoose/pypi_autochoose.py
@@ -3,10 +3,10 @@
 import requests
 import os
 import locale
+import concurrent.futures
 from rich.console import Console
 from rich.table import Table
 from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn
-from rich.panel import Panel
 
 # 根据系统语言选择语言文件
 system_language = locale.getdefaultlocale()[0]
@@ -17,10 +17,13 @@
 
 console = Console()
 
+FAST_THRESHOLD = 1000  # ms
+SLOW_THRESHOLD = 1500  # ms
+
 def get_optimal_thread_count():
     try:
         cpu_count = os.cpu_count()
-        return max(cpu_count // 2, 1)
+        return max(cpu_count - 1, 1)
     except:
         return 2
 
@@ -53,40 +56,50 @@ def get_current_pip_mirror():
         return None
 
 def main():
-    console.print(Panel.fit(MESSAGES["checking_speeds"], style="bold magenta"))
-
     console.print(f"[yellow]{MESSAGES['starting_new_test']}[/yellow]")
+    
+    # 首先测试 PyPI 官方源
+    pypi_name = next(name for name, url in MIRRORS.items() if "pypi.org" in url)
+    pypi_url = MIRRORS[pypi_name]
+    console.print(f"[cyan]{MESSAGES['testing_official_mirror']}[/cyan]")
+    
     optimal_thread_count = get_optimal_thread_count()
     console.print(MESSAGES["using_threads"].format(optimal_thread_count))
-
+    
+    _, pypi_speed = test_mirror_speed(pypi_name, pypi_url)
+    
+    if pypi_speed < FAST_THRESHOLD:
+        console.print(MESSAGES["official_mirror_fast"].format(pypi_speed))
+        set_pip_mirror(pypi_url, "pypi.org")
+        return
+    elif pypi_speed < SLOW_THRESHOLD:
+        console.print(MESSAGES["official_mirror_acceptable"].format(pypi_speed))
+        return
+
+    console.print(MESSAGES["official_mirror_slow"].format(pypi_speed))
+
+    # 测试其他镜像
     speeds = {}
-    found_fast_mirror = False
-
     with Progress(
         SpinnerColumn(),
         TextColumn("[progress.description]{task.description}"),
         BarColumn(),
         TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
     ) as progress:
-        task = progress.add_task(f"[cyan]{MESSAGES['testing_mirrors']}", total=len(MIRRORS))
+        task = progress.add_task(f"[cyan]{MESSAGES['testing_mirrors']}", total=len(MIRRORS) - 1)  # -1 because we already tested PyPI
         
-        for name, url in MIRRORS.items():
-            name, speed = test_mirror_speed(name, url)
-            if speed != float('inf'):
-                speeds[name] = speed
-                progress.update(task, advance=1)
-                
-                if speed < 500:
-                    found_fast_mirror = True
-                    break
-            
-            if progress.finished:
-                break
-
-    if found_fast_mirror:
-        console.print(f"[green]{MESSAGES['fast_mirror_found']}[/green]")
-    else:
-        console.print(f"[yellow]{MESSAGES['no_fast_mirror']}[/yellow]")
+        with concurrent.futures.ThreadPoolExecutor(max_workers=optimal_thread_count) as executor:
+            future_to_mirror = {executor.submit(test_mirror_speed, name, url): name for name, url in MIRRORS.items() if name != pypi_name}
+            for future in concurrent.futures.as_completed(future_to_mirror):
+                name = future_to_mirror[future]
+                try:
+                    name, speed = future.result()
+                    if speed != float('inf'):
+                        speeds[name] = speed
+                except Exception as exc:
+                    print(f'{name} generated an exception: {exc}')
+                finally:
+                    progress.update(task, advance=1)
 
     table = Table(title=MESSAGES["results_title"])
     table.add_column(MESSAGES["mirror_column"], style="cyan")
diff --git a/install.py b/install.py
index 401b770c..d2366d6c 100644
--- a/install.py
+++ b/install.py
@@ -5,6 +5,8 @@
 import zipfile
 import shutil
 import locale
+import requests
+import time
 
 sys.path.append(os.path.dirname(os.path.abspath(__file__)))
 
@@ -41,14 +43,9 @@ def main():
 
     console.print(Panel.fit(strings['starting_installation'], style="bold magenta"))
 
-    # Ask if user is in China
-    in_china = console.input(strings['ask_in_china'])
-
-    if in_china == "1":
-        console.print(Panel(strings['configuring_mirror'], style="bold yellow"))
-        choose_mirror()
-    else:
-        console.print(Panel(strings['skipping_mirror'], style="bold blue"))
+    # 直接执行镜像选择
+    console.print(Panel(strings['configuring_mirror'], style="bold yellow"))
+    choose_mirror()
 
     def init_language():
         from core.config_utils import load_key, update_key
@@ -64,41 +61,91 @@ def init_language():
 
     def install_requirements():
         if os.path.exists("requirements.txt"):
-            print("Converting requirements.txt to GBK encoding...")
+            print(strings['converting_requirements'])
             try:
                 with open("requirements.txt", "r", encoding="utf-8") as file:
                     content = file.read()
                 with open("requirements.txt", "w", encoding="gbk") as file:
                     file.write(content)
-                print("Conversion completed.")
+                print(strings['conversion_completed'])
             except UnicodeDecodeError:
-                print("requirements.txt is already in GBK encoding, no conversion needed.")
+                print(strings['already_gbk'])
             except Exception as e:
-                print(f"Error occurred during encoding conversion: {str(e)}")
+                print(f"{strings['conversion_error']}: {str(e)}")
             
             print(strings['installing_dependencies'])
             subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
         else:
             print(strings['requirements_not_found'])
 
-    def dowanload_uvr_model():
+    def test_mirror_speed(name, base_url):
+        test_url = f"{base_url}lj1995/VoiceConversionWebUI/resolve/main/README.md"
+        max_retries = 3
+        timeout = 10
+
+        for attempt in range(max_retries):
+            try:
+                start_time = time.time()
+                response = requests.head(test_url, timeout=timeout)
+                end_time = time.time()
+                if response.status_code == 200:
+                    speed = (end_time - start_time) * 1000 
+                    return name, speed
+            except requests.RequestException:
+                if attempt == max_retries - 1:
+                    return name, float('inf')
+                time.sleep(1)  # Wait 1 second before retrying
+
+        return name, float('inf')
+
+    def download_uvr_model():
         models = {
-            "HP2_all_vocals.pth": "https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/e992cb1bc5d777fcddce20735a899219b1d46aba/uvr5_weights/HP2_all_vocals.pth",
-            "VR-DeEchoAggressive.pth": "https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/uvr5_weights/VR-DeEchoAggressive.pth"
+            "HP2_all_vocals.pth": "lj1995/VoiceConversionWebUI/resolve/e992cb1bc5d777fcddce20735a899219b1d46aba/uvr5_weights/HP2_all_vocals.pth",
+            "VR-DeEchoAggressive.pth": "lj1995/VoiceConversionWebUI/resolve/main/uvr5_weights/VR-DeEchoAggressive.pth"
         }
+        
+        mirrors = {
+            "Official": "https://huggingface.co/",
+            "Mirror": "https://hf-mirror.com/"
+        }
+
         os.makedirs("_model_cache/uvr5_weights", exist_ok=True)
-        import requests
-        for model_name, url in models.items():
-            model_path = f"_model_cache/uvr5_weights/{model_name}"
-            if not os.path.exists(model_path):
+
+        for model_name, model_path in models.items():
+            model_file_path = f"_model_cache/uvr5_weights/{model_name}"
+            if not os.path.exists(model_file_path):
                 print(f"{strings['downloading_uvr_model']}{model_name}...")
-                response = requests.get(url, stream=True)
-                total_size = int(response.headers.get('content-length', 0))
-                with open(model_path, "wb") as file:
-                    for data in response.iter_content(chunk_size=4096):
-                        size = file.write(data)
-                        print(f"Downloaded: {(size/total_size)*100:.2f}%", end="\r")
-                print(f"\n{model_name} {strings['model_downloaded']}")
+                
+                # Test speed for each mirror
+                speeds = []
+                for mirror_name, mirror_url in mirrors.items():
+                    name, speed = test_mirror_speed(mirror_name, mirror_url)
+                    speeds.append((name, speed))
+                    print(f"{mirror_name} {strings['mirror_speed']} {speed:.2f} ms")
+
+                # Choose the fastest mirror
+                fastest_mirror = min(speeds, key=lambda x: x[1])[0]
+                print(f"{strings['choosing_mirror']} {fastest_mirror}")
+
+                # Download from the fastest mirror
+                url = mirrors[fastest_mirror] + model_path
+                try:
+                    response = requests.get(url, stream=True)
+                    response.raise_for_status()
+                    total_size = int(response.headers.get('content-length', 0))
+                    
+                    with open(model_file_path, "wb") as file:
+                        downloaded_size = 0
+                        for data in response.iter_content(chunk_size=8192):
+                            size = file.write(data)
+                            downloaded_size += size
+                            if total_size:
+                                percent = (downloaded_size / total_size) * 100
+                                print(f"{strings['download_progress']} {percent:.2f}%", end="\r")
+                    
+                    print(f"\n{model_name} {strings['model_downloaded']}")
+                except requests.RequestException as e:
+                    print(f"{strings['download_failed']} {model_name}: {str(e)}")
             else:
                 print(f"{model_name} {strings['model_exists']}")
 
@@ -121,8 +168,6 @@ def download_and_extract_ffmpeg():
             return
 
         print(strings['downloading_ffmpeg'])
-        import requests
-
         response = requests.get(url)
         if response.status_code == 200:
             filename = "ffmpeg.zip" if system in ["Windows", "Darwin"] else "ffmpeg.tar.xz"
@@ -221,7 +266,7 @@ def install_noto_font():
     init_language()
     install_noto_font()
     install_requirements()
-    dowanload_uvr_model()
+    download_uvr_model()  
     download_and_extract_ffmpeg()
     
     console.print(Panel.fit(strings['installation_completed'], style="bold green"))
diff --git a/language/lang_en.yml b/language/lang_en.yml
index 04324fcd..8f57a565 100644
--- a/language/lang_en.yml
+++ b/language/lang_en.yml
@@ -1,6 +1,4 @@
-ask_in_china: "Are you in China? (1 for Yes, 0 for No): "
 configuring_mirror: "Configuring PyPI mirror for China..."
-skipping_mirror: "Skipping PyPI mirror configuration."
 starting_installation: "Starting installation..."
 display_language_set: "Display language set to system language: "
 installing_dependencies: "Installing dependencies from requirements.txt..."
@@ -36,3 +34,12 @@ invalid_choice: "Invalid choice. Defaulting to CPU version."
 invalid_choice_retry: "Invalid choice. Please enter 1 or 2. Try again."
 installation_completed: "All installation steps are completed!"
 start_streamlit_command: "Please use the following command to start Streamlit:"
+mirror_speed: "mirror speed: "
+choosing_mirror: "Choosing fastest mirror for download: "
+converting_requirements: "Converting requirements.txt to GBK encoding..."
+conversion_completed: "Conversion completed."
+already_gbk: "requirements.txt is already in GBK encoding, no conversion needed."
+conversion_error: "Error occurred during encoding conversion"
+download_progress: "Downloaded:"
+error_occurred: "An error occurred"
+check_error_and_retry: "Please check the error message above and try again."
diff --git a/language/lang_zh.yml b/language/lang_zh.yml
index bc55852c..fd54dbe6 100644
--- a/language/lang_zh.yml
+++ b/language/lang_zh.yml
@@ -1,6 +1,4 @@
-ask_in_china: "您是否在中国？(1 表示是，0 表示否): "
 configuring_mirror: "正在为中国用户配置 PyPI 镜像..."
-skipping_mirror: "跳过 PyPI 镜像配置。"
 starting_installation: "开始安装..."
 display_language_set: "显示语言设置为系统语言: "
 installing_dependencies: "正在从 requirements.txt 安装依赖..."
@@ -36,3 +34,13 @@ invalid_choice: "无效选择。默认使用 CPU 版本。"
 invalid_choice_retry: "无效选择。请输入 1 或 2。请重试。"
 installation_completed: "所有安装步骤已完成！"
 start_streamlit_command: "请使用以下命令启动 Streamlit："
+mirror_speed: "镜像速度："
+choosing_mirror: "选择最快的镜像进行下载："
+converting_requirements: "正在将 requirements.txt 转换为 GBK 编码..."
+conversion_completed: "转换完成。"
+already_gbk: "requirements.txt 已经是 GBK 编码，无需转换。"
+conversion_error: "编码转换过程中发生错误"
+download_failed: "下载失败"
+download_progress: "已下载："
+error_occurred: "发生错误"
+check_error_and_retry: "请检查上述错误信息并重试。"
