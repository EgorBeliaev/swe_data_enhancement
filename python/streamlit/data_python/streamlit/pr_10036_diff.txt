diff --git a/e2e_playwright/st_dataframe_dimensions.py b/e2e_playwright/st_dataframe_dimensions.py
index c1fdb2f08b50..7a78f2ffbc07 100644
--- a/e2e_playwright/st_dataframe_dimensions.py
+++ b/e2e_playwright/st_dataframe_dimensions.py
@@ -38,3 +38,8 @@
 
 one_col_df = pd.DataFrame(np.random.randn(100, 1))
 st.dataframe(one_col_df, use_container_width=True)
+
+if st.button("Resize dataframe"):
+    st.dataframe(small_df, width=400, height=200)
+else:
+    st.dataframe(small_df, width=200, height=100)
diff --git a/e2e_playwright/st_dataframe_dimensions_test.py b/e2e_playwright/st_dataframe_dimensions_test.py
index 7dd980477947..b895a95feff9 100644
--- a/e2e_playwright/st_dataframe_dimensions_test.py
+++ b/e2e_playwright/st_dataframe_dimensions_test.py
@@ -14,6 +14,8 @@
 
 from playwright.sync_api import Page, expect
 
+from e2e_playwright.shared.app_utils import click_button
+
 
 def test_data_frame_with_different_sizes(app: Page):
     """Test that st.dataframe should show different sizes as expected."""
@@ -29,11 +31,24 @@ def test_data_frame_with_different_sizes(app: Page):
         {"width": "704px", "height": "400px"},
         {"width": "200px", "height": "400px"},
         {"width": "704px", "height": "400px"},
+        {"width": "200px", "height": "100px"},
     ]
 
-    dataframe_elements = app.locator(".stDataFrame")
-    expect(dataframe_elements).to_have_count(11)
+    dataframe_elements = app.get_by_test_id("stDataFrame")
+    expect(dataframe_elements).to_have_count(12)
 
     for i, element in enumerate(dataframe_elements.all()):
         expect(element).to_have_css("width", expected[i]["width"])
         expect(element).to_have_css("height", expected[i]["height"])
+
+
+def test_data_frame_resizing(app: Page):
+    """Test that st.dataframe should resize as expected."""
+
+    dataframe_element = app.get_by_test_id("stDataFrame").nth(11)
+    expect(dataframe_element).to_have_css("width", "200px")
+    expect(dataframe_element).to_have_css("height", "100px")
+
+    click_button(app, "Resize dataframe")
+    expect(dataframe_element).to_have_css("width", "400px")
+    expect(dataframe_element).to_have_css("height", "200px")
diff --git a/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts b/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts
index 90b7b811e1f9..c2923fe316c0 100644
--- a/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts
+++ b/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts
@@ -156,36 +156,29 @@ function useTableSizer(
     // This prevents weird table resizing behavior if the container width
     // changes and the table uses the full container width.
     if (element.useContainerWidth && resizableSize.width === "100%") {
-      setResizableSize({
+      setResizableSize(prev => ({
+        ...prev,
         width: availableWidth,
-        height: resizableSize.height,
-      })
+      }))
     }
   }, [availableWidth])
 
-  // Reset the height if the number of rows changes (e.g. via add_rows):
-  React.useLayoutEffect(() => {
-    setResizableSize({
-      width: resizableSize.width,
-      height: initialHeight,
-    })
-  }, [numRows])
-
   // Reset the width if the element width parameter was changed:
   React.useLayoutEffect(() => {
-    setResizableSize({
+    setResizableSize(prev => ({
+      ...prev,
       width: initialWidth || "100%",
-      height: resizableSize.height,
-    })
+    }))
   }, [initialWidth])
 
-  // Reset the height if the element height parameter was changed:
+  // Reset the height if the element height parameter was changed or
+  // if the number of rows changes (e.g. via add_rows):
   React.useLayoutEffect(() => {
-    setResizableSize({
-      width: resizableSize.width,
+    setResizableSize(prev => ({
+      ...prev,
       height: initialHeight,
-    })
-  }, [initialHeight])
+    }))
+  }, [initialHeight, numRows])
 
   // Change sizing if the fullscreen mode is activated or deactivated:
   React.useLayoutEffect(() => {
