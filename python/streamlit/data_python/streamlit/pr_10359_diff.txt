diff --git a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-chromium].png b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-chromium].png
index 808a7c2236e9..14ae85326dfc 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-chromium].png and b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-chromium].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-firefox].png b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-firefox].png
index 6ca331061111..37089fe5f6a4 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-firefox].png and b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-firefox].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-webkit].png b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-webkit].png
index 4cb595debacc..7be531ad1039 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-webkit].png and b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[dark_theme-webkit].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-chromium].png b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-chromium].png
index 6b2a37b7a403..4eddebb2e628 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-chromium].png and b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-chromium].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-firefox].png b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-firefox].png
index 3f2ad2477062..4b5c1ce2f786 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-firefox].png and b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-firefox].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-webkit].png b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-webkit].png
index 1c7f96834d06..cf0dd28b624d 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-webkit].png and b/e2e_playwright/__snapshots__/linux/st_dataframe_interactions_test/st_dataframe-column_menu[light_theme-webkit].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[chromium].png b/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[chromium].png
index 59e890c47491..2f88e977dfd6 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[chromium].png and b/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[chromium].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[firefox].png b/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[firefox].png
index 07cb3e1c90af..1e02d534b43c 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[firefox].png and b/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[firefox].png differ
diff --git a/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[webkit].png b/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[webkit].png
index 50b98b96e2d5..1d6bf9a7d387 100644
Binary files a/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[webkit].png and b/e2e_playwright/__snapshots__/linux/st_dialog_test/st_dialog-shows_full_dataframe_toolbar[webkit].png differ
diff --git a/e2e_playwright/shared/app_utils.py b/e2e_playwright/shared/app_utils.py
index 78dcb8cfe6ac..e034fae7f040 100644
--- a/e2e_playwright/shared/app_utils.py
+++ b/e2e_playwright/shared/app_utils.py
@@ -740,3 +740,41 @@ def expect_font(page: Page, font_family: str, timeout: int = 20000) -> None:
     }
     """
     page.wait_for_function(check_script, arg=font_family, timeout=timeout)
+
+
+def is_child_bounding_box_inside_parent(
+    child_locator: Locator, parent_locator: Locator
+) -> bool:
+    """
+    Checks if the bounding box of child_locator is fully within
+    the bounding box of parent_locator.
+
+    Parameters
+    ----------
+    child_locator : Locator
+        The locator of the child element.
+
+    parent_locator : Locator
+        The locator of the parent element.
+
+    Returns
+    -------
+    bool
+        True if the child's bounding box lies completely within
+        the parent's bounding box; otherwise, False.
+    """
+    parent_box = parent_locator.bounding_box()
+    child_box = child_locator.bounding_box()
+
+    # bounding_box() can return None if the element is invisible or not rendered.
+    if parent_box is None or child_box is None:
+        return False
+
+    return (
+        child_box["x"] >= parent_box["x"]
+        and child_box["y"] >= parent_box["y"]
+        and (child_box["x"] + child_box["width"])
+        <= (parent_box["x"] + parent_box["width"])
+        and (child_box["y"] + child_box["height"])
+        <= (parent_box["y"] + parent_box["height"])
+    )
diff --git a/e2e_playwright/st_dialog.py b/e2e_playwright/st_dialog.py
index 26941be3cf72..09c1992bec91 100644
--- a/e2e_playwright/st_dialog.py
+++ b/e2e_playwright/st_dialog.py
@@ -178,7 +178,15 @@ def dialog_with_chart():
 
 @st.dialog("Dialog with dataframe")
 def dialog_with_dataframe():
-    st.dataframe(pd.DataFrame(data, columns=["a", "b", "c"]), use_container_width=True)
+    st.dataframe(
+        pd.DataFrame(data, columns=["a", "b", "c"]),
+        column_config={
+            "a": st.column_config.Column(width="small"),
+            "b": st.column_config.Column(width="small"),
+            "c": st.column_config.Column(width="small"),
+        },
+        hide_index=True,
+    )
 
 
 if st.button("Open Dialog with dataframe"):
diff --git a/e2e_playwright/st_dialog_test.py b/e2e_playwright/st_dialog_test.py
index 3b4586b4ba9d..cdc31d70a9a5 100644
--- a/e2e_playwright/st_dialog_test.py
+++ b/e2e_playwright/st_dialog_test.py
@@ -28,7 +28,9 @@
     expect_no_exception,
     get_button,
     get_markdown,
+    is_child_bounding_box_inside_parent,
 )
+from e2e_playwright.shared.dataframe_utils import open_column_menu
 
 modal_test_id = "stDialog"
 
@@ -422,6 +424,21 @@ def test_dialog_with_dataframe_shows_toolbar(
     assert_snapshot(df_toolbar, name="st_dialog-shows_full_dataframe_toolbar")
 
 
+def test_dialog_with_dataframe_shows_column_menu_correctly(app: Page):
+    """Check that the dataframe column menu is fully visible and positioned correctly."""
+    click_button(app, "Open Dialog with dataframe")
+    dialog = app.get_by_role("dialog")
+    expect(dialog).to_be_visible()
+    df_element = dialog.get_by_test_id("stDataFrame")
+    expect(df_element).to_be_visible()
+    open_column_menu(df_element, 1, "small")
+    # Check that the column menu is within the bounds of the dataframe
+    column_menu = app.get_by_test_id("stDataFrameColumnMenu")
+    expect(column_menu).to_be_visible()
+    expect(column_menu).to_be_in_viewport()
+    assert is_child_bounding_box_inside_parent(column_menu, df_element)
+
+
 def test_dialog_with_rerun_closes_even_if_button_is_clicked_multiple_times(app: Page):
     """Check that the dialog closes even if the button that calls st.rerun is clicked
     multiple times in fast succession. We want to test this since the button click and
diff --git a/frontend/lib/src/components/widgets/DataFrame/ColumnMenu.tsx b/frontend/lib/src/components/widgets/DataFrame/ColumnMenu.tsx
index e8528c4a92ae..b41cf6e6514f 100644
--- a/frontend/lib/src/components/widgets/DataFrame/ColumnMenu.tsx
+++ b/frontend/lib/src/components/widgets/DataFrame/ColumnMenu.tsx
@@ -19,7 +19,11 @@ import React, { memo, ReactElement, useEffect } from "react"
 import { useTheme } from "@emotion/react"
 import { ACCESSIBILITY_TYPE, PLACEMENT, Popover } from "baseui/popover"
 
-import { EmotionTheme, hasLightBackgroundColor } from "~lib/theme"
+import {
+  convertRemToPx,
+  EmotionTheme,
+  hasLightBackgroundColor,
+} from "~lib/theme"
 import { DynamicIcon } from "~lib/components/shared/Icon"
 
 import {
@@ -164,7 +168,7 @@ function ColumnMenu({
       placement={PLACEMENT.bottomRight}
       accessibilityType={ACCESSIBILITY_TYPE.menu}
       showArrow={false}
-      popoverMargin={5}
+      popoverMargin={convertRemToPx("0.375rem")}
       onClickOutside={closeMenu}
       onEsc={closeMenu}
       overrides={{
@@ -173,32 +177,31 @@ function ColumnMenu({
             "data-testid": "stDataFrameColumnMenu",
           },
           style: {
-            // This is annoying, but a bunch of warnings get logged when the
-            // shorthand version `borderRadius` is used here since the long
-            // names are used by BaseWeb and mixing the two is apparently
-            // bad :(
-            borderTopLeftRadius: radii.default,
-            borderTopRightRadius: radii.default,
-            borderBottomLeftRadius: radii.default,
-            borderBottomRightRadius: radii.default,
-
             paddingTop: "0 !important",
             paddingBottom: "0 !important",
             paddingLeft: "0 !important",
             paddingRight: "0 !important",
 
             backgroundColor: "transparent",
-            border: `${theme.sizes.borderWidth} solid ${theme.colors.borderColor}`,
           },
         },
         Inner: {
           style: {
+            border: `${theme.sizes.borderWidth} solid ${theme.colors.borderColor}`,
             backgroundColor: hasLightBackgroundColor(theme)
               ? colors.bgColor
               : colors.secondaryBg,
             color: colors.bodyText,
             fontSize: fontSizes.sm,
             fontWeight: fontWeights.normal,
+            // This is annoying, but a bunch of warnings get logged when the
+            // shorthand version `borderRadius` is used here since the long
+            // names are used by BaseWeb and mixing the two is apparently
+            // bad :(
+            borderTopLeftRadius: radii.default,
+            borderTopRightRadius: radii.default,
+            borderBottomLeftRadius: radii.default,
+            borderBottomRightRadius: radii.default,
             // Prevent the menu hover background from overflowing the menu edges
             // This is only an issue if a high roundness is configured.
             overflow: "auto",
@@ -227,6 +230,7 @@ function ColumnMenu({
           top,
           left,
           visibility: "hidden",
+          transform: "unset",
         }}
       ></div>
     </Popover>
diff --git a/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx b/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx
index 8aaa6e505305..1a34189c3e61 100644
--- a/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx
+++ b/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx
@@ -16,6 +16,7 @@
 
 import React, { ReactElement, useCallback } from "react"
 
+import { createPortal } from "react-dom"
 import {
   CompactSelection,
   DataEditorRef,
@@ -1042,32 +1043,40 @@ function DataFrame({
           clearTooltip={clearTooltip}
         ></Tooltip>
       )}
-      {showMenu && (
-        // A context menu that provides interactive features (sorting, pinning, show/hide)
-        // for a grid column.
-        <ColumnMenu
-          top={showMenu.headerBounds.y + showMenu.headerBounds.height}
-          left={showMenu.headerBounds.x + showMenu.headerBounds.width}
-          onCloseMenu={() => setShowMenu(undefined)}
-          onSortColumn={
-            isSortingEnabled
-              ? (direction: "asc" | "desc" | undefined) => {
-                  // Cell selection are kept on the old position,
-                  // which can be confusing. So we clear all cell selections before sorting.
-                  clearSelection(true, true)
-                  sortColumn(showMenu.columnIdx, direction, true)
-                }
-              : undefined
-          }
-          isColumnPinned={originalColumns[showMenu.columnIdx].isPinned}
-          onUnpinColumn={() => {
-            unpinColumn(originalColumns[showMenu.columnIdx].id)
-          }}
-          onPinColumn={() => {
-            pinColumn(originalColumns[showMenu.columnIdx].id)
-          }}
-        ></ColumnMenu>
-      )}
+      {showMenu &&
+        createPortal(
+          // A context menu that provides interactive features (sorting, pinning, show/hide)
+          // for a grid column.
+          <ColumnMenu
+            top={showMenu.headerBounds.y + showMenu.headerBounds.height}
+            left={showMenu.headerBounds.x + showMenu.headerBounds.width}
+            onCloseMenu={() => setShowMenu(undefined)}
+            onSortColumn={
+              isSortingEnabled
+                ? (direction: "asc" | "desc" | undefined) => {
+                    // Cell selection are kept on the old position,
+                    // which can be confusing. So we clear all cell selections before sorting.
+                    clearSelection(true, true)
+                    sortColumn(showMenu.columnIdx, direction, true)
+                  }
+                : undefined
+            }
+            isColumnPinned={originalColumns[showMenu.columnIdx].isPinned}
+            onUnpinColumn={() => {
+              unpinColumn(originalColumns[showMenu.columnIdx].id)
+            }}
+            onPinColumn={() => {
+              pinColumn(originalColumns[showMenu.columnIdx].id)
+            }}
+          />,
+          // We put the column menu into the portal element which is also
+          // used for the cell overlays. This allows us to correctly position
+          // the column menu also when the grid is used in a dialog, popover,
+          // or anything else that apply a transform (position fixed is influenced
+          // by the transform property of the parent element).
+          // The portal element is expected to always exist (-> PortalProvider).
+          document.querySelector("#portal") as HTMLElement
+        )}
     </StyledResizableContainer>
   )
 }
