### Instructions for Code Changes:

1. **Continuation Functionality in InferAsync Loop**:
    - Modify the inference loop around line 107 in `InferAsync` to test cancelling and continuing the generation:
      ```cs
      var stopAfterWords = 5;
      var cancellationToken = new CancellationTokenSource();
      await foreach (var text in ex.InferAsync(prompt, inferenceParams, cancellationToken.Token))
      {
          Console.Write(text);
          if (--stopAfterWords <= 0) cancellationToken.Cancel();
      }
      Console.Write("|"); // Indicator for cancellation happens here
      await foreach (var text in ex.InferAsync(null, inferenceParams))
      {
          Console.Write(text);
      }
      ```

2. **Resetting State Data**:
    - Ensure proper resetting of state data when switching images:
      - Call `ex.GetStateData` before the first prompt.
      - Call `ex.LoadState` and potentially `ex.Context.GetState` and `ex.Context.LoadState` before each new prompt.

3. **No Change for Empty Strings**:
    - Confirm that simply hitting enter in the example without a prompt does not trigger the new continuation behavior, maintaining existing functionality for empty strings.

### Issue the PR is Fixing:
The PR addresses continuation support in `InstructExecutor` and `InteractiveExecutor`, ensuring that prompts can be paused and resumed without cutting off words or misunderstanding subsequent prompts. It also addresses a minor memory leak and ensures consistent behavior across different scenarios and image inputs, particularly with LLaVA paths and scenarios where state data needs to be reset correctly when switching images.