[
    {
        "title": "Throw if a request transform overrides the request HttpContent"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "From https://github.com/microsoft/reverse-proxy/issues/2721#:~:text=free%20to%20rewind.-,Can%20I%20also%20ask%20you%20what%20kind%20of%20features%20will%20break%20if%20I%20replace%20the%20content%3F,-If%20you%20look\r\n\r\n> Can I also ask you what kind of features will break if I replace the content?\r\n\r\nIf you look at https://github.com/microsoft/reverse-proxy/blob/main/src/ReverseProxy/Forwarder/HttpForwarder.cs you can search for `requestContent`.\r\n\r\nA few examples:\r\n- Error handling will be wrong (reported `ForwarderError`, proxy's response status code)\r\n- [`ContentTransferring`](https://github.com/microsoft/reverse-proxy/blob/73283c06363b581b776267a8fa36f4d4233888d9/src/TelemetryConsumption/Forwarder/IForwarderTelemetryConsumer.cs#L42-L63) telemetry will not be emitted\r\n- We use state on the custom `HttpContent` to reliably synchronize the request with how the body is read. As a result, you could see thread-safety issues as your custom content logic may still be running (and using things like the HttpContext) when YARP already exits.\r\n- We [won't signal](https://github.com/microsoft/reverse-proxy/blob/73283c06363b581b776267a8fa36f4d4233888d9/src/ReverseProxy/Forwarder/HttpForwarder.cs#L615) to the client that we're aborting request reads\r\n- Possible further issues in the future as we're making assumptions that the content wasn't changed\r\n\r\nIt's possible some scenarios happened to work well enough that someone is using this. We could consider logging an error instead of throwing, but it's something that users should not do either way."
    },
    {
        "author": {
            "login": "benjaminpetit"
        },
        "body": ""
    }
]