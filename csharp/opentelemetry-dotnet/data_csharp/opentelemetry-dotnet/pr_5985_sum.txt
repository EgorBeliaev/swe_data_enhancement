**Instructions for Programmer:**

1. **Objective**: Optimize the Stress Test implementation to avoid false sharing, which affects performance due to close memory access in the `statistics` array.

2. **Implementation Changes**: 
   - Introduce a padded struct (`MeasurementData`) of 128 bytes designed to record updates from each worker thread without causing false sharing. This size ensures that each `MeasurementData` instance aligns with individual cache lines.

3. **Performance Verification**:
   - Ensure the `MeasurementData` struct successfully separates cache lines on diverse systems (note that typical cache line size is â‰¤ 128 bytes).
   - Run stress tests following the described scenarios to validate the performance gains:
     - For no-op function tests, verify throughput improvement of approximately 1.5 times.
     - For counter metrics tests, ensure throughput improvement of approximately 1.45 times.

4. **Further Verification (Optional)**:
   - Benchmark against current results on both Main and PR branches: 
     - Main: Logs - 52, Traces - 1.9, Metrics - 35
     - PR: Logs - 58, Traces - 1.8, Metrics - 38

5. **Checklist Updates**:
   - Ensure compliance with CONTRIBUTING guidelines: check for licensing, nullable enabled, static analysis.
   - Add or update unit tests as needed.
   - Update the `CHANGELOG.md` with the changes (if deemed non-trivial).
   - Conduct and submit public API changes for review if applicable.

6. **Debugging and Reporting**:
   - Use Codecov to confirm test coverage for all modified lines.
   - The current coverage increment is from 84.50% to 84.56%. Validate this increment and ensure similar or better coverage in future commits.

The code changes should reflect these points in the designated repository to avoid false sharing and improve the performance of Stress Tests.