[
    {
        "title": "[perf] Update Stress Test to avoid false sharing"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Motivation for this PR:\r\n- The current implementation of Stress Test involves each worker thread to update the `long[] statistics` array\r\n- The worker threads operate on different memory location as each of them have a dedicated index that they use to update the `statistics` array\r\n- However, this suffers from [false sharing](https://en.wikipedia.org/wiki/False_sharing). Even though the individual threads never operate on the same memory location, the memory locations they access are close enough to each other to end up in the same cache line\r\n\r\n## Changes in the PR:\r\n- Introduce a padded struct `MeasurementData` to record updates from each worker thread\r\n- `MeasurementData` struct has a size of 128 bytes (16 fields * 8 bytes) which ensures that when we create an array of `MeasurementData` the individual items end up on different cache lines (most systems would have a cache line size <= 128 bytes)\r\n\r\n## Stress Test Results\r\n\r\n**Machine details:**\r\n\r\nWindows 11 (10.0.26100.2314) (Hyper-V)\r\nIntel Xeon Platinum 8370C CPU 2.80GHz, 1 CPU, 16 logical and 8 physical cores\r\n.NET SDK 9.0.100\r\n\r\nI ran the stress test for two scenarios to compare the difference.\r\n1. When stress testing an empty no-op function, the throughput improved **1.5 times** (went up from ~4.5 B to ~7 B loops per second)\r\n2. When stress testing counter metrics, the throughput improved **1.45 times** (went up from ~40 M to ~58 M loops per second)\r\n\r\n## Merge requirement checklist\r\n\r\n* [ ] [CONTRIBUTING](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/CONTRIBUTING.md) guidelines followed (license requirements, nullable enabled, static analysis, etc.)\r\n* [ ] Unit tests added/updated\r\n* [ ] Appropriate `CHANGELOG.md` files updated for non-trivial changes\r\n* [ ] Changes in public API reviewed (if applicable)\r\n"
    },
    {
        "author": {
            "login": "Kielek"
        },
        "body": ""
    },
    {
        "author": {
            "login": "cijothomas"
        },
        "body": "Thanks!\r\n\r\n(OTel Rust's stress tests already used padding to achieve this goal, but still it has lower throughput. More work for OTel Rust folks to improve perf\ud83e\udd23 )\r\n\r\nI'll run stress tests and share results for main vs this PR, for any easy ref in future!"
    },
    {
        "author": {
            "login": "rajkumar-rangaraj"
        },
        "body": ""
    },
    {
        "author": {
            "login": "codecov"
        },
        "body": "## [Codecov](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry) Report\nAll modified and coverable lines are covered by tests :white_check_mark:\n> Project coverage is 84.56%. Comparing base [(`2ae01a7`)](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/commit/2ae01a73fea4cbcc69f67cbb5aa4be5cfe875e23?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry) to head [(`893da78`)](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/commit/893da7862581e892f10d73379582bfc87bc028d2?dropdown=coverage&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry).\n> Report is 1 commits behind head on main.\n\n<details><summary>Additional details and impacted files</summary>\n\n\n[![Impacted file tree graph](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985/graphs/tree.svg?width=650&height=150&src=pr&token=vscyfvPfy5&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry)](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry)\n\n```diff\n@@            Coverage Diff             @@\n##             main    #5985      +/-   ##\n==========================================\n+ Coverage   84.50%   84.56%   +0.05%     \n==========================================\n  Files         271      271              \n  Lines       12355    12355              \n==========================================\n+ Hits        10441    10448       +7     \n+ Misses       1914     1907       -7     \n```\n\n| [Flag](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985/flags?src=pr&el=flags&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry) | Coverage \u0394 | |\n|---|---|---|\n| [unittests-Project-Experimental](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985/flags?src=pr&el=flag&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry) | `84.53% <\u00f8> (+0.21%)` | :arrow_up: |\n| [unittests-Project-Stable](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985/flags?src=pr&el=flag&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry) | `84.53% <\u00f8> (+0.03%)` | :arrow_up: |\n\nFlags with carried forward coverage won't be shown. [Click here](https://docs.codecov.io/docs/carryforward-flags?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry#carryforward-flags-in-the-pull-request-comment) to find out more.\n\n[see 2 files with indirect coverage changes](https://app.codecov.io/gh/open-telemetry/opentelemetry-dotnet/pull/5985/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=open-telemetry)\n\n</details>\n----\n\ud83d\udea8 Try these New Features:\n\n- [Flaky Tests Detection](https://docs.codecov.com/docs/test-result-ingestion-beta) - Detect and resolve failed and flaky tests"
    },
    {
        "author": {
            "login": "cijothomas"
        },
        "body": ".NET 8, Windows\r\n\r\nMain\r\nLogs - 52\r\nTraces - 1.9\r\nMetrics - 35\r\n\r\nPR\r\nLogs - 58\r\nTraces - 1.8\r\nMetrics - 38"
    },
    {
        "author": {
            "login": "utpilla"
        },
        "body": "\r\n\r\n\r\n> .NET 8, Windows\r\n> \r\n> Main Logs - 52 Traces - 1.9 Metrics - 35\r\n> \r\n> PR Logs - 58 Traces - 1.8 Metrics - 38\r\n\r\n@cijothomas Could you also mention if the numbers posted for Metrics were for the Counter or Histogram test? [By default](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Metrics/Program.cs#L124), the stress test for metrics is run for histogram."
    },
    {
        "author": {
            "login": "cijothomas"
        },
        "body": "> > .NET 8, Windows\r\n> > Main Logs - 52 Traces - 1.9 Metrics - 35\r\n> > PR Logs - 58 Traces - 1.8 Metrics - 38\r\n> \r\n> @cijothomas Could you also mention if the numbers posted for Metrics were for the Counter or Histogram test? [By default](https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/test/OpenTelemetry.Tests.Stress.Metrics/Program.cs#L124), the stress test for metrics is run for histogram.\r\n\r\nHistogram. I ran the stress test as default only."
    }
]