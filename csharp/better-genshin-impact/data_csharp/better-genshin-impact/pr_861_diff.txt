diff --git a/BetterGenshinImpact/Core/Config/AllConfig.cs b/BetterGenshinImpact/Core/Config/AllConfig.cs
index c5241804..cf813bb2 100644
--- a/BetterGenshinImpact/Core/Config/AllConfig.cs
+++ b/BetterGenshinImpact/Core/Config/AllConfig.cs
@@ -12,8 +12,10 @@
 using CommunityToolkit.Mvvm.ComponentModel;
 using Fischless.GameCapture;
 using System;
+using System.Collections.Generic;
 using System.ComponentModel;
 using System.Text.Json.Serialization;
+using System.Threading.Tasks;
 
 namespace BetterGenshinImpact.Core.Config;
 
@@ -67,6 +69,9 @@ public partial class AllConfig : ObservableObject
     [ObservableProperty]
     private string _inferenceDevice = "CPU";
 
+    [ObservableProperty]
+    private List<ValueTuple<string,int, string, string>> _NextScheduledTask = [];
+
     /// <summary>
     ///     遮罩窗口配置
     /// </summary>
diff --git a/BetterGenshinImpact/Core/Config/HotKeyConfig.cs b/BetterGenshinImpact/Core/Config/HotKeyConfig.cs
index 3492942a..a19578d0 100644
--- a/BetterGenshinImpact/Core/Config/HotKeyConfig.cs
+++ b/BetterGenshinImpact/Core/Config/HotKeyConfig.cs
@@ -211,7 +211,12 @@ public partial class HotKeyConfig : ObservableObject
 
     [ObservableProperty]
     private string _keyMouseMacroRecordHotkeyType = HotKeyTypeEnum.KeyboardMonitor.ToString();
+    // 暂停
+    [ObservableProperty]
+    private string _suspendHotkey = "";
 
+    [ObservableProperty]
+    private string _suspendHotkeyType = HotKeyTypeEnum.KeyboardMonitor.ToString();
     // 停止任意独立任务
     [ObservableProperty]
     private string _cancelTaskHotkey = "";
diff --git a/BetterGenshinImpact/Core/Script/Group/ScriptGroupProject.cs b/BetterGenshinImpact/Core/Script/Group/ScriptGroupProject.cs
index 977f084b..d0d48cd4 100644
--- a/BetterGenshinImpact/Core/Script/Group/ScriptGroupProject.cs
+++ b/BetterGenshinImpact/Core/Script/Group/ScriptGroupProject.cs
@@ -62,6 +62,7 @@ public partial class ScriptGroupProject : ObservableObject
     [JsonIgnore]
     public ScriptProject? Project { get; set; }
 
+
     public ExpandoObject? JsScriptSettingsObject { get; set; }
 
     /// <summary>
@@ -69,6 +70,12 @@ public partial class ScriptGroupProject : ObservableObject
     /// </summary>
     [JsonIgnore]
     public ScriptGroup? GroupInfo { get; set; }
+    /// <summary>
+    /// 下一个从此执行标志
+    /// </summary>
+    [JsonIgnore]
+    [ObservableProperty]
+    public bool? _nextFlag = false;
 
     public ScriptGroupProject()
     {
diff --git a/BetterGenshinImpact/GameTask/AutoFight/AutoFightTask.cs b/BetterGenshinImpact/GameTask/AutoFight/AutoFightTask.cs
index 46576aba..5a8bb0ee 100644
--- a/BetterGenshinImpact/GameTask/AutoFight/AutoFightTask.cs
+++ b/BetterGenshinImpact/GameTask/AutoFight/AutoFightTask.cs
@@ -64,6 +64,8 @@ public async Task Start(CancellationToken ct)
         ct.Register(cts2.Cancel);
 
         combatScenes.BeforeTask(cts2.Token);
+        TimeSpan fightTimeout = TimeSpan.FromSeconds(120); // 默认战斗超时时间
+        Stopwatch stopwatch = Stopwatch.StartNew();
 
         // 战斗操作
         var fightTask = Task.Run(async () =>
@@ -78,7 +80,7 @@ public async Task Start(CancellationToken ct)
                         command.Execute(combatScenes);
                     }
 
-                    if (_taskParam is { FightFinishDetectEnabled: true } && await CheckFightFinish())
+                    if (stopwatch.Elapsed > fightTimeout || _taskParam is { FightFinishDetectEnabled: true } && await CheckFightFinish())
                     {
                         break;
                     }
@@ -151,10 +153,17 @@ private async Task<bool> CheckFightFinish()
             return false;
         }
 
+
+        Random random = new Random();
+        double randomFraction = random.NextDouble();  // 生成 0 到 1 之间的随机小数
+        //此处随机数，防止固定招式下，使按L正好处于招式下，导致无法准确判断战斗结束
+        double randomNumber = 1 + (randomFraction * (3 - 1));
+
         // 几秒内没有检测到血条和怪物位置，则开始旋转视角重新检测
-        if ((DateTime.Now - _lastFightFlagTime).TotalSeconds > 3)
+        if ((DateTime.Now - _lastFightFlagTime).TotalSeconds > randomNumber)
         {
             // 旋转完毕后都没有检测到血条和怪物位置，则按L键确认战斗结束
+            /** 
             Simulation.SendInput.Mouse.MiddleButtonClick();
             await Delay(300, _ct);
             for (var i = 0; i < 8; i++)
@@ -167,7 +176,9 @@ private async Task<bool> CheckFightFinish()
                     return false;
                 }
             }
-
+            **/
+            await Delay(1000, _ct);
+            Logger.LogInformation("按了L");
             // 最终方案确认战斗结束
             Simulation.SendInput.Keyboard.KeyPress(User32.VK.VK_L);
             await Delay(450, _ct);
@@ -181,6 +192,7 @@ private async Task<bool> CheckFightFinish()
             }
             else
             {
+                _lastFightFlagTime = DateTime.Now;
                 return false;
             }
         }
diff --git a/BetterGenshinImpact/GameTask/AutoFishing/AutoFishingTrigger.cs b/BetterGenshinImpact/GameTask/AutoFishing/AutoFishingTrigger.cs
index fedcb7da..f982155e 100644
--- a/BetterGenshinImpact/GameTask/AutoFishing/AutoFishingTrigger.cs
+++ b/BetterGenshinImpact/GameTask/AutoFishing/AutoFishingTrigger.cs
@@ -728,11 +728,13 @@ public void Sleep(int millisecondsTimeout)
         {
             NewRetry.Do(() =>
             {
+                TaskControl.TrySuspend();
                 if (IsEnabled && !SystemControl.IsGenshinImpactActiveByProcess())
                 {
                     _logger.LogWarning("当前获取焦点的窗口不是原神，暂停");
                     throw new RetryException("当前获取焦点的窗口不是原神");
                 }
+                
             }, TimeSpan.FromSeconds(1), 100);
             CheckFishingUserInterface(_currContent);
             Thread.Sleep(millisecondsTimeout);
diff --git a/BetterGenshinImpact/GameTask/AutoGeniusInvokation/GeniusInvokationControl.cs b/BetterGenshinImpact/GameTask/AutoGeniusInvokation/GeniusInvokationControl.cs
index 8aa19f9a..83935cec 100644
--- a/BetterGenshinImpact/GameTask/AutoGeniusInvokation/GeniusInvokationControl.cs
+++ b/BetterGenshinImpact/GameTask/AutoGeniusInvokation/GeniusInvokationControl.cs
@@ -107,12 +107,13 @@ public void CheckTask()
             {
                 return;
             }
-
+            TaskControl.TrySuspend();
             if (!SystemControl.IsGenshinImpactActiveByProcess())
             {
                 _logger.LogWarning("当前获取焦点的窗口不是原神，暂停");
                 throw new RetryException("当前获取焦点的窗口不是原神");
             }
+           
         }, TimeSpan.FromSeconds(1), 100);
 
         if (_ct is { IsCancellationRequested: true })
diff --git a/BetterGenshinImpact/GameTask/AutoPathing/PathExecutor.cs b/BetterGenshinImpact/GameTask/AutoPathing/PathExecutor.cs
index 52f7fca1..d6bfb6f5 100644
--- a/BetterGenshinImpact/GameTask/AutoPathing/PathExecutor.cs
+++ b/BetterGenshinImpact/GameTask/AutoPathing/PathExecutor.cs
@@ -24,20 +24,33 @@
 using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
+using BetterGenshinImpact.GameTask.AutoPathing.Suspend;
+using BetterGenshinImpact.GameTask.Common;
 using Vanara.PInvoke;
 using static BetterGenshinImpact.GameTask.Common.TaskControl;
+using static BetterGenshinImpact.GameTask.SystemControl;
 using ActionEnum = BetterGenshinImpact.GameTask.AutoPathing.Model.Enum.ActionEnum;
 
 namespace BetterGenshinImpact.GameTask.AutoPathing;
 
-public class PathExecutor(CancellationToken ct)
+public class PathExecutor
 {
-    private readonly CameraRotateTask _rotateTask = new(ct);
-    private readonly TrapEscaper _trapEscaper = new(ct);
+    private readonly CameraRotateTask _rotateTask;
+    private readonly TrapEscaper _trapEscaper;
     private readonly BlessingOfTheWelkinMoonTask _blessingOfTheWelkinMoonTask = new();
     private AutoSkipTrigger? _autoSkipTrigger;
 
     private PathingPartyConfig? _partyConfig;
+    private CancellationToken ct;
+    private PathExecutorSuspend pathExecutorSuspend;
+
+    public PathExecutor(CancellationToken ct)
+    {
+        _trapEscaper = new(ct);
+        _rotateTask = new(ct);
+        this.ct = ct;
+        pathExecutorSuspend = new PathExecutorSuspend(this);
+    }
 
     public PathingPartyConfig PartyConfig
     {
@@ -59,8 +72,58 @@ public PathingPartyConfig PartyConfig
     private const int RetryTimes = 2;
     private int _inTrap = 0;
 
+
+    //记录当前相关点位数组
+    public (int, List<WaypointForTrack>) CurWaypoints { get; set; }
+
+    //记录当前点位
+    public (int, WaypointForTrack) CurWaypoint { get; set; }
+
+    //记录恢复点位数组
+    private (int, List<WaypointForTrack>) RecordWaypoints { get; set; }
+
+    //记录恢复点位
+    private (int, WaypointForTrack) RecordWaypoint { get; set; }
+
+    //跳过除走路径以外的操作
+    private bool _skipOtherOperations = false;
+
+
+    //当到达恢复点位
+    public void TryCloseSkipOtherOperations()
+    {
+        Logger.LogWarning("判断是否跳过路径追踪:" + (CurWaypoint.Item1 < RecordWaypoint.Item1));
+        if (RecordWaypoints == CurWaypoints && CurWaypoint.Item1 < RecordWaypoint.Item1)
+        {
+            return;
+        }
+
+        if (_skipOtherOperations)
+        {
+            Logger.LogWarning("已到达上次点位，路径追踪功能恢复");
+        }
+
+        _skipOtherOperations = false;
+    }
+
+    //记录点位，方便后面恢复
+    public void StartSkipOtherOperations()
+    {
+        Logger.LogWarning("记录恢复点位，路径追踪将到达上次点位之前将跳过走路之外的操作");
+        _skipOtherOperations = true;
+        RecordWaypoints = CurWaypoints;
+        RecordWaypoint = CurWaypoint;
+    }
+
     public async Task Pathing(PathingTask task)
     {
+        // SuspendableDictionary;
+        const string sdKey = "PathExecutor";
+        var sd = RunnerContext.Instance.SuspendableDictionary;
+        sd.Remove(sdKey);
+
+        RunnerContext.Instance.SuspendableDictionary.TryAdd(sdKey, pathExecutorSuspend);
+
         if (!task.Positions.Any())
         {
             Logger.LogWarning("没有路径点，寻路结束");
@@ -90,6 +153,9 @@ public async Task Pathing(PathingTask task)
 
         foreach (var waypoints in waypointsList)
         {
+            CurWaypoints = (waypointsList.FindIndex(wps => wps == waypoints), waypoints);
+
+
             for (var i = 0; i < RetryTimes; i++)
             {
                 try
@@ -97,6 +163,8 @@ public async Task Pathing(PathingTask task)
                     await ResolveAnomalies(); // 异常场景处理
                     foreach (var waypoint in waypoints)
                     {
+                        CurWaypoint = (waypoints.FindIndex(wps => wps == waypoint), waypoint);
+                        TryCloseSkipOtherOperations();
                         await RecoverWhenLowHp(waypoint); // 低血量恢复
                         if (waypoint.Type == WaypointType.Teleport.Code)
                         {
@@ -120,7 +188,8 @@ public async Task Pathing(PathingTask task)
                                 await MoveCloseTo(waypoint);
                             }
 
-                            if (!string.IsNullOrEmpty(waypoint.Action))
+                            //skipOtherOperations如果重试，则跳过相关操作
+                            if (!string.IsNullOrEmpty(waypoint.Action) && !_skipOtherOperations)
                             {
                                 // 执行 action
                                 await AfterMoveToTarget(waypoint);
@@ -137,8 +206,17 @@ public async Task Pathing(PathingTask task)
                 }
                 catch (RetryException retryException)
                 {
+                    StartSkipOtherOperations();
+                    Logger.LogWarning(retryException.Message);
+                }
+                catch (RetryNoCountException retryException)
+                {
+                    //特殊情况下，重试不消耗次数
+                    i--;
+                    StartSkipOtherOperations();
                     Logger.LogWarning(retryException.Message);
                 }
+
                 finally
                 {
                     // 不管咋样，松开所有按键
@@ -162,7 +240,7 @@ private async Task<bool> SwitchPartyBefore(PathingTask task)
             // 血量肯定不满，直接去七天神像回血
             await TpStatueOfTheSeven();
         }
-        
+
         var pRaList = ra.FindMulti(AutoFightAssets.Instance.PRa); // 判断是否联机
         if (pRaList.Count > 0)
         {
@@ -364,6 +442,61 @@ private List<List<WaypointForTrack>> ConvertWaypointsForTrack(List<Waypoint> pos
         return result;
     }
 
+    /// <summary>
+    /// 尝试队伍回血，如果单人回血，由于记录检查时是哪位残血，则当作行走位处理。
+    /// </summary>
+    private async Task<bool> TryPartyHealing()
+    {
+        foreach (var avatar in _combatScenes?.Avatars ?? [])
+        {
+            if (avatar.Name == "白术")
+            {
+                if (avatar.TrySwitch())
+                {
+                    //1命白术能两次
+                    Simulation.SendInput.Keyboard.KeyPress(User32.VK.VK_E);
+                    await Delay(800, ct);
+                    Simulation.SendInput.Keyboard.KeyPress(User32.VK.VK_E);
+                    await Delay(800, ct);
+                    await SwitchAvatar(PartyConfig.MainAvatarIndex);
+                    await Delay(4000, ct);
+                    return true;
+                }
+
+                break;
+            }
+            else if (avatar.Name == "希格雯")
+            {
+                if (avatar.TrySwitch())
+                {
+                    Simulation.SendInput.Keyboard.KeyPress(User32.VK.VK_E);
+                    await Delay(11000, ct);
+                    await SwitchAvatar(PartyConfig.MainAvatarIndex);
+                    return true;
+                }
+
+                break;
+            }
+            else if (avatar.Name == "珊瑚宫心海")
+            {
+                if (avatar.TrySwitch())
+                {
+                    Simulation.SendInput.Keyboard.KeyPress(User32.VK.VK_E);
+                    await Delay(500, ct);
+                    //尝试Q全队回血
+                    Simulation.SendInput.Keyboard.KeyPress(User32.VK.VK_Q);
+                    //单人血只给行走位加血
+                    await SwitchAvatar(PartyConfig.MainAvatarIndex);
+                    await Delay(5000, ct);
+                    return true;
+                }
+            }
+        }
+
+
+        return false;
+    }
+
     private async Task RecoverWhenLowHp(WaypointForTrack waypoint)
     {
         if (PartyConfig.OnlyInTeleportRecover && waypoint.Type != WaypointType.Teleport.Code)
@@ -372,7 +505,7 @@ private async Task RecoverWhenLowHp(WaypointForTrack waypoint)
         }
 
         using var region = CaptureToRectArea();
-        if (Bv.CurrentAvatarIsLowHp(region))
+        if (Bv.CurrentAvatarIsLowHp(region) && !(await TryPartyHealing() && Bv.CurrentAvatarIsLowHp(region)))
         {
             Logger.LogInformation("当前角色血量过低，去须弥七天神像恢复");
             await TpStatueOfTheSeven();
@@ -451,7 +584,16 @@ private async Task MoveTo(WaypointForTrack waypoint)
 
             if (distance > 500)
             {
-                Logger.LogWarning("距离过远，跳过路径点");
+                if (pathExecutorSuspend.CheckAndResetSuspendPoint())
+                {
+                    throw new RetryNoCountException("可能暂停导致路径过远，重试一次此路线！");
+                }
+                else
+                {
+                    Logger.LogWarning("距离过远，跳过路径点");
+                }
+
+
                 break;
             }
 
@@ -554,7 +696,7 @@ private async Task MoveTo(WaypointForTrack waypoint)
                         _elementalSkillLastUseTime = DateTime.UtcNow;
                     }
                 }
-                
+
                 // 自动疾跑
                 if (distance > 20)
                 {
diff --git a/BetterGenshinImpact/GameTask/AutoPathing/Suspend/ISuspendable.cs b/BetterGenshinImpact/GameTask/AutoPathing/Suspend/ISuspendable.cs
new file mode 100644
index 00000000..9b6ba961
--- /dev/null
+++ b/BetterGenshinImpact/GameTask/AutoPathing/Suspend/ISuspendable.cs
@@ -0,0 +1,8 @@
+﻿namespace BetterGenshinImpact.GameTask.AutoPathing.Suspend;
+
+public interface ISuspendable
+{
+    void Suspend();         // 暂停操作
+    void Resume();          // 恢复操作
+    bool IsSuspended { get; } // 是否处于暂停状态
+}
\ No newline at end of file
diff --git a/BetterGenshinImpact/GameTask/AutoPathing/Suspend/PathExecutorSuspend.cs b/BetterGenshinImpact/GameTask/AutoPathing/Suspend/PathExecutorSuspend.cs
new file mode 100644
index 00000000..6a2ae719
--- /dev/null
+++ b/BetterGenshinImpact/GameTask/AutoPathing/Suspend/PathExecutorSuspend.cs
@@ -0,0 +1,54 @@
+﻿using System;
+using System.Collections.Generic;
+using BetterGenshinImpact.GameTask.AutoPathing.Model;
+
+namespace BetterGenshinImpact.GameTask.AutoPathing.Suspend;
+
+//暂停逻辑相关实现,这里主要用来记录，用来恢复相应操作
+public class PathExecutorSuspend(PathExecutor pathExecutor) : ISuspendable
+{
+    private bool _isSuspended;
+
+    //记录当前相关点位数组
+    private (int, List<WaypointForTrack>) _waypoints;
+
+    //记录当前点位
+    private (int, WaypointForTrack) _waypoint;
+
+    public bool IsSuspended => _isSuspended;
+
+    public void Suspend()
+    {
+        _waypoints = pathExecutor.CurWaypoints;
+        _waypoint = pathExecutor.CurWaypoint;
+        _isSuspended = true;
+    }
+
+    //路径过远时，检查路径追踪点位经过暂停（当前点位和后一个点位算经过暂停），并重置状态
+    public bool CheckAndResetSuspendPoint()
+    {
+        if (_isSuspended)
+        {
+            return false;
+        }
+
+        if (pathExecutor.CurWaypoints == _waypoints && (pathExecutor.CurWaypoint == _waypoint || (pathExecutor.CurWaypoint.Item1 - 1) == _waypoint.Item1))
+        {
+            return true;
+        }
+
+        Reset();
+        return false;
+    }
+
+    public void Resume()
+    {
+        _isSuspended = false;
+    }
+
+    public void Reset()
+    {
+        _waypoints = default;
+        _waypoint = default;
+    }
+}
\ No newline at end of file
diff --git a/BetterGenshinImpact/GameTask/Common/Exceptions/RetryNoCountException.cs b/BetterGenshinImpact/GameTask/Common/Exceptions/RetryNoCountException.cs
new file mode 100644
index 00000000..205c8e35
--- /dev/null
+++ b/BetterGenshinImpact/GameTask/Common/Exceptions/RetryNoCountException.cs
@@ -0,0 +1,12 @@
+﻿namespace BetterGenshinImpact.GameTask.AutoGeniusInvokation.Exception; // TODO: change this namespace to BetterGenshinImpact.GameTask.Common.Exception
+
+public class RetryNoCountException : System.Exception
+{
+    public RetryNoCountException() : base()
+    {
+    }
+
+    public RetryNoCountException(string message) : base(message)
+    {
+    }
+}
diff --git a/BetterGenshinImpact/GameTask/Common/TaskControl.cs b/BetterGenshinImpact/GameTask/Common/TaskControl.cs
index 86a7d50b..5fedb870 100644
--- a/BetterGenshinImpact/GameTask/Common/TaskControl.cs
+++ b/BetterGenshinImpact/GameTask/Common/TaskControl.cs
@@ -3,9 +3,11 @@
 using Fischless.GameCapture;
 using Microsoft.Extensions.Logging;
 using System;
+using System.Collections.Generic;
 using System.Drawing;
 using System.Threading;
 using System.Threading.Tasks;
+using BetterGenshinImpact.GameTask.AutoPathing.Suspend;
 
 namespace BetterGenshinImpact.GameTask.Common;
 
@@ -15,14 +17,18 @@ public class TaskControl
 
     public static readonly SemaphoreSlim TaskSemaphore = new(1, 1);
 
+    
+    
+    
     public static void CheckAndSleep(int millisecondsTimeout)
     {
+        TrySuspend();
         if (!SystemControl.IsGenshinImpactActiveByProcess())
         {
             Logger.LogInformation("当前获取焦点的窗口不是原神，停止执行");
             throw new NormalEndException("当前获取焦点的窗口不是原神");
         }
-
+        
         Thread.Sleep(millisecondsTimeout);
     }
 
@@ -30,78 +36,45 @@ public static void Sleep(int millisecondsTimeout)
     {
         NewRetry.Do(() =>
         {
+            TrySuspend();
             if (!SystemControl.IsGenshinImpactActiveByProcess())
             {
                 Logger.LogInformation("当前获取焦点的窗口不是原神，暂停");
                 throw new RetryException("当前获取焦点的窗口不是原神");
             }
+            
         }, TimeSpan.FromSeconds(1), 100);
         Thread.Sleep(millisecondsTimeout);
     }
+    
+    public static void TrySuspend()
+    {
+        bool first = true;
+        while (RunnerContext.Instance.IsSuspend)
+        {
+            if (first)
+            {
+                Logger.LogWarning("快捷键触发暂停，等待解除");
+                foreach (var item in RunnerContext.Instance.SuspendableDictionary)
+                {
+                    item.Value.Suspend();
+                }
 
-    // public static void Sleep(int millisecondsTimeout, CancellationTokenSource? cts)
-    // {
-    //     if (cts is { IsCancellationRequested: true })
-    //     {
-    //         throw new NormalEndException("取消自动任务");
-    //     }
-    //
-    //     if (millisecondsTimeout <= 0)
-    //     {
-    //         return;
-    //     }
-    //
-    //     NewRetry.Do(() =>
-    //     {
-    //         if (cts is { IsCancellationRequested: true })
-    //         {
-    //             throw new NormalEndException("取消自动任务");
-    //         }
-    //
-    //         if (!SystemControl.IsGenshinImpactActiveByProcess())
-    //         {
-    //             Logger.LogInformation("当前获取焦点的窗口不是原神，暂停");
-    //             throw new RetryException("当前获取焦点的窗口不是原神");
-    //         }
-    //     }, TimeSpan.FromSeconds(1), 100);
-    //     Thread.Sleep(millisecondsTimeout);
-    //     if (cts is { IsCancellationRequested: true })
-    //     {
-    //         throw new NormalEndException("取消自动任务");
-    //     }
-    // }
+                first = false;
+            }
 
-    // public static async Task Delay(int millisecondsTimeout, CancellationTokenSource cts)
-    // {
-    //     if (cts is { IsCancellationRequested: true })
-    //     {
-    //         throw new NormalEndException("取消自动任务");
-    //     }
-    //
-    //     if (millisecondsTimeout <= 0)
-    //     {
-    //         return;
-    //     }
-    //
-    //     NewRetry.Do(() =>
-    //     {
-    //         if (cts is { IsCancellationRequested: true })
-    //         {
-    //             throw new NormalEndException("取消自动任务");
-    //         }
-    //
-    //         if (!SystemControl.IsGenshinImpactActiveByProcess())
-    //         {
-    //             Logger.LogInformation("当前获取焦点的窗口不是原神，暂停");
-    //             throw new RetryException("当前获取焦点的窗口不是原神");
-    //         }
-    //     }, TimeSpan.FromSeconds(1), 100);
-    //     await Task.Delay(millisecondsTimeout, cts.Token);
-    //     if (cts is { IsCancellationRequested: true })
-    //     {
-    //         throw new NormalEndException("取消自动任务");
-    //     }
-    // }
+            Thread.Sleep(1000);
+        }
+
+        if (RunnerContext.Instance.IsSuspend)
+        {
+            Logger.LogWarning("暂停已经解除");
+            foreach (var item in RunnerContext.Instance.SuspendableDictionary)
+            {
+                item.Value.Resume();
+            }
+        }
+    }
 
     public static void Sleep(int millisecondsTimeout, CancellationToken ct)
     {
@@ -121,12 +94,13 @@ public static void Sleep(int millisecondsTimeout, CancellationToken ct)
             {
                 throw new NormalEndException("取消自动任务");
             }
-
+            TrySuspend();
             if (!SystemControl.IsGenshinImpactActiveByProcess())
             {
                 Logger.LogInformation("当前获取焦点的窗口不是原神，暂停");
                 throw new RetryException("当前获取焦点的窗口不是原神");
             }
+            
         }, TimeSpan.FromSeconds(1), 100);
         Thread.Sleep(millisecondsTimeout);
         if (ct.IsCancellationRequested)
@@ -153,12 +127,13 @@ public static async Task Delay(int millisecondsTimeout, CancellationToken ct)
             {
                 throw new NormalEndException("取消自动任务");
             }
-
+            TrySuspend();
             if (!SystemControl.IsGenshinImpactActiveByProcess())
             {
                 Logger.LogInformation("当前获取焦点的窗口不是原神，暂停");
                 throw new RetryException("当前获取焦点的窗口不是原神");
             }
+            
         }, TimeSpan.FromSeconds(1), 100);
         await Task.Delay(millisecondsTimeout, ct);
         if (ct is { IsCancellationRequested: true })
diff --git a/BetterGenshinImpact/GameTask/RunnerContext.cs b/BetterGenshinImpact/GameTask/RunnerContext.cs
index 2d069941..3b34daf3 100644
--- a/BetterGenshinImpact/GameTask/RunnerContext.cs
+++ b/BetterGenshinImpact/GameTask/RunnerContext.cs
@@ -1,9 +1,12 @@
-﻿using BetterGenshinImpact.GameTask.AutoFight.Model;
+﻿using System.Collections.Generic;
+using BetterGenshinImpact.GameTask.AutoFight.Model;
 using BetterGenshinImpact.Model;
 using Microsoft.Extensions.Logging;
 using System.Threading;
 using System.Threading.Tasks;
+using BetterGenshinImpact.GameTask.AutoPathing.Suspend;
 using BetterGenshinImpact.GameTask.Common.Job;
+using OpenCvSharp;
 using Wpf.Ui.Controls;
 using static BetterGenshinImpact.GameTask.Common.TaskControl;
 
@@ -18,6 +21,16 @@ public class RunnerContext : Singleton<RunnerContext>
     /// 是否是连续执行配置组的场景
     /// </summary>
     public bool IsContinuousRunGroup { get; set; }
+    
+    /// <summary>
+    /// 暂停逻辑
+    /// </summary>
+    public bool IsSuspend { get; set; }
+    
+    /// <summary>
+    /// 暂停实现
+    /// </summary>
+    public Dictionary<string, ISuspendable> SuspendableDictionary = new();
 
     /// <summary>
     /// 当前使用队伍名称
@@ -68,6 +81,8 @@ public void Clear()
         }
 
         _combatScenes = null;
+        IsSuspend = false;
+        SuspendableDictionary.Clear();
     }
 
     /// <summary>
@@ -78,5 +93,7 @@ public void Reset()
         IsContinuousRunGroup = false;
         PartyName = null;
         _combatScenes = null;
+        IsSuspend = false;
+        SuspendableDictionary.Clear();
     }
 }
\ No newline at end of file
diff --git a/BetterGenshinImpact/GameTask/SystemControl.cs b/BetterGenshinImpact/GameTask/SystemControl.cs
index a061666a..125752e3 100644
--- a/BetterGenshinImpact/GameTask/SystemControl.cs
+++ b/BetterGenshinImpact/GameTask/SystemControl.cs
@@ -1,7 +1,12 @@
 ﻿using System;
+using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
+using System.Threading;
 using System.Threading.Tasks;
+using BetterGenshinImpact.GameTask.AutoFishing;
+using BetterGenshinImpact.GameTask.AutoPathing.Suspend;
+using Microsoft.Extensions.Logging;
 using Vanara.PInvoke;
 
 namespace BetterGenshinImpact.GameTask;
@@ -36,6 +41,7 @@ public static async Task<nint> StartFromLocalAsync(string path)
 
             await Task.Delay(5577);
         }
+
         return FindGenshinImpactHandle();
     }
 
@@ -252,4 +258,4 @@ public static bool IsFullScreenMode(IntPtr hWnd)
     //     // TODO：点完之后有个15s的倒计时，好像不处理也没什么问题，直接睡个20s吧
     //     Thread.Sleep(20000);
     // }
-}
+}
\ No newline at end of file
diff --git a/BetterGenshinImpact/View/Pages/ScriptControlPage.xaml b/BetterGenshinImpact/View/Pages/ScriptControlPage.xaml
index dffce661..ffbeaa0c 100644
--- a/BetterGenshinImpact/View/Pages/ScriptControlPage.xaml
+++ b/BetterGenshinImpact/View/Pages/ScriptControlPage.xaml
@@ -64,6 +64,9 @@
                             <MenuItem Command="{Binding DeleteScriptGroupCommand}"
                                       CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                       Header="删除组" />
+                            <MenuItem Command="{Binding RenameScriptGroupCommand}"
+                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
+                                      Header="重命名" />
                         </ContextMenu>
                     </ui:ListView.ContextMenu>
                 </ui:ListView>
@@ -241,14 +244,35 @@
                              dd:DragDrop.UseDefaultDragAdorner="True"
                              ItemsSource="{Binding SelectedScriptGroup.Projects, Mode=TwoWay}"
                              SelectionMode="Single">
+     
+                  
                     <ListView.View>
+
                         <GridView ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderDarkStyle}">
                             <GridViewColumn Width="{Binding ElementName=Col1, Path=ActualWidth}"
                                             DisplayMemberBinding="{Binding Index}"
                                             Header="#" />
                             <GridViewColumn Width="{Binding ElementName=Col2, Path=ActualWidth}"
-                                            DisplayMemberBinding="{Binding Name}"
-                                            Header="名称" />
+                                  
+                                            Header="名称" >
+                                <GridViewColumn.CellTemplate>
+                                    <DataTemplate>
+                                        <TextBlock Text="{Binding Name}" FontSize="14">
+                                            <TextBlock.Style>
+                                                <Style TargetType="TextBlock">
+                                                    <Setter Property="Foreground" Value="White" />
+                                                    <Style.Triggers>
+                                                        <DataTrigger Binding="{Binding NextFlag}" Value="True">
+                                                            <Setter Property="Foreground" Value="Green" />
+                                                        </DataTrigger>
+                                                    </Style.Triggers>
+                                                </Style>
+                                            </TextBlock.Style>
+                                        </TextBlock>
+                                    </DataTemplate>
+                                </GridViewColumn.CellTemplate>
+
+                            </GridViewColumn>
                             <GridViewColumn Width="{Binding ElementName=Col3, Path=ActualWidth}"
                                             DisplayMemberBinding="{Binding TypeDesc}"
                                             Header="类型" />
@@ -267,6 +291,10 @@
                             <MenuItem Command="{Binding AddJsScriptCommand}" Header="添加JS脚本" />
                             <MenuItem Command="{Binding AddPathingCommand}" Header="添加路径追踪任务" />
                             <MenuItem Command="{Binding AddKmScriptCommand}" Header="添加键鼠脚本" />
+                            <MenuItem Command="{Binding AddNextFlagCommand}" Header="下一次任务从此处执行"
+                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
+                                      />
+                            
                             <MenuItem Command="{Binding EditScriptCommonCommand}"
                                       CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedItem}"
                                       Header="修改通用配置" />
diff --git a/BetterGenshinImpact/ViewModel/Pages/HotKeyPageViewModel.cs b/BetterGenshinImpact/ViewModel/Pages/HotKeyPageViewModel.cs
index 767c0ac2..bfb6dc36 100644
--- a/BetterGenshinImpact/ViewModel/Pages/HotKeyPageViewModel.cs
+++ b/BetterGenshinImpact/ViewModel/Pages/HotKeyPageViewModel.cs
@@ -210,7 +210,13 @@ private void BuildHotKeySettingModelList()
             Config.HotKeyConfig.CancelTaskHotkeyType,
             (_, _) => { CancellationContext.Instance.Cancel(); }
         ));
-
+        systemDirectory.Children.Add(new HotKeySettingModel(
+            "暂停当前脚本/独立任务",
+            nameof(Config.HotKeyConfig.SuspendHotkey),
+            Config.HotKeyConfig.SuspendHotkey,
+            Config.HotKeyConfig.SuspendHotkeyType,
+            (_, _) => { RunnerContext.Instance.IsSuspend = !RunnerContext.Instance.IsSuspend; }
+        ));
         var takeScreenshotHotKeySettingModel = new HotKeySettingModel(
             "游戏截图",
             nameof(Config.HotKeyConfig.TakeScreenshotHotkey),
diff --git a/BetterGenshinImpact/ViewModel/Pages/ScriptControlViewModel.cs b/BetterGenshinImpact/ViewModel/Pages/ScriptControlViewModel.cs
index 709aea27..64da072f 100644
--- a/BetterGenshinImpact/ViewModel/Pages/ScriptControlViewModel.cs
+++ b/BetterGenshinImpact/ViewModel/Pages/ScriptControlViewModel.cs
@@ -28,6 +28,9 @@
 using Wpf.Ui.Controls;
 using Wpf.Ui.Violeta.Controls;
 using StackPanel = Wpf.Ui.Controls.StackPanel;
+using System.Windows.Navigation;
+using Newtonsoft.Json.Linq;
+using static Vanara.PInvoke.User32;
 
 namespace BetterGenshinImpact.ViewModel.Pages;
 
@@ -92,7 +95,45 @@ private void OnAddScriptGroup()
             }
         }
     }
+    [RelayCommand]
+    public void OnRenameScriptGroup(ScriptGroup? item)
+    {
 
+        if (item == null)
+        {
+            return;
+        }
+
+        var str = PromptDialog.Prompt("请输入配置组名称", "重命名配置组", item.Name);
+        if (!string.IsNullOrEmpty(str))
+        {
+            if (item.Name == str)
+            {
+                return;
+            }
+            // 检查是否已存在
+            if (ScriptGroups.Any(x => x.Name == str))
+            {
+                _snackbarService.Show(
+                    "配置组已存在",
+                    $"配置组 {str} 已经存在，重命名失败",
+                    ControlAppearance.Caution,
+                    null,
+                    TimeSpan.FromSeconds(2)
+                );
+            }
+            else
+            {
+
+                File.Move(Path.Combine(ScriptGroupPath, $"{item.Name}.json"), Path.Combine(ScriptGroupPath, $"{str}.json"));
+                item.Name = str;
+                WriteScriptGroup(item);
+            }
+        }
+
+
+
+    }
     [RelayCommand]
     public void OnDeleteScriptGroup(ScriptGroup? item)
     {
@@ -163,6 +204,8 @@ private void OnAddKmScript()
         }
     }
 
+
+
     [RelayCommand]
     private void OnAddPathing()
     {
@@ -304,7 +347,27 @@ public void OnEditScriptCommon(ScriptGroupProject? item)
         //     WriteScriptGroup(group);
         // }
     }
+    [RelayCommand]
+    private void AddNextFlag(ScriptGroupProject? item)
+    {
+        if (item == null)
+        {
+            return;
+        }
+        List<ValueTuple<string,int, string, string>> nextScheduledTask = TaskContext.Instance().Config.NextScheduledTask;
+        var nst=nextScheduledTask.Find(item2 => item2.Item1== SelectedScriptGroup?.Name);
+        if (nst != default) {
+            nextScheduledTask.Remove(nst);
+        }
+        nextScheduledTask.Add((SelectedScriptGroup?.Name,item.Index, item.FolderName, item.Name));
+        foreach (var item1 in SelectedScriptGroup.Projects)
+        {
+            item1.NextFlag = false;
+        }
+        item.NextFlag = true;
+        
 
+    }
     public static void ShowEditWindow(object viewModel)
     {
         var uiMessageBox = new Wpf.Ui.Controls.MessageBox
@@ -499,6 +562,19 @@ private void ReadScriptGroup()
                 {
                     var json = File.ReadAllText(file);
                     var group = ScriptGroup.FromJson(json);
+
+
+                    var nst = TaskContext.Instance().Config.NextScheduledTask.Find(item=>item.Item1 == group.Name);
+                    foreach (var item in group.Projects)
+                    {
+                        item.NextFlag = false;
+                        if (nst != default) {
+                            if (nst.Item2 == item.Index && nst.Item3==item.FolderName && nst.Item4==item.Name) {
+                                item.NextFlag = true;
+                            }
+                        }
+                    }
+
                     groups.Add(group);
                 }
                 catch (Exception e)
@@ -581,7 +657,7 @@ public async Task OnStartScriptGroupAsync()
         }
 
         RunnerContext.Instance.Reset();
-        await _scriptService.RunMulti(SelectedScriptGroup.Projects, SelectedScriptGroup.Name);
+        await _scriptService.RunMulti(getNextProjects(SelectedScriptGroup), SelectedScriptGroup.Name);
     }
 
     [RelayCommand]
@@ -624,6 +700,45 @@ public void OnOpenScriptGroupSettings()
         WriteScriptGroup(SelectedScriptGroup);
     }
 
+    public List<ScriptGroupProject> getNextProjects(ScriptGroup group) {
+        List<ScriptGroupProject> ls = new List<ScriptGroupProject>();
+        bool start = false;
+        foreach (var item in group.Projects)
+        {
+            if (item.NextFlag??false) { 
+                start = true;
+            }
+            if (start) {
+                ls.Add(item);
+            }
+        }
+        if (!start)
+        {
+            ls.AddRange(group.Projects);
+        }
+
+        //拿出来后清空，和置状态
+        if (start) {
+            List<ValueTuple<string, int, string, string>> nextScheduledTask = TaskContext.Instance().Config.NextScheduledTask;
+            foreach (var item in nextScheduledTask)
+            {
+                if (item.Item1 == group.Name) {
+                    nextScheduledTask.Remove(item);
+                    break;
+                }
+            }
+            foreach (var item in group.Projects)
+            {
+                item.NextFlag = false;
+            }
+
+
+        }
+
+
+
+        return ls;
+    }
     [RelayCommand]
     public async Task OnStartMultiScriptGroupAsync()
     {
@@ -697,7 +812,8 @@ public async Task OnStartMultiScriptGroupAsync()
             RunnerContext.Instance.IsContinuousRunGroup = true;
             foreach (var scriptGroup in selectedGroups)
             {
-                await _scriptService.RunMulti(scriptGroup.Projects, scriptGroup.Name);
+               
+                await _scriptService.RunMulti(getNextProjects(scriptGroup), scriptGroup.Name);
                 await Task.Delay(2000);
             }
             RunnerContext.Instance.Reset();
