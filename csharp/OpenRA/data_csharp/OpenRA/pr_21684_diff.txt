diff --git a/OpenRA.Mods.Common/Scripting/Properties/GeneralProperties.cs b/OpenRA.Mods.Common/Scripting/Properties/GeneralProperties.cs
index a7e4b2f55cc2..17feb2e60fa9 100644
--- a/OpenRA.Mods.Common/Scripting/Properties/GeneralProperties.cs
+++ b/OpenRA.Mods.Common/Scripting/Properties/GeneralProperties.cs
@@ -96,7 +96,6 @@ public Player EffectiveOwner
 	[ScriptPropertyGroup("General")]
 	public class GeneralProperties : ScriptActorProperties
 	{
-		readonly IFacing facing;
 		readonly AutoTarget autotarget;
 		readonly ScriptTags scriptTags;
 		readonly Tooltip[] tooltips;
@@ -104,30 +103,11 @@ public class GeneralProperties : ScriptActorProperties
 		public GeneralProperties(ScriptContext context, Actor self)
 			: base(context, self)
 		{
-			facing = self.TraitOrDefault<IFacing>();
 			autotarget = self.TraitOrDefault<AutoTarget>();
 			scriptTags = self.TraitOrDefault<ScriptTags>();
 			tooltips = self.TraitsImplementing<Tooltip>().ToArray();
 		}
 
-		[Desc("The actor position in cell coordinates.")]
-		public CPos Location => Self.Location;
-
-		[Desc("The actor position in world coordinates.")]
-		public WPos CenterPosition => Self.CenterPosition;
-
-		[Desc("The direction that the actor is facing.")]
-		public WAngle Facing
-		{
-			get
-			{
-				if (facing == null)
-					throw new LuaException($"Actor '{Self}' doesn't define a facing");
-
-				return facing.Facing;
-			}
-		}
-
 		[ScriptActorPropertyActivity]
 		[Desc("Instantly moves the actor to the specified cell.")]
 		public void Teleport(CPos cell)
@@ -213,4 +193,32 @@ public bool HasTag(string tag)
 			return IsTaggable && scriptTags.HasTag(tag);
 		}
 	}
+
+	[ScriptPropertyGroup("General")]
+	public class LocationProperties : ScriptActorProperties, Requires<IOccupySpaceInfo>
+	{
+		public LocationProperties(ScriptContext context, Actor self)
+			: base(context, self) { }
+
+		[Desc("The actor position in cell coordinates.")]
+		public CPos Location => Self.Location;
+
+		[Desc("The actor position in world coordinates.")]
+		public WPos CenterPosition => Self.CenterPosition;
+	}
+
+	[ScriptPropertyGroup("General")]
+	public class FacingProperties : ScriptActorProperties, Requires<IFacingInfo>
+	{
+		readonly IFacing facing;
+
+		public FacingProperties(ScriptContext context, Actor self)
+			: base(context, self)
+		{
+			facing = self.Trait<IFacing>();
+		}
+
+		[Desc("The direction that the actor is facing.")]
+		public WAngle Facing => facing.Facing;
+	}
 }
