diff --git a/OpenRA.Mods.Common/Activities/MoveToDock.cs b/OpenRA.Mods.Common/Activities/MoveToDock.cs
index 4fafe5784844..b34b9dd774f9 100644
--- a/OpenRA.Mods.Common/Activities/MoveToDock.cs
+++ b/OpenRA.Mods.Common/Activities/MoveToDock.cs
@@ -29,6 +29,8 @@ public class MoveToDock : Activity
 		readonly bool forceEnter;
 		readonly bool ignoreOccupancy;
 
+		bool dockingCancelled;
+
 		public MoveToDock(Actor self, Actor dockHostActor = null, IDockHost dockHost = null,
 			bool forceEnter = false, bool ignoreOccupancy = false, Color? dockLineColor = null)
 		{
@@ -44,17 +46,25 @@ public MoveToDock(Actor self, Actor dockHostActor = null, IDockHost dockHost = n
 
 		protected override void OnFirstRun(Actor self)
 		{
-			if (IsCanceling || dockClient.IsTraitDisabled)
+			if (dockClient.IsTraitDisabled)
 				return;
 
 			// We were ordered to dock to an actor but host was unspecified.
 			if (dockHostActor != null && dockHost == null)
 			{
+				if (dockHostActor.IsDead || !dockHostActor.IsInWorld)
+				{
+					dockingCancelled = true;
+					return;
+				}
+
 				var link = dockClient.AvailableDockHosts(dockHostActor, default, forceEnter, ignoreOccupancy)
 					.ClosestDock(self, dockClient);
 
 				if (link.HasValue)
 					dockHost = link.Value.Trait;
+				else
+					dockingCancelled = true;
 			}
 		}
 
@@ -63,7 +73,7 @@ public override bool Tick(Actor self)
 			if (IsCanceling)
 				return true;
 
-			if (dockClient.IsTraitDisabled)
+			if (dockingCancelled || dockClient.IsTraitDisabled)
 			{
 				Cancel(self, true);
 				return true;
diff --git a/OpenRA.Mods.Common/Traits/Buildings/TransformsIntoDockClientManager.cs b/OpenRA.Mods.Common/Traits/Buildings/TransformsIntoDockClientManager.cs
index ed6a99ed2392..73b6bbeb4bf2 100644
--- a/OpenRA.Mods.Common/Traits/Buildings/TransformsIntoDockClientManager.cs
+++ b/OpenRA.Mods.Common/Traits/Buildings/TransformsIntoDockClientManager.cs
@@ -70,7 +70,7 @@ IEnumerable<IOrderTargeter> IIssueOrder.Orders
 					Info.EnterCursor,
 					Info.EnterBlockedCursor,
 					() => Info.RequiresForceMove,
-					DockingPossible,
+					CanQueueDockAt,
 					CanDockAt);
 			}
 		}
@@ -109,9 +109,13 @@ void IResolveOrder.ResolveOrder(Actor self, Order order)
 
 		string IOrderVoice.VoicePhraseForOrder(Actor self, Order order)
 		{
-			if (order.OrderString == "Dock" && CanDockAt(order.Target.Actor, false))
-				return Info.Voice;
-			else if (order.OrderString == "ForceDock" && CanDockAt(order.Target.Actor, true))
+			if (order.Target.Type != TargetType.Actor || IsTraitDisabled)
+				return null;
+
+			if (order.OrderString != "Dock" && order.OrderString != "ForceDock")
+				return null;
+
+			if (CanQueueDockAt(order.Target.Actor, order.OrderString == "ForceDock", order.Queued))
 				return Info.Voice;
 
 			return null;
@@ -125,12 +129,6 @@ Order IIssueOrder.IssueOrder(Actor self, IOrderTargeter order, in Target target,
 			return null;
 		}
 
-		/// <summary>Clone of <see cref="DockClientManager.DockingPossible(Actor, bool)"/>.</summary>
-		public bool DockingPossible(Actor target, bool forceEnter)
-		{
-			return !IsTraitDisabled && target.TraitsImplementing<DockHost>().Any(host => dockClients.Any(client => client.CanDock(host.GetDockType)));
-		}
-
 		/// <summary>Clone of <see cref="DockClientManager.CanDockAt(Actor, bool, bool)"/>.</summary>
 		public bool CanDockAt(Actor target, bool forceEnter)
 		{
@@ -140,5 +138,16 @@ public bool CanDockAt(Actor target, bool forceEnter)
 			return !IsTraitDisabled && target.TraitsImplementing<DockHost>().Any(
 				host => dockClients.Any(client => client.CanDockAt(target, host, forceEnter, true)));
 		}
+
+		/// <summary>Clone of <see cref="DockClientManager.CanQueueDockAt(Actor, bool, bool)"/>.</summary>
+		public bool CanQueueDockAt(Actor target, bool forceEnter, bool isQueued)
+		{
+			if (Info.RequiresForceMove && !forceEnter)
+				return false;
+
+			return (!IsTraitDisabled)
+				&& target.TraitsImplementing<IDockHost>().Any(
+					host => dockClients.Any(client => client.CanQueueDockAt(target, host, forceEnter, isQueued)));
+		}
 	}
 }
diff --git a/OpenRA.Mods.Common/Traits/DockClientBase.cs b/OpenRA.Mods.Common/Traits/DockClientBase.cs
index e54220919975..cb2a08f7092a 100644
--- a/OpenRA.Mods.Common/Traits/DockClientBase.cs
+++ b/OpenRA.Mods.Common/Traits/DockClientBase.cs
@@ -37,9 +37,14 @@ public virtual bool CanDock(BitSet<DockType> type, bool forceEnter = false)
 
 		public virtual bool CanDockAt(Actor hostActor, IDockHost host, bool forceEnter = false, bool ignoreOccupancy = false)
 		{
-			return (forceEnter || self.Owner.IsAlliedWith(hostActor.Owner)) &&
-				CanDock(host.GetDockType, forceEnter) &&
-				host.IsDockingPossible(self, this, ignoreOccupancy);
+			return CanDock(host.GetDockType, forceEnter)
+				&& host.IsDockingPossible(self, this, ignoreOccupancy);
+		}
+
+		public virtual bool CanQueueDockAt(Actor hostActor, IDockHost host, bool forceEnter, bool isQueued)
+		{
+			return CanDock(host.GetDockType, true)
+				&& host.IsDockingPossible(self, this, true);
 		}
 
 		public virtual void OnDockStarted(Actor self, Actor hostActor, IDockHost host) { }
diff --git a/OpenRA.Mods.Common/Traits/DockClientManager.cs b/OpenRA.Mods.Common/Traits/DockClientManager.cs
index 794ad5895fc8..ca1d17f67123 100644
--- a/OpenRA.Mods.Common/Traits/DockClientManager.cs
+++ b/OpenRA.Mods.Common/Traits/DockClientManager.cs
@@ -160,7 +160,7 @@ IEnumerable<IOrderTargeter> IIssueOrder.Orders
 					Info.EnterCursor,
 					Info.EnterBlockedCursor,
 					() => requireForceMove,
-					DockingPossible,
+					CanQueueDockAt,
 					(target, forceEnter) => CanDockAt(target, forceEnter, true));
 			}
 		}
@@ -194,9 +194,10 @@ string IOrderVoice.VoicePhraseForOrder(Actor self, Order order)
 			if (order.Target.Type != TargetType.Actor || IsTraitDisabled)
 				return null;
 
-			if (order.OrderString == "Dock" && CanDockAt(order.Target.Actor, false, true))
-				return Info.Voice;
-			else if (order.OrderString == "ForceDock" && CanDockAt(order.Target.Actor, true, true))
+			if (order.OrderString != "Dock" && order.OrderString != "ForceDock")
+				return null;
+
+			if (CanQueueDockAt(order.Target.Actor, order.OrderString == "ForceDock", order.Queued))
 				return Info.Voice;
 
 			return null;
@@ -225,13 +226,13 @@ void RequireForceMoveConditionChanged(Actor self, IReadOnlyDictionary<string, in
 		}
 
 		/// <summary>Do we have an enabled client with matching <paramref name="type"/>.</summary>
-		public bool DockingPossible(BitSet<DockType> type, bool forceEnter = false)
+		public bool CanDock(BitSet<DockType> type, bool forceEnter = false)
 		{
 			return !IsTraitDisabled && dockClients.Any(client => client.CanDock(type, forceEnter));
 		}
 
 		/// <summary>Does this <paramref name="target"/> contain at least one enabled <see cref="IDockHost"/> with maching <see cref="DockType"/>.</summary>
-		public bool DockingPossible(Actor target, bool forceEnter = false)
+		public bool CanDock(Actor target, bool forceEnter = false)
 		{
 			return !IsTraitDisabled &&
 				target.TraitsImplementing<IDockHost>()
@@ -252,6 +253,14 @@ public bool CanDockAt(Actor target, bool forceEnter = false, bool ignoreOccupanc
 				host => dockClients.Any(client => client.CanDockAt(target, host, forceEnter, ignoreOccupancy)));
 		}
 
+		/// <summary>Can we dock to this <paramref name="target"/>.</summary>
+		public bool CanQueueDockAt(Actor target, bool forceEnter, bool isQueued)
+		{
+			return !IsTraitDisabled
+				&& target.TraitsImplementing<IDockHost>()
+				.Any(host => dockClients.Any(client => client.CanQueueDockAt(target, host, forceEnter, isQueued)));
+		}
+
 		/// <summary>Find the closest viable <see cref="IDockHost"/>.</summary>
 		/// <remarks>If <paramref name="type"/> is not set, scans all clients. Does not check if <see cref="DockClientManager"/> is enabled.</remarks>
 		public TraitPair<IDockHost>? ClosestDock(IDockHost ignore, BitSet<DockType> type = default, bool forceEnter = false, bool ignoreOccupancy = false)
@@ -292,11 +301,11 @@ public class DockActorTargeter : IOrderTargeter
 		readonly string enterCursor;
 		readonly string enterBlockedCursor;
 		readonly Func<bool> requireForceMove;
-		readonly Func<Actor, bool, bool> canTarget;
+		readonly Func<Actor, bool, bool, bool> canTarget;
 		readonly Func<Actor, bool, bool> useEnterCursor;
 
 		public DockActorTargeter(int priority, string enterCursor, string enterBlockedCursor,
-			Func<bool> requireForceMove, Func<Actor, bool, bool> canTarget, Func<Actor, bool, bool> useEnterCursor)
+			Func<bool> requireForceMove, Func<Actor, bool, bool, bool> canTarget, Func<Actor, bool, bool> useEnterCursor)
 		{
 			OrderID = "Dock";
 			OrderPriority = priority;
@@ -325,10 +334,13 @@ public bool CanTarget(Actor self, in Target target, ref TargetModifiers modifier
 			if (requireForceMove() && !forceEnter)
 				return false;
 
-			if (!canTarget(target.Actor, forceEnter))
+			if (!canTarget(target.Actor, forceEnter, IsQueued))
 				return false;
 
-			cursor = useEnterCursor(target.Actor, forceEnter) ? enterCursor : enterBlockedCursor;
+			cursor = IsQueued || useEnterCursor(target.Actor, forceEnter)
+				? enterCursor
+				: enterBlockedCursor;
+
 			return true;
 		}
 
diff --git a/OpenRA.Mods.Common/Traits/Harvester.cs b/OpenRA.Mods.Common/Traits/Harvester.cs
index 87b6d09f7331..455edc2013c3 100644
--- a/OpenRA.Mods.Common/Traits/Harvester.cs
+++ b/OpenRA.Mods.Common/Traits/Harvester.cs
@@ -137,6 +137,12 @@ public override bool CanDockAt(Actor hostActor, IDockHost host, bool forceEnter
 				&& (self.Owner == hostActor.Owner || (ignoreOccupancy && self.Owner.IsAlliedWith(hostActor.Owner)));
 		}
 
+		public override bool CanQueueDockAt(Actor hostActor, IDockHost host, bool forceEnter, bool isQueued)
+		{
+			return base.CanQueueDockAt(hostActor, host, forceEnter, isQueued)
+				&& self.Owner.IsAlliedWith(hostActor.Owner);
+		}
+
 		void UpdateCondition(Actor self)
 		{
 			if (string.IsNullOrEmpty(Info.EmptyCondition))
diff --git a/OpenRA.Mods.Common/TraitsInterfaces.cs b/OpenRA.Mods.Common/TraitsInterfaces.cs
index 74e24f3316cd..cc766a47b860 100644
--- a/OpenRA.Mods.Common/TraitsInterfaces.cs
+++ b/OpenRA.Mods.Common/TraitsInterfaces.cs
@@ -220,19 +220,26 @@ public interface IDockClient
 		bool OnDockTick(Actor self, Actor hostActor, IDockHost dock);
 		void OnDockCompleted(Actor self, Actor hostActor, IDockHost host);
 
-		/// <summary>Is this client allowed to dock.</summary>
+		/// <summary>Are we allowed to dock.</summary>
 		/// <remarks>
 		/// Does not check if <see cref="Traits.DockClientManager"/> is enabled.
 		/// Function should only be called from within <see cref="IDockClient"/> or <see cref="Traits.DockClientManager"/>.
 		/// </remarks>
 		bool CanDock(BitSet<DockType> type, bool forceEnter = false);
 
-		/// <summary>Is this client allowed to dock to <paramref name="host"/>.</summary>
+		/// <summary>Are we allowed to dock to this <paramref name="host"/>.</summary>
 		/// <remarks>
 		/// Does not check if <see cref="Traits.DockClientManager"/> is enabled.
 		/// Function should only be called from within <see cref="IDockClient"/> or <see cref="Traits.DockClientManager"/>.
 		/// </remarks>
 		bool CanDockAt(Actor hostActor, IDockHost host, bool forceEnter = false, bool ignoreOccupancy = false);
+
+		/// <summary>Are we allowed to give a docking order for this <paramref name="host"/>.</summary>
+		/// <remarks>
+		/// Does not check if <see cref="Traits.DockClientManager"/> is enabled.
+		/// Function should only be called from within <see cref="IDockClient"/> or <see cref="Traits.DockClientManager"/>.
+		/// </remarks>
+		bool CanQueueDockAt(Actor hostActor, IDockHost host, bool forceEnter, bool isQueued);
 	}
 
 	public interface IDockHostInfo : ITraitInfoInterface { }
