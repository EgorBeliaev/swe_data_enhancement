[
    {
        "title": "Fix BaseBuilderBotModule.LocomotorsForProducibles."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Account for per-actor production (e.g. ProductionQueue) and per-player production (e.g. ClassicProductionQueue). This requires resolving the Production and ProductionQueue traits on both the producing actor, and the owning player actor.\r\n\r\nWhen setting rally points, check the actor didn't die first.\r\n\r\nFixes #21663"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": "AI managed to put spawnpoint in an unreachable position\r\n\r\n<img width=\"385\" alt=\"Screenshot 2024-12-02 at 22 48 03\" src=\"https://github.com/user-attachments/assets/6d7617b9-64ae-4f91-8be2-802e27246b98\">\r\n\r\nOn Morbid Aimless Poseidon, bottom left. I didn't quit gracefully so I don't have the replay \ud83d\ude1e \r\n"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": "I ran another AI game and managed to get a crash `Attempted to\r\nget trait from destroyed object (hand 637 (not in world))` in this function. The log doesn't mention which line specifically\r\n\r\nat OpenRA.Mods.Common.Traits.BaseBuilderBotModule.LocomotorsForProducibles(Actor producer)\r\n   at OpenRA.Mods.Common.Traits.BaseBuilderBotModule.SetRallyPoint(IBot bot, TraitPair`1 rp) in /OpenRA/OpenRA.Mods.Common/Traits/BotModules/BaseBuilderBotModule.cs:line 310\r\n\r\n<img width=\"660\" alt=\"Screenshot 2024-12-08 at 11 36 40\" src=\"https://github.com/user-attachments/assets/99845729-3267-4f14-8c26-9a122fabf1c8\">\r\n\r\nat about 3:30 the pink ai places rallypoint in innacacible location\r\n\r\n\r\n[cnc-2024-12-08T093305Z-0.orarep.zip](https://github.com/user-attachments/files/18051556/cnc-2024-12-08T093305Z-0.orarep.zip)\r\n"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": "The issue seems to lie in multiqueue, the `ProductionQueue` trait being attached to the structure, while we are looking for it on the player actor. \r\n\r\nThe is dead check seems to be consistently crashing in my test games"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": "I suppose service depot doesn't produce anything \ud83d\ude04\r\n\r\n<img width=\"251\" alt=\"Screenshot 2024-12-19 at 19 17 43\" src=\"https://github.com/user-attachments/assets/bb8a5064-84f1-47b3-b614-1ead9a7a43ce\" />\r\n"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": ""
    },
    {
        "author": {
            "login": "RoosterDragon"
        },
        "body": "Based on other usage, looks like I was missing a `!p.IsTraitDisabled` check, added now."
    },
    {
        "author": {
            "login": "RoosterDragon"
        },
        "body": "An IsDead check would likely solve the not in world crash.\r\n\r\nAs to the inaccessible locations, I'm not easily seeing where the production checks are going wrong on that. If anybody who is more familiar with the production aspect of things can see the missing piece please do point it out."
    },
    {
        "author": {
            "login": "RoosterDragon"
        },
        "body": "Ah - there is per-player and per-actor queue setups. Okay I've updated the code to account for that and a test run in RA and TD both seems reasonable at a glance now.\r\n\r\nAlso adding a missing Disposed check which will cover us for the case when we decide a rally point needs redoing and queue it for later, but it's died a few ticks later when we actually get around to doing it.\r\n\r\nI'm feeling better about this version, although not fully confident."
    },
    {
        "author": {
            "login": "penev92"
        },
        "body": "I'm probably quite rusty at this point, but what's the use-case for the first `// Player-wide production` case?\r\n`ProductionQueue`s can be either on the production structure OR the player actor, but `Production` and its derivatives are always on the structures \ud83e\udd14 \r\n"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": "[changelog](https://github.com/OpenRA/OpenRA/wiki/Changelog/_compare/1f401b977a40ef1e2ff5ca047c882b91a60bfb81...52c8892f164583cec5a1a83a089f4b92a0f443fb)"
    },
    {
        "author": {
            "login": "PunkPun"
        },
        "body": "https://github.com/OpenRA/OpenRA/commit/68ad9163ffd2e0c1d6b80b332564bf92b7b5b6cb"
    },
    {
        "author": {
            "login": "RoosterDragon"
        },
        "body": "> I'm probably quite rusty at this point, but what's the use-case for the first `// Player-wide production` case? `ProductionQueue`s can be either on the production structure OR the player actor, but `Production` and its derivatives are always on the structures \ud83e\udd14\r\n\r\nI am struggling with the usage of these traits. I probably have this wrong and thus it's dead code."
    }
]