diff --git a/src/settings-ui/Settings.UI.Library/ImageSize.cs b/src/settings-ui/Settings.UI.Library/ImageSize.cs
index 7bbad59726e6..017f66582014 100644
--- a/src/settings-ui/Settings.UI.Library/ImageSize.cs
+++ b/src/settings-ui/Settings.UI.Library/ImageSize.cs
@@ -3,241 +3,119 @@
 // See the LICENSE file in the project root for more information.
 
 using System;
+using System.Collections.Generic;
 using System.ComponentModel;
 using System.Runtime.CompilerServices;
 using System.Text.Json;
 using System.Text.Json.Serialization;
+using Settings.UI.Library.Resources;
 
-namespace Microsoft.PowerToys.Settings.UI.Library
-{
-    public class ImageSize : INotifyPropertyChanged
-    {
-        public ImageSize(int id)
-        {
-            Id = id;
-            Name = string.Empty;
-            Fit = ResizeFit.Fit;
-            Width = 0;
-            Height = 0;
-            Unit = ResizeUnit.Pixel;
-        }
-
-        public ImageSize()
-        {
-            Id = 0;
-            Name = string.Empty;
-            Fit = ResizeFit.Fit;
-            Width = 0;
-            Height = 0;
-            Unit = ResizeUnit.Pixel;
-        }
-
-        public ImageSize(int id, string name, ResizeFit fit, double width, double height, ResizeUnit unit)
-        {
-            Id = id;
-            Name = name;
-            Fit = fit;
-            Width = width;
-            Height = height;
-            Unit = unit;
-        }
+namespace Microsoft.PowerToys.Settings.UI.Library;
 
-        private int _id;
-        private string _name;
-        private ResizeFit _fit;
-        private double _height;
-        private double _width;
-        private ResizeUnit _unit;
-
-        public int Id
-        {
-            get
-            {
-                return _id;
-            }
-
-            set
-            {
-                if (_id != value)
-                {
-                    _id = value;
-                    OnPropertyChanged();
-                }
-            }
-        }
-
-        public int ExtraBoxOpacity
-        {
-            get
-            {
-                if (Unit == ResizeUnit.Percent && Fit != ResizeFit.Stretch)
-                {
-                    return 0;
-                }
-                else
-                {
-                    return 100;
-                }
-            }
-        }
+public partial class ImageSize : INotifyPropertyChanged
+{
+    public event PropertyChangedEventHandler PropertyChanged;
 
-        public bool EnableEtraBoxes
+    private bool SetProperty<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
+    {
+        bool changed = !EqualityComparer<T>.Default.Equals(field, value);
+        if (changed)
         {
-            get
-            {
-                if (Unit == ResizeUnit.Percent && Fit != ResizeFit.Stretch)
-                {
-                    return false;
-                }
-                else
-                {
-                    return true;
-                }
-            }
+            field = value;
+            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
+            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(AccessibleTextHelper)));
         }
 
-        [JsonPropertyName("name")]
-        public string Name
-        {
-            get
-            {
-                return _name;
-            }
+        return changed;
+    }
 
-            set
-            {
-                if (_name != value)
-                {
-                    _name = value;
-                    OnPropertyChanged();
-                }
-            }
-        }
+    public ImageSize(int id = 0, string name = "", ResizeFit fit = ResizeFit.Fit, double width = 0, double height = 0, ResizeUnit unit = ResizeUnit.Pixel)
+    {
+        Id = id;
+        Name = name;
+        Fit = fit;
+        Width = width;
+        Height = height;
+        Unit = unit;
+    }
 
-        [JsonPropertyName("fit")]
-        public ResizeFit Fit
-        {
-            get
-            {
-                return _fit;
-            }
+    private int _id;
+    private string _name;
+    private ResizeFit _fit;
+    private double _height;
+    private double _width;
+    private ResizeUnit _unit;
 
-            set
-            {
-                if (_fit != value)
-                {
-                    _fit = value;
-                    OnPropertyChanged();
-                    OnPropertyChanged(nameof(ExtraBoxOpacity));
-                    OnPropertyChanged(nameof(EnableEtraBoxes));
-                }
-            }
-        }
+    public int Id
+    {
+        get => _id;
+        set => SetProperty(ref _id, value);
+    }
 
-        [JsonPropertyName("width")]
-        public double Width
-        {
-            get
-            {
-                return _width;
-            }
+    /// <summary>
+    /// Gets a value indicating whether the <see cref="Height"/> property is used. When false, the
+    /// <see cref="Width"/> property is used to evenly scale the image in both X and Y dimensions.
+    /// </summary>
+    [JsonIgnore]
+    public bool IsHeightUsed
+    {
+        // Height is ignored when using percentage scaling where the aspect ratio is maintained
+        // (i.e. non-stretch fits). In all other cases, both Width and Height are needed.
+        get => !(Unit == ResizeUnit.Percent && Fit != ResizeFit.Stretch);
+    }
 
-            set
-            {
-                double newWidth = -1;
-
-                if (value < 0 || double.IsNaN(value))
-                {
-                    newWidth = 0;
-                }
-                else
-                {
-                    newWidth = value;
-                }
-
-                if (_width != newWidth)
-                {
-                    _width = newWidth;
-                    OnPropertyChanged();
-                }
-            }
-        }
+    [JsonPropertyName("name")]
+    public string Name
+    {
+        get => _name;
+        set => SetProperty(ref _name, value);
+    }
 
-        [JsonPropertyName("height")]
-        public double Height
+    [JsonPropertyName("fit")]
+    public ResizeFit Fit
+    {
+        get => _fit;
+        set
         {
-            get
-            {
-                return _height;
-            }
-
-            set
+            if (SetProperty(ref _fit, value))
             {
-                double newHeight = -1;
-
-                if (value < 0 || double.IsNaN(value))
-                {
-                    newHeight = 0;
-                }
-                else
-                {
-                    newHeight = value;
-                }
-
-                if (_height != newHeight)
-                {
-                    _height = newHeight;
-                    OnPropertyChanged();
-                }
+                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsHeightUsed)));
             }
         }
+    }
 
-        [JsonPropertyName("unit")]
-        public ResizeUnit Unit
-        {
-            get
-            {
-                return _unit;
-            }
-
-            set
-            {
-                if (_unit != value)
-                {
-                    _unit = value;
-                    OnPropertyChanged();
-                    OnPropertyChanged(nameof(ExtraBoxOpacity));
-                    OnPropertyChanged(nameof(EnableEtraBoxes));
-                }
-            }
-        }
+    [JsonPropertyName("width")]
+    public double Width
+    {
+        get => _width;
+        set => SetProperty(ref _width, value < 0 || double.IsNaN(value) ? 0 : value);
+    }
 
-        public event PropertyChangedEventHandler PropertyChanged;
+    [JsonPropertyName("height")]
+    public double Height
+    {
+        get => _height;
+        set => SetProperty(ref _height, value < 0 || double.IsNaN(value) ? 0 : value);
+    }
 
-        public void OnPropertyChanged([CallerMemberName] string propertyName = null)
+    [JsonPropertyName("unit")]
+    public ResizeUnit Unit
+    {
+        get => _unit;
+        set
         {
-            var handler = PropertyChanged;
-            if (handler != null)
+            if (SetProperty(ref _unit, value))
             {
-                handler(this, new PropertyChangedEventArgs(propertyName));
+                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsHeightUsed)));
             }
         }
+    }
 
-        public void Update(ImageSize modifiedSize)
-        {
-            ArgumentNullException.ThrowIfNull(modifiedSize);
-
-            Id = modifiedSize.Id;
-            Name = modifiedSize.Name;
-            Fit = modifiedSize.Fit;
-            Width = modifiedSize.Width;
-            Height = modifiedSize.Height;
-            Unit = modifiedSize.Unit;
-        }
+    /// <summary>
+    /// Gets access to all properties for formatting accessibility descriptions.
+    /// </summary>
+    [JsonIgnore]
+    public ImageSize AccessibleTextHelper => this;
 
-        public string ToJsonString()
-        {
-            return JsonSerializer.Serialize(this);
-        }
-    }
+    public string ToJsonString() => JsonSerializer.Serialize(this);
 }
diff --git a/src/settings-ui/Settings.UI.UnitTests/ViewModelTests/ImageResizer.cs b/src/settings-ui/Settings.UI.UnitTests/ViewModelTests/ImageResizer.cs
index 1d2c62daecf1..c5175bc180e4 100644
--- a/src/settings-ui/Settings.UI.UnitTests/ViewModelTests/ImageResizer.cs
+++ b/src/settings-ui/Settings.UI.UnitTests/ViewModelTests/ImageResizer.cs
@@ -205,7 +205,7 @@ public void EncoderShouldUpdateValueWhenSuccessful()
         }
 
         [TestMethod]
-        public void AddRowShouldAddNewImageSizeWhenSuccessful()
+        public void AddImageSizeShouldAddNewImageSizeWhenSuccessful()
         {
             // arrange
             var mockSettingsUtils = ISettingsUtilsMocks.GetStubSettingsUtils<ImageResizerSettings>();
@@ -214,7 +214,7 @@ public void AddRowShouldAddNewImageSizeWhenSuccessful()
             int sizeOfOriginalArray = viewModel.Sizes.Count;
 
             // act
-            viewModel.AddRow("New size");
+            viewModel.AddImageSize();
 
             // Assert
             Assert.AreEqual(sizeOfOriginalArray + 1, viewModel.Sizes.Count);
@@ -229,15 +229,15 @@ public void NewlyAddedImageSizeHasCorrectValues()
             ImageResizerViewModel viewModel = new ImageResizerViewModel(mockSettingsUtils.Object, SettingsRepository<GeneralSettings>.GetInstance(_mockGeneralSettingsUtils.Object), sendMockIPCConfigMSG, (string name) => name);
 
             // act
-            viewModel.AddRow("New size");
+            viewModel.AddImageSize("New size");
 
             // Assert
             ImageSize newTestSize = viewModel.Sizes.First(x => x.Id == 0);
-            Assert.AreEqual(newTestSize.Name, "New size 1");
-            Assert.AreEqual(newTestSize.Fit, ResizeFit.Fit);
-            Assert.AreEqual(newTestSize.Width, 854);
-            Assert.AreEqual(newTestSize.Height, 480);
-            Assert.AreEqual(newTestSize.Unit, ResizeUnit.Pixel);
+            Assert.AreEqual("New size 1", newTestSize.Name);
+            Assert.AreEqual(ResizeFit.Fit, newTestSize.Fit);
+            Assert.AreEqual(1024, newTestSize.Width);
+            Assert.AreEqual(640, newTestSize.Height);
+            Assert.AreEqual(ResizeUnit.Pixel, newTestSize.Unit);
         }
 
         [TestMethod]
@@ -247,7 +247,7 @@ public void DeleteImageSizeShouldDeleteImageSizeWhenSuccessful()
             var mockSettingsUtils = ISettingsUtilsMocks.GetStubSettingsUtils<ImageResizerSettings>();
             Func<string, int> sendMockIPCConfigMSG = msg => { return 0; };
             ImageResizerViewModel viewModel = new ImageResizerViewModel(mockSettingsUtils.Object, SettingsRepository<GeneralSettings>.GetInstance(_mockGeneralSettingsUtils.Object), sendMockIPCConfigMSG, (string name) => name);
-            viewModel.AddRow("New Size");
+            viewModel.AddImageSize("New Size");
             int sizeOfOriginalArray = viewModel.Sizes.Count;
             ImageSize deleteCandidate = viewModel.Sizes.First(x => x.Id == 0);
 
@@ -268,16 +268,16 @@ public void NameOfNewImageSizesIsIncrementedCorrectly()
             ImageResizerViewModel viewModel = new ImageResizerViewModel(mockSettingsUtils.Object, SettingsRepository<GeneralSettings>.GetInstance(_mockGeneralSettingsUtils.Object), sendMockIPCConfigMSG, (string name) => name);
 
             // act
-            viewModel.AddRow("New size"); // Add: "New size 1"
-            viewModel.AddRow("New size"); // Add: "New size 2"
-            viewModel.AddRow("New size"); // Add: "New size 3"
+            viewModel.AddImageSize("New size"); // Add: "New size 1"
+            viewModel.AddImageSize("New size"); // Add: "New size 2"
+            viewModel.AddImageSize("New size"); // Add: "New size 3"
             viewModel.DeleteImageSize(1); // Delete: "New size 2"
-            viewModel.AddRow("New size"); // Add: "New Size 4"
+            viewModel.AddImageSize("New size"); // Add: "New Size 4"
 
             // Assert
-            Assert.AreEqual(viewModel.Sizes[0].Name, "New size 1");
-            Assert.AreEqual(viewModel.Sizes[1].Name, "New size 3");
-            Assert.AreEqual(viewModel.Sizes[2].Name, "New size 4");
+            Assert.AreEqual("New size 1", viewModel.Sizes[0].Name);
+            Assert.AreEqual("New size 3", viewModel.Sizes[1].Name);
+            Assert.AreEqual("New size 4", viewModel.Sizes[2].Name);
         }
 
         [TestMethod]
diff --git a/src/settings-ui/Settings.UI/Converters/ImageResizerFitToStringConverter.cs b/src/settings-ui/Settings.UI/Converters/ImageResizerFitToStringConverter.cs
index bfc991c07090..22ecd928436d 100644
--- a/src/settings-ui/Settings.UI/Converters/ImageResizerFitToStringConverter.cs
+++ b/src/settings-ui/Settings.UI/Converters/ImageResizerFitToStringConverter.cs
@@ -3,41 +3,38 @@
 // See the LICENSE file in the project root for more information.
 
 using System;
+using System.Collections.Generic;
 using System.Globalization;
-
+using System.Windows;
+using Microsoft.PowerToys.Settings.UI.Library;
 using Microsoft.UI.Xaml.Data;
 
-namespace Microsoft.PowerToys.Settings.UI.Converters
+namespace Microsoft.PowerToys.Settings.UI.Converters;
+
+public sealed partial class ImageResizerFitToStringConverter : IValueConverter
 {
-    public sealed partial class ImageResizerFitToStringConverter : IValueConverter
+    // Maps each ResizeFit to its localized string.
+    private static readonly Dictionary<ResizeFit, string> FitToText = new()
     {
-        public object Convert(object value, Type targetType, object parameter, string language)
-        {
-            var toLower = false;
-            if ((string)parameter == "ToLower")
-            {
-                toLower = true;
-            }
-
-            string targetValue = string.Empty;
-            switch (value)
-            {
-                case 0: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Fit_Fill_ThirdPersonSingular"); break;
-                case 1: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Fit_Fit_ThirdPersonSingular"); break;
-                case 2: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Fit_Stretch_ThirdPersonSingular"); break;
-            }
-
-            if (toLower)
-            {
-                targetValue = targetValue.ToLower(CultureInfo.CurrentCulture);
-            }
-
-            return targetValue;
-        }
+        { ResizeFit.Fill,    Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Fit_Fill_ThirdPersonSingular") },
+        { ResizeFit.Fit,     Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Fit_Fit_ThirdPersonSingular") },
+        { ResizeFit.Stretch, Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Fit_Stretch_ThirdPersonSingular") },
+    };
 
-        public object ConvertBack(object value, Type targetType, object parameter, string language)
+    public object Convert(object value, Type targetType, object parameter, string language)
+    {
+        if (value is ResizeFit fit && FitToText.TryGetValue(fit, out string fitText))
         {
-            return value;
+            return parameter is string lowerParam && lowerParam == "ToLower" ?
+                fitText.ToLower(CultureInfo.CurrentCulture) :
+                fitText;
         }
+
+        return DependencyProperty.UnsetValue;
+    }
+
+    public object ConvertBack(object value, Type targetType, object parameter, string language)
+    {
+        return value;
     }
 }
diff --git a/src/settings-ui/Settings.UI/Converters/ImageResizerSizeToAccessibleTextConverter.cs b/src/settings-ui/Settings.UI/Converters/ImageResizerSizeToAccessibleTextConverter.cs
new file mode 100644
index 000000000000..3fd03b08d64d
--- /dev/null
+++ b/src/settings-ui/Settings.UI/Converters/ImageResizerSizeToAccessibleTextConverter.cs
@@ -0,0 +1,71 @@
+﻿// Copyright (c) Microsoft Corporation
+// The Microsoft Corporation licenses this file to you under the MIT license.
+// See the LICENSE file in the project root for more information.
+
+using System;
+using System.Collections.Generic;
+using System.Globalization;
+using System.Windows;
+using Microsoft.PowerToys.Settings.UI.Library;
+using Microsoft.UI.Xaml.Data;
+
+namespace Microsoft.PowerToys.Settings.UI.Converters;
+
+/// <summary>
+/// Creates accessibility text for controls related to <see cref="ImageSize"/> properties.
+/// </summary>
+/// <example>(Name) "Edit the Small preset"</example>
+/// <example>(FullDescription) "Large - Fits within 1920 × 1080 pixels"</example>"
+public sealed partial class ImageResizerSizeToAccessibleTextConverter : IValueConverter
+{
+    private const char TimesGlyph = '\u00D7';   // Unicode "MULTIPLICATION SIGN"
+
+    /// <summary>
+    /// Maps the supplied accessibility identifier to the format string of the localized accessible text.
+    /// </summary>
+    private static readonly Dictionary<string, string> AccessibilityFormats = new()
+    {
+        { "Edit", Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_EditButton_Accessibility_Name") },
+        { "Remove", Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_RemoveButton_Accessibility_Name") },
+    };
+
+    private readonly ImageResizerFitToStringConverter _fitConverter = new();
+    private readonly ImageResizerUnitToStringConverter _unitConverter = new();
+
+    public object Convert(object value, Type targetType, object parameter, string language)
+    {
+        return (value, parameter) switch
+        {
+            (string presetName, string nameId) => FormatNameText(presetName, nameId),
+            (ImageSize preset, string _) => FormatDescriptionText(preset),
+            _ => DependencyProperty.UnsetValue,
+        };
+    }
+
+    private object FormatNameText(string presetName, string nameId)
+    {
+        return AccessibilityFormats.TryGetValue(nameId, out string format) ?
+            string.Format(CultureInfo.CurrentCulture, format, presetName) :
+            DependencyProperty.UnsetValue;
+    }
+
+    private object FormatDescriptionText(ImageSize preset)
+    {
+        if (preset == null)
+        {
+            return DependencyProperty.UnsetValue;
+        }
+
+        string fitText = _fitConverter.Convert(preset.Fit, typeof(string), null, null) as string;
+        string unitText = _unitConverter.Convert(preset.Unit, typeof(string), null, null) as string;
+
+        return preset.IsHeightUsed ?
+            $"{preset.Name} - {fitText} {preset.Width} {TimesGlyph} {preset.Height} {unitText}" :
+            $"{preset.Name} - {fitText} {preset.Width} {unitText}";
+    }
+
+    public object ConvertBack(object value, Type targetType, object parameter, string language)
+    {
+        throw new NotImplementedException();
+    }
+}
diff --git a/src/settings-ui/Settings.UI/Converters/ImageResizerUnitToStringConverter.cs b/src/settings-ui/Settings.UI/Converters/ImageResizerUnitToStringConverter.cs
index ab4aec819550..fca73cfa0760 100644
--- a/src/settings-ui/Settings.UI/Converters/ImageResizerUnitToStringConverter.cs
+++ b/src/settings-ui/Settings.UI/Converters/ImageResizerUnitToStringConverter.cs
@@ -3,42 +3,39 @@
 // See the LICENSE file in the project root for more information.
 
 using System;
+using System.Collections.Generic;
 using System.Globalization;
-
+using System.Windows;
+using Microsoft.PowerToys.Settings.UI.Library;
 using Microsoft.UI.Xaml.Data;
 
-namespace Microsoft.PowerToys.Settings.UI.Converters
+namespace Microsoft.PowerToys.Settings.UI.Converters;
+
+public sealed partial class ImageResizerUnitToStringConverter : IValueConverter
 {
-    public sealed partial class ImageResizerUnitToStringConverter : IValueConverter
+    // Maps each ResizeUnit value to its localized string.
+    private static readonly Dictionary<ResizeUnit, string> UnitToText = new()
     {
-        public object Convert(object value, Type targetType, object parameter, string language)
-        {
-            var toLower = false;
-            if ((string)parameter == "ToLower")
-            {
-                toLower = true;
-            }
-
-            string targetValue = string.Empty;
-            switch (value)
-            {
-                case 0: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Centimeter"); break;
-                case 1: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Inch"); break;
-                case 2: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Percent"); break;
-                case 3: targetValue = Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Pixel"); break;
-            }
-
-            if (toLower)
-            {
-                targetValue = targetValue.ToLower(CultureInfo.CurrentCulture);
-            }
-
-            return targetValue;
-        }
+        { ResizeUnit.Centimeter, Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Centimeter") },
+        { ResizeUnit.Inch,       Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Inch") },
+        { ResizeUnit.Percent,    Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Percent") },
+        { ResizeUnit.Pixel,      Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_Unit_Pixel") },
+    };
 
-        public object ConvertBack(object value, Type targetType, object parameter, string language)
+    public object Convert(object value, Type targetType, object parameter, string language)
+    {
+        if (value is ResizeUnit unit && UnitToText.TryGetValue(unit, out string unitText))
         {
-            return value;
+            return parameter is string lowerParam && lowerParam == "ToLower" ?
+                unitText.ToLower(CultureInfo.CurrentCulture) :
+                unitText;
         }
+
+        return DependencyProperty.UnsetValue;
+    }
+
+    public object ConvertBack(object value, Type targetType, object parameter, string language)
+    {
+        return value;
     }
 }
diff --git a/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml b/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml
index c004be195d0a..64d5648975c6 100644
--- a/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml
+++ b/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml
@@ -18,6 +18,7 @@
         <converters:ImageResizerFitToIntConverter x:Key="ImageResizerFitToIntConverter" />
         <converters:ImageResizerUnitToStringConverter x:Key="ImageResizerUnitToStringConverter" />
         <converters:ImageResizerUnitToIntConverter x:Key="ImageResizerUnitToIntConverter" />
+        <converters:ImageResizerSizeToAccessibleTextConverter x:Key="ImageResizerSizeToAccessibleTextConverter" />
         <toolkitconverters:BoolToObjectConverter
             x:Key="BoolToComboBoxIndexConverter"
             FalseValue="1"
@@ -81,13 +82,13 @@
                                                 FontSize="10"
                                                 Style="{ThemeResource SecondaryTextStyle}"
                                                 Text="&#xE947;"
-                                                Visibility="{x:Bind EnableEtraBoxes, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
+                                                Visibility="{x:Bind IsHeightUsed, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
                                             <TextBlock
                                                 Margin="0,0,4,0"
                                                 FontWeight="SemiBold"
                                                 Style="{ThemeResource SecondaryTextStyle}"
                                                 Text="{x:Bind Height, Mode=OneWay}"
-                                                Visibility="{x:Bind EnableEtraBoxes, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
+                                                Visibility="{x:Bind IsHeightUsed, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
                                             <TextBlock
                                                 Margin="0,0,4,0"
                                                 Style="{ThemeResource SecondaryTextStyle}"
@@ -100,12 +101,20 @@
                                         Orientation="Horizontal"
                                         Spacing="8">
                                         <Button
-                                            x:Uid="EditButton"
+                                            x:Uid="ImageResizer_EditButton"
                                             Width="40"
                                             Height="36"
                                             Content="&#xE70F;"
                                             FontFamily="{ThemeResource SymbolThemeFontFamily}"
-                                            Style="{StaticResource SubtleButtonStyle}">
+                                            Style="{StaticResource SubtleButtonStyle}"
+                                            AutomationProperties.Name="{x:Bind Name,
+                                                Mode=OneWay,
+                                                Converter={StaticResource ImageResizerSizeToAccessibleTextConverter},
+                                                ConverterParameter='Edit'}"
+                                            AutomationProperties.FullDescription="{x:Bind AccessibleTextHelper,
+                                                Mode=OneWay,
+                                                Converter={StaticResource ImageResizerSizeToAccessibleTextConverter},
+                                                ConverterParameter='Edit'}">
                                             <ToolTipService.ToolTip>
                                                 <TextBlock x:Uid="EditTooltip" />
                                             </ToolTipService.ToolTip>
@@ -141,10 +150,10 @@
                                                                 Width="116"
                                                                 Minimum="0"
                                                                 SpinButtonPlacementMode="Compact"
-                                                                Visibility="{x:Bind EnableEtraBoxes, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
+                                                                Visibility="{x:Bind IsHeightUsed, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                                                 Value="{x:Bind Height, Mode=TwoWay}" />
-
                                                         </StackPanel>
+
                                                         <ComboBox
                                                             x:Uid="ImageResizer_Size"
                                                             Width="240"
@@ -160,15 +169,22 @@
                                         </Button>
 
                                         <Button
-                                            x:Name="RemoveButton"
-                                            x:Uid="RemoveButton"
+                                            x:Uid="ImageResizer_RemoveButton"
                                             Width="40"
                                             Height="36"
                                             Click="DeleteCustomSize"
                                             CommandParameter="{Binding Id}"
                                             Content="&#xE74D;"
                                             FontFamily="{ThemeResource SymbolThemeFontFamily}"
-                                            Style="{StaticResource SubtleButtonStyle}">
+                                            Style="{StaticResource SubtleButtonStyle}"
+                                            AutomationProperties.Name="{x:Bind Name,
+                                                Mode=OneWay,
+                                                Converter={StaticResource ImageResizerSizeToAccessibleTextConverter},
+                                                ConverterParameter='Remove'}"
+                                            AutomationProperties.FullDescription="{x:Bind AccessibleTextHelper,
+                                                Mode=OneWay,
+                                                Converter={StaticResource ImageResizerSizeToAccessibleTextConverter},
+                                                ConverterParameter='Remove'}">
                                             <ToolTipService.ToolTip>
                                                 <TextBlock x:Uid="RemoveTooltip" />
                                             </ToolTipService.ToolTip>
diff --git a/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml.cs b/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml.cs
index e2dd14f2ad29..a059a26b2cea 100644
--- a/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml.cs
+++ b/src/settings-ui/Settings.UI/SettingsXAML/Views/ImageResizerPage.xaml.cs
@@ -22,11 +22,8 @@ public ImageResizerPage()
         {
             InitializeComponent();
             var settingsUtils = new SettingsUtils();
-            var resourceLoader = Helpers.ResourceLoaderInstance.ResourceLoader;
-            Func<string, string> loader = (string name) =>
-            {
-                return resourceLoader.GetString(name);
-            };
+            var resourceLoader = ResourceLoaderInstance.ResourceLoader;
+            Func<string, string> loader = resourceLoader.GetString;
 
             ViewModel = new ImageResizerViewModel(settingsUtils, SettingsRepository<GeneralSettings>.GetInstance(settingsUtils), ShellPage.SendDefaultIPCMessage, loader);
             DataContext = ViewModel;
@@ -69,7 +66,7 @@ private void AddSizeButton_Click(object sender, RoutedEventArgs e)
         {
             try
             {
-                ViewModel.AddRow(Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_DefaultSize_NewSizePrefix"));
+                ViewModel.AddImageSize();
             }
             catch (Exception ex)
             {
diff --git a/src/settings-ui/Settings.UI/Strings/en-us/Resources.resw b/src/settings-ui/Settings.UI/Strings/en-us/Resources.resw
index 29580ea01625..f5b6764f07b6 100644
--- a/src/settings-ui/Settings.UI/Strings/en-us/Resources.resw
+++ b/src/settings-ui/Settings.UI/Strings/en-us/Resources.resw
@@ -1299,10 +1299,6 @@
   <data name="ImageResizer_Size.Header" xml:space="preserve">
     <value>Unit</value>
   </data>
-  <data name="RemoveButton.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
-    <value>Remove</value>
-    <comment>Removes a user defined setting group for Image Resizer</comment>
-  </data>
   <data name="RemoveItem.Text" xml:space="preserve">
     <value>Delete</value>
   </data>
@@ -2501,12 +2497,29 @@ From there, simply click on one of the supported files in the File Explorer and
   <data name="ImageResizer_Unit_Pixel" xml:space="preserve">
     <value>Pixels</value>
   </data>
-  <data name="EditButton.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
+  <data name="ImageResizer_EditButton.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
     <value>Edit</value>
   </data>
   <data name="ImageResizer_EditSize.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
     <value>Edit size</value>
   </data>
+  <data name="ImageResizer_Presets.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
+    <value>ImageResizer presets</value>
+  </data>
+  <data name="ImageResizer_AddSizeButton.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
+    <value>Add a new preset</value>
+  </data>
+  <data name="ImageResizer_RemoveButton.[using:Microsoft.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
+    <value>Remove</value>
+  </data>
+  <data name="ImageResizer_EditButton_Accessibility_Name" xml:space="preserve">
+    <value>Edit the {0} preset</value>
+    <comment>Expands to the AutomationProperties.Name value for the Edit button. Example: "Edit the Small preset".</comment>
+  </data>
+  <data name="ImageResizer_RemoveButton_Accessibility_Name" xml:space="preserve">
+    <value>Remove the {0} preset</value>
+    <comment>Expands to the AutomationProperties.Name value for the Remove button. Example: "Remove the Large preset".</comment>
+  </data>
   <data name="No" xml:space="preserve">
     <value>No</value>
     <comment>Label of a cancel button</comment>
diff --git a/src/settings-ui/Settings.UI/ViewModels/ImageResizerViewModel.cs b/src/settings-ui/Settings.UI/ViewModels/ImageResizerViewModel.cs
index dcd8db95f19d..511a9cb36d89 100644
--- a/src/settings-ui/Settings.UI/ViewModels/ImageResizerViewModel.cs
+++ b/src/settings-ui/Settings.UI/ViewModels/ImageResizerViewModel.cs
@@ -3,431 +3,362 @@
 // See the LICENSE file in the project root for more information.
 
 using System;
+using System.Collections.Generic;
 using System.Collections.ObjectModel;
+using System.Collections.Specialized;
 using System.ComponentModel;
 using System.IO;
 using System.Linq;
-
+using System.Runtime.CompilerServices;
 using global::PowerToys.GPOWrapper;
 using ManagedCommon;
 using Microsoft.PowerToys.Settings.UI.Library;
 using Microsoft.PowerToys.Settings.UI.Library.Helpers;
 using Microsoft.PowerToys.Settings.UI.Library.Interfaces;
 
-namespace Microsoft.PowerToys.Settings.UI.ViewModels
+namespace Microsoft.PowerToys.Settings.UI.ViewModels;
+
+public partial class ImageResizerViewModel : Observable
 {
-    public class ImageResizerViewModel : Observable
-    {
-        private GeneralSettings GeneralSettingsConfig { get; set; }
+    private static readonly string DefaultPresetNamePrefix =
+        Helpers.ResourceLoaderInstance.ResourceLoader.GetString("ImageResizer_DefaultSize_NewSizePrefix");
 
-        private readonly ISettingsUtils _settingsUtils;
+    private static readonly List<string> EncoderGuids =
+    [
+        "1b7cfaf4-713f-473c-bbcd-6137425faeaf",  // PNG Encoder
+        "0af1d87e-fcfe-4188-bdeb-a7906471cbe3",  // Bitmap Encoder
+        "19e4a5aa-5662-4fc5-a0c0-1758028e1057",  // JPEG Encoder
+        "163bcc30-e2e9-4f0b-961d-a3e9fdb788a3",  // TIFF Encoder
+        "57a37caa-367a-4540-916b-f183c5093a4b",  // TIFF Encoder
+        "1f8a5601-7d4d-4cbd-9c82-1bc8d4eeb9a5",  // GIF Encoder
+    ];
 
-        private ImageResizerSettings Settings { get; set; }
+    /// <summary>
+    /// Used to skip saving settings to file during initialization.
+    /// </summary>
+    private readonly bool _isInitializing;
 
-        private const string ModuleName = ImageResizerSettings.ModuleName;
+    /// <summary>
+    /// Holds defaults for new presets.
+    /// </summary>
+    private readonly ImageSize _customSize;
 
-        private Func<string, int> SendConfigMSG { get; }
+    private GeneralSettings GeneralSettingsConfig { get; set; }
 
-        public ImageResizerViewModel(ISettingsUtils settingsUtils, ISettingsRepository<GeneralSettings> settingsRepository, Func<string, int> ipcMSGCallBackFunc, Func<string, string> resourceLoader)
-        {
-            _settingsUtils = settingsUtils ?? throw new ArgumentNullException(nameof(settingsUtils));
+    private readonly ISettingsUtils _settingsUtils;
 
-            // To obtain the general settings configurations of PowerToys.
-            ArgumentNullException.ThrowIfNull(settingsRepository);
+    private ImageResizerSettings Settings { get; set; }
 
-            GeneralSettingsConfig = settingsRepository.SettingsConfig;
+    private const string ModuleName = ImageResizerSettings.ModuleName;
 
-            try
-            {
-                Settings = _settingsUtils.GetSettings<ImageResizerSettings>(ModuleName);
-            }
-            catch (Exception e)
-            {
-                Logger.LogError($"Exception encountered while reading {ModuleName} settings.", e);
-#if DEBUG
-                if (e is ArgumentException || e is ArgumentNullException || e is PathTooLongException)
-                {
-                    throw;
-                }
-#endif
-                Settings = new ImageResizerSettings(resourceLoader);
-                _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-            }
+    private Func<string, int> SendConfigMSG { get; }
 
-            // set the callback functions value to handle outgoing IPC message.
-            SendConfigMSG = ipcMSGCallBackFunc;
+    public ImageResizerViewModel(ISettingsUtils settingsUtils, ISettingsRepository<GeneralSettings> settingsRepository, Func<string, int> ipcMSGCallBackFunc, Func<string, string> resourceLoader)
+    {
+        _isInitializing = true;
 
-            InitializeEnabledValue();
+        _settingsUtils = settingsUtils ?? throw new ArgumentNullException(nameof(settingsUtils));
 
-            _advancedSizes = Settings.Properties.ImageresizerSizes.Value;
-            _jpegQualityLevel = Settings.Properties.ImageresizerJpegQualityLevel.Value;
-            _pngInterlaceOption = Settings.Properties.ImageresizerPngInterlaceOption.Value;
-            _tiffCompressOption = Settings.Properties.ImageresizerTiffCompressOption.Value;
-            _fileName = Settings.Properties.ImageresizerFileName.Value;
-            _keepDateModified = Settings.Properties.ImageresizerKeepDateModified.Value;
-            _encoderGuidId = GetEncoderIndex(Settings.Properties.ImageresizerFallbackEncoder.Value);
+        // To obtain the general settings configurations of PowerToys.
+        ArgumentNullException.ThrowIfNull(settingsRepository);
 
-            int i = 0;
-            foreach (ImageSize size in _advancedSizes)
-            {
-                size.Id = i;
-                i++;
-                size.PropertyChanged += SizePropertyChanged;
-            }
-        }
+        GeneralSettingsConfig = settingsRepository.SettingsConfig;
 
-        private void InitializeEnabledValue()
+        try
         {
-            _enabledGpoRuleConfiguration = GPOWrapper.GetConfiguredImageResizerEnabledValue();
-            if (_enabledGpoRuleConfiguration == GpoRuleConfigured.Disabled || _enabledGpoRuleConfiguration == GpoRuleConfigured.Enabled)
-            {
-                // Get the enabled state from GPO.
-                _enabledStateIsGPOConfigured = true;
-                _isEnabled = _enabledGpoRuleConfiguration == GpoRuleConfigured.Enabled;
-            }
-            else
+            Settings = _settingsUtils.GetSettings<ImageResizerSettings>(ModuleName);
+        }
+        catch (Exception e)
+        {
+            Logger.LogError($"Exception encountered while reading {ModuleName} settings.", e);
+#if DEBUG
+            if (e is ArgumentException || e is ArgumentNullException || e is PathTooLongException)
             {
-                _isEnabled = GeneralSettingsConfig.Enabled.ImageResizer;
+                throw;
             }
+#endif
+            Settings = new ImageResizerSettings(resourceLoader);
+            _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
         }
 
-        private GpoRuleConfigured _enabledGpoRuleConfiguration;
-        private bool _enabledStateIsGPOConfigured;
-        private bool _isEnabled;
-        private ObservableCollection<ImageSize> _advancedSizes = new ObservableCollection<ImageSize>();
-        private int _jpegQualityLevel;
-        private int _pngInterlaceOption;
-        private int _tiffCompressOption;
-        private string _fileName;
-        private bool _keepDateModified;
-        private int _encoderGuidId;
+        // set the callback functions value to handle outgoing IPC message.
+        SendConfigMSG = ipcMSGCallBackFunc;
 
-        public bool IsListViewFocusRequested { get; set; }
+        InitializeEnabledValue();
 
-        public bool IsEnabled
-        {
-            get
-            {
-                return _isEnabled;
-            }
+        Sizes = new ObservableCollection<ImageSize>(Settings.Properties.ImageresizerSizes.Value);
+        JPEGQualityLevel = Settings.Properties.ImageresizerJpegQualityLevel.Value;
+        PngInterlaceOption = Settings.Properties.ImageresizerPngInterlaceOption.Value;
+        TiffCompressOption = Settings.Properties.ImageresizerTiffCompressOption.Value;
+        FileName = Settings.Properties.ImageresizerFileName.Value;
+        KeepDateModified = Settings.Properties.ImageresizerKeepDateModified.Value;
+        Encoder = GetEncoderIndex(Settings.Properties.ImageresizerFallbackEncoder.Value);
 
-            set
-            {
-                if (_enabledStateIsGPOConfigured)
-                {
-                    // If it's GPO configured, shouldn't be able to change this state.
-                    return;
-                }
-
-                if (value != _isEnabled)
-                {
-                    // To set the status of ImageResizer in the General PowerToys settings.
-                    _isEnabled = value;
-                    GeneralSettingsConfig.Enabled.ImageResizer = value;
-                    OutGoingGeneralSettings snd = new OutGoingGeneralSettings(GeneralSettingsConfig);
-
-                    SendConfigMSG(snd.ToString());
-                    OnPropertyChanged(nameof(IsEnabled));
-                }
-            }
-        }
+        _customSize = Settings.Properties.ImageresizerCustomSize.Value;
 
-        public bool IsEnabledGpoConfigured
+        _isInitializing = false;
+    }
+
+    private void InitializeEnabledValue()
+    {
+        _enabledGpoRuleConfiguration = GPOWrapper.GetConfiguredImageResizerEnabledValue();
+        if (_enabledGpoRuleConfiguration == GpoRuleConfigured.Disabled || _enabledGpoRuleConfiguration == GpoRuleConfigured.Enabled)
         {
-            get => _enabledStateIsGPOConfigured;
+            // Get the enabled state from GPO.
+            _enabledStateIsGPOConfigured = true;
+            _isEnabled = _enabledGpoRuleConfiguration == GpoRuleConfigured.Enabled;
         }
-
-        public ObservableCollection<ImageSize> Sizes
+        else
         {
-            get
-            {
-                return _advancedSizes;
-            }
-
-            set
-            {
-                SavesImageSizes(value);
-                _advancedSizes = value;
-                OnPropertyChanged(nameof(Sizes));
-            }
+            _isEnabled = GeneralSettingsConfig.Enabled.ImageResizer;
         }
+    }
 
-        public int JPEGQualityLevel
-        {
-            get
-            {
-                return _jpegQualityLevel;
-            }
+    private GpoRuleConfigured _enabledGpoRuleConfiguration;
+    private bool _enabledStateIsGPOConfigured;
+    private bool _isEnabled;
+    private ObservableCollection<ImageSize> _sizes = [];
+    private int _jpegQualityLevel;
+    private int _pngInterlaceOption;
+    private int _tiffCompressOption;
+    private string _fileName;
+    private bool _keepDateModified;
+    private int _encoderGuidId;
 
-            set
-            {
-                if (_jpegQualityLevel != value)
-                {
-                    _jpegQualityLevel = value;
-                    Settings.Properties.ImageresizerJpegQualityLevel.Value = value;
-                    _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-                    OnPropertyChanged(nameof(JPEGQualityLevel));
-                }
-            }
-        }
+    public bool IsListViewFocusRequested { get; set; }
 
-        public int PngInterlaceOption
+    public bool IsEnabled
+    {
+        get => _isEnabled;
+
+        set
         {
-            get
+            if (_enabledStateIsGPOConfigured)
             {
-                return _pngInterlaceOption;
+                // If it's GPO configured, shouldn't be able to change this state.
+                return;
             }
 
-            set
+            if (value != _isEnabled)
             {
-                if (_pngInterlaceOption != value)
-                {
-                    _pngInterlaceOption = value;
-                    Settings.Properties.ImageresizerPngInterlaceOption.Value = value;
-                    _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-                    OnPropertyChanged(nameof(PngInterlaceOption));
-                }
+                // To set the status of ImageResizer in the General PowerToys settings.
+                _isEnabled = value;
+                GeneralSettingsConfig.Enabled.ImageResizer = value;
+                OutGoingGeneralSettings snd = new OutGoingGeneralSettings(GeneralSettingsConfig);
+
+                SendConfigMSG(snd.ToString());
+                OnPropertyChanged(nameof(IsEnabled));
             }
         }
+    }
 
-        public int TiffCompressOption
-        {
-            get
-            {
-                return _tiffCompressOption;
-            }
+    public bool IsEnabledGpoConfigured
+    {
+        get => _enabledStateIsGPOConfigured;
+    }
 
-            set
-            {
-                if (_tiffCompressOption != value)
-                {
-                    _tiffCompressOption = value;
-                    Settings.Properties.ImageresizerTiffCompressOption.Value = value;
-                    _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-                    OnPropertyChanged(nameof(TiffCompressOption));
-                }
-            }
-        }
+    public ObservableCollection<ImageSize> Sizes
+    {
+        get => _sizes;
 
-        public string FileName
+        set
         {
-            get
+            if (_sizes != null)
             {
-                return _fileName;
+                _sizes.CollectionChanged -= Sizes_CollectionChanged;
+                UnsubscribeFromItemPropertyChanged(_sizes);
             }
 
-            set
-            {
-                if (!string.IsNullOrWhiteSpace(value))
-                {
-                    _fileName = value;
-                    Settings.Properties.ImageresizerFileName.Value = value;
-                    _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-                    OnPropertyChanged(nameof(FileName));
-                }
-            }
-        }
+            _sizes = value;
 
-        public bool KeepDateModified
-        {
-            get
+            if (_sizes != null)
             {
-                return _keepDateModified;
+                _sizes.CollectionChanged += Sizes_CollectionChanged;
+                SubscribeToItemPropertyChanged(_sizes);
             }
 
-            set
+            OnPropertyChanged(nameof(Sizes));
+
+            if (!_isInitializing)
             {
-                _keepDateModified = value;
-                Settings.Properties.ImageresizerKeepDateModified.Value = value;
-                _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-                OnPropertyChanged(nameof(KeepDateModified));
+                SaveImageSizes();
             }
         }
+    }
+
+    private void Sizes_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
+    {
+        SubscribeToItemPropertyChanged(e.NewItems?.Cast<ImageSize>());
+        UnsubscribeFromItemPropertyChanged(e.OldItems?.Cast<ImageSize>());
+        SaveImageSizes();
+    }
 
-        public int Encoder
+    private void SubscribeToItemPropertyChanged(IEnumerable<ImageSize> items)
+    {
+        if (items != null)
         {
-            get
+            foreach (var item in items)
             {
-                return _encoderGuidId;
+                item.PropertyChanged += SizePropertyChanged;
             }
+        }
+    }
 
-            set
+    private void UnsubscribeFromItemPropertyChanged(IEnumerable<ImageSize> items)
+    {
+        if (items != null)
+        {
+            foreach (var item in items)
             {
-                if (_encoderGuidId != value)
-                {
-                    _encoderGuidId = value;
-                    _settingsUtils.SaveSettings(Settings.Properties.ImageresizerSizes.ToJsonString(), ModuleName, "sizes.json");
-                    Settings.Properties.ImageresizerFallbackEncoder.Value = GetEncoderGuid(value);
-                    _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
-                    OnPropertyChanged(nameof(Encoder));
-                }
+                item.PropertyChanged -= SizePropertyChanged;
             }
         }
+    }
 
-        public string EncoderGuid
+    private void SetProperty<T>(ref T backingField, T value, Action<T> updateSettingsAction, [CallerMemberName] string propertyName = null)
+    {
+        if (!EqualityComparer<T>.Default.Equals(backingField, value))
         {
-            get
+            backingField = value;
+
+            if (!_isInitializing)
             {
-                return ImageResizerViewModel.GetEncoderGuid(_encoderGuidId);
+                updateSettingsAction(value);
+                _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
             }
+
+            OnPropertyChanged(propertyName);
         }
+    }
+
+    public int JPEGQualityLevel
+    {
+        get => _jpegQualityLevel;
 
-        public void AddRow(string sizeNamePrefix)
+        set
         {
-            /// This is a fallback validation to eliminate the warning "CA1062:Validate arguments of public methods" when using the parameter (variable) "sizeNamePrefix" in the code.
-            /// If the parameter is unexpectedly empty or null, we fill the parameter with a non-localized string.
-            /// Normally the parameter "sizeNamePrefix" can't be null or empty because it is filled with a localized string when we call this method from <see cref="UI.Views.ImageResizerPage.AddSizeButton_Click"/>.
-            sizeNamePrefix = string.IsNullOrEmpty(sizeNamePrefix) ? "New Size" : sizeNamePrefix;
-
-            ObservableCollection<ImageSize> imageSizes = Sizes;
-            int maxId = imageSizes.Count > 0 ? imageSizes.OrderBy(x => x.Id).Last().Id : -1;
-            string sizeName = GenerateNameForNewSize(imageSizes, sizeNamePrefix);
-
-            ImageSize newSize = new ImageSize(maxId + 1, sizeName, ResizeFit.Fit, 854, 480, ResizeUnit.Pixel);
-            newSize.PropertyChanged += SizePropertyChanged;
-            imageSizes.Add(newSize);
-            _advancedSizes = imageSizes;
-            SavesImageSizes(imageSizes);
-
-            // Set the focus requested flag to indicate that an add operation has occurred during the ContainerContentChanging event
-            IsListViewFocusRequested = true;
+            SetProperty(ref _jpegQualityLevel, value, v => Settings.Properties.ImageresizerJpegQualityLevel.Value = v);
         }
+    }
 
-        public void DeleteImageSize(int id)
-        {
-            ImageSize size = _advancedSizes.First(x => x.Id == id);
-            ObservableCollection<ImageSize> imageSizes = Sizes;
-            imageSizes.Remove(size);
+    public int PngInterlaceOption
+    {
+        get => _pngInterlaceOption;
 
-            _advancedSizes = imageSizes;
-            SavesImageSizes(imageSizes);
+        set
+        {
+            SetProperty(ref _pngInterlaceOption, value, v => Settings.Properties.ImageresizerPngInterlaceOption.Value = v);
         }
+    }
+
+    public int TiffCompressOption
+    {
+        get => _tiffCompressOption;
 
-        public void SavesImageSizes(ObservableCollection<ImageSize> imageSizes)
+        set
         {
-            _settingsUtils.SaveSettings(Settings.Properties.ImageresizerSizes.ToJsonString(), ModuleName, "sizes.json");
-            Settings.Properties.ImageresizerSizes = new ImageResizerSizes(imageSizes);
-            _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
+            SetProperty(ref _tiffCompressOption, value, v => Settings.Properties.ImageresizerTiffCompressOption.Value = v);
         }
+    }
 
-        public static string GetEncoderGuid(int value)
+    public string FileName
+    {
+        get => _fileName;
+
+        set
         {
-            // PNG Encoder guid
-            if (value == 0)
+            if (!string.IsNullOrWhiteSpace(value))
             {
-                return "1b7cfaf4-713f-473c-bbcd-6137425faeaf";
+                SetProperty(ref _fileName, value, v => Settings.Properties.ImageresizerFileName.Value = v);
             }
+        }
+    }
 
-            // Bitmap Encoder guid
-            else if (value == 1)
-            {
-                return "0af1d87e-fcfe-4188-bdeb-a7906471cbe3";
-            }
+    public bool KeepDateModified
+    {
+        get => _keepDateModified;
 
-            // JPEG Encoder guid
-            else if (value == 2)
-            {
-                return "19e4a5aa-5662-4fc5-a0c0-1758028e1057";
-            }
+        set
+        {
+            SetProperty(ref _keepDateModified, value, v => Settings.Properties.ImageresizerKeepDateModified.Value = v);
+        }
+    }
 
-            // Tiff encoder guid.
-            else if (value == 3)
-            {
-                return "163bcc30-e2e9-4f0b-961d-a3e9fdb788a3";
-            }
+    public int Encoder
+    {
+        get => _encoderGuidId;
 
-            // Tiff encoder guid.
-            else if (value == 4)
-            {
-                return "57a37caa-367a-4540-916b-f183c5093a4b";
-            }
+        set
+        {
+            SetProperty(ref _encoderGuidId, value, v => Settings.Properties.ImageresizerFallbackEncoder.Value = GetEncoderGuid(v));
+        }
+    }
 
-            // Gif encoder guid.
-            else if (value == 5)
-            {
-                return "1f8a5601-7d4d-4cbd-9c82-1bc8d4eeb9a5";
-            }
+    public string EncoderGuid => GetEncoderGuid(_encoderGuidId);
 
-            return null;
-        }
+    public static string GetEncoderGuid(int index) =>
+        index < 0 || index >= EncoderGuids.Count ? throw new ArgumentOutOfRangeException(nameof(index)) : EncoderGuids[index];
 
-        public static int GetEncoderIndex(string value)
+    public static int GetEncoderIndex(string encoderGuid)
+    {
+        int index = EncoderGuids.IndexOf(encoderGuid);
+        return index == -1 ? throw new ArgumentException("Encoder GUID not found.", nameof(encoderGuid)) : index;
+    }
+
+    public void AddImageSize(string namePrefix = "")
+    {
+        if (string.IsNullOrEmpty(namePrefix))
         {
-            // PNG Encoder guid
-            if (value == "1b7cfaf4-713f-473c-bbcd-6137425faeaf")
-            {
-                return 0;
-            }
+            namePrefix = DefaultPresetNamePrefix;
+        }
 
-            // Bitmap Encoder guid
-            else if (value == "0af1d87e-fcfe-4188-bdeb-a7906471cbe3")
-            {
-                return 1;
-            }
+        int maxId = Sizes.Count > 0 ? Sizes.Max(x => x.Id) : -1;
+        string sizeName = GenerateNameForNewSize(namePrefix);
 
-            // JPEG Encoder guid
-            else if (value == "19e4a5aa-5662-4fc5-a0c0-1758028e1057")
-            {
-                return 2;
-            }
+        Sizes.Add(new ImageSize(maxId + 1, GenerateNameForNewSize(namePrefix), _customSize.Fit, _customSize.Width, _customSize.Height, _customSize.Unit));
 
-            // Tiff encoder guid.
-            else if (value == "163bcc30-e2e9-4f0b-961d-a3e9fdb788a3")
-            {
-                return 3;
-            }
+        // Set the focus requested flag to indicate that an add operation has occurred during the ContainerContentChanging event
+        IsListViewFocusRequested = true;
+    }
 
-            // Tiff encoder guid.
-            else if (value == "57a37caa-367a-4540-916b-f183c5093a4b")
-            {
-                return 4;
-            }
+    public void DeleteImageSize(int id)
+    {
+        ImageSize size = _sizes.First(x => x.Id == id);
+        Sizes.Remove(size);
+    }
 
-            // Gif encoder guid.
-            else if (value == "1f8a5601-7d4d-4cbd-9c82-1bc8d4eeb9a5")
-            {
-                return 5;
-            }
+    public void SaveImageSizes()
+    {
+        Settings.Properties.ImageresizerSizes = new ImageResizerSizes(Sizes);
+        _settingsUtils.SaveSettings(Settings.Properties.ImageresizerSizes.ToJsonString(), ModuleName, "sizes.json");
+        _settingsUtils.SaveSettings(Settings.ToJsonString(), ModuleName);
+    }
 
-            return -1;
-        }
+    public void SizePropertyChanged(object sender, PropertyChangedEventArgs e)
+    {
+        SaveImageSizes();
+    }
 
-        public void SizePropertyChanged(object sender, PropertyChangedEventArgs e)
-        {
-            ImageSize modifiedSize = (ImageSize)sender;
-            ObservableCollection<ImageSize> imageSizes = Sizes;
-            imageSizes.First(x => x.Id == modifiedSize.Id).Update(modifiedSize);
-            _advancedSizes = imageSizes;
-            SavesImageSizes(imageSizes);
-        }
+    private string GenerateNameForNewSize(string namePrefix)
+    {
+        int newSizeCounter = 0;
 
-        private static string GenerateNameForNewSize(in ObservableCollection<ImageSize> sizesList, in string namePrefix)
+        foreach (var name in Sizes.Select(x => x.Name))
         {
-            int newSizeCounter = 0;
-
-            foreach (ImageSize imgSize in sizesList)
+            if (name.StartsWith(namePrefix, StringComparison.InvariantCulture) &&
+                int.TryParse(name.AsSpan(namePrefix.Length), out int number) &&
+                newSizeCounter < number)
             {
-                string name = imgSize.Name;
-
-                if (name.StartsWith(namePrefix, StringComparison.InvariantCulture))
-                {
-                    if (int.TryParse(name.AsSpan(namePrefix.Length), out int number))
-                    {
-                        if (newSizeCounter < number)
-                        {
-                            newSizeCounter = number;
-                        }
-                    }
-                }
+                newSizeCounter = number;
             }
-
-            return $"{namePrefix} {++newSizeCounter}";
         }
 
-        public void RefreshEnabledState()
-        {
-            InitializeEnabledValue();
-            OnPropertyChanged(nameof(IsEnabled));
-        }
+        return $"{namePrefix} {++newSizeCounter}";
+    }
+
+    public void RefreshEnabledState()
+    {
+        InitializeEnabledValue();
+        OnPropertyChanged(nameof(IsEnabled));
     }
 }
