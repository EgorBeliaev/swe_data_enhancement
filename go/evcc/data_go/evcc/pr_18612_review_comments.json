[
    {
        "title": "Eliminate temporary override of site.batterySoc with incorrect value."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "the value currently gets set to a vastly incorrect value. this PR eliminates the possibility of a concurrent access reading a very wrong value"
    },
    {
        "author": {
            "login": "andig"
        },
        "body": ""
    },
    {
        "author": {
            "login": "andig"
        },
        "body": "Thank you for this change. The value has no intermediary use- does this fix any problem or just makes the code nicer (which is good anyhow)?"
    },
    {
        "author": {
            "login": "m1cm1c"
        },
        "body": "\r\n> Thank you for this change. The value has no intermediary use- does this fix any problem or just makes the code nicer (which is good anyhow)?\r\n\r\ni'm not aware of any intermediary use. i did not come across this facing a problem. it just struck me as odd that it was done that way and i thought there might be some execution happening in a different goroutine that might access it and then get a value that's way too high but did not check whether any such access actually occurs\r\n\r\n-----\r\n\r\nbtw the code\r\n\r\n\tif totalCapacity == 0 {\r\n\t\ttotalCapacity = float64(len(site.batteryMeters))\r\n\t}\r\n\r\nright between the code i changed struck me as odd too because i cannot see why the number of battery meters would ever be equated to battery capacity in a completely unrelated unit but i did not touch it because while i think it might be a weird approach to avoiding a division by zero and that it probably behaves weirdly if you have both capacity-reporting batteries and non-capacity-reporting batteries (very heavy bias to capacity-reporting batteries in the result), i did not feel confident that i could provide code that's better in all situations"
    }
]