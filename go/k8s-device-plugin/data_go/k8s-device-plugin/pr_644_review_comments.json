[
    {
        "title": "use the helm quote function to wrap boolean values in quotes"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "It's generally recommended to use the `quote` function instead of explicitly wrapping helm values with quotes in-line"
    },
    {
        "author": {
            "login": "shivamerla"
        },
        "body": ""
    },
    {
        "author": {
            "login": "elezar"
        },
        "body": "@tariq1890 would removing the quotes from string literals entirely not be a better option than adding the `quote` operator?"
    },
    {
        "author": {
            "login": "elezar"
        },
        "body": ""
    },
    {
        "author": {
            "login": "klueska"
        },
        "body": "I'm not necessarily opposed to this, just curious is there there is any magic going on with doing things this way. Do all double quotes within the string being passed to `quote` get escaped, for example?"
    },
    {
        "author": {
            "login": "tariq1890"
        },
        "body": "@klueska This is one of the best practices of helm. I also think it's more readable as it is explicit in its intent to wrap a string in quotes when using templates\r\n\r\n> Do all double quotes within the string being passed to quote get escaped, for example?\r\n\r\nYes, the `quote` function is pretty much the equivalent of `fmt.Sprintf(\"%q\", str)`. See [here](https://github.com/Masterminds/sprig/blob/master/strings.go#L87)"
    },
    {
        "author": {
            "login": "tariq1890"
        },
        "body": "@elezar I think this would be a safer change as it results in no changes to the yaml parser. Strings like `true` and `false` unquoted are interpreted as booleans. In this helm chart, we are choosing to quote them explicitly."
    }
]