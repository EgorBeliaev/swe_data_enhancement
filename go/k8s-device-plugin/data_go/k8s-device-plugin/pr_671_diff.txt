diff --git a/internal/lm/resource.go b/internal/lm/resource.go
index cc369673f..29cdbb28d 100644
--- a/internal/lm/resource.go
+++ b/internal/lm/resource.go
@@ -187,7 +187,8 @@ func (rl resourceLabeler) getProductName(parts ...string) string {
 	var strippedParts []string
 	for _, p := range parts {
 		if p != "" {
-			strippedParts = append(strippedParts, strings.ReplaceAll(p, " ", "-"))
+			sanitisedPart := sanitise(p)
+			strippedParts = append(strippedParts, sanitisedPart)
 		}
 	}
 
@@ -302,3 +303,13 @@ func getArchFamily(computeMajor, computeMinor int) string {
 	}
 	return "undefined"
 }
+
+func sanitise(input string) string {
+	var sanitised string
+	sanitised = strings.ReplaceAll(input, "(", "")
+	sanitised = strings.ReplaceAll(sanitised, ")", "")
+	// remove redundant blank spaces
+	sanitised = strings.Join(strings.Fields(sanitised), "-")
+
+	return sanitised
+}
diff --git a/internal/lm/resource_test.go b/internal/lm/resource_test.go
index c3ae45f52..fed981a07 100644
--- a/internal/lm/resource_test.go
+++ b/internal/lm/resource_test.go
@@ -216,6 +216,40 @@ func TestGPUResourceLabeler(t *testing.T) {
 
 }
 
+func TestSanitise(t *testing.T) {
+	testCases := []struct {
+		input    string
+		expected string
+	}{
+		{
+			input:    "a space separated string",
+			expected: "a-space-separated-string",
+		},
+		{
+			input:    "some(thing)else",
+			expected: "somethingelse",
+		},
+		{
+			input:    "some ( thing )else",
+			expected: "some-thing-else",
+		},
+		{
+			input:    "NVIDIA-TITAN-X-(Pascal)",
+			expected: "NVIDIA-TITAN-X-Pascal",
+		},
+		{
+			input:    " input  with multiple   spaces   ",
+			expected: "input-with-multiple-spaces",
+		},
+	}
+	for _, tc := range testCases {
+		t.Run(tc.input, func(t *testing.T) {
+			require.EqualValues(t, tc.expected, sanitise(tc.input))
+		})
+	}
+
+}
+
 func TestMigResourceLabeler(t *testing.T) {
 
 	device := rt.NewMigDevice(1, 2, 300)
