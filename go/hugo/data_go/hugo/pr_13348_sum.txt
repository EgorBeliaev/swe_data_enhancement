**Instructions for Implementation:**

1. **Server Header Matching for Redirects:**
   - Implement a new option `FromHeaders` to enable server header matching during redirect operations.
   
2. **Regular Expression Redirects:**
   - Add `FromRe`, allowing regular expression support with group matching (e.g., replace $1, $2 in `To` path using group matches). 
   - Ensure that both `From` and `FromRe` must match if both are set.

3. **Non-HTML URL Redirects:**
   - Allow redirects to non-HTML URLs when the `Sec-Fetch-Mode` is set to `navigate`.

4. **Redirect Loop Detection:**
   - Implement a mechanism to detect and prevent redirect loops.

5. **Configuration Example:**
   - Utilize test configurations similar to:
     ```toml
     [server]
         [[server.headers]]
             for = '/**/inertia.json'
             [server.headers.values]
                 Content-Type = 'text/html'
                 X-Inertia    = 'true'
                 Vary         = 'Accept'

         [[server.redirects]]
             force       = true
             from        = '/**/'
             fromRe      = "^/(.*)/$"
             fromHeaders = { "X-Inertia" = "true" }
             status      = 301
             to          = '/$1/inertia.json'
     ```

**Key Note:**

- Be aware that this setup may not be compatible with services like Netlify, which do not support redirects based on request headers without custom edge functions.