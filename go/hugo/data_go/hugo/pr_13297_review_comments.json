[
    {
        "title": "resources: Add responseHeaders option to resources.GetRemote"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "* These response headers will be included in `.Data.Headers` if found.\n* The header name matching is case insensitive.\n* `Data.Headers` is of type `map[string][]string`\n* In most cases there will be only one value per header key, but e.g. `Set-Cookie` commonly has multiple values.\n\nFixes #12521\n"
    },
    {
        "author": {
            "login": "irkode"
        },
        "body": "First of all THX real cool stuff . \ud83d\udc4d \r\n\r\nbuild that stuff and get the header fields requested and even more than that :-))\r\n\r\nhad to sleep a night for that one, sry and maybe wait for the docs , but I was eager to play...\r\n\r\n> * Data.Headers is of type map[string][]string\r\n> * In most cases there will be only one value per header key, but e.g. Set-Cookie commonly has multiple values.\r\n\r\nThat sounds like\r\n* some are real arrays\r\n* and other just a one element array holding a string (which then must be parsed by users)\r\n\r\nQuestion: are there rules here, which fields are split and returned as array?\r\n* guess `Set-Cookie` will be (by your statement above) \r\n* Link is not\r\n\r\nif that would be the case one could write a generic partial for accessing these fields\r\n\r\n---\r\n\r\nHere's that great stuff in action: (PoC not robust)\r\n```text\r\nhugo v0.143.0-DEV-a5637831cdf5eeecd1a93a8e1dd7bd4e0fb07fef windows/amd64 BuildDate=2025-01-23T16:53:38Z\r\n\r\nWARN  {\r\n  \"first\": \"https://api.github.com/repositories/11180687/tags?per_page=2\\u0026page=1\",\r\n  \"last\": \"https://api.github.com/repositories/11180687/tags?per_page=2\\u0026page=155\",\r\n  \"next\": \"https://api.github.com/repositories/11180687/tags?per_page=2\\u0026page=101\",\r\n  \"prev\": \"https://api.github.com/repositories/11180687/tags?per_page=2\\u0026page=99\"\r\n}\r\nWARN  NEXT: https://api.github.com/repositories/11180687/tags?per_page=2&page=101\r\n```\r\n\r\n\r\n```\r\n{{ define \"main\" }}\r\n   {{ $url := \"https://api.github.com/repos/gohugoio/hugo/tags?per_page=2&page=100\" }}\r\n   {{ $opts := dict \"method\" \"get\" \"responseHeaders\" (slice \"Link\") }}\r\n   {{ with try (resources.GetRemote $url $opts) }}\r\n      {{ with .Err }}\r\n         {{ errorf \"%s\" . }}\r\n      {{ else with .Value }}\r\n         {{ $links := partial \"getLinks\" . }}\r\n         {{ warnf \"%s\" (debug.Dump $links) }}\r\n         {{ warnf \"NEXT: %s\" $links.next }}\r\n      {{ else }}\r\n         {{ warnf \"Unable to get remote resource %q\" $url }}\r\n      {{ end }}\r\n   {{ end }}\r\n{{ end }}\r\n\r\n{{ define \"partials/getLinks\" }}\r\n   {{ $links := dict }}\r\n   {{ with try (index (index .Data.Headers \"Link\") 0) }}\r\n      {{ with .Value }}\r\n         {{ range split . \",\" }}\r\n            {{ with split .  \";\" }}\r\n               {{ $link := trim (index . 0) \"<> \" }}\r\n               {{ $rel :=  index (split (index . 1) `\"`) 1 }}\r\n               {{ $links = merge $links (dict $rel $link) }}\r\n            {{ end }}\r\n         {{ end }}\r\n      {{ end }}\r\n   {{ else }}\r\n      {{ warnf \"NO LINK HERE %v\" . }}\r\n   {{ end }}\r\n   {{ return $links }}\r\n{{ end }}\r\n```\r\n"
    },
    {
        "data": {
            "repository": {
                "issue": {
                    "title": "Add .Data.Headers in GetRemote",
                    "body": "# Support Link Response fields in GetRemote Result object\r\n\r\n[Discourse 49894](https://discourse.gohugo.io/t/support-for-link-header-field-in-getremote-used-for-api-pagination/49894/3)\r\n\r\n## Issue\r\n\r\nDifferent APIs use different Response-Header fields to return additional data about the Response.\r\n\r\nEspecially paginating REST APIs (GitHub, GitLab guess there are many) used in combination with GetRemote are affected.\r\n\r\nHugo currently only provides access to the _Content-Type_ filed through it's Data Interface in\r\nresource Object returned from GetRemote\r\n\r\nI would like to have see the Link Header fields for Pagination at the resource.\r\n\r\n-  start\r\n-  first\r\n-  next\r\n-  prev(ious)\r\n-  last\r\n-  self\r\n\r\n## Link Response Header Field (RFC 5988)\r\n\r\nRFC has a complete grammar in [section 5](https://datatracker.ietf.org/doc/html/rfc5988#section-5)\r\n\r\nJust the key points for the stuff used in pagination here:\r\n\r\n```text\r\nLink                 = \"Link\" \":\" #link-value\r\n  link-value         = \"<\" URI-Reference \">\" *( \";\" link-param )\r\n    link-param       = ( \"rel\" \"=\" relation-types )             <-- the are more keywords than \"rel\" and more types\r\n      relation-types = relation-type\r\n                 |     <\"> relation-type *( 1*SP relation-type ) <\">\r\n```\r\n\r\nrelation types are defined in\r\n[section 622](https://datatracker.ietf.org/doc/html/rfc5988#section-6.2.2)\r\n\r\ncommonly used types are\r\n\r\n-  self - the link to the page itself\r\n-  help - usually links to the api documentation\r\n-  stylesheet - for XML delivery or transformation\r\n-  start - slighty different definition than first (non native speaker) - and there is no _end_ type\r\n   ;-)\r\n\r\nSo we have multiple _types_ in a _rel_ field that may link to the same Url. And two different types\r\nfor the same (prev and previous) Hurray.\r\n\r\n### Example from GitHub\r\n\r\n> This is a one line string, newlines added for readability\r\n>\r\n> ```text\r\n> Link:\r\n> <https://api.github.com/repositories/11180687/issues?page=1&per_page=2>; rel=\"prev\",\r\n> <https://api.github.com/repositories/11180687/issues?page=3&per_page=2>; rel=\"next\"\r\n> <https://api.github.com/repositories/11180687/issues?page=233&per_page=2>; rel=\"last\",\r\n> <https://api.github.com/repositories/11180687/issues?page=1&per_page=2>; rel=\"first\"\r\n> <https://www.example.com; rel=\"self\">\r\n> <https://www.example.com; rel=\"self stylesheet\">\r\n> ```\r\n\r\n## Implementation thoughts\r\n\r\nImplementation effort varies on the degree of Link attribute support\r\n\r\n1. only rel=\r\n  1.2 all types\r\n  1.3 list of types (minimal: next,prev(ios),first,last,start)\r\n2 complete Link RFC\r\n3 all or some other Headers\r\n\r\nI would vote for 1.2 maybe 1.1 so it's full supported. Guess you have some Go libraries already in\r\nuse. The grammar for the Link attribute seems to regex capture handlebar.\r\n\r\n### Easy access\r\n\r\nshould be dead simple $resource.Links.First $resource.Links \"first\" ... no puzzling around with\r\nwalking a structure or index function.\r\n\r\n### Should not fail\r\n\r\nIf the link cannot be parsed completely it should not fail but store it in a String representation\r\nmaybe Resource.Header.LinkRaw ...\r\n\r\n## Field that may be worth adding\r\n\r\n-  _Content-Language_ might be interesting, so one can handle the process according to Hugo site\r\n   languages.\r\n\r\n## Further considerations\r\n\r\nFor simplicity all fields exposed are directly available at the .Data field.\r\n\r\nCould be moved to a .Data.Header storing the Response headers. Just one field currently for the\r\nResponse-Header, so a deprecation now and duplicate/link it to .Data.Headers. or an interface,\r\ngetter ... i'm not in Go. The new link Field might be widely used because of paginating APIs\r\nutilized with GetRemote and Content Adapters. imho if there should be a change, early is better ;-)\r\n\r\nDunno if these will be a conflict candidate later but at lest a point to consider\r\n\r\n## Resources\r\n\r\n-  [mdn_web_docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link)\r\n-  [Wikipedia](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields)\r\n-  [RFC 5988](https://datatracker.ietf.org/doc/html/rfc5988)\r\n",
                    "state": "CLOSED",
                    "comments": {
                        "nodes": [
                            {
                                "author": {
                                    "login": "irkode"
                                },
                                "body": "a few hours of \ud83d\ude34  and a quit lesson \ud83e\uddd1\u200d\ud83c\udf93 in building Hugo  \r\n\r\nI would say that the most practical approach would be to add needed Fields only.\r\n\r\nthe Link is returned as unicoded string and to extract only the needed rel types it looks quite simple.\r\nIn `Perl` I would use a little regex magic to create fields for every \"rel=\" type for each link.\r\n[regex 101](https://regex101.com/r/1sfSDc/2)\r\n```regex\r\n<(.*?)>\\s*;\\s*.*?(rel=\"(first|last|next|(prev(:?ious)?)|start|self)(\\s+(first|last|next|(prev(:?ious)?)|start|self))?\").*?(,|$)\r\n```\r\n\r\nI could imagine that it would be good to have the unparsed Link stored, too.\r\n\r\n```nocode\r\n.Data.Links [\r\n  rawLink = res.Header.Get(\"Link\")\r\n  first = \"https...  \r\n  last = \"https\"\r\n  ...\r\n]\r\n```\r\n\r\nthe presence of each link type is determined by the query result. So only available links are in the Response. The first page fe. wouldn't provide a previous link in the response header field\r\n\r\n## tested with \r\n\r\njust added a `res.Header.Get(\"Link\")` to `responseToData` and we get a Raw string looks like Unicode.\r\n\r\nDumped in a Template:\r\n```\r\n   {{ $github_rest_api_branches := \"https://api.github.com/repos/gohugoio/hugo/branches?per_page=10&page=10\" }}\r\n   {{ $github_rest_options := dict\r\n      \"headers\" (dict \"Accept\" \"application/vnd.github+json\" \"Content-Type\" \"application/json\")\r\n   }}\r\n   {{ with resources.GetRemote $github_rest_api_branches $github_rest_options }}\r\n      {{ warnf (debug.Dump .Data) }}\r\n   {{ end }}\r\n\r\n```\r\nwill result in:\r\n```\r\n{\r\n  \"ContentLanguage\": \"\",\r\n  \"ContentLength\": -1,\r\n  \"ContentType\": \"application/json; charset=utf-8\",\r\n  \"Link\": \"\\u003chttps://api.github.com/repositories/11180687/issues?per_page=10\\u0026page=9\\u003e; rel=\\\"prev\\\", \\u003chttps://api.github.com/repositories/11180687/issues?per_page=10\\u0026page=11\\u003e; rel=\\\"next\\\", \\u003chttps://api.github.com/repositories/11180687/issues?per_page=10\\u0026page=47\\u003e; rel=\\\"last\\\", \\u003chttps://api.github.com/repositories/11180687/issues?per_page=10\\u0026page=1\\u003e; rel=\\\"first\\\"\",\r\n  \"Status\": \"200 OK\",\r\n  \"StatusCode\": 200,\r\n  \"TransferEncoding\": null\r\n}```\r\n"
                            },
                            {
                                "author": {
                                    "login": "irkode"
                                },
                                "body": "Just a thought - What about an _Opt-In_ for complex header fields.... \r\n\r\n```golang\r\n{{ $opts := dict\r\n  \"method\" \"post\"\r\n  \"body\" `{\"complete\": true}` \r\n  \"headers\" (dict  \"Content-Type\" \"application/json\")\r\n  \"responseHeaderFields= (slice \"Links\", ...)\r\n}}\r\n```\r\n\r\n Will limit the performance impact if one has many Get-Remote Calls without need for links.\r\nAn opt-In would lower this and avoid a performance regression in current usage.\r\n\r\n"
                            }
                        ]
                    }
                }
            }
        }
    }
]