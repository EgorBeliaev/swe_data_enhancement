diff --git a/langchain4j-mistral-ai/pom.xml b/langchain4j-mistral-ai/pom.xml
index 8bb890bdc7a..fcd49a64689 100644
--- a/langchain4j-mistral-ai/pom.xml
+++ b/langchain4j-mistral-ai/pom.xml
@@ -67,12 +67,6 @@
             <artifactId>slf4j-api</artifactId>
         </dependency>
 
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <scope>provided</scope>
-        </dependency>
-
         <dependency>
             <groupId>org.junit.jupiter</groupId>
             <artifactId>junit-jupiter-engine</artifactId>
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiChatModel.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiChatModel.java
index 91817979d83..2d5666fdadc 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiChatModel.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiChatModel.java
@@ -1,5 +1,13 @@
 package dev.langchain4j.model.mistralai;
 
+import static dev.langchain4j.internal.RetryUtils.withRetry;
+import static dev.langchain4j.internal.Utils.getOrDefault;
+import static dev.langchain4j.internal.Utils.isNullOrEmpty;
+import static dev.langchain4j.internal.ValidationUtils.ensureNotEmpty;
+import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.*;
+import static dev.langchain4j.spi.ServiceHelper.loadFactories;
+import static java.util.Collections.singletonList;
+
 import dev.langchain4j.agent.tool.ToolSpecification;
 import dev.langchain4j.data.message.AiMessage;
 import dev.langchain4j.data.message.ChatMessage;
@@ -11,23 +19,14 @@
 import dev.langchain4j.model.mistralai.internal.client.MistralAiClient;
 import dev.langchain4j.model.mistralai.spi.MistralAiChatModelBuilderFactory;
 import dev.langchain4j.model.output.Response;
-import lombok.Builder;
-
 import java.time.Duration;
 import java.util.List;
 
-import static dev.langchain4j.internal.RetryUtils.withRetry;
-import static dev.langchain4j.internal.Utils.getOrDefault;
-import static dev.langchain4j.internal.Utils.isNullOrEmpty;
-import static dev.langchain4j.internal.ValidationUtils.ensureNotEmpty;
-import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.*;
-import static dev.langchain4j.spi.ServiceHelper.loadFactories;
-import static java.util.Collections.singletonList;
-
 /**
  * Represents a Mistral AI Chat Model with a chat completion interface, such as open-mistral-7b and open-mixtral-8x7b
  * This model allows generating chat completion of a sync way based on a list of chat messages.
- * You can find description of parameters <a href="https://docs.mistral.ai/api/#operation/createChatCompletion">here</a>.
+ * You can find description of parameters
+ * <a href="https://docs.mistral.ai/api/#operation/createChatCompletion">here</a>.
  */
 public class MistralAiChatModel implements ChatLanguageModel {
 
@@ -45,38 +44,38 @@ public class MistralAiChatModel implements ChatLanguageModel {
     /**
      * Constructs a MistralAiChatModel with the specified parameters.
      *
-     * @param baseUrl      the base URL of the Mistral AI API. It uses the default value if not specified
-     * @param apiKey       the API key for authentication
-     * @param modelName    the name of the Mistral AI model to use
-     * @param temperature  the temperature parameter for generating chat responses
-     * @param topP         the top-p parameter for generating chat responses
-     * @param maxTokens    the maximum number of new tokens to generate in a chat response
-     * @param safePrompt   a flag indicating whether to use a safe prompt for generating chat responses
-     * @param randomSeed   the random seed for generating chat responses
+     * @param baseUrl the base URL of the Mistral AI API. It uses the default value if not specified
+     * @param apiKey the API key for authentication
+     * @param modelName the name of the Mistral AI model to use
+     * @param temperature the temperature parameter for generating chat responses
+     * @param topP the top-p parameter for generating chat responses
+     * @param maxTokens the maximum number of new tokens to generate in a chat response
+     * @param safePrompt a flag indicating whether to use a safe prompt for generating chat responses
+     * @param randomSeed the random seed for generating chat responses
      * @param responseFormat the response format for generating chat responses.
-     *                       <p>
-     *                       Current values supported are "text" and "json_object".
-     * @param timeout      the timeout duration for API requests
-     *                     <p>
-     *                     The default value is 60 seconds
-     * @param logRequests  a flag indicating whether to log API requests
+     * <p>
+     * Current values supported are "text" and "json_object".
+     * @param timeout the timeout duration for API requests
+     * <p>
+     * The default value is 60 seconds
+     * @param logRequests a flag indicating whether to log API requests
      * @param logResponses a flag indicating whether to log API responses
-     * @param maxRetries   the maximum number of retries for API requests. It uses the default value 3 if not specified
+     * @param maxRetries the maximum number of retries for API requests. It uses the default value 3 if not specified
      */
-    @Builder
-    public MistralAiChatModel(String baseUrl,
-                              String apiKey,
-                              String modelName,
-                              Double temperature,
-                              Double topP,
-                              Integer maxTokens,
-                              Boolean safePrompt,
-                              Integer randomSeed,
-                              String responseFormat,
-                              Duration timeout,
-                              Boolean logRequests,
-                              Boolean logResponses,
-                              Integer maxRetries) {
+    public MistralAiChatModel(
+            String baseUrl,
+            String apiKey,
+            String modelName,
+            Double temperature,
+            Double topP,
+            Integer maxTokens,
+            Boolean safePrompt,
+            Integer randomSeed,
+            String responseFormat,
+            Duration timeout,
+            Boolean logRequests,
+            Boolean logResponses,
+            Integer maxRetries) {
 
         this.client = MistralAiClient.builder()
                 .baseUrl(getOrDefault(baseUrl, "https://api.mistral.ai/v1"))
@@ -139,28 +138,33 @@ public Response<AiMessage> generate(List<ChatMessage> messages, ToolSpecificatio
         return generate(messages, singletonList(toolSpecification), toolSpecification);
     }
 
-    private Response<AiMessage> generate(List<ChatMessage> messages,
-                                         List<ToolSpecification> toolSpecifications,
-                                         ToolSpecification toolThatMustBeExecuted) {
+    private Response<AiMessage> generate(
+            List<ChatMessage> messages,
+            List<ToolSpecification> toolSpecifications,
+            ToolSpecification toolThatMustBeExecuted) {
         ensureNotEmpty(messages, "messages");
 
-        MistralAiChatCompletionRequest.MistralAiChatCompletionRequestBuilder requestBuilder = MistralAiChatCompletionRequest.builder()
-                .model(this.modelName)
-                .messages(toMistralAiMessages(messages))
-                .temperature(this.temperature)
-                .maxTokens(this.maxTokens)
-                .topP(this.topP)
-                .randomSeed(this.randomSeed)
-                .safePrompt(this.safePrompt)
-                .responseFormat(toMistralAiResponseFormat(this.responseFormat))
-                .stream(false);
+        MistralAiChatCompletionRequest.MistralAiChatCompletionRequestBuilder requestBuilder =
+                MistralAiChatCompletionRequest.builder()
+                        .model(this.modelName)
+                        .messages(toMistralAiMessages(messages))
+                        .temperature(this.temperature)
+                        .maxTokens(this.maxTokens)
+                        .topP(this.topP)
+                        .randomSeed(this.randomSeed)
+                        .safePrompt(this.safePrompt)
+                        .responseFormat(toMistralAiResponseFormat(this.responseFormat))
+                        .stream(false);
 
         if (!isNullOrEmpty(toolSpecifications)) {
             requestBuilder.tools(toMistralAiTools(toolSpecifications));
             requestBuilder.toolChoice(MistralAiToolChoiceName.AUTO);
         } else if (toolThatMustBeExecuted != null) {
             requestBuilder.tools(toMistralAiTools(singletonList(toolThatMustBeExecuted)));
-            requestBuilder.toolChoice(MistralAiToolChoiceName.ANY); // MistralAi does not support toolChoice as Function object. ANY force to the model to call a function
+            requestBuilder.toolChoice(
+                    MistralAiToolChoiceName
+                            .ANY); // MistralAi does not support toolChoice as Function object. ANY force to the model
+            // to call a function
         }
 
         MistralAiChatCompletionRequest request = requestBuilder.build();
@@ -170,8 +174,7 @@ private Response<AiMessage> generate(List<ChatMessage> messages,
         return Response.from(
                 aiMessageFrom(response),
                 tokenUsageFrom(response.getUsage()),
-                finishReasonFrom(response.getChoices().get(0).getFinishReason())
-        );
+                finishReasonFrom(response.getChoices().get(0).getFinishReason()));
     }
 
     public static MistralAiChatModelBuilder builder() {
@@ -183,8 +186,33 @@ public static MistralAiChatModelBuilder builder() {
 
     public static class MistralAiChatModelBuilder {
 
-        public MistralAiChatModelBuilder() {
-        }
+        private String baseUrl;
+
+        private String apiKey;
+
+        private String modelName;
+
+        private Double temperature;
+
+        private Double topP;
+
+        private Integer maxTokens;
+
+        private Boolean safePrompt;
+
+        private Integer randomSeed;
+
+        private String responseFormat;
+
+        private Duration timeout;
+
+        private Boolean logRequests;
+
+        private Boolean logResponses;
+
+        private Integer maxRetries;
+
+        public MistralAiChatModelBuilder() {}
 
         public MistralAiChatModelBuilder modelName(String modelName) {
             this.modelName = modelName;
@@ -205,5 +233,142 @@ public MistralAiChatModelBuilder responseFormat(MistralAiResponseFormatType resp
             this.responseFormat = responseFormat.toString();
             return this;
         }
+
+        /**
+         * @param baseUrl the base URL of the Mistral AI API. It uses the default value if not specified
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder baseUrl(String baseUrl) {
+            this.baseUrl = baseUrl;
+            return this;
+        }
+
+        /**
+         * @param apiKey the API key for authentication
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder apiKey(String apiKey) {
+            this.apiKey = apiKey;
+            return this;
+        }
+
+        /**
+         * @param temperature the temperature parameter for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder temperature(Double temperature) {
+            this.temperature = temperature;
+            return this;
+        }
+
+        /**
+         * @param topP the top-p parameter for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder topP(Double topP) {
+            this.topP = topP;
+            return this;
+        }
+
+        /**
+         * @param maxTokens the maximum number of new tokens to generate in a chat response
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder maxTokens(Integer maxTokens) {
+            this.maxTokens = maxTokens;
+            return this;
+        }
+
+        /**
+         * @param safePrompt a flag indicating whether to use a safe prompt for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder safePrompt(Boolean safePrompt) {
+            this.safePrompt = safePrompt;
+            return this;
+        }
+
+        /**
+         * @param randomSeed the random seed for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder randomSeed(Integer randomSeed) {
+            this.randomSeed = randomSeed;
+            return this;
+        }
+
+        /**
+         * @param timeout the timeout duration for API requests
+         * <p>
+         * The default value is 60 seconds
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder timeout(Duration timeout) {
+            this.timeout = timeout;
+            return this;
+        }
+
+        /**
+         * @param logRequests a flag indicating whether to log API requests
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder logRequests(Boolean logRequests) {
+            this.logRequests = logRequests;
+            return this;
+        }
+
+        /**
+         * @param logResponses a flag indicating whether to log API responses
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder logResponses(Boolean logResponses) {
+            this.logResponses = logResponses;
+            return this;
+        }
+
+        /**
+         * @param maxRetries
+         * @return {@code this}.
+         */
+        public MistralAiChatModelBuilder maxRetries(Integer maxRetries) {
+            this.maxRetries = maxRetries;
+            return this;
+        }
+
+        public MistralAiChatModel build() {
+            return new MistralAiChatModel(
+                    this.baseUrl,
+                    this.apiKey,
+                    this.modelName,
+                    this.temperature,
+                    this.topP,
+                    this.maxTokens,
+                    this.safePrompt,
+                    this.randomSeed,
+                    this.responseFormat,
+                    this.timeout,
+                    this.logRequests,
+                    this.logResponses,
+                    this.maxRetries);
+        }
+
+        @Override
+        public String toString() {
+            return "MistralAiChatModelBuilder(" + "baseUrl=" + this.baseUrl + ", apiKey=" + this.apiKey == null
+                    ? ""
+                    : "*****"
+                            + ", modelName=" + this.modelName
+                            + ", temperature=" + this.temperature
+                            + ", topP=" + this.topP
+                            + ", maxTokens=" + this.maxTokens
+                            + ", safePrompt=" + this.safePrompt
+                            + ", randomSeed=" + this.randomSeed
+                            + ", responseFormat=" + this.responseFormat
+                            + ", timeout=" + this.timeout
+                            + ", logRequests=" + this.logRequests
+                            + ", logResponses=" + this.logResponses
+                            + ", maxRetries=" + this.maxRetries
+                            + ")";
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiEmbeddingModel.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiEmbeddingModel.java
index 3d4746fcb2b..05eb43442df 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiEmbeddingModel.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiEmbeddingModel.java
@@ -1,5 +1,11 @@
 package dev.langchain4j.model.mistralai;
 
+import static dev.langchain4j.internal.RetryUtils.withRetry;
+import static dev.langchain4j.internal.Utils.getOrDefault;
+import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.tokenUsageFrom;
+import static dev.langchain4j.spi.ServiceHelper.loadFactories;
+import static java.util.stream.Collectors.toList;
+
 import dev.langchain4j.data.embedding.Embedding;
 import dev.langchain4j.data.segment.TextSegment;
 import dev.langchain4j.model.embedding.DimensionAwareEmbeddingModel;
@@ -8,17 +14,9 @@
 import dev.langchain4j.model.mistralai.internal.client.MistralAiClient;
 import dev.langchain4j.model.mistralai.spi.MistralAiEmbeddingModelBuilderFactory;
 import dev.langchain4j.model.output.Response;
-import lombok.Builder;
-
 import java.time.Duration;
 import java.util.List;
 
-import static dev.langchain4j.internal.RetryUtils.withRetry;
-import static dev.langchain4j.internal.Utils.getOrDefault;
-import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.tokenUsageFrom;
-import static dev.langchain4j.spi.ServiceHelper.loadFactories;
-import static java.util.stream.Collectors.toList;
-
 /**
  * Represents a Mistral AI embedding model, such as mistral-embed.
  * You can find description of parameters <a href="https://docs.mistral.ai/api/#operation/createEmbedding">here</a>.
@@ -43,14 +41,14 @@ public class MistralAiEmbeddingModel extends DimensionAwareEmbeddingModel {
      * @param logResponses a flag indicating whether to log API responses
      * @param maxRetries   the maximum number of retries for API requests. It uses a default value of 3 if not specified
      */
-    @Builder
-    public MistralAiEmbeddingModel(String baseUrl,
-                                   String apiKey,
-                                   String modelName,
-                                   Duration timeout,
-                                   Boolean logRequests,
-                                   Boolean logResponses,
-                                   Integer maxRetries) {
+    public MistralAiEmbeddingModel(
+            String baseUrl,
+            String apiKey,
+            String modelName,
+            Duration timeout,
+            Boolean logRequests,
+            Boolean logResponses,
+            Integer maxRetries) {
         this.client = MistralAiClient.builder()
                 .baseUrl(getOrDefault(baseUrl, "https://api.mistral.ai/v1"))
                 .apiKey(apiKey)
@@ -93,14 +91,12 @@ public Response<List<Embedding>> embedAll(List<TextSegment> textSegments) {
                 .map(mistralAiEmbedding -> Embedding.from(mistralAiEmbedding.getEmbedding()))
                 .collect(toList());
 
-        return Response.from(
-                embeddings,
-                tokenUsageFrom(response.getUsage())
-        );
+        return Response.from(embeddings, tokenUsageFrom(response.getUsage()));
     }
 
     public static MistralAiEmbeddingModelBuilder builder() {
-        for (MistralAiEmbeddingModelBuilderFactory factory : loadFactories(MistralAiEmbeddingModelBuilderFactory.class)) {
+        for (MistralAiEmbeddingModelBuilderFactory factory :
+                loadFactories(MistralAiEmbeddingModelBuilderFactory.class)) {
             return factory.get();
         }
         return new MistralAiEmbeddingModelBuilder();
@@ -108,8 +104,21 @@ public static MistralAiEmbeddingModelBuilder builder() {
 
     public static class MistralAiEmbeddingModelBuilder {
 
-        public MistralAiEmbeddingModelBuilder() {
-        }
+        private String baseUrl;
+
+        private String apiKey;
+
+        private String modelName;
+
+        private Duration timeout;
+
+        private Boolean logRequests;
+
+        private Boolean logResponses;
+
+        private Integer maxRetries;
+
+        public MistralAiEmbeddingModelBuilder() {}
 
         public MistralAiEmbeddingModelBuilder modelName(String modelName) {
             this.modelName = modelName;
@@ -120,5 +129,84 @@ public MistralAiEmbeddingModelBuilder modelName(MistralAiEmbeddingModelName mode
             this.modelName = modelName.toString();
             return this;
         }
+
+        /**
+         * @param baseUrl      the base URL of the Mistral AI API. It use a default value if not specified
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingModelBuilder baseUrl(final String baseUrl) {
+            this.baseUrl = baseUrl;
+            return this;
+        }
+
+        /**
+         * @param apiKey       the API key for authentication
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingModelBuilder apiKey(final String apiKey) {
+            this.apiKey = apiKey;
+            return this;
+        }
+
+        /**
+         * @param timeout      the timeout duration for API requests. It uses a default value of 60 seconds if not specified
+         *                     <p>
+         *                     The default value is 60 seconds
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingModelBuilder timeout(final Duration timeout) {
+            this.timeout = timeout;
+            return this;
+        }
+
+        /**
+         * @param logRequests  a flag indicating whether to log API requests
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingModelBuilder logRequests(final Boolean logRequests) {
+            this.logRequests = logRequests;
+            return this;
+        }
+
+        /**
+         * @param logResponses a flag indicating whether to log API responses
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingModelBuilder logResponses(final Boolean logResponses) {
+            this.logResponses = logResponses;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingModelBuilder maxRetries(final Integer maxRetries) {
+            this.maxRetries = maxRetries;
+            return this;
+        }
+
+        public MistralAiEmbeddingModel build() {
+            return new MistralAiEmbeddingModel(
+                    this.baseUrl,
+                    this.apiKey,
+                    this.modelName,
+                    this.timeout,
+                    this.logRequests,
+                    this.logResponses,
+                    this.maxRetries);
+        }
+
+        @Override
+        public String toString() {
+            return "MistralAiEmbeddingModelBuilder(" + "baseUrl=" + this.baseUrl + ", apiKey=" + this.apiKey == null
+                    ? ""
+                    : "*****"
+                            + ", modelName=" + this.modelName
+                            + ", timeout=" + this.timeout
+                            + ", logRequests=" + this.logRequests
+                            + ", logResponses=" + this.logResponses
+                            + ", maxRetries=" + this.maxRetries
+                            + ")";
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiModels.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiModels.java
index f06735a22ed..bb0508c5637 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiModels.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiModels.java
@@ -1,19 +1,17 @@
 package dev.langchain4j.model.mistralai;
 
+import static dev.langchain4j.internal.RetryUtils.withRetry;
+import static dev.langchain4j.internal.Utils.getOrDefault;
+import static dev.langchain4j.spi.ServiceHelper.loadFactories;
+
 import dev.langchain4j.model.mistralai.internal.api.MistralAiModelCard;
 import dev.langchain4j.model.mistralai.internal.api.MistralAiModelResponse;
 import dev.langchain4j.model.mistralai.internal.client.MistralAiClient;
 import dev.langchain4j.model.mistralai.spi.MistralAiModelsBuilderFactory;
 import dev.langchain4j.model.output.Response;
-import lombok.Builder;
-
 import java.time.Duration;
 import java.util.List;
 
-import static dev.langchain4j.internal.RetryUtils.withRetry;
-import static dev.langchain4j.internal.Utils.getOrDefault;
-import static dev.langchain4j.spi.ServiceHelper.loadFactories;
-
 /**
  * Represents a collection of Mistral AI models.
  * You can find description of parameters <a href="https://docs.mistral.ai/api/#operation/listModels">here</a>.
@@ -33,13 +31,13 @@ public class MistralAiModels {
      * @param logResponses a flag whether to log raw HTTP responses
      * @param maxRetries   the maximum number of retries for API requests. It uses the default value of 3 if not specified
      */
-    @Builder
-    public MistralAiModels(String baseUrl,
-                           String apiKey,
-                           Duration timeout,
-                           Boolean logRequests,
-                           Boolean logResponses,
-                           Integer maxRetries) {
+    public MistralAiModels(
+            String baseUrl,
+            String apiKey,
+            Duration timeout,
+            Boolean logRequests,
+            Boolean logResponses,
+            Integer maxRetries) {
         this.client = MistralAiClient.builder()
                 .baseUrl(getOrDefault(baseUrl, "https://api.mistral.ai/v1"))
                 .apiKey(apiKey)
@@ -65,14 +63,97 @@ public Response<List<MistralAiModelCard>> availableModels() {
     }
 
     public static MistralAiModelsBuilder builder() {
-        for (MistralAiModelsBuilderFactory factory : loadFactories(MistralAiModelsBuilderFactory.class)){
+        for (MistralAiModelsBuilderFactory factory : loadFactories(MistralAiModelsBuilderFactory.class)) {
             return factory.get();
         }
         return new MistralAiModelsBuilder();
     }
 
     public static class MistralAiModelsBuilder {
-        public MistralAiModelsBuilder(){
+
+        private String baseUrl;
+
+        private String apiKey;
+
+        private Duration timeout;
+
+        private Boolean logRequests;
+
+        private Boolean logResponses;
+
+        private Integer maxRetries;
+
+        public MistralAiModelsBuilder() {}
+
+        /**
+         * @param baseUrl the base URL of the Mistral AI API. It uses the default value if not specified
+         * @return {@code this}.
+         */
+        public MistralAiModelsBuilder baseUrl(final String baseUrl) {
+            this.baseUrl = baseUrl;
+            return this;
+        }
+
+        /**
+         * @param apiKey the API key for authentication
+         * @return {@code this}.
+         */
+        public MistralAiModelsBuilder apiKey(final String apiKey) {
+            this.apiKey = apiKey;
+            return this;
+        }
+
+        /**
+         * @param timeout the timeout duration for API requests. It uses the default value of 60 seconds if not
+         * specified
+         * @return {@code this}.
+         */
+        public MistralAiModelsBuilder timeout(final Duration timeout) {
+            this.timeout = timeout;
+            return this;
+        }
+
+        /**
+         * @param logRequests a flag whether to log raw HTTP requests
+         * @return {@code this}.
+         */
+        public MistralAiModelsBuilder logRequests(final Boolean logRequests) {
+            this.logRequests = logRequests;
+            return this;
+        }
+
+        /**
+         * @param logResponses a flag whether to log raw HTTP responses
+         * @return {@code this}.
+         */
+        public MistralAiModelsBuilder logResponses(final Boolean logResponses) {
+            this.logResponses = logResponses;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelsBuilder maxRetries(final Integer maxRetries) {
+            this.maxRetries = maxRetries;
+            return this;
+        }
+
+        public MistralAiModels build() {
+            return new MistralAiModels(
+                    this.baseUrl, this.apiKey, this.timeout, this.logRequests, this.logResponses, this.maxRetries);
+        }
+
+        @Override
+        public String toString() {
+            return "MistralAiModelsBuilder(" + "baseUrl=" + this.baseUrl + ", apiKey=" + this.apiKey == null
+                    ? ""
+                    : "*****"
+                            + ", timeout=" + this.timeout
+                            + ", logRequests=" + this.logRequests
+                            + ", logResponses=" + this.logResponses
+                            + ", maxRetries=" + this.maxRetries
+                            + ")";
         }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiStreamingChatModel.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiStreamingChatModel.java
index c0e2751bd00..0777ca6c956 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiStreamingChatModel.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/MistralAiStreamingChatModel.java
@@ -1,5 +1,13 @@
 package dev.langchain4j.model.mistralai;
 
+import static dev.langchain4j.internal.Utils.getOrDefault;
+import static dev.langchain4j.internal.Utils.isNullOrEmpty;
+import static dev.langchain4j.internal.ValidationUtils.ensureNotEmpty;
+import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.*;
+import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.toMistralAiTools;
+import static dev.langchain4j.spi.ServiceHelper.loadFactories;
+import static java.util.Collections.singletonList;
+
 import dev.langchain4j.agent.tool.ToolSpecification;
 import dev.langchain4j.data.message.AiMessage;
 import dev.langchain4j.data.message.ChatMessage;
@@ -10,19 +18,9 @@
 import dev.langchain4j.model.mistralai.internal.api.MistralAiToolChoiceName;
 import dev.langchain4j.model.mistralai.internal.client.MistralAiClient;
 import dev.langchain4j.model.mistralai.spi.MistralAiStreamingChatModelBuilderFactory;
-import lombok.Builder;
-
 import java.time.Duration;
 import java.util.List;
 
-import static dev.langchain4j.internal.Utils.getOrDefault;
-import static dev.langchain4j.internal.Utils.isNullOrEmpty;
-import static dev.langchain4j.internal.ValidationUtils.ensureNotEmpty;
-import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.*;
-import static dev.langchain4j.model.mistralai.internal.mapper.MistralAiMapper.toMistralAiTools;
-import static dev.langchain4j.spi.ServiceHelper.loadFactories;
-import static java.util.Collections.singletonList;
-
 /**
  * Represents a Mistral AI Chat Model with a chat completion interface, such as mistral-tiny and mistral-small.
  * The model's response is streamed token by token and should be handled with {@link StreamingResponseHandler}.
@@ -56,19 +54,19 @@ public class MistralAiStreamingChatModel implements StreamingChatLanguageModel {
      * @param logResponses a flag indicating whether to log raw HTTP responses
      * @param timeout      the timeout duration for API requests
      */
-    @Builder
-    public MistralAiStreamingChatModel(String baseUrl,
-                                       String apiKey,
-                                       String modelName,
-                                       Double temperature,
-                                       Double topP,
-                                       Integer maxTokens,
-                                       Boolean safePrompt,
-                                       Integer randomSeed,
-                                       String responseFormat,
-                                       Boolean logRequests,
-                                       Boolean logResponses,
-                                       Duration timeout) {
+    public MistralAiStreamingChatModel(
+            String baseUrl,
+            String apiKey,
+            String modelName,
+            Double temperature,
+            Double topP,
+            Integer maxTokens,
+            Boolean safePrompt,
+            Integer randomSeed,
+            String responseFormat,
+            Boolean logRequests,
+            Boolean logResponses,
+            Duration timeout) {
 
         this.client = MistralAiClient.builder()
                 .baseUrl(getOrDefault(baseUrl, "https://api.mistral.ai/v1"))
@@ -104,7 +102,10 @@ public static MistralAiStreamingChatModel withApiKey(String apiKey) {
      * @param handler  the response handler for processing the generated chat chunk responses
      */
     @Override
-    public void generate(List<ChatMessage> messages, List<ToolSpecification> toolSpecifications, StreamingResponseHandler<AiMessage> handler) {
+    public void generate(
+            List<ChatMessage> messages,
+            List<ToolSpecification> toolSpecifications,
+            StreamingResponseHandler<AiMessage> handler) {
         generate(messages, toolSpecifications, null, handler);
     }
 
@@ -116,8 +117,11 @@ public void generate(List<ChatMessage> messages, List<ToolSpecification> toolSpe
      * @param handler  the response handler for processing the generated chat chunk responses
      */
     @Override
-    public void generate(List<ChatMessage> messages, ToolSpecification toolSpecification, StreamingResponseHandler<AiMessage> handler) {
-        generate(messages, null,toolSpecification, handler);
+    public void generate(
+            List<ChatMessage> messages,
+            ToolSpecification toolSpecification,
+            StreamingResponseHandler<AiMessage> handler) {
+        generate(messages, null, toolSpecification, handler);
     }
 
     /**
@@ -131,29 +135,34 @@ public void generate(List<ChatMessage> messages, StreamingResponseHandler<AiMess
         generate(messages, null, null, handler);
     }
 
-    private void generate(List<ChatMessage> messages,
-                          List<ToolSpecification> toolSpecifications,
-                          ToolSpecification toolThatMustBeExecuted,
-                          StreamingResponseHandler<AiMessage> handler){
+    private void generate(
+            List<ChatMessage> messages,
+            List<ToolSpecification> toolSpecifications,
+            ToolSpecification toolThatMustBeExecuted,
+            StreamingResponseHandler<AiMessage> handler) {
         ensureNotEmpty(messages, "messages");
 
-        MistralAiChatCompletionRequest.MistralAiChatCompletionRequestBuilder requestBuilder = MistralAiChatCompletionRequest.builder()
-                .model(this.modelName)
-                .messages(toMistralAiMessages(messages))
-                .temperature(this.temperature)
-                .maxTokens(this.maxTokens)
-                .topP(this.topP)
-                .randomSeed(this.randomSeed)
-                .safePrompt(this.safePrompt)
-                .stream(true)
-                .responseFormat(toMistralAiResponseFormat(this.responseFormat));
+        MistralAiChatCompletionRequest.MistralAiChatCompletionRequestBuilder requestBuilder =
+                MistralAiChatCompletionRequest.builder()
+                        .model(this.modelName)
+                        .messages(toMistralAiMessages(messages))
+                        .temperature(this.temperature)
+                        .maxTokens(this.maxTokens)
+                        .topP(this.topP)
+                        .randomSeed(this.randomSeed)
+                        .safePrompt(this.safePrompt)
+                        .stream(true)
+                        .responseFormat(toMistralAiResponseFormat(this.responseFormat));
 
         if (!isNullOrEmpty(toolSpecifications)) {
             requestBuilder.tools(toMistralAiTools(toolSpecifications));
             requestBuilder.toolChoice(MistralAiToolChoiceName.AUTO);
         } else if (toolThatMustBeExecuted != null) {
             requestBuilder.tools(toMistralAiTools(singletonList(toolThatMustBeExecuted)));
-            requestBuilder.toolChoice(MistralAiToolChoiceName.ANY); // MistralAi does not support toolChoice as Function object. ANY force to the model to call a function
+            requestBuilder.toolChoice(
+                    MistralAiToolChoiceName
+                            .ANY); // MistralAi does not support toolChoice as Function object. ANY force to the model
+            // to call a function
         }
 
         MistralAiChatCompletionRequest request = requestBuilder.build();
@@ -162,7 +171,8 @@ private void generate(List<ChatMessage> messages,
     }
 
     public static MistralAiStreamingChatModelBuilder builder() {
-        for (MistralAiStreamingChatModelBuilderFactory factory : loadFactories(MistralAiStreamingChatModelBuilderFactory.class)) {
+        for (MistralAiStreamingChatModelBuilderFactory factory :
+                loadFactories(MistralAiStreamingChatModelBuilderFactory.class)) {
             return factory.get();
         }
         return new MistralAiStreamingChatModelBuilder();
@@ -170,8 +180,31 @@ public static MistralAiStreamingChatModelBuilder builder() {
 
     public static class MistralAiStreamingChatModelBuilder {
 
-        public MistralAiStreamingChatModelBuilder() {
-        }
+        private String baseUrl;
+
+        private String apiKey;
+
+        private String modelName;
+
+        private Double temperature;
+
+        private Double topP;
+
+        private Integer maxTokens;
+
+        private Boolean safePrompt;
+
+        private Integer randomSeed;
+
+        private String responseFormat;
+
+        private Boolean logRequests;
+
+        private Boolean logResponses;
+
+        private Duration timeout;
+
+        public MistralAiStreamingChatModelBuilder() {}
 
         public MistralAiStreamingChatModelBuilder modelName(String modelName) {
             this.modelName = modelName;
@@ -192,5 +225,132 @@ public MistralAiStreamingChatModelBuilder responseFormat(MistralAiResponseFormat
             this.responseFormat = responseFormat.toString();
             return this;
         }
+
+        /**
+         * @param baseUrl      the base URL of the Mistral AI API. It uses the default value if not specified
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder baseUrl(final String baseUrl) {
+            this.baseUrl = baseUrl;
+            return this;
+        }
+
+        /**
+         * @param apiKey       the API key for authentication
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder apiKey(final String apiKey) {
+            this.apiKey = apiKey;
+            return this;
+        }
+
+        /**
+         * @param temperature  the temperature parameter for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder temperature(final Double temperature) {
+            this.temperature = temperature;
+            return this;
+        }
+
+        /**
+         * @param topP         the top-p parameter for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder topP(final Double topP) {
+            this.topP = topP;
+            return this;
+        }
+
+        /**
+         * @param maxTokens    the maximum number of new tokens to generate in a chat response
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder maxTokens(final Integer maxTokens) {
+            this.maxTokens = maxTokens;
+            return this;
+        }
+
+        /**
+         * @param safePrompt   a flag indicating whether to use a safe prompt for generating chat responses
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder safePrompt(final Boolean safePrompt) {
+            this.safePrompt = safePrompt;
+            return this;
+        }
+
+        /**
+         * @param randomSeed   the random seed for generating chat responses
+         *                     (if not specified, a random number is used)
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder randomSeed(final Integer randomSeed) {
+            this.randomSeed = randomSeed;
+            return this;
+        }
+
+        /**
+         * @param logRequests  a flag indicating whether to log raw HTTP requests
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder logRequests(final Boolean logRequests) {
+            this.logRequests = logRequests;
+            return this;
+        }
+
+        /**
+         * @param logResponses a flag indicating whether to log raw HTTP responses
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder logResponses(final Boolean logResponses) {
+            this.logResponses = logResponses;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiStreamingChatModelBuilder timeout(final Duration timeout) {
+            this.timeout = timeout;
+            return this;
+        }
+
+        public MistralAiStreamingChatModel build() {
+            return new MistralAiStreamingChatModel(
+                    this.baseUrl,
+                    this.apiKey,
+                    this.modelName,
+                    this.temperature,
+                    this.topP,
+                    this.maxTokens,
+                    this.safePrompt,
+                    this.randomSeed,
+                    this.responseFormat,
+                    this.logRequests,
+                    this.logResponses,
+                    this.timeout);
+        }
+
+        @Override
+        public String toString() {
+            return "MistralAiStreamingChatModel.MistralAiStreamingChatModelBuilder("
+                                    + "baseUrl=" + this.baseUrl
+                                    + ", apiKey=" + this.apiKey
+                            == null
+                    ? ""
+                    : "*****"
+                            + ", modelName=" + this.modelName
+                            + ", temperature=" + this.temperature
+                            + ", topP=" + this.topP
+                            + ", maxTokens=" + this.maxTokens
+                            + ", safePrompt=" + this.safePrompt
+                            + ", randomSeed=" + this.randomSeed
+                            + ", responseFormat=" + this.responseFormat
+                            + ", logRequests=" + this.logRequests
+                            + ", logResponses=" + this.logResponses
+                            + ", timeout=" + this.timeout
+                            + ")";
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionChoice.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionChoice.java
index 1d7556792ac..3c22dd002e7 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionChoice.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionChoice.java
@@ -1,18 +1,20 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.Builder;
-import lombok.Data;
-
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-@Data
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiChatCompletionChoice.MistralAiChatCompletionChoiceBuilder.class)
 public class MistralAiChatCompletionChoice {
 
     private Integer index;
@@ -20,4 +22,117 @@ public class MistralAiChatCompletionChoice {
     private MistralAiDeltaMessage delta;
     private String finishReason;
     private MistralAiUsage usage; // usageInfo is returned only when the prompt is finished in stream mode
+
+    private MistralAiChatCompletionChoice(MistralAiChatCompletionChoiceBuilder builder) {
+        this.index = builder.index;
+        this.message = builder.message;
+        this.delta = builder.delta;
+        this.finishReason = builder.finishReason;
+        this.usage = builder.usage;
+    }
+
+    public Integer getIndex() {
+        return this.index;
+    }
+
+    public MistralAiChatMessage getMessage() {
+        return this.message;
+    }
+
+    public MistralAiDeltaMessage getDelta() {
+        return this.delta;
+    }
+
+    public String getFinishReason() {
+        return this.finishReason;
+    }
+
+    public MistralAiUsage getUsage() {
+        return this.usage;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiChatCompletionChoice other = (MistralAiChatCompletionChoice) obj;
+        return Objects.equals(this.finishReason, other.finishReason)
+                && Objects.equals(this.index, other.index)
+                && Objects.equals(this.message, other.message)
+                && Objects.equals(this.delta, other.delta)
+                && Objects.equals(this.usage, other.usage);
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 59 * hash + Objects.hashCode(this.index);
+        hash = 59 * hash + Objects.hashCode(this.message);
+        hash = 59 * hash + Objects.hashCode(this.delta);
+        hash = 59 * hash + Objects.hashCode(this.finishReason);
+        hash = 59 * hash + Objects.hashCode(this.usage);
+        return hash;
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiChatCompletionChoice [", "]")
+                .add("index=" + this.getIndex())
+                .add("message=" + this.getMessage() == null ? "" : "**********")
+                .add("delta=" + this.getDelta())
+                .add("finishReason=" + this.getFinishReason())
+                .add("usage=" + this.getUsage())
+                .toString();
+    }
+
+    public static MistralAiChatCompletionChoiceBuilder builder() {
+        return new MistralAiChatCompletionChoiceBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiChatCompletionChoiceBuilder {
+
+        private Integer index;
+        private MistralAiChatMessage message;
+        private MistralAiDeltaMessage delta;
+        private String finishReason;
+        private MistralAiUsage usage;
+
+        private MistralAiChatCompletionChoiceBuilder() {}
+
+        public MistralAiChatCompletionChoiceBuilder index(Integer index) {
+            this.index = index;
+            return this;
+        }
+
+        public MistralAiChatCompletionChoiceBuilder message(MistralAiChatMessage message) {
+            this.message = message;
+            return this;
+        }
+
+        public MistralAiChatCompletionChoiceBuilder delta(MistralAiDeltaMessage delta) {
+            this.delta = delta;
+            return this;
+        }
+
+        public MistralAiChatCompletionChoiceBuilder finishReason(String finishReason) {
+            this.finishReason = finishReason;
+            return this;
+        }
+
+        public MistralAiChatCompletionChoiceBuilder usage(MistralAiUsage usage) {
+            this.usage = usage;
+            return this;
+        }
+
+        public MistralAiChatCompletionChoice build() {
+            return new MistralAiChatCompletionChoice(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionRequest.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionRequest.java
index 5790c6e4c33..f3743573eb1 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionRequest.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionRequest.java
@@ -1,27 +1,22 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder(toBuilder = true)
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiChatCompletionRequest.MistralAiChatCompletionRequestBuilder.class)
 public class MistralAiChatCompletionRequest {
-
     private String model;
     private List<MistralAiChatMessage> messages;
     private Double temperature;
@@ -33,4 +28,230 @@ public class MistralAiChatCompletionRequest {
     private List<MistralAiTool> tools;
     private MistralAiToolChoiceName toolChoice;
     private MistralAiResponseFormat responseFormat;
+
+    private MistralAiChatCompletionRequest(MistralAiChatCompletionRequestBuilder builder) {
+        this.model = builder.model;
+        this.messages = builder.messages;
+        this.temperature = builder.temperature;
+        this.topP = builder.topP;
+        this.maxTokens = builder.maxTokens;
+        this.stream = builder.stream;
+        this.safePrompt = builder.safePrompt;
+        this.randomSeed = builder.randomSeed;
+        this.tools = builder.tools;
+        this.toolChoice = builder.toolChoice;
+        this.responseFormat = builder.responseFormat;
+    }
+
+    public String getModel() {
+        return this.model;
+    }
+
+    public List<MistralAiChatMessage> getMessages() {
+        return this.messages;
+    }
+
+    public Double getTemperature() {
+        return this.temperature;
+    }
+
+    public Double getTopP() {
+        return this.topP;
+    }
+
+    public Integer getMaxTokens() {
+        return this.maxTokens;
+    }
+
+    public Boolean getStream() {
+        return this.stream;
+    }
+
+    public Boolean getSafePrompt() {
+        return this.safePrompt;
+    }
+
+    public Integer getRandomSeed() {
+        return this.randomSeed;
+    }
+
+    public List<MistralAiTool> getTools() {
+        return this.tools;
+    }
+
+    public MistralAiToolChoiceName getToolChoice() {
+        return this.toolChoice;
+    }
+
+    public MistralAiResponseFormat getResponseFormat() {
+        return this.responseFormat;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 83 * hash + Objects.hashCode(this.model);
+        hash = 83 * hash + Objects.hashCode(this.messages);
+        hash = 83 * hash + Objects.hashCode(this.temperature);
+        hash = 83 * hash + Objects.hashCode(this.topP);
+        hash = 83 * hash + Objects.hashCode(this.maxTokens);
+        hash = 83 * hash + Objects.hashCode(this.stream);
+        hash = 83 * hash + Objects.hashCode(this.safePrompt);
+        hash = 83 * hash + Objects.hashCode(this.randomSeed);
+        hash = 83 * hash + Objects.hashCode(this.tools);
+        hash = 83 * hash + Objects.hashCode(this.toolChoice);
+        hash = 83 * hash + Objects.hashCode(this.responseFormat);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiChatCompletionRequest other = (MistralAiChatCompletionRequest) obj;
+        return Objects.equals(this.model, other.model)
+                && Objects.equals(this.messages, other.messages)
+                && Objects.equals(this.temperature, other.temperature)
+                && Objects.equals(this.topP, other.topP)
+                && Objects.equals(this.maxTokens, other.maxTokens)
+                && Objects.equals(this.stream, other.stream)
+                && Objects.equals(this.safePrompt, other.safePrompt)
+                && Objects.equals(this.randomSeed, other.randomSeed)
+                && Objects.equals(this.tools, other.tools)
+                && this.toolChoice == other.toolChoice
+                && Objects.equals(this.responseFormat, other.responseFormat);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiChatCompletionRequest [", "]")
+                .add("model=" + this.getModel())
+                .add("messages="
+                        + (this.getMessages() == null ? 0 : this.getMessages().size()))
+                .add("temperature=" + this.getTemperature())
+                .add("topP=" + this.getTopP())
+                .add("maxTokens=" + this.getMaxTokens())
+                .add("stream=" + this.getStream())
+                .add("safePrompt=" + this.getSafePrompt())
+                .add("randomSeed=" + this.getRandomSeed())
+                .add("tools=" + this.getTools())
+                .add("toolChoice=" + this.getToolChoice())
+                .add("responseFormat=" + this.getResponseFormat())
+                .toString();
+    }
+
+    public static MistralAiChatCompletionRequestBuilder builder() {
+        return new MistralAiChatCompletionRequestBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiChatCompletionRequestBuilder {
+        private String model;
+        private List<MistralAiChatMessage> messages;
+        private Double temperature;
+        private Double topP;
+        private Integer maxTokens;
+        private Boolean stream;
+        private Boolean safePrompt;
+        private Integer randomSeed;
+        private List<MistralAiTool> tools;
+        private MistralAiToolChoiceName toolChoice;
+        private MistralAiResponseFormat responseFormat;
+
+        private MistralAiChatCompletionRequestBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder model(String model) {
+            this.model = model;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder messages(List<MistralAiChatMessage> messages) {
+            this.messages = messages;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder temperature(Double temperature) {
+            this.temperature = temperature;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder topP(Double topP) {
+            this.topP = topP;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder maxTokens(Integer maxTokens) {
+            this.maxTokens = maxTokens;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder stream(Boolean stream) {
+            this.stream = stream;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder safePrompt(Boolean safePrompt) {
+            this.safePrompt = safePrompt;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder randomSeed(Integer randomSeed) {
+            this.randomSeed = randomSeed;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder tools(List<MistralAiTool> tools) {
+            this.tools = tools;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder toolChoice(MistralAiToolChoiceName toolChoice) {
+            this.toolChoice = toolChoice;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatCompletionRequestBuilder responseFormat(MistralAiResponseFormat responseFormat) {
+            this.responseFormat = responseFormat;
+            return this;
+        }
+
+        public MistralAiChatCompletionRequest build() {
+            return new MistralAiChatCompletionRequest(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionResponse.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionResponse.java
index fd95aa50289..43cc221d4d1 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionResponse.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatCompletionResponse.java
@@ -1,19 +1,21 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.Data;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiChatCompletionResponse.MistralAiChatCompletionResponseBuilder.class)
 public class MistralAiChatCompletionResponse {
 
     private String id;
@@ -22,4 +24,131 @@ public class MistralAiChatCompletionResponse {
     private String model;
     private List<MistralAiChatCompletionChoice> choices;
     private MistralAiUsage usage;
+
+    private MistralAiChatCompletionResponse(MistralAiChatCompletionResponseBuilder builder) {
+        this.id = builder.id;
+        this.object = builder.object;
+        this.created = builder.created;
+        this.model = builder.model;
+        this.choices = builder.choices;
+        this.usage = builder.usage;
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public String getObject() {
+        return this.object;
+    }
+
+    public Integer getCreated() {
+        return this.created;
+    }
+
+    public String getModel() {
+        return this.model;
+    }
+
+    public List<MistralAiChatCompletionChoice> getChoices() {
+        return this.choices;
+    }
+
+    public MistralAiUsage getUsage() {
+        return this.usage;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 97 * hash + Objects.hashCode(this.id);
+        hash = 97 * hash + Objects.hashCode(this.object);
+        hash = 97 * hash + Objects.hashCode(this.created);
+        hash = 97 * hash + Objects.hashCode(this.model);
+        hash = 97 * hash + Objects.hashCode(this.choices);
+        hash = 97 * hash + Objects.hashCode(this.usage);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiChatCompletionResponse other = (MistralAiChatCompletionResponse) obj;
+        return Objects.equals(this.id, other.id)
+                && Objects.equals(this.object, other.object)
+                && Objects.equals(this.model, other.model)
+                && Objects.equals(this.created, other.created)
+                && Objects.equals(this.choices, other.choices)
+                && Objects.equals(this.usage, other.usage);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiChatCompletionResponse [", "]")
+                .add("id=" + this.getId())
+                .add(", object=" + this.getObject())
+                .add(", created=" + this.getCreated())
+                .add(", model=" + this.getModel())
+                .add(", choices=" + this.getChoices())
+                .add(", usage=" + this.getUsage())
+                .toString();
+    }
+
+    public static MistralAiChatCompletionResponseBuilder builder() {
+        return new MistralAiChatCompletionResponseBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiChatCompletionResponseBuilder {
+
+        private String id;
+        private String object;
+        private Integer created;
+        private String model;
+        private List<MistralAiChatCompletionChoice> choices;
+        private MistralAiUsage usage;
+
+        private MistralAiChatCompletionResponseBuilder() {}
+
+        public MistralAiChatCompletionResponseBuilder id(String id) {
+            this.id = id;
+            return this;
+        }
+
+        public MistralAiChatCompletionResponseBuilder object(String object) {
+            this.object = object;
+            return this;
+        }
+
+        public MistralAiChatCompletionResponseBuilder created(Integer created) {
+            this.created = created;
+            return this;
+        }
+
+        public MistralAiChatCompletionResponseBuilder model(String model) {
+            this.model = model;
+            return this;
+        }
+
+        public MistralAiChatCompletionResponseBuilder choices(List<MistralAiChatCompletionChoice> choices) {
+            this.choices = choices;
+            return this;
+        }
+
+        public MistralAiChatCompletionResponseBuilder usage(MistralAiUsage usage) {
+            this.usage = usage;
+            return this;
+        }
+
+        public MistralAiChatCompletionResponse build() {
+            return new MistralAiChatCompletionResponse(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatMessage.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatMessage.java
index f7ad01c36ce..fb65e94174a 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatMessage.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiChatMessage.java
@@ -1,24 +1,21 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.*;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@ToString
-@EqualsAndHashCode
-@NoArgsConstructor
-@AllArgsConstructor
-@Data
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiChatMessage.MistralAiChatMessageBuilder.class)
 public class MistralAiChatMessage {
 
     private MistralAiRole role;
@@ -26,4 +23,132 @@ public class MistralAiChatMessage {
     private String name;
     private List<MistralAiToolCall> toolCalls;
     private String toolCallId;
+
+    private MistralAiChatMessage(MistralAiChatMessageBuilder builder) {
+        this.role = builder.role;
+        this.content = builder.content;
+        this.name = builder.name;
+        this.toolCalls = builder.toolCalls;
+        this.toolCallId = builder.toolCallId;
+    }
+
+    public MistralAiRole getRole() {
+        return this.role;
+    }
+
+    public String getContent() {
+        return this.content;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String getToolCallId() {
+        return this.toolCallId;
+    }
+
+    public List<MistralAiToolCall> getToolCalls() {
+        return this.toolCalls;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 97 * hash + Objects.hashCode(this.role);
+        hash = 97 * hash + Objects.hashCode(this.content);
+        hash = 97 * hash + Objects.hashCode(this.name);
+        hash = 97 * hash + Objects.hashCode(this.toolCallId);
+        hash = 97 * hash + Objects.hashCode(this.toolCalls);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiChatMessage other = (MistralAiChatMessage) obj;
+        return Objects.equals(this.content, other.content)
+                && Objects.equals(this.name, other.name)
+                && this.role == other.role
+                && Objects.equals(this.toolCallId, other.toolCallId)
+                && Objects.equals(this.toolCalls, other.toolCalls);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiChatMessage [", "]")
+                .add("role=" + this.getRole())
+                .add("content=" + this.getContent())
+                .add("name=" + this.getName())
+                .add("toolCallId=" + this.getToolCallId())
+                .add("toolCalls=" + this.getToolCalls())
+                .toString();
+    }
+
+    public static MistralAiChatMessageBuilder builder() {
+        return new MistralAiChatMessageBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiChatMessageBuilder {
+
+        private MistralAiRole role;
+        private String content;
+        private String name;
+        private String toolCallId;
+        private List<MistralAiToolCall> toolCalls;
+
+        private MistralAiChatMessageBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatMessageBuilder role(MistralAiRole role) {
+            this.role = role;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatMessageBuilder content(String content) {
+            this.content = content;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatMessageBuilder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatMessageBuilder toolCallId(String toolCallId) {
+            this.toolCallId = toolCallId;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiChatMessageBuilder toolCalls(List<MistralAiToolCall> toolCalls) {
+            this.toolCalls = toolCalls;
+            return this;
+        }
+
+        public MistralAiChatMessage build() {
+            return new MistralAiChatMessage(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiDeltaMessage.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiDeltaMessage.java
index 04d733b33cd..f12261a13b7 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiDeltaMessage.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiDeltaMessage.java
@@ -1,27 +1,116 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.*;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@ToString
-@EqualsAndHashCode
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
-@Data
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiDeltaMessage.MistralAiDeltaMessageBuilder.class)
 public class MistralAiDeltaMessage {
 
     private MistralAiRole role;
     private String content;
     private List<MistralAiToolCall> toolCalls;
+
+    private MistralAiDeltaMessage(MistralAiDeltaMessageBuilder builder) {
+        this.role = builder.role;
+        this.content = builder.content;
+        this.toolCalls = builder.toolCalls;
+    }
+
+    public MistralAiRole getRole() {
+        return this.role;
+    }
+
+    public String getContent() {
+        return this.content;
+    }
+
+    public List<MistralAiToolCall> getToolCalls() {
+        return this.toolCalls;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 5;
+        hash = 23 * hash + Objects.hashCode(this.role);
+        hash = 23 * hash + Objects.hashCode(this.content);
+        hash = 23 * hash + Objects.hashCode(this.toolCalls);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiDeltaMessage other = (MistralAiDeltaMessage) obj;
+        return Objects.equals(this.content, other.content)
+                && this.role == other.role
+                && Objects.equals(this.toolCalls, other.toolCalls);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiDeltaMessage [", "]")
+                .add("role=" + this.getRole())
+                .add("content=" + this.getContent())
+                .add("toolCalls=" + this.getToolCalls())
+                .toString();
+    }
+
+    public static MistralAiDeltaMessageBuilder builder() {
+        return new MistralAiDeltaMessageBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiDeltaMessageBuilder {
+        private MistralAiRole role;
+        private String content;
+        private List<MistralAiToolCall> toolCalls;
+
+        private MistralAiDeltaMessageBuilder() {}
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiDeltaMessageBuilder role(MistralAiRole role) {
+            this.role = role;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiDeltaMessageBuilder content(String content) {
+            this.content = content;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiDeltaMessageBuilder toolCalls(List<MistralAiToolCall> toolCalls) {
+            this.toolCalls = toolCalls;
+            return this;
+        }
+
+        public MistralAiDeltaMessage build() {
+            return new MistralAiDeltaMessage(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbedding.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbedding.java
index a8a8f18b66a..af0c2dc6cf8 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbedding.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbedding.java
@@ -1,28 +1,118 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiEmbedding.MistralAiEmbeddingBuilder.class)
 public class MistralAiEmbedding {
 
     private String object;
     private List<Float> embedding;
     private Integer index;
+
+    private MistralAiEmbedding(MistralAiEmbeddingBuilder builder) {
+        this.object = builder.object;
+        this.embedding = builder.embedding;
+        this.index = builder.index;
+    }
+
+    public String getObject() {
+        return this.object;
+    }
+
+    public List<Float> getEmbedding() {
+        return this.embedding;
+    }
+
+    public Integer getIndex() {
+        return this.index;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 5;
+        hash = 97 * hash + Objects.hashCode(this.object);
+        hash = 97 * hash + Objects.hashCode(this.embedding);
+        hash = 97 * hash + Objects.hashCode(this.index);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiEmbedding other = (MistralAiEmbedding) obj;
+        return Objects.equals(this.object, other.object)
+                && Objects.equals(this.embedding, other.embedding)
+                && Objects.equals(this.index, other.index);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiEmbedding [", "]")
+                .add("object=" + this.getObject())
+                .add("embedding=" + this.getEmbedding())
+                .add("index=" + this.getIndex())
+                .toString();
+    }
+
+    public static MistralAiEmbeddingBuilder builder() {
+        return new MistralAiEmbeddingBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiEmbeddingBuilder {
+
+        private String object;
+        private List<Float> embedding;
+        private Integer index;
+
+        private MistralAiEmbeddingBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingBuilder object(String object) {
+            this.object = object;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingBuilder embedding(List<Float> embedding) {
+            this.embedding = embedding;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingBuilder index(Integer index) {
+            this.index = index;
+            return this;
+        }
+
+        public MistralAiEmbedding build() {
+            return new MistralAiEmbedding(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingRequest.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingRequest.java
index e0205a4b39a..32b19d8dd62 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingRequest.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingRequest.java
@@ -1,28 +1,136 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder(toBuilder = true)@JsonInclude(NON_NULL)
+@JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
-
+@JsonDeserialize(builder = MistralAiEmbeddingRequest.MistralAiEmbeddingRequestBuilder.class)
 public class MistralAiEmbeddingRequest {
 
     private String model;
     private List<String> input;
     private String encodingFormat;
+
+    public MistralAiEmbeddingRequest() {}
+
+    public MistralAiEmbeddingRequest(MistralAiEmbeddingRequestBuilder builder) {
+        this.model = builder.model;
+        this.input = builder.input;
+        this.encodingFormat = builder.encodingFormat;
+    }
+
+    public String getModel() {
+        return this.model;
+    }
+
+    public List<String> getInput() {
+        return this.input;
+    }
+
+    public String getEncodingFormat() {
+        return this.encodingFormat;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 29 * hash + Objects.hashCode(this.model);
+        hash = 29 * hash + Objects.hashCode(this.input);
+        hash = 29 * hash + Objects.hashCode(this.encodingFormat);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiEmbeddingRequest other = (MistralAiEmbeddingRequest) obj;
+        return Objects.equals(this.model, other.model)
+                && Objects.equals(this.encodingFormat, other.encodingFormat)
+                && Objects.equals(this.input, other.input);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiEmbeddingRequest [", "]")
+                .add("model=" + this.getModel())
+                .add("input=" + this.getInput())
+                .add("encodingFormat=" + this.getEncodingFormat())
+                .toString();
+    }
+
+    public static MistralAiEmbeddingRequestBuilder builder() {
+        return new MistralAiEmbeddingRequestBuilder();
+    }
+
+    public MistralAiEmbeddingRequestBuilder toBuilder() {
+        return new MistralAiEmbeddingRequestBuilder()
+                .model(this.model)
+                .input(this.input)
+                .encodingFormat(this.encodingFormat);
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiEmbeddingRequestBuilder {
+
+        private String model;
+        private List<String> input;
+        private String encodingFormat;
+
+        private MistralAiEmbeddingRequestBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingRequestBuilder model(String model) {
+            this.model = model;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingRequestBuilder input(List<String> input) {
+            this.input = input;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingRequestBuilder encodingFormat(String encodingFormat) {
+            this.encodingFormat = encodingFormat;
+            return this;
+        }
+
+        public MistralAiEmbeddingRequest build() {
+            return new MistralAiEmbeddingRequest(this);
+        }
+
+        @Override
+        public String toString() {
+            return "MistralAiEmbeddingRequest.MistralAiEmbeddingRequestBuilder("
+                    + "model=" + this.model
+                    + ", input=" + this.input
+                    + ", encodingFormat=" + this.encodingFormat
+                    + ")";
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingResponse.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingResponse.java
index 26086238092..8c3379e0f04 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingResponse.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiEmbeddingResponse.java
@@ -1,30 +1,149 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiEmbeddingResponse.MistralAiEmbeddingResponseBuilder.class)
 public class MistralAiEmbeddingResponse {
-
     private String id;
     private String object;
     private String model;
     private List<MistralAiEmbedding> data;
     private MistralAiUsage usage;
+
+    private MistralAiEmbeddingResponse(MistralAiEmbeddingResponseBuilder builder) {
+        this.id = builder.id;
+        this.object = builder.object;
+        this.model = builder.model;
+        this.data = builder.data;
+        this.usage = builder.usage;
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public String getObject() {
+        return this.object;
+    }
+
+    public String getModel() {
+        return this.model;
+    }
+
+    public List<MistralAiEmbedding> getData() {
+        return this.data;
+    }
+
+    public MistralAiUsage getUsage() {
+        return this.usage;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 53 * hash + Objects.hashCode(this.id);
+        hash = 53 * hash + Objects.hashCode(this.object);
+        hash = 53 * hash + Objects.hashCode(this.model);
+        hash = 53 * hash + Objects.hashCode(this.data);
+        hash = 53 * hash + Objects.hashCode(this.usage);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiEmbeddingResponse other = (MistralAiEmbeddingResponse) obj;
+        return Objects.equals(this.id, other.id)
+                && Objects.equals(this.object, other.object)
+                && Objects.equals(this.model, other.model)
+                && Objects.equals(this.data, other.data)
+                && Objects.equals(this.usage, other.usage);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiEmbeddingResponse [", "]")
+                .add("id=" + this.getId())
+                .add("object=" + this.getObject())
+                .add("model=" + this.getModel())
+                .add("data=" + this.getData())
+                .add("usage=" + this.getUsage())
+                .toString();
+    }
+
+    public static MistralAiEmbeddingResponseBuilder builder() {
+        return new MistralAiEmbeddingResponseBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiEmbeddingResponseBuilder {
+
+        private String id;
+        private String object;
+        private String model;
+        private List<MistralAiEmbedding> data;
+        private MistralAiUsage usage;
+
+        private MistralAiEmbeddingResponseBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingResponseBuilder id(String id) {
+            this.id = id;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingResponseBuilder object(String object) {
+            this.object = object;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingResponseBuilder model(String model) {
+            this.model = model;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingResponseBuilder data(List<MistralAiEmbedding> data) {
+            this.data = data;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiEmbeddingResponseBuilder usage(MistralAiUsage usage) {
+            this.usage = usage;
+            return this;
+        }
+
+        public MistralAiEmbeddingResponse build() {
+            return new MistralAiEmbeddingResponse(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunction.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunction.java
index 133d1b2071d..4a13fe8c17e 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunction.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunction.java
@@ -1,27 +1,115 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiFunction.MistralAiFunctionBuilder.class)
 public class MistralAiFunction {
-
     private String name;
     private String description;
     private MistralAiParameters parameters;
 
+    private MistralAiFunction(MistralAiFunctionBuilder builder) {
+        this.name = builder.name;
+        this.description = builder.description;
+        this.parameters = builder.parameters;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String getDescription() {
+        return this.description;
+    }
+
+    public MistralAiParameters getParameters() {
+        return this.parameters;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 79 * hash + Objects.hashCode(this.name);
+        hash = 79 * hash + Objects.hashCode(this.description);
+        hash = 79 * hash + Objects.hashCode(this.parameters);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiFunction other = (MistralAiFunction) obj;
+        return Objects.equals(this.name, other.name)
+                && Objects.equals(this.description, other.description)
+                && Objects.equals(this.parameters, other.parameters);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiFunction [", "]")
+                .add("name=" + this.getName())
+                .add("description=" + this.getDescription())
+                .add("parameters=" + this.getParameters())
+                .toString();
+    }
+
+    public static MistralAiFunction.MistralAiFunctionBuilder builder() {
+        return new MistralAiFunction.MistralAiFunctionBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiFunctionBuilder {
+        private String name;
+        private String description;
+        private MistralAiParameters parameters;
+
+        private MistralAiFunctionBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiFunctionBuilder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiFunctionBuilder description(String description) {
+            this.description = description;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiFunctionBuilder parameters(MistralAiParameters parameters) {
+            this.parameters = parameters;
+            return this;
+        }
+
+        public MistralAiFunction build() {
+            return new MistralAiFunction(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunctionCall.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunctionCall.java
index 9c49b6ebd42..8e33a4d9d96 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunctionCall.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiFunctionCall.java
@@ -1,25 +1,97 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiFunctionCall.MistralAiFunctionCallBuilder.class)
 public class MistralAiFunctionCall {
 
     private String name;
     private String arguments;
+
+    private MistralAiFunctionCall(MistralAiFunctionCallBuilder builder) {
+        this.name = builder.name;
+        this.arguments = builder.arguments;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public String getArguments() {
+        return this.arguments;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 17 * hash + Objects.hashCode(this.name);
+        hash = 17 * hash + Objects.hashCode(this.arguments);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralAiFunctionCall other = (MistralAiFunctionCall) obj;
+        return Objects.equals(this.name, other.name) && Objects.equals(this.arguments, other.arguments);
+    }
+
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiFunctionCall [", "]")
+                .add("name=" + this.getName())
+                .add("arguments=" + this.getArguments())
+                .toString();
+    }
+
+    public static MistralAiFunctionCall.MistralAiFunctionCallBuilder builder() {
+        return new MistralAiFunctionCall.MistralAiFunctionCallBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiFunctionCallBuilder {
+
+        private String name;
+        private String arguments;
+
+        private MistralAiFunctionCallBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiFunctionCallBuilder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiFunctionCallBuilder arguments(String arguments) {
+            this.arguments = arguments;
+            return this;
+        }
+
+        public MistralAiFunctionCall build() {
+            return new MistralAiFunctionCall(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelCard.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelCard.java
index 4ff1ec64984..635c31ad93f 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelCard.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelCard.java
@@ -1,27 +1,22 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiModelCard.MistralAiModelCardBuilder.class)
 public class MistralAiModelCard {
-
     private String id;
     private String object;
     private Integer created;
@@ -29,4 +24,161 @@ public class MistralAiModelCard {
     private String root;
     private String parent;
     private List<MistralAiModelPermission> permission;
+
+    private MistralAiModelCard(MistralAiModelCardBuilder builder) {
+        this.id = builder.id;
+        this.object = builder.object;
+        this.created = builder.created;
+        this.ownerBy = builder.ownerBy;
+        this.root = builder.root;
+        this.parent = builder.parent;
+        this.permission = builder.permission;
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public String getObject() {
+        return this.object;
+    }
+
+    public Integer getCreated() {
+        return this.created;
+    }
+
+    public String getOwnerBy() {
+        return this.ownerBy;
+    }
+
+    public String getRoot() {
+        return this.root;
+    }
+
+    public String getParent() {
+        return this.parent;
+    }
+
+    public List<MistralAiModelPermission> getPermission() {
+        return this.permission;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 83 * hash + Objects.hashCode(this.id);
+        hash = 83 * hash + Objects.hashCode(this.object);
+        hash = 83 * hash + Objects.hashCode(this.created);
+        hash = 83 * hash + Objects.hashCode(this.ownerBy);
+        hash = 83 * hash + Objects.hashCode(this.root);
+        hash = 83 * hash + Objects.hashCode(this.parent);
+        hash = 83 * hash + Objects.hashCode(this.permission);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiModelCard other = (MistralAiModelCard) obj;
+        return Objects.equals(this.id, other.id)
+                && Objects.equals(this.object, other.object)
+                && Objects.equals(this.ownerBy, other.ownerBy)
+                && Objects.equals(this.root, other.root)
+                && Objects.equals(this.parent, other.parent)
+                && Objects.equals(this.created, other.created)
+                && Objects.equals(this.permission, other.permission);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiModelCard [", "]")
+                .add("id=" + this.getId())
+                .add("object=" + this.getObject())
+                .add("created=" + this.getCreated())
+                .add("ownerBy=" + this.getOwnerBy())
+                .add("root=" + this.getRoot())
+                .add("parent=" + this.getParent())
+                .add("permission=" + this.getPermission())
+                .toString();
+    }
+
+    public static MistralAiModelCardBuilder builder() {
+        return new MistralAiModelCardBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiModelCardBuilder {
+        private String id;
+        private String object;
+        private Integer created;
+        private String ownerBy;
+        private String root;
+        private String parent;
+        private List<MistralAiModelPermission> permission;
+
+        private MistralAiModelCardBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder id(String id) {
+            this.id = id;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder object(String object) {
+            this.object = object;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder created(Integer created) {
+            this.created = created;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder ownerBy(String ownerBy) {
+            this.ownerBy = ownerBy;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder root(String root) {
+            this.root = root;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder parent(String parent) {
+            this.parent = parent;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelCardBuilder permission(List<MistralAiModelPermission> permission) {
+            this.permission = permission;
+            return this;
+        }
+
+        public MistralAiModelCard build() {
+            return new MistralAiModelCard(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelPermission.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelPermission.java
index 76c3fc7163e..e69e930b8e2 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelPermission.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelPermission.java
@@ -1,25 +1,20 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiModelPermission.MistralAiModelPermissionBuilder.class)
 public class MistralAiModelPermission {
-
     private String id;
     private String object;
     private Integer created;
@@ -32,4 +27,254 @@ public class MistralAiModelPermission {
     private String organization;
     private String group;
     private Boolean isBlocking;
+
+    public static class MistralAiModelPermissionBuilder {
+
+        private String id;
+
+        private String object;
+
+        private Integer created;
+
+        private Boolean allowCreateEngine;
+
+        private Boolean allowSampling;
+
+        private Boolean allowLogprobs;
+
+        private Boolean allowSearchIndices;
+
+        private Boolean allowView;
+
+        private Boolean allowFineTuning;
+
+        private String organization;
+
+        private String group;
+
+        private Boolean isBlocking;
+
+        MistralAiModelPermissionBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder id(String id) {
+            this.id = id;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder object(String object) {
+            this.object = object;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder created(Integer created) {
+            this.created = created;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder allowCreateEngine(Boolean allowCreateEngine) {
+            this.allowCreateEngine = allowCreateEngine;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder allowSampling(Boolean allowSampling) {
+            this.allowSampling = allowSampling;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder allowLogprobs(Boolean allowLogprobs) {
+            this.allowLogprobs = allowLogprobs;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder allowSearchIndices(Boolean allowSearchIndices) {
+            this.allowSearchIndices = allowSearchIndices;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder allowView(Boolean allowView) {
+            this.allowView = allowView;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder allowFineTuning(Boolean allowFineTuning) {
+            this.allowFineTuning = allowFineTuning;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder organization(String organization) {
+            this.organization = organization;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder group(String group) {
+            this.group = group;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelPermissionBuilder isBlocking(Boolean isBlocking) {
+            this.isBlocking = isBlocking;
+            return this;
+        }
+
+        public MistralAiModelPermission build() {
+            return new MistralAiModelPermission(this);
+        }
+    }
+
+    public static MistralAiModelPermissionBuilder builder() {
+        return new MistralAiModelPermissionBuilder();
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public String getObject() {
+        return this.object;
+    }
+
+    public Integer getCreated() {
+        return this.created;
+    }
+
+    public Boolean getAllowCreateEngine() {
+        return this.allowCreateEngine;
+    }
+
+    public Boolean getAllowSampling() {
+        return this.allowSampling;
+    }
+
+    public Boolean getAllowLogprobs() {
+        return this.allowLogprobs;
+    }
+
+    public Boolean getAllowSearchIndices() {
+        return this.allowSearchIndices;
+    }
+
+    public Boolean getAllowView() {
+        return this.allowView;
+    }
+
+    public Boolean getAllowFineTuning() {
+        return this.allowFineTuning;
+    }
+
+    public String getOrganization() {
+        return this.organization;
+    }
+
+    public String getGroup() {
+        return this.group;
+    }
+
+    public Boolean getIsBlocking() {
+        return this.isBlocking;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 61 * hash + Objects.hashCode(this.id);
+        hash = 61 * hash + Objects.hashCode(this.object);
+        hash = 61 * hash + Objects.hashCode(this.created);
+        hash = 61 * hash + Objects.hashCode(this.allowCreateEngine);
+        hash = 61 * hash + Objects.hashCode(this.allowSampling);
+        hash = 61 * hash + Objects.hashCode(this.allowLogprobs);
+        hash = 61 * hash + Objects.hashCode(this.allowSearchIndices);
+        hash = 61 * hash + Objects.hashCode(this.allowView);
+        hash = 61 * hash + Objects.hashCode(this.allowFineTuning);
+        hash = 61 * hash + Objects.hashCode(this.organization);
+        hash = 61 * hash + Objects.hashCode(this.group);
+        hash = 61 * hash + Objects.hashCode(this.isBlocking);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiModelPermission other = (MistralAiModelPermission) obj;
+        return Objects.equals(this.id, other.id)
+                && Objects.equals(this.object, other.object)
+                && Objects.equals(this.organization, other.organization)
+                && Objects.equals(this.group, other.group)
+                && Objects.equals(this.created, other.created)
+                && Objects.equals(this.allowCreateEngine, other.allowCreateEngine)
+                && Objects.equals(this.allowSampling, other.allowSampling)
+                && Objects.equals(this.allowLogprobs, other.allowLogprobs)
+                && Objects.equals(this.allowSearchIndices, other.allowSearchIndices)
+                && Objects.equals(this.allowView, other.allowView)
+                && Objects.equals(this.allowFineTuning, other.allowFineTuning)
+                && Objects.equals(this.isBlocking, other.isBlocking);
+    }
+
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiModelPermission [", "]")
+                .add("id=" + this.getId())
+                .add("object=" + this.getObject())
+                .add("created=" + this.getCreated())
+                .add("allowCreateEngine=" + this.getAllowCreateEngine())
+                .add("allowSampling=" + this.getAllowSampling())
+                .add("allowLogprobs=" + this.getAllowLogprobs())
+                .add("allowSearchIndices=" + this.getAllowSearchIndices())
+                .add("allowView=" + this.getAllowView())
+                .add("allowFineTuning=" + this.getAllowFineTuning())
+                .add("organization=" + this.getOrganization())
+                .add("group=" + this.getGroup())
+                .add("isBlocking=" + this.getIsBlocking())
+                .toString();
+    }
+
+    public MistralAiModelPermission(MistralAiModelPermissionBuilder builder) {
+        this.id = builder.id;
+        this.object = builder.object;
+        this.created = builder.created;
+        this.allowCreateEngine = builder.allowCreateEngine;
+        this.allowSampling = builder.allowSampling;
+        this.allowLogprobs = builder.allowLogprobs;
+        this.allowSearchIndices = builder.allowSearchIndices;
+        this.allowView = builder.allowView;
+        this.allowFineTuning = builder.allowFineTuning;
+        this.organization = builder.organization;
+        this.group = builder.group;
+        this.isBlocking = builder.isBlocking;
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelResponse.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelResponse.java
index dc3dcecbdda..480378110d5 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelResponse.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiModelResponse.java
@@ -1,27 +1,95 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiModelResponse.MistralAiModelResponseBuilder.class)
 public class MistralAiModelResponse {
-
     private String object;
     private List<MistralAiModelCard> data;
+
+    private MistralAiModelResponse(MistralAiModelResponseBuilder builder) {
+        this.object = builder.object;
+        this.data = builder.data;
+    }
+
+    public String getObject() {
+        return this.object;
+    }
+
+    public List<MistralAiModelCard> getData() {
+        return this.data;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 47 * hash + Objects.hashCode(this.object);
+        hash = 47 * hash + Objects.hashCode(this.data);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiModelResponse other = (MistralAiModelResponse) obj;
+        return Objects.equals(this.object, other.object) && Objects.equals(this.data, other.data);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiModelResponse [", "]")
+                .add("object=" + this.getObject())
+                .add("data=" + this.getData())
+                .toString();
+    }
+
+    public static MistralAiModelResponse.MistralAiModelResponseBuilder builder() {
+        return new MistralAiModelResponse.MistralAiModelResponseBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiModelResponseBuilder {
+
+        private String object;
+
+        private List<MistralAiModelCard> data;
+
+        private MistralAiModelResponseBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelResponseBuilder object(String object) {
+            this.object = object;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiModelResponseBuilder data(List<MistralAiModelCard> data) {
+            this.data = data;
+            return this;
+        }
+
+        public MistralAiModelResponse build() {
+            return new MistralAiModelResponse(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiParameters.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiParameters.java
index ac564254931..a481f435cc4 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiParameters.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiParameters.java
@@ -1,30 +1,121 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiParameters.MistralAiParametersBuilder.class)
 public class MistralAiParameters {
-
-    @Builder.Default
-    private String type = "object";
+    private String type;
     private Map<String, Map<String, Object>> properties;
     private List<String> required;
+
+    private MistralAiParameters(MistralAiParametersBuilder builder) {
+        this.type = builder.type$value;
+        this.properties = builder.properties;
+        this.required = builder.required;
+    }
+
+    private static String $default$type() {
+        return "object";
+    }
+
+    public String getType() {
+        return this.type;
+    }
+
+    public Map<String, Map<String, Object>> getProperties() {
+        return this.properties;
+    }
+
+    public List<String> getRequired() {
+        return this.required;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 31 * hash + Objects.hashCode(this.type);
+        hash = 31 * hash + Objects.hashCode(this.properties);
+        hash = 31 * hash + Objects.hashCode(this.required);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiParameters other = (MistralAiParameters) obj;
+        return Objects.equals(this.type, other.type)
+                && Objects.equals(this.properties, other.properties)
+                && Objects.equals(this.required, other.required);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiParameters [", "]")
+                .add("type=" + this.getType())
+                .add("properties=" + this.getProperties())
+                .add("required=" + this.getRequired())
+                .toString();
+    }
+
+    public static MistralAiParameters.MistralAiParametersBuilder builder() {
+        return new MistralAiParameters.MistralAiParametersBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiParametersBuilder {
+        private boolean type$set;
+        private String type$value;
+        private Map<String, Map<String, Object>> properties;
+        private List<String> required;
+
+        private MistralAiParametersBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiParametersBuilder type(String type) {
+            this.type$value = type;
+            type$set = true;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiParametersBuilder properties(Map<String, Map<String, Object>> properties) {
+            this.properties = properties;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiParametersBuilder required(List<String> required) {
+            this.required = required;
+            return this;
+        }
+
+        public MistralAiParameters build() {
+            String type$value = this.type$value;
+            if (!this.type$set) this.type$value = MistralAiParameters.$default$type();
+            return new MistralAiParameters(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormat.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormat.java
index f4daf97649c..dc0b3777c14 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormat.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormat.java
@@ -1,30 +1,79 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiResponseFormat.MistralAiResponseFormatBuilder.class)
 public class MistralAiResponseFormat {
-
     private Object type;
 
+    private MistralAiResponseFormat(MistralAiResponseFormatBuilder builder) {
+        this.type = builder.type;
+    }
+
+    public Object getType() {
+        return this.type;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 97 * hash + Objects.hashCode(this.type);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiResponseFormat other = (MistralAiResponseFormat) obj;
+        return Objects.equals(this.type, other.type);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiResponseFormat [", "]")
+                .add("type=" + this.getType())
+                .toString();
+    }
+
     public static MistralAiResponseFormat fromType(MistralAiResponseFormatType type) {
-        return MistralAiResponseFormat.builder()
-                .type(type.toString())
-                .build();
+        return MistralAiResponseFormat.builder().type(type.toString()).build();
+    }
+
+    public static MistralAiResponseFormatBuilder builder() {
+        return new MistralAiResponseFormatBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiResponseFormatBuilder {
+        private Object type;
+
+        private MistralAiResponseFormatBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiResponseFormatBuilder type(Object type) {
+            this.type = type;
+            return this;
+        }
+
+        public MistralAiResponseFormat build() {
+            return new MistralAiResponseFormat(this);
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormatType.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormatType.java
index c6183d3bbb9..0a0d3afbab1 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormatType.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiResponseFormatType.java
@@ -12,18 +12,18 @@
  * </ul>
  */
 public enum MistralAiResponseFormatType {
+    @JsonProperty("text")
+    TEXT,
+    @JsonProperty("json_object")
+    JSON_OBJECT;
 
-    @JsonProperty("text") TEXT,
-    @JsonProperty("json_object") JSON_OBJECT;
-
-    MistralAiResponseFormatType() {
-    }
+    MistralAiResponseFormatType() {}
 
     /**
      * Returns the string representation in lowercase of the response format type.
      */
+    @Override
     public String toString() {
         return this.name().toLowerCase();
     }
-
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiRole.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiRole.java
index 8f2e5cdfc5d..791cd8f0484 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiRole.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiRole.java
@@ -3,12 +3,14 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 public enum MistralAiRole {
+    @JsonProperty("system")
+    SYSTEM,
+    @JsonProperty("user")
+    USER,
+    @JsonProperty("assistant")
+    ASSISTANT,
+    @JsonProperty("tool")
+    TOOL;
 
-    @JsonProperty("system") SYSTEM,
-    @JsonProperty("user") USER,
-    @JsonProperty("assistant") ASSISTANT,
-    @JsonProperty("tool") TOOL;
-
-    MistralAiRole() {
-    }
+    MistralAiRole() {}
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiTool.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiTool.java
index 61a244bbfd8..5ff07bed812 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiTool.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiTool.java
@@ -1,32 +1,99 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiTool.MistralAiToolBuilder.class)
 public class MistralAiTool {
-
     private MistralAiToolType type;
     private MistralAiFunction function;
 
-    public static MistralAiTool from(MistralAiFunction function){
+    private MistralAiTool(MistralAiToolBuilder builder) {
+        this.type = builder.type;
+        this.function = builder.function;
+    }
+
+    public MistralAiToolType getType() {
+        return this.type;
+    }
+
+    public MistralAiFunction getFunction() {
+        return this.function;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 37 * hash + Objects.hashCode(this.type);
+        hash = 37 * hash + Objects.hashCode(this.function);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiTool other = (MistralAiTool) obj;
+        return this.type == other.type && Objects.equals(this.function, other.function);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiTool [", "]")
+                .add("type=" + this.getType())
+                .add("function=" + this.getFunction())
+                .toString();
+    }
+
+    public static MistralAiTool from(MistralAiFunction function) {
         return MistralAiTool.builder()
                 .type(MistralAiToolType.FUNCTION)
                 .function(function)
                 .build();
     }
+
+    public static MistralAiToolBuilder builder() {
+        return new MistralAiToolBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiToolBuilder {
+        private MistralAiToolType type;
+        private MistralAiFunction function;
+
+        private MistralAiToolBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiToolBuilder type(MistralAiToolType type) {
+            this.type = type;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiToolBuilder function(MistralAiFunction function) {
+            this.function = function;
+            return this;
+        }
+
+        public MistralAiTool build() {
+            return new MistralAiTool(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiToolCall.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiToolCall.java
index e082c74f2cc..86ee72bd7c9 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiToolCall.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiToolCall.java
@@ -1,27 +1,121 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Builder
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiToolCall.MistralAiToolCallBuilder.class)
 public class MistralAiToolCall {
-
     private String id;
-    @Builder.Default
-    private MistralAiToolType type = MistralAiToolType.FUNCTION;
+    private MistralAiToolType type;
     private MistralAiFunctionCall function;
+
+    private static MistralAiToolType $default$type() {
+        return MistralAiToolType.FUNCTION;
+    }
+
+    private MistralAiToolCall(MistralAiToolCallBuilder builder) {
+        this.id = builder.id;
+        this.type = builder.type$value;
+        this.function = builder.function;
+    }
+
+    public String getId() {
+        return this.id;
+    }
+
+    public MistralAiToolType getType() {
+        return this.type;
+    }
+
+    public MistralAiFunctionCall getFunction() {
+        return this.function;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 29 * hash + Objects.hashCode(this.id);
+        hash = 29 * hash + Objects.hashCode(this.type);
+        hash = 29 * hash + Objects.hashCode(this.function);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiToolCall other = (MistralAiToolCall) obj;
+        return Objects.equals(this.id, other.id)
+                && this.type == other.type
+                && Objects.equals(this.function, other.function);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiToolCall [", "]")
+                .add("id=" + this.getId())
+                .add("type=" + this.getType())
+                .add("function=" + this.getFunction())
+                .toString();
+    }
+
+    public static MistralAiToolCallBuilder builder() {
+        return new MistralAiToolCallBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiToolCallBuilder {
+        private String id;
+        private boolean type$set;
+        private MistralAiToolType type$value;
+        private MistralAiFunctionCall function;
+
+        private MistralAiToolCallBuilder() {}
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiToolCallBuilder id(String id) {
+            this.id = id;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiToolCallBuilder type(MistralAiToolType type) {
+            this.type$value = type;
+            type$set = true;
+            return this;
+        }
+
+        /**
+         * @return {@code this}.
+         */
+        public MistralAiToolCallBuilder function(MistralAiFunctionCall function) {
+            this.function = function;
+            return this;
+        }
+
+        public MistralAiToolCall build() {
+            MistralAiToolType type$value = this.type$value;
+            if (!this.type$set) {
+                this.type$value = MistralAiToolCall.$default$type();
+            }
+            return new MistralAiToolCall(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiUsage.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiUsage.java
index 0b152ae8968..cc1eff69d00 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiUsage.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralAiUsage.java
@@ -1,20 +1,102 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonNaming;
-import lombok.Data;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
-import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
-
-@Data
 @JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
 @JsonNaming(SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralAiUsage.MistralAiUsageBuilder.class)
 public class MistralAiUsage {
 
-    private Integer promptTokens;
-    private Integer totalTokens;
-    private Integer completionTokens;
+    private final Integer promptTokens;
+    private final Integer totalTokens;
+    private final Integer completionTokens;
+
+    private MistralAiUsage(MistralAiUsageBuilder builder) {
+        this.completionTokens = builder.completionTokens;
+        this.promptTokens = builder.promptTokens;
+        this.totalTokens = builder.totalTokens;
+    }
+
+    public Integer getPromptTokens() {
+        return this.promptTokens;
+    }
+
+    public Integer getTotalTokens() {
+        return this.totalTokens;
+    }
+
+    public Integer getCompletionTokens() {
+        return this.completionTokens;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 89 * hash + Objects.hashCode(this.promptTokens);
+        hash = 89 * hash + Objects.hashCode(this.totalTokens);
+        hash = 89 * hash + Objects.hashCode(this.completionTokens);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+        final MistralAiUsage other = (MistralAiUsage) obj;
+        return Objects.equals(this.promptTokens, other.promptTokens)
+                && Objects.equals(this.totalTokens, other.totalTokens)
+                && Objects.equals(this.completionTokens, other.completionTokens);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralAiUsage [", "]")
+                .add("promptTokens=" + this.getPromptTokens())
+                .add("totalTokens=" + this.getTotalTokens())
+                .add("completionTokens=" + this.getCompletionTokens())
+                .toString();
+    }
+
+    public static MistralAiUsageBuilder builder() {
+        return new MistralAiUsageBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(SnakeCaseStrategy.class)
+    public static class MistralAiUsageBuilder {
+
+        private Integer promptTokens;
+        private Integer totalTokens;
+        private Integer completionTokens;
+
+        public MistralAiUsageBuilder promptTokens(Integer promptTokens) {
+            this.promptTokens = promptTokens;
+            return this;
+        }
+
+        public MistralAiUsageBuilder totalTokens(Integer totalTokens) {
+            this.totalTokens = totalTokens;
+            return this;
+        }
+
+        public MistralAiUsageBuilder completionTokens(Integer completionTokens) {
+            this.completionTokens = completionTokens;
+            return this;
+        }
+
+        public MistralAiUsage build() {
+            return new MistralAiUsage(this);
+        }
+    }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategories.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategories.java
index 4ede978c634..b7bb42e320a 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategories.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategories.java
@@ -1,96 +1,190 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.PropertyNamingStrategies;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
+
+@JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
+@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralCategories.MistralCategoriesBuilder.class)
 public class MistralCategories {
 
-    @JsonProperty
-    private Boolean sexual;
-
-    @JsonProperty("hate_and_discrimination")
-    private Boolean hateAndDiscrimination;
-
-    @JsonProperty("violence_and_threats")
-    private Boolean violenceAndThreats;
-
-    @JsonProperty("dangerous_and_criminal_content")
-    private Boolean dangerousAndCriminalContent;
-
-    @JsonProperty("selfharm")
-    private Boolean selfHarm;
-
-    @JsonProperty
-    private Boolean health;
-
-    @JsonProperty
-    private Boolean law;
-
-    @JsonProperty
-    private Boolean pii;
+    private final Boolean sexual;
+    private final Boolean hateAndDiscrimination;
+    private final Boolean violenceAndThreats;
+    private final Boolean dangerousAndCriminalContent;
+    private final Boolean selfHarm;
+    private final Boolean health;
+    private final Boolean law;
+    private final Boolean pii;
+
+    private MistralCategories(MistralCategoriesBuilder builder) {
+        this.selfHarm = builder.selfharm;
+        this.sexual = builder.sexual;
+        this.hateAndDiscrimination = builder.hateAndDiscrimination;
+        this.violenceAndThreats = builder.violenceAndThreats;
+        this.dangerousAndCriminalContent = builder.dangerousAndCriminalContent;
+        this.health = builder.health;
+        this.law = builder.law;
+        this.pii = builder.pii;
+    }
 
     public Boolean getSexual() {
         return sexual;
     }
 
-    public void setSexual(Boolean sexual) {
-        this.sexual = sexual;
-    }
-
     public Boolean getHateAndDiscrimination() {
         return hateAndDiscrimination;
     }
 
-    public void setHateAndDiscrimination(Boolean hateAndDiscrimination) {
-        this.hateAndDiscrimination = hateAndDiscrimination;
-    }
-
     public Boolean getViolenceAndThreats() {
         return violenceAndThreats;
     }
 
-    public void setViolenceAndThreats(Boolean violenceAndThreats) {
-        this.violenceAndThreats = violenceAndThreats;
-    }
-
     public Boolean getDangerousAndCriminalContent() {
         return dangerousAndCriminalContent;
     }
 
-    public void setDangerousAndCriminalContent(Boolean dangerousAndCriminalContent) {
-        this.dangerousAndCriminalContent = dangerousAndCriminalContent;
-    }
-
     public Boolean getSelfHarm() {
         return selfHarm;
     }
 
-    public void setSelfHarm(Boolean selfHarm) {
-        this.selfHarm = selfHarm;
-    }
-
     public Boolean getHealth() {
         return health;
     }
 
-    public void setHealth(Boolean health) {
-        this.health = health;
-    }
-
     public Boolean getLaw() {
         return law;
     }
 
-    public void setLaw(Boolean law) {
-        this.law = law;
-    }
-
     public Boolean getPii() {
         return pii;
     }
 
-    public void setPii(Boolean pii) {
-        this.pii = pii;
+    @Override
+    public int hashCode() {
+        int hash = 5;
+        hash = 67 * hash + Objects.hashCode(this.sexual);
+        hash = 67 * hash + Objects.hashCode(this.hateAndDiscrimination);
+        hash = 67 * hash + Objects.hashCode(this.violenceAndThreats);
+        hash = 67 * hash + Objects.hashCode(this.dangerousAndCriminalContent);
+        hash = 67 * hash + Objects.hashCode(this.selfHarm);
+        hash = 67 * hash + Objects.hashCode(this.health);
+        hash = 67 * hash + Objects.hashCode(this.law);
+        hash = 67 * hash + Objects.hashCode(this.pii);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        final MistralCategories other = (MistralCategories) obj;
+        return Objects.equals(this.sexual, other.sexual)
+                && Objects.equals(this.hateAndDiscrimination, other.hateAndDiscrimination)
+                && Objects.equals(this.violenceAndThreats, other.violenceAndThreats)
+                && Objects.equals(this.dangerousAndCriminalContent, other.dangerousAndCriminalContent)
+                && Objects.equals(this.selfHarm, other.selfHarm)
+                && Objects.equals(this.health, other.health)
+                && Objects.equals(this.law, other.law)
+                && Objects.equals(this.pii, other.pii);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralCategories [", "]")
+                .add("sexual=" + this.getSexual())
+                .add("hateAndDiscrimination=" + this.getHateAndDiscrimination())
+                .add("violenceAndThreats=" + this.getViolenceAndThreats())
+                .add("dangerousAndCriminalContent=" + this.getDangerousAndCriminalContent())
+                .add("selfHarm=" + this.getSelfHarm())
+                .add("health=" + this.getHealth())
+                .add("law=" + this.getLaw())
+                .add("pii=" + this.getPii())
+                .toString();
+    }
+
+    public static MistralCategoriesBuilder builder() {
+        return new MistralCategoriesBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
+    public static class MistralCategoriesBuilder {
+
+        private Boolean sexual;
+        private Boolean hateAndDiscrimination;
+        private Boolean violenceAndThreats;
+        private Boolean dangerousAndCriminalContent;
+        private Boolean selfharm;
+        private Boolean health;
+        private Boolean law;
+        private Boolean pii;
+
+        private MistralCategoriesBuilder() {}
+
+        public MistralCategoriesBuilder sexual(Boolean sexual) {
+            this.sexual = sexual;
+            return this;
+        }
+
+        public Boolean getHateAndDiscrimination() {
+            return hateAndDiscrimination;
+        }
+
+        public MistralCategoriesBuilder hateAndDiscrimination(Boolean hateAndDiscrimination) {
+            this.hateAndDiscrimination = hateAndDiscrimination;
+            return this;
+        }
+
+        public MistralCategoriesBuilder violenceAndThreats(Boolean violenceAndThreats) {
+            this.violenceAndThreats = violenceAndThreats;
+            return this;
+        }
+
+        public MistralCategoriesBuilder dangerousAndCriminalContent(Boolean dangerousAndCriminalContent) {
+            this.dangerousAndCriminalContent = dangerousAndCriminalContent;
+            return this;
+        }
+
+        public MistralCategoriesBuilder selfharm(Boolean selfHarm) {
+            this.selfharm = selfHarm;
+            return this;
+        }
+
+        public MistralCategoriesBuilder health(Boolean health) {
+            this.health = health;
+            return this;
+        }
+
+        public MistralCategoriesBuilder law(Boolean law) {
+            this.law = law;
+            return this;
+        }
+
+        public MistralCategoriesBuilder pii(Boolean pii) {
+            this.pii = pii;
+            return this;
+        }
+
+        public MistralCategories build() {
+            return new MistralCategories(this);
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategoryScores.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategoryScores.java
index 87ba7a96f79..84443d1b278 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategoryScores.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralCategoryScores.java
@@ -1,96 +1,180 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.PropertyNamingStrategies;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
+
+@JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
+@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralCategoryScores.MistralCategoryScoresBuilder.class)
 public class MistralCategoryScores {
 
-    @JsonProperty
     private Double sexual;
-
-    @JsonProperty("hate_and_discrimination")
     private Double hateAndDiscrimination;
-
-    @JsonProperty("violence_and_threats")
     private Double violenceAndThreats;
-
-    @JsonProperty("dangerous_and_criminal_content")
     private Double dangerousAndCriminalContent;
-
-    @JsonProperty("selfharm")
     private Double selfHarm;
-
-    @JsonProperty
     private Double health;
-
-    @JsonProperty
     private Double law;
-
-    @JsonProperty
     private Double pii;
 
-    public Double getSexual() {
-        return sexual;
+    private MistralCategoryScores(MistralCategoryScoresBuilder builder) {
+        this.sexual = builder.sexual;
+        this.hateAndDiscrimination = builder.hateAndDiscrimination;
+        this.violenceAndThreats = builder.violenceAndThreats;
+        this.dangerousAndCriminalContent = builder.dangerousAndCriminalContent;
+        this.selfHarm = builder.selfHarm;
+        this.health = builder.health;
+        this.law = builder.law;
+        this.pii = builder.pii;
     }
 
-    public void setSexual(Double sexual) {
-        this.sexual = sexual;
+    public Double getSexual() {
+        return sexual;
     }
 
     public Double getHateAndDiscrimination() {
         return hateAndDiscrimination;
     }
 
-    public void setHateAndDiscrimination(Double hateAndDiscrimination) {
-        this.hateAndDiscrimination = hateAndDiscrimination;
-    }
-
     public Double getViolenceAndThreats() {
         return violenceAndThreats;
     }
 
-    public void setViolenceAndThreats(Double violenceAndThreats) {
-        this.violenceAndThreats = violenceAndThreats;
-    }
-
     public Double getDangerousAndCriminalContent() {
         return dangerousAndCriminalContent;
     }
 
-    public void setDangerousAndCriminalContent(Double dangerousAndCriminalContent) {
-        this.dangerousAndCriminalContent = dangerousAndCriminalContent;
-    }
-
     public Double getSelfHarm() {
         return selfHarm;
     }
 
-    public void setSelfHarm(Double selfHarm) {
-        this.selfHarm = selfHarm;
-    }
-
     public Double getHealth() {
         return health;
     }
 
-    public void setHealth(Double health) {
-        this.health = health;
-    }
-
     public Double getLaw() {
         return law;
     }
 
-    public void setLaw(Double law) {
-        this.law = law;
-    }
-
     public Double getPii() {
         return pii;
     }
 
-    public void setPii(Double pii) {
-        this.pii = pii;
+    @Override
+    public int hashCode() {
+        int hash = 7;
+        hash = 37 * hash + Objects.hashCode(this.sexual);
+        hash = 37 * hash + Objects.hashCode(this.hateAndDiscrimination);
+        hash = 37 * hash + Objects.hashCode(this.violenceAndThreats);
+        hash = 37 * hash + Objects.hashCode(this.dangerousAndCriminalContent);
+        hash = 37 * hash + Objects.hashCode(this.selfHarm);
+        hash = 37 * hash + Objects.hashCode(this.health);
+        hash = 37 * hash + Objects.hashCode(this.law);
+        hash = 37 * hash + Objects.hashCode(this.pii);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null) return false;
+        if (getClass() != obj.getClass()) return false;
+        final MistralCategoryScores other = (MistralCategoryScores) obj;
+        return Objects.equals(this.sexual, other.sexual)
+                && Objects.equals(this.hateAndDiscrimination, other.hateAndDiscrimination)
+                && Objects.equals(this.violenceAndThreats, other.violenceAndThreats)
+                && Objects.equals(this.dangerousAndCriminalContent, other.dangerousAndCriminalContent)
+                && Objects.equals(this.selfHarm, other.selfHarm)
+                && Objects.equals(this.health, other.health)
+                && Objects.equals(this.law, other.law)
+                && Objects.equals(this.pii, other.pii);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralCategoryScores [", "]")
+                .add("sexual=" + this.getSexual())
+                .add("hateAndDiscrimination=" + this.getHateAndDiscrimination())
+                .add("violenceAndThreats=" + this.getViolenceAndThreats())
+                .add("dangerousAndCriminalContent=" + this.getDangerousAndCriminalContent())
+                .add("selfHarm=" + this.getSelfHarm())
+                .add("health=" + this.getHealth())
+                .add("law=" + this.getLaw())
+                .add("pii=" + this.getPii())
+                .toString();
+    }
+
+    public static MistralCategoryScoresBuilder builder() {
+        return new MistralCategoryScoresBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
+    public static class MistralCategoryScoresBuilder {
+
+        private Double sexual;
+        private Double hateAndDiscrimination;
+        private Double violenceAndThreats;
+        private Double dangerousAndCriminalContent;
+        private Double selfHarm;
+        private Double health;
+        private Double law;
+        private Double pii;
+
+        private MistralCategoryScoresBuilder() {}
+
+        public MistralCategoryScoresBuilder sexual(Double sexual) {
+            this.sexual = sexual;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder hateAndDiscrimination(Double hateAndDiscrimination) {
+            this.hateAndDiscrimination = hateAndDiscrimination;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder violenceAndThreats(Double violenceAndThreats) {
+            this.violenceAndThreats = violenceAndThreats;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder dangerousAndCriminalContent(Double dangerousAndCriminalContent) {
+            this.dangerousAndCriminalContent = dangerousAndCriminalContent;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder selfharm(Double selfHarm) {
+            this.selfHarm = selfHarm;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder health(Double health) {
+            this.health = health;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder law(Double law) {
+            this.law = law;
+            return this;
+        }
+
+        public MistralCategoryScoresBuilder pii(Double pii) {
+            this.pii = pii;
+            return this;
+        }
+
+        public MistralCategoryScores build() {
+            return new MistralCategoryScores(this);
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralModerationResult.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralModerationResult.java
index 775c48346c2..43e15a07a8f 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralModerationResult.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/api/MistralModerationResult.java
@@ -1,30 +1,90 @@
 package dev.langchain4j.model.mistralai.internal.api;
 
+import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
+
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
-import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.PropertyNamingStrategies;
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.fasterxml.jackson.databind.annotation.JsonNaming;
+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
+import java.util.Objects;
+import java.util.StringJoiner;
 
+@JsonInclude(NON_NULL)
 @JsonIgnoreProperties(ignoreUnknown = true)
+@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
+@JsonDeserialize(builder = MistralModerationResult.MistralModerationResultBuilder.class)
 public class MistralModerationResult {
 
-    @JsonProperty("categories")
-    private MistralCategories categories;
+    private final MistralCategories categories;
+    private final MistralCategoryScores categoryScores;
 
-    @JsonProperty("category_scores")
-    private MistralCategoryScores categoryScores;
+    public MistralModerationResult(MistralModerationResultBuilder builder) {
+        this.categories = builder.categories;
+        this.categoryScores = builder.categoryScores;
+    }
 
     public MistralCategories getCategories() {
         return categories;
     }
 
-    public void setCategories(MistralCategories categories) {
-        this.categories = categories;
-    }
-
     public MistralCategoryScores getCategoryScores() {
         return categoryScores;
     }
 
-    public void setCategoryScores(MistralCategoryScores categoryScores) {
-        this.categoryScores = categoryScores;
+    @Override
+    public int hashCode() {
+        int hash = 3;
+        hash = 83 * hash + Objects.hashCode(this.categories);
+        hash = 83 * hash + Objects.hashCode(this.categoryScores);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null) return false;
+        if (getClass() != obj.getClass()) return false;
+        final MistralModerationResult other = (MistralModerationResult) obj;
+        return Objects.equals(this.categories, other.categories)
+                && Objects.equals(this.categoryScores, other.categoryScores);
+    }
+
+    @Override
+    public String toString() {
+        return new StringJoiner(", ", "MistralModerationResult [", "]")
+                .add("categories=" + this.getCategories())
+                .add("categoryScores=" + this.getCategoryScores())
+                .toString();
+    }
+
+    public static MistralModerationResultBuilder builder() {
+        return new MistralModerationResultBuilder();
+    }
+
+    @JsonPOJOBuilder(withPrefix = "")
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)
+    public static class MistralModerationResultBuilder {
+
+        private MistralCategories categories;
+        private MistralCategoryScores categoryScores;
+
+        private MistralModerationResultBuilder() {}
+
+        public MistralModerationResultBuilder categories(MistralCategories categories) {
+            this.categories = categories;
+            return this;
+        }
+
+        public MistralModerationResultBuilder categoryScores(MistralCategoryScores categoryScores) {
+            this.categoryScores = categoryScores;
+            return this;
+        }
+
+        public MistralModerationResult build() {
+            return new MistralModerationResult(this);
+        }
     }
 }
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiRequestLoggingInterceptor.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiRequestLoggingInterceptor.java
index 352c1e891a5..69ad42090e9 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiRequestLoggingInterceptor.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiRequestLoggingInterceptor.java
@@ -1,20 +1,20 @@
 package dev.langchain4j.model.mistralai.internal.client;
 
-import lombok.extern.slf4j.Slf4j;
-import okhttp3.Headers;
-import okhttp3.Interceptor;
-import okhttp3.Request;
-import okhttp3.Response;
-import okio.Buffer;
-
 import java.io.IOException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
+import okhttp3.Headers;
+import okhttp3.Interceptor;
+import okhttp3.Request;
+import okhttp3.Response;
+import okio.Buffer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
-@Slf4j
 class MistralAiRequestLoggingInterceptor implements Interceptor {
+    private static final Logger log = LoggerFactory.getLogger(MistralAiRequestLoggingInterceptor.class);
 
     @Override
     public Response intercept(Chain chain) throws IOException {
@@ -25,22 +25,28 @@ public Response intercept(Chain chain) throws IOException {
 
     private void log(Request request) {
         try {
-            log.debug("Request:\n- method: {}\n- url: {}\n- headers: {}\n- body: {}",
-                    request.method(), request.url(), getHeaders(request.headers()), getBody(request));
+            log.debug(
+                    "Request:\n- method: {}\n- url: {}\n- headers: {}\n- body: {}",
+                    request.method(),
+                    request.url(),
+                    getHeaders(request.headers()),
+                    getBody(request));
         } catch (Exception e) {
             log.warn("Error while logging request: {}", e.getMessage());
         }
     }
 
     static String getHeaders(Headers headers) {
-        return StreamSupport.stream(headers.spliterator(), false).map(header -> {
-            String headerKey = header.component1();
-            String headerValue = header.component2();
-            if (headerKey.equals("Authorization")) {
-                headerValue = maskAuthorizationHeaderValue(headerValue);
-            }
-            return String.format("[%s: %s]", headerKey, headerValue);
-        }).collect(Collectors.joining(", "));
+        return StreamSupport.stream(headers.spliterator(), false)
+                .map(header -> {
+                    String headerKey = header.component1();
+                    String headerValue = header.component2();
+                    if (headerKey.equals("Authorization")) {
+                        headerValue = maskAuthorizationHeaderValue(headerValue);
+                    }
+                    return String.format("[%s: %s]", headerKey, headerValue);
+                })
+                .collect(Collectors.joining(", "));
     }
 
     private static String maskAuthorizationHeaderValue(String authorizationHeaderValue) {
@@ -53,7 +59,8 @@ private static String maskAuthorizationHeaderValue(String authorizationHeaderVal
             while (matcher.find()) {
                 String bearer = matcher.group(1);
                 String token = matcher.group(2);
-                matcher.appendReplacement(sb, bearer + " " + token.substring(0, 2) + "..." + token.substring(token.length() - 2));
+                matcher.appendReplacement(
+                        sb, bearer + " " + token.substring(0, 2) + "..." + token.substring(token.length() - 2));
             }
             matcher.appendTail(sb);
             return sb.toString();
diff --git a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiResponseLoggingInterceptor.java b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiResponseLoggingInterceptor.java
index b5d35993ce2..e940e98d2e1 100644
--- a/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiResponseLoggingInterceptor.java
+++ b/langchain4j-mistral-ai/src/main/java/dev/langchain4j/model/mistralai/internal/client/MistralAiResponseLoggingInterceptor.java
@@ -1,16 +1,16 @@
 package dev.langchain4j.model.mistralai.internal.client;
 
-import lombok.extern.slf4j.Slf4j;
+import static dev.langchain4j.model.mistralai.internal.client.MistralAiRequestLoggingInterceptor.getHeaders;
+
+import java.io.IOException;
 import okhttp3.Interceptor;
 import okhttp3.Request;
 import okhttp3.Response;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
-
-import static dev.langchain4j.model.mistralai.internal.client.MistralAiRequestLoggingInterceptor.getHeaders;
-
-@Slf4j
 class MistralAiResponseLoggingInterceptor implements Interceptor {
+    private static final Logger log = LoggerFactory.getLogger(MistralAiResponseLoggingInterceptor.class);
 
     @Override
     public Response intercept(Chain chain) throws IOException {
@@ -22,8 +22,11 @@ public Response intercept(Chain chain) throws IOException {
 
     private void log(Response response) {
         try {
-            log.debug("Response:\n- status code: {}\n- headers: {}\n- body: {}",
-                    response.code(), getHeaders(response.headers()), this.getBody(response));
+            log.debug(
+                    "Response:\n- status code: {}\n- headers: {}\n- body: {}",
+                    response.code(),
+                    getHeaders(response.headers()),
+                    this.getBody(response));
         } catch (Exception e) {
             log.warn("Error while logging response: {}", e.getMessage());
         }
