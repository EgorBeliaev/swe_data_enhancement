[
    {
        "title": "MCP integration tests rework"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "The tests require the `jbang` executable to be installed, thus I added the `setup-jbang` action to the CI. If it's not installed, they are skipped."
    },
    {
        "author": {
            "login": "maxandersen"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@jmartisk thank you!"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@jmartisk thanks a lot!"
    },
    {
        "author": {
            "login": "kpavlov"
        },
        "body": "@jmartisk , for testing HTTP transport, wouldn't wiremock be enough? It will not require installing jbang\r\n"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "- Wiremock doesn't support server-sent events\r\n- We want to have a unified approach that can be used both for HTTP and stdio without changing/duplicating the tests - which wiremock can't do"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "So @maxandersen have you got any tips how to make this independent of having a jbang installation?\r\nIf that's not possible, I would at least try to add a system property that allows to specify the path to the jbang executable, and that, if defined,  would be used for the command to run jbang"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "@langchain4j, I've added the option to override the jbang command by passing the `jbang.command` property. \r\nFor example, I can run the tests using: `mvn verify -Djbang.command=/home/jmartisk/.sdkman/candidates/jbang/0.118.0/bin/jbang`. But it works for me and on the CI even without the property,  it defaults the command to just `jbang`"
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@jmartisk FWIW I was playing with WireMock yesterday in scope of http clients migration and I was able to setup wiremock to do SSE:\r\n\r\n```java\r\nwireMockServer.stubFor(get(\"/endpoint\")\r\n                .willReturn(aResponse()\r\n                        .withBody(\"\"\"\r\n                                data: first\r\n                                                                \r\n                                data: second\r\n                                \"\"\")\r\n                ));\r\n```"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "Yeah but that is a pseudo-SSE where you have to send all events right at the start while we need to react to client requests over time. "
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@jmartisk do you want to proceed with system property or whould we wait a bit for @maxandersen to reply?"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "Let's go with this, we can always change it if we find a better way (and I would like to get this merged asap because some more work depends on it). As long as it works in the CI - I think that's most important."
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "It seem to work better when setting `jbang.command`, but now I am getting this:\r\n\r\n```\r\n[INFO] Running dev.langchain4j.mcp.client.integration.McpHttpTransportIT\r\n2025-01-23 09:12:38 [main] dev.langchain4j.mcp.client.integration.McpHttpTransportIT.setup()\r\nINFO: Starting the MCP server using command: [C:\\Users\\ljuba\\.jbang\\bin\\jbang.cmd, --quiet, --fresh, run, /C:/dev/repo/langchain4j_2/langchain4j-mcp/target/test-classes/tools_mcp_server.java]\r\n[jbang] [ERROR] Script or alias could not be found or read: '/C:/dev/repo/langchain4j_2/langchain4j-mcp/target/test-classes/tools_mcp_server.java'\r\n[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 121.1 s <<< FAILURE! -- in dev.langchain4j.mcp.client.integration.McpHttpTransportIT\r\n[ERROR] dev.langchain4j.mcp.client.integration.McpHttpTransportIT -- Time elapsed: 121.1 s <<< ERROR!\r\njava.util.concurrent.TimeoutException: Port 8080 did not open within 120 seconds\r\n\tat dev.langchain4j.mcp.client.integration.McpHttpTransportIT.waitForPort(McpHttpTransportIT.java:59)\r\n\tat dev.langchain4j.mcp.client.integration.McpHttpTransportIT.setup(McpHttpTransportIT.java:34)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n```"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "The path to the script, `/C:/dev/repo/langchain4j_2/langchain4j-mcp/target/test-classes/tools_mcp_server.java`  is wrong, at least the extra `/` at the beginning is wrong. I'm not very familiar with Java on Windows, but we get the path to the script by calling\r\n```\r\nString path = ClassLoader.getSystemResource(\"tools_mcp_server.java\").getFile();\r\n```\r\ndo you know a way how to fix this to work on Windows?"
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "This is what Claude proposes:\r\n\r\n> To fix this path issue on Windows, you can use one of these approaches:\r\n> \r\n> Use toURI() to handle Windows paths correctly:\r\n> \r\n> javaCopyString path = ClassLoader.getSystemResource(\"tools_mcp_server.java\").toURI().getPath();\r\n> \r\n> Or use File.separator for platform independence:\r\n> \r\n> javaCopyString path = ClassLoader.getSystemResource(\"tools_mcp_server.java\").getFile().substring(1).replace(\"/\", File.separator);\r\n> The first approach is generally preferred as it handles URLs correctly across platforms.\r\n\r\nFirst one did not work, second one seems to work, but not sure it will work on other systems"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "`String path = ClassLoader.getSystemResource(\"tools_mcp_server.java\").getFile().substring(1).replace(\"/\", File.separator);` works for me on Linux too, so I guess let's do this"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "Also, if you use `-Djbang.command=jbang.cmd` instead of the full path, does that work? We could try  `jbang.cmd` instead of just `jbang` as the default when we detect Windows"
    },
    {
        "author": {
            "login": "jmartisk"
        },
        "body": "> String path = ClassLoader.getSystemResource(\"tools_mcp_server.java\").getFile().substring(1).replace(\"/\", File.separator);\r\n\r\nFTR, that actually didn't work for me, I was testing it wrong. I've Changed the `substring(1)` call to `.substring(isWindows() ? 1 : 0)` and that should work"
    }
]