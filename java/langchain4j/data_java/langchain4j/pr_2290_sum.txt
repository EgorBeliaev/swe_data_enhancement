### Instructions for the Programmer

1. **Change Overview:**
    - Add documentation about Structured Outputs support in Ollama.

2. **Code Changes:**
    - Avoid using the deprecated `format` parameter; use `responseFormat` instead.

3. **Testing:**
    - Implement both positive and negative test scenarios:
      - Positive:
        - Test with a valid JSON schema to ensure the Ollama model generates a response adhering to the schema.
        - Ensure the Ollama model works with prompts compatible with the provided JSON schema.
        - Verify that `AIService` can automatically generate a schema when the `RESPONSE_FORMAT_JSON_SCHEMA` capability is set.
      - Negative:
        - Handle configurations with invalid JSON schemas, ensuring exceptions or error messages are properly thrown.
        - Test with prompts incompatible with the schema, ensuring error handling in unexpected cases.
        - Address server unavailability or errors, ensuring graceful handling by the OllamaChatModel.

4. **Additional Scenarios:**
   - Test complex JSON schemas with nested objects and arrays.
   - Test schemas with optional properties and ensure the response may include or exclude such properties appropriately.
   - Verify the handling of JSON schemas specifying specific data types, ensuring generated responses maintain these types.

5. **Documentation:**
   - Ensure documentation is updated to reflect changes and ensure clarity of how `AIService` generates schema from interface return values.

6. **Pending Items:**
   - Await PR review and approval before adding further documentation and examples. 

This summary instructs on the practical steps to implement these changes effectively, including necessary code adjustments, test scenarios, and documentation updates.