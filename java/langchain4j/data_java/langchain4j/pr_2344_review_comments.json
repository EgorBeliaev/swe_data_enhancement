[
    {
        "title": "Support ContainsString metadata Filter"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Change\r\n\r\nThis PR adds a new MetadataFilters that allows filtering metadata values by checking whether they contain or not contain a given string.\r\nWhilst this is less powerful than #2342, it is easier to implement in embedding stores, this PR implements the `ContainsString` filter for the following embedding stores:\r\n\r\n- Milvus\r\n- PgVector\r\n- Qdrant\r\n\r\nI tried to implement it for Chroma as well, but didn't find a way in the Chroma docs to do so.\r\n\r\n## General checklist\r\n\r\n- [X] There are no breaking changes\r\n- [X] I have added unit and/or integration tests for my change\r\n- [X] The tests cover both positive and negative cases\r\n- [X] I have manually run all the unit and integration tests in the module I have added/changed, and they are all green\r\n- [x] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules, and they are all green\r\n- [x] I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs)"
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@florian-h05 thanks a lot! Just a few minor comments left and we can merge it and include in the release at the end of this week"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": ""
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@florian-h05 thank you!\r\n\r\nThe new `should_throw_exception_when_contains_is_not_supported` fails on chroma (and probably other stores as well) though, could you please check?"
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@florian-h05 thanks a lot, great job!"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR adds new functionality without modifying existing APIs.\n\n\n#### Potential Design Issues\n-  The implementation of contains and notContains filters is very similar. Consider refactoring to reduce code duplication.\n-  The filters only support String and UUID types. It might be beneficial to support other types or provide a way to customize the comparison logic.\n\n\n#### Potential Bugs\n-  Incorrect handling of null values in metadata. Although the code checks for key existence, it does not explicitly handle null values. If a metadata value is null, it might lead to unexpected behavior or NullPointerExceptions.\n-  The code throws an IllegalArgumentException for type mismatches. While this is good for catching errors, it might be better to return false instead of throwing an exception, to align with the behavior of other filters.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a value that contains the comparison value\n  - When: using contains filter\n  - Then: the contains filter should return true\n\n-\n  - Given: Metadata with a value that does not contain the comparison value\n  - When: using notContains filter\n  - Then: the notContains filter should return true\n\n-\n  - Given: Metadata with a UUID value that contains the comparison value\n  - When: using contains filter\n  - Then: the contains filter should return true\n\n-\n  - Given: Metadata with a UUID value that does not contain the comparison value\n  - When: using notContains filter\n  - Then: the notContains filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: using contains or notContains filter\n  - Then: the filter should return false\n\n-\n  - Given: Metadata with a value that does not contain the comparison value\n  - When: using contains filter\n  - Then: the contains filter should return false\n\n-\n  - Given: Metadata with a value that contains the comparison value\n  - When: using notContains filter\n  - Then: the notContains filter should return false\n\n-\n  - Given: Metadata with a value of a type other than String or UUID\n  - When: using contains or notContains filter\n  - Then: the filter should throw an IllegalArgumentException\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a UUID value\n  - When: using contains or notContains filter\n  - Then: the filter should correctly match if the UUID string representation contains the comparison value\n\n-\n  - Given: Metadata with a null value for the key\n  - When: using contains or notContains filter\n  - Then: the filter should return false\n\n-\n  - Given: Metadata with an empty string value for the key\n  - When: using contains or notContains filter\n  - Then: the filter should return true for notContains if the comparison value is not empty, and false for contains\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": null,
        "body": "Hi @florian-h05, thanks a lot for this PR and https://github.com/langchain4j/langchain4j/pull/2342!\r\n\r\nI've noticed that you've added support for contains/not_contains in the core, but not for any of the existing embedding stores.\r\nIt would be great to add a support to one (or, ideally, few) embedding stores to make sure the proposed unified API works for multiple abstracted stores.\r\n\r\nThanks a lot in advance!"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR adds new functionality without modifying existing APIs.\n\n\n#### Potential Design Issues\n-  The implementation of contains and notContains filters might not be optimal for all embedding stores. The PR mentions Qdrant's full-text match, but other stores might require different implementations.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the comparison value for contains and notContains filters.\n-  Potential issues with case sensitivity in the contains and notContains filters.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key containing a string that contains the comparison value\n  - When: Filtering with a contains filter.\n  - Then: The contains filter should return true.\n\n-\n  - Given: Metadata with a key containing a string that does not contain the comparison value\n  - When: Filtering with a contains filter.\n  - Then: The contains filter should return false.\n\n-\n  - Given: Metadata with a key containing a string that does not contain the comparison value\n  - When: Filtering with a notContains filter.\n  - Then: The notContains filter should return true.\n\n-\n  - Given: Metadata with a key containing a string that contains the comparison value\n  - When: Filtering with a notContains filter.\n  - Then: The notContains filter should return false.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Filtering with contains and notContains filters on a non-existent key.\n  - Then: The contains and notContains filters should return false.\n\n-\n  - Given: Metadata with a key containing a value of a type other than String or UUID\n  - When: Filtering with contains and notContains filters on a key with an invalid value type.\n  - Then: The contains and notContains filters should throw an IllegalArgumentException.\n\n-\n  - Given: A null or blank comparison value is provided\n  - When: Creating a contains or notContains filter with a null or blank comparison value.\n  - Then: The contains and notContains filters should throw an IllegalArgumentException.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: Filtering with contains and notContains filters on a UUID value.\n  - Then: The contains and notContains filters should work correctly with the UUID string representation.\n\n-\n  - Given: Metadata with a key containing a string with special characters\n  - When: Filtering with contains and notContains filters on a string with special characters.\n  - Then: The contains and notContains filters should work correctly with special characters.\n\n-\n  - Given: Metadata with a key containing an empty string\n  - When: Filtering with contains and notContains filters on an empty string.\n  - Then: The contains and notContains filters should work correctly with empty strings.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR adds new functionality without modifying existing APIs.\n\n\n#### Potential Design Issues\n-  The implementation of contains and notContains filters might not be optimal for all embedding stores. The PR mentions that it is easier to implement for some stores like Qdrant, but it might not be the case for all.\n-  The current implementation only supports String and UUID types for contains and notContains filters. This might limit the flexibility of the filters.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the comparison value for contains and notContains filters might lead to unexpected results.\n-  Type checking for metadata values might not be robust enough, leading to unexpected behavior if the metadata contains values of unexpected types.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key containing a string that contains the comparison value\n  - When: Filtering with a contains filter on a metadata value that contains the comparison value\n  - Then: The contains filter should return true\n\n-\n  - Given: Metadata with a key containing a string that does not contain the comparison value\n  - When: Filtering with a contains filter on a metadata value that does not contain the comparison value\n  - Then: The contains filter should return false\n\n-\n  - Given: Metadata with a key containing a string that does not contain the comparison value\n  - When: Filtering with a notContains filter on a metadata value that does not contain the comparison value\n  - Then: The notContains filter should return true\n\n-\n  - Given: Metadata with a key containing a string that contains the comparison value\n  - When: Filtering with a notContains filter on a metadata value that contains the comparison value\n  - Then: The notContains filter should return false\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Filtering with contains and notContains filters on a non-existent metadata key\n  - Then: The contains and notContains filters should return false\n\n-\n  - Given: Metadata with a key containing a value of a type other than String or UUID\n  - When: Filtering with contains and notContains filters on a metadata value of an unsupported type\n  - Then: The contains and notContains filters should throw an IllegalArgumentException\n\n-\n  - Given: A null comparison value is passed to the contains or notContains filter\n  - When: Creating a contains or notContains filter with a null comparison value\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: Filtering with contains and notContains filters on a UUID metadata value\n  - Then: The contains and notContains filters should work correctly with UUID values\n\n-\n  - Given: Metadata with a key containing a string with special characters\n  - When: Filtering with contains and notContains filters on a string metadata value containing special characters\n  - Then: The contains and notContains filters should work correctly with special characters\n\n-\n  - Given: Metadata with a key containing an empty string\n  - When: Filtering with contains and notContains filters on an empty string metadata value\n  - Then: The contains and notContains filters should work correctly with empty strings\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@langchain4j Thanks for the feedback.\r\nI didn't want to do the work of implementing the filters for embedding stores without first getting feedback whether you like these new filters.\r\nI have now added implementations of these filters for Qdrant (which I use) and PgVector (which I would expect to be commonly used), and took the chance to use Java 17 instanceof casting when touching the code.\r\n\r\nI have tested the underlying filter used in the QdrantFilterConverter and it works as desired for me, so we can consider the Qdrant implementation as tested in production as well."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR adds new functionality without modifying existing APIs.\n\n\n#### Potential Design Issues\n-  The implementation of 'contains' and 'notContains' might be less efficient than full-text search in some embedding stores. This is acknowledged in the PR description.\n-  The new filters only support string and UUID types, which might limit their applicability in some use cases.\n\n\n#### Potential Bugs\n-  Incorrect handling of null or non-string/UUID values in metadata could lead to unexpected behavior or exceptions. This is handled by the new tests.\n-  The 'contains' and 'notContains' filters might not be optimized for all embedding stores, potentially leading to performance issues. This is mentioned in the PR body.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key containing a string value\n  - When: filtering with a 'contains' filter where the metadata value contains the comparison value\n  - Then: the 'contains' filter should return true if the string contains the given string\n\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: filtering with a 'contains' filter where the UUID string representation contains the comparison value\n  - Then: the 'contains' filter should return true if the UUID string representation contains the given string\n\n-\n  - Given: Metadata with a key containing a string value\n  - When: filtering with a 'notContains' filter where the metadata value does not contain the comparison value\n  - Then: the 'notContains' filter should return true if the string does not contain the given string\n\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: filtering with a 'notContains' filter where the UUID string representation does not contain the comparison value\n  - Then: the 'notContains' filter should return true if the UUID string representation does not contain the given string\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key containing a string value\n  - When: filtering with a 'contains' filter where the metadata value does not contain the comparison value\n  - Then: the 'contains' filter should return false if the string does not contain the given string\n\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: filtering with a 'contains' filter where the UUID string representation does not contain the comparison value\n  - Then: the 'contains' filter should return false if the UUID string representation does not contain the given string\n\n-\n  - Given: Metadata with a key containing a string value\n  - When: filtering with a 'notContains' filter where the metadata value contains the comparison value\n  - Then: the 'notContains' filter should return false if the string contains the given string\n\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: filtering with a 'notContains' filter where the UUID string representation contains the comparison value\n  - Then: the 'notContains' filter should return false if the UUID string representation contains the given string\n\n-\n  - Given: Metadata with a key containing a non-string and non-UUID value\n  - When: filtering with a 'contains' or 'notContains' filter on a metadata value that is not a string or UUID\n  - Then: the 'contains' and 'notContains' filters should throw an IllegalArgumentException\n\n-\n  - Given: A null comparison value\n  - When: creating a 'contains' or 'notContains' filter with a null comparison value\n  - Then: the 'contains' and 'notContains' filters should throw an IllegalArgumentException\n\n-\n  - Given: A blank key\n  - When: creating a 'contains' or 'notContains' filter with a blank key\n  - Then: the 'contains' and 'notContains' filters should throw an IllegalArgumentException\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key containing a UUID value\n  - When: filtering with a 'contains' filter on a UUID metadata value\n  - Then: the 'contains' filter should correctly match if the UUID string representation contains the given string\n\n-\n  - Given: Metadata with a key containing a string value with special characters\n  - When: filtering with a 'contains' filter on a string metadata value with special characters\n  - Then: the 'contains' filter should correctly match if the string contains the given string with special characters\n\n-\n  - Given: Metadata with a key containing a string value that is an empty string\n  - When: filtering with a 'contains' filter on an empty string metadata value\n  - Then: the 'contains' filter should return true if the comparison value is also an empty string, and false otherwise\n\n-\n  - Given: Metadata with a key containing a string value that is null\n  - When: filtering with a 'contains' filter on a null metadata value\n  - Then: the 'contains' filter should return false\n\n-\n  - Given: Metadata with a key containing a UUID value that is null\n  - When: filtering with a 'contains' filter on a null UUID metadata value\n  - Then: the 'contains' filter should return false\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": null,
        "body": "> I have now added implementations of these filters for Qdrant (which I use) and PgVector (which I would expect to be commonly used), and took the chance to use Java 17 instanceof casting when touching the code.\r\n\r\nNice, thanks a lot! BTW, other very popular stores are Chroma and Milvus.\r\n\r\n> I have tested the underlying filter used in the QdrantFilterConverter and it works as desired for me, so we can consider the Qdrant implementation as tested in production as well.\r\n\r\nGreat, could you please also extend `EmbeddingStoreWithFilteringIT`? It would be nice to have an integration test there. You could create a new test method annotated with `@EnabledIf(\"supportsContains\")` and Qdrant/PgVector could override the default `protected boolean supportsContains() { return false; }` with `protected boolean supportsContains() { return true; }`"
    },
    {
        "author": null,
        "body": "I am also wondering if `NotContains` is required - as we have `Not` which can negate `Contains`: `Not(Contains)`.\r\nCan't recall why I have added `IsNotEqualTo` and `IsNotIn` \ud83e\udd14 \r\nWDYT?"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "> BTW, other very popular stores are Chroma and Milvus.\r\n\r\nI will check how complicated it is to implement it for them, if it\u2019s not too much work I\u2019ll add it.\r\n\r\n> Great, could you please also extend EmbeddingStoreWithFilteringIT?\r\n\r\nWill have a look \ud83d\udc4d\r\n\r\n> I am also wondering if NotContains is required - as we have Not which can negate Contains: Not(Contains).\r\n\r\nIf it just negates the return value of Contains we cannot use it, because if the provided value is no metadata the Metadata should always return false, what wouldn\u2019t be the case if we negate it. See IsEqualTo and IsNotEqualTo for example."
    },
    {
        "author": null,
        "body": "> If it just negates the return value of Contains we cannot use it, because if the provided value is no metadata the Metadata should always return false, what wouldn\u2019t be the case if we negate it. See IsEqualTo and IsNotEqualTo for example.\r\n\r\nCould you gixe an example? Having a hard time understanding the problem of just negating"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "Take a look at this code: We shouldn\u2019t negate this part of the condition:\r\n\r\nhttps://github.com/langchain4j/langchain4j/blob/dc190738b9824119980225e19164c06d2c283fd5/langchain4j-core/src/main/java/dev/langchain4j/store/embedding/filter/comparison/IsEqualTo.java#L34-L40"
    },
    {
        "author": null,
        "body": "@florian-h05 I see... I am not sure about `!metadata.containsKey(key)` part though.\r\n\r\nExample:\r\n```java\r\nMetadata: {\r\n    \"my-key\" : \"my-value\"\r\n}\r\n\r\nassert metadataKey(\"my-key\").contains(\"my\") == true\r\nassert metadataKey(\"wrong-key\").contains(\"my\") == false\r\n\r\nassert metadataKey(\"my-key\").notContains(\"my\") == false\r\nassert metadataKey(\"wrong-key\").notContains(\"my\") == true?\r\n\r\nassert not(metadataKey(\"my-key\").contains(\"my\")) == false\r\nassert not(metadataKey(\"wrong-key\").contains(\"my\")) == true?\r\n```\r\n\r\n\r\nHaving a few concrete examples in `EmbeddingStoreWithFilteringIT` would definitely help wit hunderstanding."
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "Looking at it more closely, `metadataKey(\"key\").notContains(\"str\")` and `not(metadataKey(\"key\").contains(\"str\"))` behave exactly the same, except that the first one returns false if the object passed to the `test` method is no Metadata, but the last one returns true in that case. This difference can be easily fixed though by modifying the `Not` filter to always return false if the object passed to `test` is no Metadata."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Design Issues\n-  The `Contains` filter is less powerful than full-text search capabilities. This might lead to users expecting more advanced search features than what is provided.\n-  The naming of the filter might be confusing. `Contains` might imply a more general concept than just string containment. Consider `ContainsString` or `StringContains` for clarity.\n\n\n#### Potential Bugs\n-  The `Contains` filter relies on the `String.contains()` method, which is case-sensitive. This might lead to unexpected behavior if the user expects case-insensitive matching.\n-  The `Contains` filter throws an IllegalArgumentException if the metadata value is not a string. This might not be the desired behavior in all cases. It might be better to return false or handle the type mismatch differently.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A metadata value that contains the search string\n  - When: Filtering with a contains filter\n  - Then: The contains filter should return true\n\n-\n  - Given: A metadata value that contains the search string at the beginning\n  - When: Filtering with a contains filter\n  - Then: The contains filter should return true\n\n-\n  - Given: A metadata value that contains the search string at the end\n  - When: Filtering with a contains filter\n  - Then: The contains filter should return true\n\n-\n  - Given: A metadata value that contains the search string multiple times\n  - When: Filtering with a contains filter\n  - Then: The contains filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A metadata value that does not contain the search string\n  - When: Filtering with a contains filter\n  - Then: The contains filter should return false\n\n-\n  - Given: A metadata value that is not a string\n  - When: Filtering with a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A null search string\n  - When: Creating a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A null metadata key\n  - When: Creating a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: An empty metadata key\n  - When: Creating a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A metadata value that is a very long string\n  - When: Filtering with a contains filter\n  - Then: The contains filter should still work correctly\n\n-\n  - Given: A metadata value that contains special characters\n  - When: Filtering with a contains filter\n  - Then: The contains filter should still work correctly\n\n-\n  - Given: A metadata value that is an empty string\n  - When: Filtering with a contains filter\n  - Then: The contains filter should work correctly\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR introduces a new filter type and does not modify existing APIs.\n\n\n#### Potential Design Issues\n-  The 'contains' filter might not be efficient for large text values or complex search patterns. Consider performance implications.\n-  The 'contains' filter only supports string values. Consider adding support for other data types in the future.\n\n\n#### Potential Bugs\n-  Incorrect handling of null or empty string values in metadata when using the 'contains' filter.\n-  Potential issues with special characters in the comparison value when using the 'contains' filter.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key that contains the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has the comparison value at the beginning\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has the comparison value at the end\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has the same value as the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a non-string value\n  - When: Filtering with a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A 'contains' filter with a null comparison value\n  - When: Creating a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A 'contains' filter with an empty comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true if the metadata value is not empty\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has an empty string value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false if the comparison value is not empty\n\n-\n  - Given: Metadata with a key that has a string value containing special characters\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should correctly match if the comparison value is a substring\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Design Issues\n-  The 'contains' filter is less powerful than full-text search capabilities, and might not be suitable for all use cases. The PR mentions that it is easier to implement in embedding stores, but this might lead to a less flexible and powerful filtering mechanism.\n\n\n#### Potential Bugs\n-  The 'contains' filter might not be supported by all embedding stores, leading to unexpected behavior or errors if used with an unsupported store.\n-  The 'contains' filter is case-sensitive, which might not be the desired behavior in all cases. This could lead to unexpected filtering results if the casing of the metadata value and the comparison value do not match.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key that contains the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has the same value as the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that contains the comparison value multiple times\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A filter with a null key\n  - When: Creating a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A filter with an empty key\n  - When: Creating a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A filter with a null comparison value\n  - When: Creating a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: Metadata with a key that has a non-string value\n  - When: Filtering with a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A filter with a key that does not exist in the metadata\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has an empty string value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true if the comparison value is also an empty string, otherwise false\n\n-\n  - Given: Metadata with a key that has a value that is a substring of the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value with different casing than the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None\n\n\n#### Potential Design Issues\n-  The 'contains' filter is less powerful than a full-text search, and might not be suitable for all use cases. It might be better to provide a more generic full-text search filter.\n\n\n#### Potential Bugs\n-  The 'contains' filter might not be case-insensitive in all embedding store implementations, leading to unexpected behavior.\n-  The 'contains' filter might not handle special characters correctly in all embedding store implementations, leading to unexpected behavior.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key that has a value that contains the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that is equal to the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that contains the comparison value with different casing\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true if the underlying implementation is case-insensitive, otherwise false\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a non-string value\n  - When: Filtering with a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A null comparison value\n  - When: Creating a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: An empty key\n  - When: Creating a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has an empty string value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true if the comparison value is also an empty string, otherwise false\n\n-\n  - Given: Metadata with a key that has a value that is a substring of the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value that contains special characters\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true if the comparison value is a substring of the value, otherwise false\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u274c\n\n</details>"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@langchain4j I have removed the NotContains filters as its functionality is the same as negating the Contains filter with the modification of the Not filter to always return false if the passed Object is no metadata.\r\nI have also created an IT for the contains filter and implemented support for it in Qdrant, PgVector and Milvus. I unfortunately don't see a viable solution to implement it for Chroma, see https://docs.trychroma.com/docs/querying-collections/metadata-filtering.  Chroma's full-text search is only available for the document contents, see https://docs.trychroma.com/docs/querying-collections/full-text-search.\r\n\r\nNote that I have not pushed all the changes mentioned yet."
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@langchain4j I have now pushed everything, this is ready for review.\r\nPlease let me know what you think about commit https://github.com/langchain4j/langchain4j/pull/2344/commits/a1481e7356938bd2ca9027d8ca331330b2311f79."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None\n\n\n#### Potential Design Issues\n-  The contains filter might not be as efficient as other filters in some embedding stores.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the comparison value might lead to unexpected results.\n-  Case sensitivity of the contains operation might vary across different embedding stores.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key that has a value that contains the comparison value\n  - When: Using the contains filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that is equal to the comparison value\n  - When: Using the contains filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that contains the comparison value with different casing\n  - When: Using the contains filter\n  - Then: The filter should return true if the underlying store supports case-insensitive contains\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Using the contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value of a different type than String\n  - When: Using the contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A null comparison value\n  - When: Creating a Contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: An empty key\n  - When: Creating a Contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Using the contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has an empty string value\n  - When: Using the contains filter\n  - Then: The filter should return false if the comparison value is not empty\n\n-\n  - Given: Metadata with a key that has a value that is a substring of the comparison value\n  - When: Using the contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value that contains special characters\n  - When: Using the contains filter\n  - Then: The filter should correctly match the string\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "Note that most changes in this PR are because I had to apply spotless when touching the code.\r\nYou can configure \"Changed files\" to hide whitespace changes."
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@langchain4j FYI this is finished from my POV."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None\n\n\n#### Potential Design Issues\n-  The contains filter might not be as efficient as other filters in some embedding stores.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the comparison value might lead to unexpected results.\n-  Case sensitivity of the contains operation might vary across different embedding stores.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key that has a value that contains the comparison value\n  - When: Using the contains filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that is equal to the comparison value\n  - When: Using the contains filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a key that has a value that contains the comparison value with different casing\n  - When: Using the contains filter\n  - Then: The filter should return true if the underlying store supports case-insensitive contains\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Using the contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value of a different type than String\n  - When: Using the contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A null comparison value\n  - When: Creating a Contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: An empty key\n  - When: Creating a Contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Using the contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has an empty string value\n  - When: Using the contains filter\n  - Then: The filter should return false if the comparison value is not empty\n\n-\n  - Given: Metadata with a key that has a value that is a substring of the comparison value\n  - When: Using the contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value that contains special characters\n  - When: Using the contains filter\n  - Then: The filter should correctly match the string\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The addition of the `contains` method to `MetadataFilterBuilder` is a new API, but it is not breaking any existing API.\n\n\n#### Potential Design Issues\n-  The `contains` filter is less powerful than a full-text search, but it is easier to implement in embedding stores. This is a trade-off between functionality and ease of implementation.\n\n\n#### Potential Bugs\n-  If the underlying embedding store does not support the `contains` filter, an `UnsupportedOperationException` is thrown. This is handled by the test cases, but could be a potential bug if not handled correctly by the user.\n-  The `Contains` filter throws an IllegalArgumentException if the metadata value is not a string. This is expected behavior, but could be a potential bug if the user expects the filter to handle non-string values.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key that has a value which is a string containing the contains string\n  - When: Filtering with a contains filter\n  - Then: The filter should match the metadata\n\n-\n  - Given: Metadata with a key that has a value which is a string that exactly matches the contains string\n  - When: Filtering with a contains filter\n  - Then: The filter should match the metadata\n\n-\n  - Given: Metadata with a key that has a value which is a string containing the contains string with different casing\n  - When: Filtering with a contains filter\n  - Then: The filter should match the metadata if the underlying store supports case-insensitive contains\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Filtering with a contains filter\n  - Then: The filter should not match the metadata\n\n-\n  - Given: Metadata with a key that has a value which is not a string\n  - When: Filtering with a contains filter\n  - Then: The filter should throw an IllegalArgumentException\n\n-\n  - Given: Metadata with a key that has a value which is a string that does not contain the contains string\n  - When: Filtering with a contains filter\n  - Then: The filter should not match the metadata\n\n-\n  - Given: A contains filter with a null comparison value\n  - When: Creating a contains filter\n  - Then: The filter should throw an IllegalArgumentException\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a value which is a string containing special characters\n  - When: Filtering with a contains filter\n  - Then: The filter should correctly identify the metadata if the special characters are present in the contains string\n\n-\n  - Given: Metadata with a key that has a value which is a very long string\n  - When: Filtering with a contains filter\n  - Then: The filter should correctly identify the metadata if the long string contains the contains string\n\n-\n  - Given: Metadata with a key that has a value which is an empty string\n  - When: Filtering with a contains filter\n  - Then: The filter should correctly identify the metadata if the contains string is also empty or if the contains string is not empty\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@dliubarskyi I addressed your review"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None\n\n\n#### Potential Design Issues\n-  The contains filter is less powerful than other filters, and might not be suitable for all use cases.\n-  The implementation of the contains filter might vary across different embedding stores, leading to inconsistencies.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the comparison string might lead to unexpected results.\n-  Type mismatch exceptions might not be handled gracefully in all embedding store implementations.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata contains the key and the value contains the comparison string\n  - When: Filtering with a contains filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the key and the value is exactly the comparison string\n  - When: Filtering with a contains filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the key and the value contains the comparison string as a substring\n  - When: Filtering with a contains filter\n  - Then: The filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata does not contain the specified key\n  - When: Filtering with a contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata contains the key but the value does not contain the comparison string\n  - When: Filtering with a contains filter\n  - Then: The filter should return false\n\n-\n  - Given: The comparison value is null\n  - When: Creating a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with a contains filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value of a different type than String\n  - When: Filtering with a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A very long string for the comparison value\n  - When: Filtering with a contains filter\n  - Then: The filter should work correctly\n\n-\n  - Given: A string with special characters for the comparison value\n  - When: Filtering with a contains filter\n  - Then: The filter should work correctly\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR adds a new filter and does not modify existing APIs.\n\n\n#### Potential Design Issues\n-  The 'contains' filter is less powerful than full-text search capabilities, and might not be suitable for all use cases. It might be better to have a more generic filter that can be used for more complex queries.\n\n\n#### Potential Bugs\n-  Incorrect handling of non-string metadata values could lead to unexpected behavior or exceptions.\n-  The 'contains' filter might not be supported by all embedding stores, leading to exceptions if used with an unsupported store.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a string value that contains the comparison string\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata with a string value that exactly matches the comparison string\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: A 'contains' filter used in conjunction with a 'not' filter\n  - When: Filtering with the combined filter\n  - Then: The 'not' filter should correctly invert the result of the 'contains' filter\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata that does not contain the specified key\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a string value that does not contain the comparison string\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: A 'contains' filter with a null comparison value\n  - When: Creating the 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a non-string value\n  - When: Filtering with a 'contains' filter on that key\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with a 'contains' filter on that key\n  - Then: The filter should return false\n\n-\n  - Given: A 'contains' filter with an empty string as the comparison value\n  - When: Filtering with this 'contains' filter\n  - Then: The filter should return true for any metadata with a string value for the given key\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR introduces a new filter and does not modify existing APIs.\n\n\n#### Potential Design Issues\n-  The 'contains' filter might not be the most efficient way to filter metadata in all embedding stores. Some stores might have more optimized ways to perform substring searches.\n-  The implementation of the 'contains' filter might vary across different embedding stores, leading to inconsistencies in behavior.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the comparison value might lead to unexpected results.\n-  Type mismatch exceptions might not be handled gracefully in all embedding store implementations.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a string value that contains the comparison value\n  - When: Using the 'contains' filter with a comparison value that is present in the metadata's string value.\n  - Then: The filter should return true.\n\n-\n  - Given: Metadata with a string value that exactly matches the comparison value\n  - When: Using the 'contains' filter with a comparison value that exactly matches the metadata's string value.\n  - Then: The filter should return true.\n\n-\n  - Given: Metadata with a string value that contains the comparison value multiple times\n  - When: Using the 'contains' filter with a comparison value that appears multiple times in the metadata's string value.\n  - Then: The filter should return true.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Using the 'contains' filter with a key that is not present in the metadata.\n  - Then: The filter should return false.\n\n-\n  - Given: Metadata with a non-string value for the specified key\n  - When: Using the 'contains' filter with a key that has a non-string value (e.g., integer, boolean).\n  - Then: The filter should throw an IllegalArgumentException.\n\n-\n  - Given: Metadata with a string value that does not contain the comparison value\n  - When: Using the 'contains' filter with a comparison value that is not present in the metadata's string value.\n  - Then: The filter should return false.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a string value that is an empty string\n  - When: Using the 'contains' filter with an empty string as the comparison value.\n  - Then: The filter should return true if the comparison value is also an empty string, and false otherwise.\n\n-\n  - Given: Metadata with a string value that contains special characters\n  - When: Using the 'contains' filter with a comparison value that includes special characters.\n  - Then: The filter should correctly match the string value with the comparison value, including special characters.\n\n-\n  - Given: Metadata with a string value that is very long\n  - When: Using the 'contains' filter with a very long string value.\n  - Then: The filter should correctly match the string value with the comparison value, even if the string value is very long.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR introduces a new filter and does not modify existing APIs.\n\n\n#### Potential Design Issues\n-  The 'contains' filter is less powerful than a full-text search, and might not be suitable for all use cases. It might be better to implement a more powerful filter in the future.\n\n\n#### Potential Bugs\n-  The 'contains' filter might not be implemented correctly in all embedding stores, leading to inconsistent filtering results.\n-  The 'contains' filter might not handle special characters in the comparison string correctly.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata that contains the key and the value contains the comparison string\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata that contains the key and the value is exactly the comparison string\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n-\n  - Given: Metadata that contains the key and the value contains the comparison string as a substring\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata that does not contain the specified key\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata that contains the key but the value does not contain the comparison string\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has a value that is not a string\n  - When: Filtering with a 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A 'contains' filter with an empty string as the comparison value\n  - When: Filtering with a 'contains' filter\n  - Then: The filter should return true for any metadata that contains the key\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None. This PR introduces a new filter and does not modify existing APIs.\n\n\n#### Potential Design Issues\n-  The 'contains' filter might not be the most efficient way to filter metadata in all embedding stores. Some stores might have more efficient ways to perform substring matching.\n-  The current implementation of the 'contains' filter only supports string values. It might be beneficial to support other data types in the future.\n\n\n#### Potential Bugs\n-  Incorrect handling of non-string metadata values could lead to unexpected behavior or exceptions.\n-  The 'contains' filter might not be implemented correctly in all embedding stores, leading to inconsistent filtering results.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A 'contains' filter with a string that is present in the metadata value\n  - When: Filtering with that 'contains' filter\n  - Then: Metadata entries containing the string should match\n\n-\n  - Given: A 'contains' filter with a string that is present in the metadata value with different casing\n  - When: Filtering with that 'contains' filter\n  - Then: Metadata entries containing the string should match\n\n-\n  - Given: A 'contains' filter with a string that is present at the beginning, middle, or end of the metadata value\n  - When: Filtering with that 'contains' filter\n  - Then: Metadata entries containing the string should match\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A 'contains' filter with a string that is not present in the metadata value\n  - When: Filtering with that 'contains' filter\n  - Then: No metadata entries should match\n\n-\n  - Given: A 'contains' filter with a null comparison value\n  - When: Creating the 'contains' filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A 'contains' filter with a key that does not exist in the metadata\n  - When: Filtering with that 'contains' filter\n  - Then: No metadata entries should match\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a non-string value\n  - When: Filtering with a 'contains' filter on that key\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A 'contains' filter with an empty string as the comparison value\n  - When: Filtering with that 'contains' filter\n  - Then: All metadata entries with the specified key should match\n\n-\n  - Given: A 'contains' filter with a special character in the comparison value\n  - When: Filtering with that 'contains' filter\n  - Then: Metadata entries containing the special character should match\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@dliubarskyi I have renamed from Contains to ContainsString, and fixed all embedding store test failures I found."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @florian-h05, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The addition of `containsString` method to `MetadataFilterBuilder` might require recompilation of code using this class.\n\n\n#### Potential Design Issues\n-  The `containsString` filter is less powerful than full-text search capabilities, and might not be suitable for all use cases.\n-  The implementation of `containsString` might vary across different embedding stores, leading to inconsistencies.\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the search string might lead to unexpected results.\n-  Type mismatch exceptions might not be handled gracefully in all embedding store implementations.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata with a key containing the search string\n  - When: Searching with a contains filter where the metadata value contains the search string.\n  - Then: The filter should match.\n\n-\n  - Given: Metadata with a key containing the search string at the beginning\n  - When: Searching with a contains filter where the metadata value starts with the search string.\n  - Then: The filter should match.\n\n-\n  - Given: Metadata with a key containing the search string at the end\n  - When: Searching with a contains filter where the metadata value ends with the search string.\n  - Then: The filter should match.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata with a key that does not exist\n  - When: Searching with a contains filter on a key that is not present in the metadata.\n  - Then: The filter should not match.\n\n-\n  - Given: Metadata with a non-string value for the key\n  - When: Searching with a contains filter on a metadata key that has a non-string value (e.g., number, boolean).\n  - Then: An IllegalArgumentException should be thrown.\n\n-\n  - Given: A null or empty search string\n  - When: Searching with a contains filter with a null or empty search string.\n  - Then: The filter should not match any metadata.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key containing special characters\n  - When: Searching with a contains filter on a key with special characters like '|', '[', ']', etc.\n  - Then: The filter should correctly match or not match based on the contains logic.\n\n-\n  - Given: Metadata with a very long string value\n  - When: Searching with a contains filter on a metadata key with a very long string value.\n  - Then: The filter should correctly match or not match based on the contains logic.\n\n-\n  - Given: Metadata with a string value that is a substring of the search string\n  - When: Searching with a contains filter where the metadata value is a substring of the search string.\n  - Then: The filter should not match if the search string is not a substring of the metadata value.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The addition of a new `containsString` method to `MetadataFilterBuilder` might cause compilation errors if a class already has a method with the same name.\n\n\n#### Potential Design Issues\n-  The `ContainsString` filter is less powerful than the full text search capabilities that some embedding stores might offer. This might limit the expressiveness of metadata filtering.\n-  The implementation of the `ContainsString` filter is specific to each embedding store, which might lead to inconsistencies in behavior across different stores.\n\n\n#### Potential Bugs\n-  The `ContainsString` filter might not be supported by all embedding stores, leading to runtime exceptions if used with an unsupported store. This is handled by throwing an `UnsupportedOperationException` in the `EmbeddingStoreWithFilteringIT` test class.\n-  The `ContainsString` filter is case-sensitive, which might not be the desired behavior in all cases. This is not a bug but a design decision.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A filter with a metadata value that contains the comparison value\n  - When: Filtering with containsString\n  - Then: The filter should return true\n\n-\n  - Given: A filter with a metadata value that is equal to the comparison value\n  - When: Filtering with containsString\n  - Then: The filter should return true\n\n-\n  - Given: A filter with a metadata value that contains the comparison value as a substring\n  - When: Filtering with containsString\n  - Then: The filter should return true\n\n-\n  - Given: A filter with a metadata value that contains the comparison value with different casing\n  - When: Filtering with containsString\n  - Then: The filter should return false as the containsString is case sensitive\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A filter with a null key\n  - When: Creating a containsString filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A filter with a null comparison value\n  - When: Creating a containsString filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A filter with an empty key\n  - When: Creating a containsString filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A filter with a metadata key that does not exist\n  - When: Filtering with containsString\n  - Then: The filter should return false\n\n-\n  - Given: A filter with a metadata value that does not contain the comparison value\n  - When: Filtering with containsString\n  - Then: The filter should return false\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key that has a value of type other than String\n  - When: Filtering with containsString\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: Metadata with a key that has a null value\n  - When: Filtering with containsString\n  - Then: The filter should return false\n\n-\n  - Given: Metadata with a key that has an empty string value\n  - When: Filtering with containsString\n  - Then: The filter should return true if the comparison value is also an empty string, otherwise false\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  None\n\n\n#### Potential Design Issues\n-  The contains filter is less powerful than other filters, which might lead to confusion\n-  The implementation might not be optimal for all embedding stores\n\n\n#### Potential Bugs\n-  Incorrect handling of special characters in the search string\n-  Potential performance issues with very long metadata values or large datasets\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A metadata value contains the search string\n  - When: Searching with a contains filter\n  - Then: The filter should return true\n\n-\n  - Given: A metadata value contains the search string at the beginning\n  - When: Searching with a contains filter\n  - Then: The filter should return true\n\n-\n  - Given: A metadata value contains the search string at the end\n  - When: Searching with a contains filter\n  - Then: The filter should return true\n\n-\n  - Given: A metadata value contains the search string in the middle\n  - When: Searching with a contains filter\n  - Then: The filter should return true\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A metadata value is not a string\n  - When: Searching with a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: The metadata key does not exist\n  - When: Searching with a contains filter\n  - Then: The filter should return false\n\n-\n  - Given: The search string is null\n  - When: Searching with a contains filter\n  - Then: An NullPointerException should be thrown\n\n-\n  - Given: The search string is not found in any metadata values\n  - When: Searching with a contains filter\n  - Then: No results should be returned\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A metadata value is a very long string\n  - When: Searching with a contains filter\n  - Then: The contains filter should still work correctly\n\n-\n  - Given: A metadata value contains special characters\n  - When: Searching with a contains filter\n  - Then: The contains filter should still work correctly\n\n-\n  - Given: The search string is empty\n  - When: Searching with a contains filter\n  - Then: The contains filter should return all results\n\n-\n  - Given: The search string is a substring of multiple metadata values\n  - When: Searching with a contains filter\n  - Then: All matching results should be returned\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `IllegalArgumentException` thrown by `DefaultAzureAiSearchFilterMapper` for unsupported filters is changed to `UnsupportedOperationException`. This is unlikely to break existing code, but it's a change in exception type.\n\n\n#### Potential Design Issues\n-  The `ContainsString` filter is added as a new comparison filter. This might lead to a growing number of comparison filters. Consider if a more generic filter mechanism is needed.\n-  The `ContainsString` filter is implemented differently in different embedding stores. This might lead to inconsistent behavior across different stores. Consider if a more unified approach is needed.\n\n\n#### Potential Bugs\n-  The `ContainsString` filter might not be supported by all embedding stores. If a store does not implement it, an `UnsupportedOperationException` will be thrown. This is handled by the tests, but it's a potential bug if a new store is added without implementing the filter.\n-  The `ContainsString` filter implementation in `MilvusMetadataFilterMapper` uses `LIKE` which might have different behavior than `contains` in other databases, especially with special characters.\n-  The `ContainsString` filter implementation in `PgVectorFilterMapper` uses `~` which might have different behavior than `contains` in other databases, especially with special characters.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A metadata key with a string value that contains the comparison value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should match\n\n-\n  - Given: A metadata key with a string value that does not contain the comparison value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should not match\n\n-\n  - Given: A metadata key with a string value that is exactly the same as the comparison value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should match\n\n-\n  - Given: A metadata key with a string value that contains the comparison value as a substring\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should match\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A metadata key that does not exist\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should not match\n\n-\n  - Given: A metadata key with a non-string value\n  - When: Filtering with a contains filter on that key\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A contains filter with a null comparison value\n  - When: Creating a contains filter\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: A contains filter with an empty comparison value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should work correctly\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A metadata key with a very long string value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should work correctly\n\n-\n  - Given: A metadata key with special characters in the string value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should work correctly\n\n-\n  - Given: A metadata key with an empty string value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should work correctly\n\n-\n  - Given: A metadata key with a null value\n  - When: Filtering with a contains filter on that key\n  - Then: The contains filter should not match\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "Hi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `IllegalArgumentException` thrown by `DefaultAzureAiSearchFilterMapper` for unsupported filters is changed to `UnsupportedOperationException`. This is unlikely to affect consumers.\n\n\n#### Potential Design Issues\n-  The `ContainsString` filter is not supported by all embedding stores, which might lead to inconsistent behavior across different stores. This is documented, but could be a source of confusion.\n-  The implementation of `ContainsString` filter might vary across different embedding stores, leading to subtle differences in behavior.\n\n\n#### Potential Bugs\n-  Incorrect handling of null values in metadata when using `ContainsString` filter might lead to unexpected behavior.\n-  Type mismatch exceptions might not be handled gracefully in all embedding stores when using `ContainsString` filter.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: Metadata contains the specified key and value contains the string\n  - When: Filtering with ContainsString on a matching string\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the specified key and value does not contain the string\n  - When: Filtering with ContainsString on a non-matching string\n  - Then: The filter should return false\n\n-\n  - Given: Metadata contains the specified key and value contains the string at the beginning\n  - When: Filtering with ContainsString on a string at the beginning\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the specified key and value contains the string at the end\n  - When: Filtering with ContainsString on a string at the end\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the specified key and value contains the string in the middle\n  - When: Filtering with ContainsString on a string in the middle\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the specified key and value is exactly the string\n  - When: Filtering with ContainsString on an exact match\n  - Then: The filter should return true\n\n-\n  - Given: Metadata contains the specified key and value contains the string with different casing\n  - When: Filtering with ContainsString on a string with different casing\n  - Then: The filter should return false\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Metadata does not contain the specified key\n  - When: Filtering with ContainsString on a non-existent key\n  - Then: The filter should return false\n\n-\n  - Given: Metadata value is not a string\n  - When: Filtering with ContainsString on a non-string value\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: The comparison value is null\n  - When: Creating a ContainsString filter with a null comparison value\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: The key is blank\n  - When: Creating a ContainsString filter with a blank key\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: The embedding store does not support ContainsString\n  - When: Searching with ContainsString filter on an unsupported store\n  - Then: An UnsupportedOperationException should be thrown\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: Metadata with a key containing special characters\n  - When: Filtering with ContainsString on a key with special characters\n  - Then: The filter should work correctly\n\n-\n  - Given: Metadata value is a very long string\n  - When: Filtering with ContainsString on a very long string\n  - Then: The filter should work correctly\n\n-\n  - Given: Metadata value is an empty string\n  - When: Filtering with ContainsString on an empty string\n  - Then: The filter should work correctly\n\n-\n  - Given: Metadata value is null\n  - When: Filtering with ContainsString on a null value\n  - Then: The filter should return false\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n"
    },
    {
        "author": {
            "login": "florian-h05"
        },
        "body": "@dliubarskyi Thanks for the merge!"
    }
]