diff --git a/langchain4j-open-ai/src/main/java/dev/langchain4j/model/openai/OpenAiEmbeddingModel.java b/langchain4j-open-ai/src/main/java/dev/langchain4j/model/openai/OpenAiEmbeddingModel.java
index e286de81558..13e7e1c81c1 100644
--- a/langchain4j-open-ai/src/main/java/dev/langchain4j/model/openai/OpenAiEmbeddingModel.java
+++ b/langchain4j-open-ai/src/main/java/dev/langchain4j/model/openai/OpenAiEmbeddingModel.java
@@ -1,5 +1,17 @@
 package dev.langchain4j.model.openai;
 
+import static dev.langchain4j.internal.RetryUtils.withRetry;
+import static dev.langchain4j.internal.Utils.getOrDefault;
+import static dev.langchain4j.internal.ValidationUtils.ensureGreaterThanZero;
+import static dev.langchain4j.model.openai.InternalOpenAiHelper.DEFAULT_USER_AGENT;
+import static dev.langchain4j.model.openai.InternalOpenAiHelper.OPENAI_DEMO_API_KEY;
+import static dev.langchain4j.model.openai.InternalOpenAiHelper.OPENAI_DEMO_URL;
+import static dev.langchain4j.model.openai.InternalOpenAiHelper.OPENAI_URL;
+import static dev.langchain4j.model.openai.InternalOpenAiHelper.tokenUsageFrom;
+import static dev.langchain4j.model.openai.OpenAiModelName.TEXT_EMBEDDING_ADA_002;
+import static dev.langchain4j.spi.ServiceHelper.loadFactories;
+import static java.time.Duration.ofSeconds;
+
 import dev.ai4j.openai4j.OpenAiClient;
 import dev.ai4j.openai4j.embedding.EmbeddingRequest;
 import dev.ai4j.openai4j.embedding.EmbeddingResponse;
@@ -11,26 +23,14 @@
 import dev.langchain4j.model.openai.spi.OpenAiEmbeddingModelBuilderFactory;
 import dev.langchain4j.model.output.Response;
 import dev.langchain4j.model.output.TokenUsage;
-
 import java.net.Proxy;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.StringJoiner;
 
-import static dev.langchain4j.internal.RetryUtils.withRetry;
-import static dev.langchain4j.internal.Utils.getOrDefault;
-import static dev.langchain4j.internal.ValidationUtils.ensureGreaterThanZero;
-import static dev.langchain4j.model.openai.InternalOpenAiHelper.DEFAULT_USER_AGENT;
-import static dev.langchain4j.model.openai.InternalOpenAiHelper.OPENAI_DEMO_API_KEY;
-import static dev.langchain4j.model.openai.InternalOpenAiHelper.OPENAI_DEMO_URL;
-import static dev.langchain4j.model.openai.InternalOpenAiHelper.OPENAI_URL;
-import static dev.langchain4j.model.openai.InternalOpenAiHelper.tokenUsageFrom;
-import static dev.langchain4j.model.openai.OpenAiModelName.TEXT_EMBEDDING_ADA_002;
-import static dev.langchain4j.spi.ServiceHelper.loadFactories;
-import static java.time.Duration.ofSeconds;
-
 /**
  * Represents an OpenAI embedding model, such as text-embedding-ada-002.
  */
@@ -44,20 +44,21 @@ public class OpenAiEmbeddingModel extends DimensionAwareEmbeddingModel implement
     private final Integer maxSegmentsPerBatch;
     private final Tokenizer tokenizer;
 
-    public OpenAiEmbeddingModel(String baseUrl,
-                                String apiKey,
-                                String organizationId,
-                                String modelName,
-                                Integer dimensions,
-                                String user,
-                                Duration timeout,
-                                Integer maxRetries,
-                                Integer maxSegmentsPerBatch,
-                                Proxy proxy,
-                                Boolean logRequests,
-                                Boolean logResponses,
-                                Tokenizer tokenizer,
-                                Map<String, String> customHeaders) {
+    public OpenAiEmbeddingModel(
+            String baseUrl,
+            String apiKey,
+            String organizationId,
+            String modelName,
+            Integer dimensions,
+            String user,
+            Duration timeout,
+            Integer maxRetries,
+            Integer maxSegmentsPerBatch,
+            Proxy proxy,
+            Boolean logRequests,
+            Boolean logResponses,
+            Tokenizer tokenizer,
+            Map<String, String> customHeaders) {
 
         baseUrl = getOrDefault(baseUrl, OPENAI_URL);
         if (OPENAI_DEMO_API_KEY.equals(apiKey)) {
@@ -105,9 +106,7 @@ public String modelName() {
     @Override
     public Response<List<Embedding>> embedAll(List<TextSegment> textSegments) {
 
-        List<String> texts = textSegments.stream()
-                .map(TextSegment::text)
-                .toList();
+        List<String> texts = textSegments.stream().map(TextSegment::text).toList();
 
         List<List<String>> textBatches = partition(texts, maxSegmentsPerBatch);
 
@@ -136,9 +135,9 @@ private Response<List<Embedding>> embedBatchedTexts(List<List<String>> textBatch
                         .toList(),
                 responses.stream()
                         .map(Response::tokenUsage)
+                        .filter(Objects::nonNull)
                         .reduce(TokenUsage::add)
-                        .orElse(null)
-        );
+                        .orElse(null));
     }
 
     private Response<List<Embedding>> embedTexts(List<String> texts) {
@@ -156,10 +155,7 @@ private Response<List<Embedding>> embedTexts(List<String> texts) {
                 .map(openAiEmbedding -> Embedding.from(openAiEmbedding.embedding()))
                 .toList();
 
-        return Response.from(
-                embeddings,
-                tokenUsageFrom(response.usage())
-        );
+        return Response.from(embeddings, tokenUsageFrom(response.usage()));
     }
 
     @Override
@@ -294,8 +290,7 @@ public OpenAiEmbeddingModel build() {
                     this.logRequests,
                     this.logResponses,
                     this.tokenizer,
-                    this.customHeaders
-            );
+                    this.customHeaders);
         }
 
         @Override
