[
    {
        "title": "Support anyOf in JSON schema (#2081)"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "<!--\r\nThank you so much for your contribution!\r\n\r\nPlease fill in all the sections below.\r\nPlease open the PR as a draft initially. Once it is reviewed and approved, we will ask you to add documentation and examples.\r\nPlease note that PRs with breaking changes or without tests will be rejected.\r\n\r\nPlease note that PRs will be reviewed based on the priority of the issues they address.\r\nWe ask for your patience. We are doing our best to review your PR as quickly as possible.\r\nPlease refrain from pinging and asking when it will be reviewed. Thank you for understanding!\r\n-->\r\n\r\n## Issue\r\n<!-- Please specify the ID of the issue this PR is addressing. For example: \"Closes #1234\" or \"Fixes #1234\" -->\r\nCloses https://github.com/langchain4j/langchain4j/issues/2081\r\n\r\n## Change\r\n<!-- Please describe the changes you made. -->\r\nI have created a pull request in `dev.ai4j.openai4j` which adds `anyOf` support to the openai client https://github.com/ai-for-java/openai4j/pull/45. This change needs to be merged before pull request in this repo.\r\n\r\nI have added `JsonAnyOfSchema` as a new implementation of `JsonSchemaElement` to support `anyOf` spec for json schema while using structured outputs. \r\n\r\n\r\n## General checklist\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [X] There are no breaking changes\r\n- [X] I have added unit and integration tests for my change\r\n- [ ] I have manually run all the unit and integration tests in the module I have added/changed, and they are all green\r\n- [ ] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules, and they are all green\r\n<!-- Before adding documentation and example(s) (below), please wait until the PR is reviewed and approved. -->\r\n- [ ] I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs)\r\n- [ ] I have added an example in the [examples repo](https://github.com/langchain4j/langchain4j-examples) (only for \"big\" features)\r\n- [ ] I have added/updated [Spring Boot starter(s)](https://github.com/langchain4j/langchain4j-spring) (if applicable)\r\n\r\n\r\n## Checklist for adding new maven module\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have added my new module in the root `pom.xml` and `langchain4j-bom/pom.xml`\r\n\r\n\r\n## Checklist for adding new embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have added a `{NameOfIntegration}EmbeddingStoreIT` that extends from either `EmbeddingStoreIT` or `EmbeddingStoreWithFilteringIT`\r\n- [ ] I have added a `{NameOfIntegration}EmbeddingStoreRemovalIT` that extends from `EmbeddingStoreWithRemovalIT`\r\n\r\n## Checklist for changing existing embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have manually verified that the `{NameOfIntegration}EmbeddingStore` works correctly with the data persisted using the latest released version of LangChain4j\r\n"
    },
    {
        "author": null,
        "body": "@MarekSvatos, thanks a lot, good job!\r\n\r\nIt would be fantastic to also support this on the AI Service level. Any ideas how to make it work?"
    },
    {
        "author": {
            "login": "MarekSvatos"
        },
        "body": ""
    },
    {
        "author": null,
        "body": "@MarekSvatos thanks a lot!"
    },
    {
        "author": null,
        "body": "@MarekSvatos thank you!\r\nI have merged https://github.com/ai-for-java/openai4j/pull/45 and released `openai4j` 0.24.0"
    },
    {
        "author": {
            "login": "MarekSvatos"
        },
        "body": "> @MarekSvatos thank you! I have merged [ai-for-java/openai4j#45](https://github.com/ai-for-java/openai4j/pull/45) and released `openai4j` 0.24.0\r\n\r\nI have updated the version in this pull request. https://github.com/langchain4j/langchain4j/pull/2148/commits/7ab89c05b4e4ac1f025331c631b6f1654ec09e9f"
    },
    {
        "author": {
            "login": "MarekSvatos"
        },
        "body": "> @MarekSvatos, thanks a lot, good job!\r\n> \r\n> It would be fantastic to also support this on the AI Service level. Any ideas how to make it work?\r\n\r\nI think it could be solved by using Jackson. Applying `@JsonTypeInfo` + `@JsonSubTypes` annotations is a common way to deal with polymorphic serialization/deserialization. Example is included in my test.\r\n\r\nUser would have to \r\n\r\n1. Create an interface and its subtypes\r\n2. Annotate the interface accordingly \r\n\r\nLangchain4j would have to\r\n\r\n1. When interface is part of the pojo(as a field or an array) scan for its `@JsonSubTypes` annotation and collect possible subtypes\r\n2. For each subtype create corresponding `JsonSchema` and add them all to `JsonAnyOfSchema`\r\n3. Deserialization should work out of the box"
    }
]