[
    {
        "title": "Remove Lombok in LC4J-mistral-ai"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Issue\r\nContributes to https://github.com/langchain4j/langchain4j/issues/1636\r\n\r\n## Change\r\nRemove Lombok in LC4J-mistral-ai\r\n\r\n    Replaced Lombok annotations with manual builder methods for better control and readability.\r\n\r\n\r\n## General checklist\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [X] There are no breaking changes\r\n- [ ] I have added unit and integration tests for my change\r\n- [ ] I have manually run all the unit and integration tests in the module I have added/changed, and they are all green\r\n- [ ] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules, and they are all green\r\n<!-- Before adding documentation and example(s) (below), please wait until the PR is reviewed and approved. -->\r\n- [ ] I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs)\r\n- [ ] I have added an example in the [examples repo](https://github.com/langchain4j/langchain4j-examples) (only for \"big\" features)\r\n- [ ] I have added/updated [Spring Boot starter(s)](https://github.com/langchain4j/langchain4j-spring) (if applicable)\r\n\r\n\r\n## Checklist for adding new maven module\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have added my new module in the root `pom.xml` and `langchain4j-bom/pom.xml`\r\n\r\n\r\n## Checklist for adding new embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have added a `{NameOfIntegration}EmbeddingStoreIT` that extends from either `EmbeddingStoreIT` or `EmbeddingStoreWithFilteringIT`\r\n- [ ] I have added a `{NameOfIntegration}EmbeddingStoreRemovalIT` that extends from `EmbeddingStoreWithRemovalIT`\r\n\r\n## Checklist for changing existing embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have manually verified that the `{NameOfIntegration}EmbeddingStore` works correctly with the data persisted using the latest released version of LangChain4j\r\n"
    },
    {
        "author": {
            "login": "kpavlov"
        },
        "body": "Thank you, @ehsavoie \r\nI have couple of questions:\r\n1. ApiKeys should be masked or not included in toString\r\n2. Messages might need masking\r\n3. Is it possible to get rid of `SuppressWarnings(\"all\") `, as it might hide real issues."
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "czelabueno"
        },
        "body": "Hi @ehsavoie,\r\nAs the maintainer of this integration, I wanted to thank you for contributing to this PR. I've left you some feedback/suggestions, mostly decorative and stylistic, that could help us make it more maintainable and readable for future features.\r\n\r\nI think that once fix them we could merge it.\r\n\r\ncc: @langchain4j \r\n\r\nThanks"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "czelabueno"
        },
        "body": ""
    },
    {
        "author": {
            "login": "czelabueno"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": ""
    },
    {
        "author": {
            "login": "czelabueno"
        },
        "body": "Hi @ehsavoie , thanks for the last changes, however still pending to format builder pattern properly in most api classes. Please, in general apply this changes:\r\n\r\n**Package  `../internal/api`:**\r\n\r\n1. All POJOs under this folder must use _builder pattern_ without exception. Pending to add to some of them.  \r\n2. A public generic constructor is not required when using the _builder pattern_. Use a private constructor and the _builder_ class must be a parameter. Instantiate the API classes without _builder_ should not be allowed. For example:\r\n```java\r\nprivate  MistralAiChatCompletionRequest(Builder builder) {\r\n       this.model = builder.model;\r\n       this.messages = builder.messages;\r\n      // rest of fields here\r\n }\r\n```\r\n3. It's not needed to override `toString()` in _Builder_ static classes.\r\n4. Override `toString()` method must be formatted properly for all API classes. You can use `StringJoiner` to standard only one way to do it. For example:\r\n```java\r\n@Override\r\npublic String toString() {\r\n    return new StringJoiner(\", \", MistralAiChatCompletionRequest.class.getSimpleName() + \"[\", \"]\")\r\n            .add(\"model='\" + model + \"'\")\r\n            .add(\"messages='\" + messages + \"'\")\r\n            // more fields\r\n            .toString();\r\n  }\r\n```\r\n5. Remove `toBuilder()` method of POJOs. `builder()` is enough.\r\n\r\n**Package `mistralai`:**\r\n\r\nOk\r\n\r\n**Package `../internal/client`:**\r\n\r\nOk\r\n\r\nthanks!"
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@ehsavoie thanks a lot, great job!"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "I should have fixed all your comments :)"
    },
    {
        "author": {
            "login": "kpavlov"
        },
        "body": "Tnahk you, @ehsavoie , LGTM"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "@langchain4j I should have addressed your remarks"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok dependency might break code that was relying on Lombok generated methods or annotations directly.\n-  The builder pattern is now implemented manually, which might have subtle differences compared to Lombok's implementation.\n\n\n#### Potential Design Issues\n-  Manual implementation of builder pattern increases the amount of boilerplate code.\n-  The manual builder pattern implementation might not be as flexible as Lombok's implementation.\n\n\n#### Potential Bugs\n-  Manual implementation of builder pattern might introduce bugs if not implemented correctly.\n-  The removal of Lombok might expose hidden bugs that were previously masked by Lombok's code generation.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid API key and model name are used\n  - When: The chat model is called with a valid list of messages\n  - Then: The chat model should return a valid chat response\n\n-\n  - Given: A valid API key and model name are used\n  - When: The embedding model is called with a valid text\n  - Then: The embedding model should return a valid embedding\n\n-\n  - Given: A valid API key and model name are used with streaming\n  - When: The streaming chat model is called with a valid list of messages\n  - Then: The streaming chat model should return a valid stream of chat responses\n\n-\n  - Given: A valid API key and model name are used with function calling\n  - When: The chat model is called with a valid list of messages and a function specification\n  - Then: The chat model should return a valid function call\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid API key is used\n  - When: The chat or embedding model is called with an invalid API key\n  - Then: The model should return an authentication error\n\n-\n  - Given: An invalid model name is used\n  - When: The chat or embedding model is called with an invalid model name\n  - Then: The model should return an error indicating that the model is not found\n\n-\n  - Given: The API rate limit is exceeded\n  - When: The chat or embedding model is called too frequently\n  - Then: The model should return a rate limit error\n\n-\n  - Given: An invalid response format is requested\n  - When: The chat model is called with an invalid response format\n  - Then: The model should return an error indicating that the response format is not supported\n\n-\n  - Given: A timeout occurs during the API call\n  - When: The API call takes longer than the configured timeout\n  - Then: The model should throw a timeout exception\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A very large number of messages are sent to the chat model\n  - When: The chat model is called with a list of messages exceeding the typical use case\n  - Then: The model should handle the large input without crashing or timing out, and return a valid response\n\n-\n  - Given: A very large text is sent to the embedding model\n  - When: The embedding model is called with a text exceeding the typical use case\n  - Then: The model should handle the large input without crashing or timing out, and return a valid embedding\n\n-\n  - Given: A very small text is sent to the embedding model\n  - When: The embedding model is called with a very short text\n  - Then: The model should handle the small input and return a valid embedding\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok annotations might break code that relies on Lombok-generated methods. Although the PR replaces Lombok with manual builder methods, any code that directly used Lombok-generated methods (e.g., getters, setters, constructors) will break.\n\n\n#### Potential Design Issues\n-  The manual implementation of builder pattern increases the boilerplate code and might make the code less readable compared to Lombok's concise annotations.\n\n\n#### Potential Bugs\n-  Manual implementation of builder pattern might introduce bugs if not implemented correctly. For example, missing null checks or incorrect parameter assignments.\n-  The removal of Lombok might lead to inconsistencies in the generated code if the manual implementation is not identical to Lombok's output.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A MistralAiChatModel with valid parameters.\n  - When: Generating a chat completion with this model.\n  - Then: The model should produce a valid chat completion response.\n\n-\n  - Given: A MistralAiEmbeddingModel with valid parameters.\n  - When: Generating an embedding with this model.\n  - Then: The model should produce a valid embedding response.\n\n-\n  - Given: A MistralAiStreamingChatModel with valid parameters.\n  - When: Generating a streaming chat completion with this model.\n  - Then: The model should produce a valid streaming chat completion response.\n\n-\n  - Given: A MistralAiModels with valid parameters.\n  - When: Retrieving available models with this model.\n  - Then: The model should produce a valid list of available models.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A MistralAiChatModel with an invalid API key.\n  - When: Generating a chat completion with this model.\n  - Then: The model should throw an authentication error.\n\n-\n  - Given: A MistralAiChatModel with an invalid model name.\n  - When: Generating a chat completion with this model.\n  - Then: The model should throw an error indicating that the model is not found.\n\n-\n  - Given: A MistralAiChatModel with a negative maxTokens value.\n  - When: Creating a MistralAiChatModel with a negative maxTokens value.\n  - Then: The model should throw an IllegalArgumentException.\n\n-\n  - Given: A MistralAiEmbeddingModel with an empty text segment.\n  - When: Generating an embedding with this model.\n  - Then: The model should throw an IllegalArgumentException.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A MistralAiChatModel with all parameters set to their maximum or minimum values.\n  - When: Generating a chat completion with this model.\n  - Then: The model should handle these extreme values without errors and produce a response.\n\n-\n  - Given: A MistralAiChatModel with a very large number of messages.\n  - When: Generating a chat completion with this model.\n  - Then: The model should handle the large number of messages without errors and produce a response.\n\n-\n  - Given: A MistralAiEmbeddingModel with a very large text segment.\n  - When: Generating an embedding with this model.\n  - Then: The model should handle the large text segment without errors and produce an embedding.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok dependency might require manual creation of builder classes in client code if they were relying on Lombok generated builders.\n\n\n#### Potential Design Issues\n-  The manual builder pattern introduces more boilerplate code compared to Lombok, which might make the code less concise.\n-  The manual builder pattern might be less maintainable if the number of parameters increases significantly in the future.\n\n\n#### Potential Bugs\n-  Manual builder implementations might introduce subtle bugs if not implemented correctly, such as missing parameters or incorrect default values.\n-  Changes in the builder pattern might lead to unexpected behavior if the client code relies on the previous Lombok generated builder methods.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid API key and model name\n  - When: Generating a chat completion\n  - Then: The model should return a valid chat completion\n\n-\n  - Given: A valid API key and model name\n  - When: Generating embeddings\n  - Then: The model should return valid embeddings\n\n-\n  - Given: A valid API key and model name\n  - When: Generating a streaming chat completion\n  - Then: The model should stream a valid chat completion\n\n-\n  - Given: A valid API key and model name with tool specifications\n  - When: Generating a chat completion with tools\n  - Then: The model should return a valid chat completion with tool calls\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid API key\n  - When: Making any API call\n  - Then: The model should throw an authentication error\n\n-\n  - Given: An invalid model name\n  - When: Making any API call\n  - Then: The model should throw an error indicating that the model is not found\n\n-\n  - Given: An invalid response format\n  - When: Generating a chat completion\n  - Then: The model should throw an error indicating that the response format is not supported\n\n-\n  - Given: A request that exceeds the maximum token limit\n  - When: Generating a chat completion or embeddings\n  - Then: The model should throw an error indicating that the token limit has been exceeded\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A MistralAiChatModel with all parameters set to their maximum or minimum values\n  - When: Generating a chat completion\n  - Then: The model should still function correctly and return a valid response\n\n-\n  - Given: A MistralAiEmbeddingModel with very long input text\n  - When: Generating embeddings\n  - Then: The model should handle the long text without errors and return valid embeddings\n\n-\n  - Given: A MistralAiStreamingChatModel with a very slow network connection\n  - When: Generating a streaming chat completion\n  - Then: The model should handle the slow connection gracefully and still stream the response\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok annotations might break code that directly uses the generated builder methods.\n-  The constructors of the models are changed, which might break code that uses reflection to instantiate the models.\n\n\n#### Potential Design Issues\n-  The removal of Lombok might increase the amount of boilerplate code.\n-  The manual builder pattern might be less readable than the Lombok generated one.\n\n\n#### Potential Bugs\n-  Manual builder methods might introduce errors if not implemented correctly.\n-  The new builder pattern might not handle default values correctly.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid API key and model name.\n  - When: Generating a chat completion.\n  - Then: The model should successfully generate a chat completion.\n\n-\n  - Given: A valid API key and model name.\n  - When: Generating an embedding.\n  - Then: The model should successfully generate an embedding.\n\n-\n  - Given: A valid API key and model name.\n  - When: Listing available models.\n  - Then: The model should successfully list available models.\n\n-\n  - Given: A valid API key and model name.\n  - When: Generating a streaming chat completion.\n  - Then: The model should successfully stream a chat completion.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid API key.\n  - When: Making any API call.\n  - Then: The model should throw an authentication error.\n\n-\n  - Given: An invalid model name.\n  - When: Making any API call.\n  - Then: The model should throw an error indicating that the model is not found.\n\n-\n  - Given: A timeout duration that is too short.\n  - When: Making any API call.\n  - Then: The model should throw a timeout exception.\n\n-\n  - Given: An empty list of messages.\n  - When: Generating a chat completion.\n  - Then: The model should throw an IllegalArgumentException.\n\n-\n  - Given: An invalid response format.\n  - When: Generating a chat completion.\n  - Then: The model should throw an exception.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A MistralAiChatModel with all parameters set to their maximum or minimum values.\n  - When: Generating a chat completion.\n  - Then: The model should handle these extreme values without errors and produce a response.\n\n-\n  - Given: A MistralAiChatModel with a very large number of messages.\n  - When: Generating a chat completion.\n  - Then: The model should handle the large number of messages without errors and produce a response.\n\n-\n  - Given: A MistralAiEmbeddingModel with a very large text segment.\n  - When: Generating an embedding.\n  - Then: The model should handle the large text segment without errors and produce an embedding.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok annotations might break code that relies on Lombok-generated methods. Although the PR replaces Lombok with manual builder methods, any code that directly used Lombok-generated methods (e.g., getters, setters, constructors) will need to be updated.\n\n\n#### Potential Design Issues\n-  The manual implementation of builder methods increases the amount of boilerplate code. This might make the code harder to maintain and less readable compared to using Lombok.\n\n\n#### Potential Bugs\n-  Manual implementation of builder methods might introduce bugs if not implemented correctly. For example, missing null checks or incorrect parameter assignments.\n-  The removal of Lombok might expose existing bugs that were previously masked by Lombok's code generation. For example, if there were any issues with the generated equals, hashCode, or toString methods, these might now be exposed.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid API key and model name\n  - When: Generating a chat completion\n  - Then: The model should successfully generate a chat completion\n\n-\n  - Given: A valid API key and model name\n  - When: Generating embeddings\n  - Then: The model should successfully generate embeddings\n\n-\n  - Given: A valid API key and model name\n  - When: Generating a streaming chat completion\n  - Then: The model should successfully stream a chat completion\n\n-\n  - Given: A valid API key and model name\n  - When: Retrieving available models\n  - Then: The model should successfully retrieve available models\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid API key\n  - When: Making any API call\n  - Then: The model should throw an authentication error\n\n-\n  - Given: An invalid model name\n  - When: Making any API call\n  - Then: The model should throw an error indicating that the model is not found\n\n-\n  - Given: An empty list of chat messages\n  - When: Generating a chat completion\n  - Then: The model should throw an IllegalArgumentException\n\n-\n  - Given: A timeout duration set to 0\n  - When: Making any API call\n  - Then: The model should throw an exception or handle the timeout gracefully\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A MistralAiChatModel with all parameters set to their maximum or minimum values\n  - When: Generating a chat completion\n  - Then: The model should handle these extreme values without errors and produce a valid response\n\n-\n  - Given: A MistralAiEmbeddingModel with very long input text segments\n  - When: Generating embeddings\n  - Then: The model should handle these long segments without errors and produce valid embeddings\n\n-\n  - Given: A MistralAiStreamingChatModel with a very slow network connection\n  - When: Generating a streaming chat completion\n  - Then: The model should handle the slow connection gracefully and stream the response without errors\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "@czelabueno I've addressed your comments I hope :)"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok dependency might require manual creation of builder classes in client code if they were relying on Lombok generated builders.\n\n\n#### Potential Design Issues\n-  The removal of Lombok might increase the boilerplate code and reduce readability in some cases.\n\n\n#### Potential Bugs\n-  Manual builder implementations might introduce subtle bugs if not implemented correctly, such as missing null checks or incorrect default values.\n-  The manual implementation of equals and hashCode methods in the DTOs might introduce bugs if not implemented correctly.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A MistralAiChatModel with valid parameters.\n  - When: Generating a chat completion with the model.\n  - Then: The model should produce a valid chat completion response.\n\n-\n  - Given: A MistralAiEmbeddingModel with valid parameters.\n  - When: Generating an embedding with the model.\n  - Then: The model should produce a valid embedding response.\n\n-\n  - Given: A MistralAiStreamingChatModel with valid parameters.\n  - When: Generating a streaming chat completion with the model.\n  - Then: The model should produce a valid streaming chat completion response.\n\n-\n  - Given: A MistralAiModels with valid parameters.\n  - When: Calling availableModels method.\n  - Then: The model should return a list of available models.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A MistralAiChatModel with an invalid API key.\n  - When: Generating a chat completion with the model.\n  - Then: The model should throw an exception or return an error response.\n\n-\n  - Given: A MistralAiChatModel with an invalid model name.\n  - When: Generating a chat completion with the model.\n  - Then: The model should throw an exception or return an error response.\n\n-\n  - Given: A MistralAiChatModel with a negative maxTokens value.\n  - When: Generating a chat completion with the model.\n  - Then: The model should throw an exception or return an error response.\n\n-\n  - Given: A MistralAiEmbeddingModel with an invalid API key.\n  - When: Generating an embedding with the model.\n  - Then: The model should throw an exception or return an error response.\n\n-\n  - Given: A MistralAiEmbeddingModel with an invalid model name.\n  - When: Generating an embedding with the model.\n  - Then: The model should throw an exception or return an error response.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A MistralAiChatModel with all parameters set to their maximum or minimum values.\n  - When: Generating a chat completion with the model.\n  - Then: The model should handle these extreme values without errors and produce a response.\n\n-\n  - Given: A MistralAiChatModel with a very large number of messages.\n  - When: Generating a chat completion with the model.\n  - Then: The model should handle the large number of messages without errors and produce a response.\n\n-\n  - Given: A MistralAiEmbeddingModel with a very large text segment.\n  - When: Generating an embedding with the model.\n  - Then: The model should handle the large text segment without errors and produce an embedding.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "@czelabueno what about classes like MistralCategoryScores which don't have builder pattern nor lombok in them ?"
    },
    {
        "author": {
            "login": "czelabueno"
        },
        "body": "@ehsavoie good point, would be great if you can add the builder pattern and standard them (Categories and moderation classes...) like rest of API classes"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "@czelabueno all should be ok now, I've squashed everything and used the builder mode for the api package"
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@ehsavoie thank you! All the tests are failing though. For example `MistralAiChatModelIT.should_generate_answer_and_return_token_usage_and_finish_reason_stop`:\r\n\r\n```\r\n2025-01-28 11:24:45 [main] dev.langchain4j.model.mistralai.internal.client.MistralAiRequestLoggingInterceptor.log()\r\nDEBUG: Request:\r\n- method: POST\r\n- url: https://api.mistral.ai/v1/chat/completions\r\n- headers: [Authorization: Bearer go...sC]\r\n- body: {\r\n  \"model\" : \"open-mistral-7b\",\r\n  \"messages\" : [ {\r\n    \"role\" : \"user\",\r\n    \"content\" : \"What is the capital of Peru?\"\r\n  } ],\r\n  \"temperature\" : 0.1,\r\n  \"stream\" : false\r\n}\r\n2025-01-28 11:24:46 [main] dev.langchain4j.model.mistralai.internal.client.MistralAiResponseLoggingInterceptor.log()\r\nDEBUG: Response:\r\n- status code: 200\r\n- headers: [date: Tue, 28 Jan 2025 10:24:47 GMT], [content-type: application/json], [x-ratelimitbysize-remaining-minute: 559353], [ratelimitbysize-reset: 14], [ratelimitbysize-remaining: 559353], [x-ratelimitbysize-limit-minute: 2000000], [x-ratelimitbysize-remaining-month: 9941939516], [ratelimitbysize-query-cost: 32008], [ratelimitbysize-limit: 2000000], [x-ratelimitbysize-limit-month: 10000000000], [x-envoy-upstream-service-time: 548], [access-control-allow-origin: *], [x-kong-upstream-latency: 549], [x-kong-proxy-latency: 1], [x-kong-request-id: 54940c3c51e0b75cca54ec4e84e7fd0c], [cf-cache-status: DYNAMIC], [set-cookie: __cf_bm=W6jgrclbHfYKWd4eJr0CEQ07ahM8H1ZfOQcYp98_Y4w-1738059887-1.0.1.1-6xXtT_vinvVciGe7kMUwwdFd3b9Zk19Inq9yCdLHAbj2Brf1k5AmBulGfaICFOuYkEHJxVlFWDNCeSQiq2CuSQ; path=/; expires=Tue, 28-Jan-25 10:54:47 GMT; domain=.mistral.ai; HttpOnly; Secure; SameSite=None], [server: cloudflare], [cf-ray: 909046550ddffddc-MUC], [alt-svc: h3=\":443\"; ma=86400]\r\n- body: {\"id\":\"19ebd77682cf4b509ce8215010b54118\",\"object\":\"chat.completion\",\"created\":1738059886,\"model\":\"open-mistral-7b\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"tool_calls\":null,\"content\":\"The capital of Peru is Lima. It's located on the central western coast of the country and is one of the largest cities in South America. Lima was founded in 1535 by Spanish conquistador Francisco Pizarro and has served as the capital of Peru ever since. The city is known for its rich history, colonial architecture, and vibrant culture.\"},\"finish_reason\":\"stop\"}],\"usage\":{\"prompt_tokens\":10,\"total_tokens\":88,\"completion_tokens\":78}}\r\n2025-01-28 11:24:46 [main] dev.langchain4j.internal.RetryUtils$RetryPolicy.withRetry()\r\nWARN: Exception was thrown on attempt 1 of 3: java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\tat dev.langchain4j.model.mistralai.internal.client.DefaultMistralAiClient.chatCompletion(DefaultMistralAiClient.java:89)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.lambda$generate$0(MistralAiChatModel.java:172)\r\n\tat dev.langchain4j.internal.RetryUtils$RetryPolicy.withRetry(RetryUtils.java:192)\r\n\tat dev.langchain4j.internal.RetryUtils.withRetry(RetryUtils.java:229)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.generate(MistralAiChatModel.java:172)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.generate(MistralAiChatModel.java:114)\r\n\tat dev.langchain4j.model.chat.ChatLanguageModel.generate(ChatLanguageModel.java:165)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModelIT.should_generate_answer_and_return_token_usage_and_finish_reason_stop(MistralAiChatModelIT.java:69)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)\r\n\tat org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)\r\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)\r\n\tat com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1888)\r\n\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1375)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1512)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:348)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\r\n\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2125)\r\n\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1533)\r\n\tat retrofit2.converter.jackson.JacksonResponseBodyConverter.convert(JacksonResponseBodyConverter.java:33)\r\n\tat retrofit2.converter.jackson.JacksonResponseBodyConverter.convert(JacksonResponseBodyConverter.java:23)\r\n\tat retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243)\r\n\tat retrofit2.OkHttpCall.execute(OkHttpCall.java:204)\r\n\tat dev.langchain4j.model.mistralai.internal.client.DefaultMistralAiClient.chatCompletion(DefaultMistralAiClient.java:82)\r\n\t... 75 more\r\n2025-01-28 11:24:47 [main] dev.langchain4j.model.mistralai.internal.client.MistralAiRequestLoggingInterceptor.log()\r\nDEBUG: Request:\r\n- method: POST\r\n- url: https://api.mistral.ai/v1/chat/completions\r\n- headers: [Authorization: Bearer go...sC]\r\n- body: {\r\n  \"model\" : \"open-mistral-7b\",\r\n  \"messages\" : [ {\r\n    \"role\" : \"user\",\r\n    \"content\" : \"What is the capital of Peru?\"\r\n  } ],\r\n  \"temperature\" : 0.1,\r\n  \"stream\" : false\r\n}\r\n2025-01-28 11:24:47 [main] dev.langchain4j.model.mistralai.internal.client.MistralAiResponseLoggingInterceptor.log()\r\nDEBUG: Response:\r\n- status code: 200\r\n- headers: [date: Tue, 28 Jan 2025 10:24:48 GMT], [content-type: application/json], [ratelimitbysize-limit: 2000000], [ratelimitbysize-remaining: 559353], [x-ratelimitbysize-remaining-month: 9941939518], [ratelimitbysize-reset: 12], [ratelimitbysize-query-cost: 32008], [x-ratelimitbysize-limit-minute: 2000000], [x-ratelimitbysize-limit-month: 10000000000], [x-ratelimitbysize-remaining-minute: 559353], [x-envoy-upstream-service-time: 518], [access-control-allow-origin: *], [x-kong-upstream-latency: 519], [x-kong-proxy-latency: 0], [x-kong-request-id: fdac3d3c3a92226856551b0a92ec9704], [cf-cache-status: DYNAMIC], [set-cookie: __cf_bm=xTfnTYAu0ZqZAWzynu3EA1FGOku.7bU2P9mfApQb3TA-1738059888-1.0.1.1-YHZ5rb_bEi1ZQwJaJL4pDOBN8071b.iHUklwkKnYuj5YajApy7DOodxm76DV_vUeEZH8UuuJ7DIIC9KBrr3SIA; path=/; expires=Tue, 28-Jan-25 10:54:48 GMT; domain=.mistral.ai; HttpOnly; Secure; SameSite=None], [server: cloudflare], [cf-ray: 9090465c3ff2fddc-MUC], [alt-svc: h3=\":443\"; ma=86400]\r\n- body: {\"id\":\"27c4d80dfb0f4f048673c44cd92fc12d\",\"object\":\"chat.completion\",\"created\":1738059888,\"model\":\"open-mistral-7b\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"tool_calls\":null,\"content\":\"The capital of Peru is Lima. It's located on the central coast of the country and is one of the largest cities in South America. Lima was founded in 1535 by Spanish conquistador Francisco Pizarro and has served as the capital of Peru ever since. The city is known for its rich history, colonial architecture, and vibrant culture.\"},\"finish_reason\":\"stop\"}],\"usage\":{\"prompt_tokens\":10,\"total_tokens\":87,\"completion_tokens\":77}}\r\n2025-01-28 11:24:47 [main] dev.langchain4j.internal.RetryUtils$RetryPolicy.withRetry()\r\nWARN: Exception was thrown on attempt 2 of 3: java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\tat dev.langchain4j.model.mistralai.internal.client.DefaultMistralAiClient.chatCompletion(DefaultMistralAiClient.java:89)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.lambda$generate$0(MistralAiChatModel.java:172)\r\n\tat dev.langchain4j.internal.RetryUtils$RetryPolicy.withRetry(RetryUtils.java:192)\r\n\tat dev.langchain4j.internal.RetryUtils.withRetry(RetryUtils.java:229)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.generate(MistralAiChatModel.java:172)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.generate(MistralAiChatModel.java:114)\r\n\tat dev.langchain4j.model.chat.ChatLanguageModel.generate(ChatLanguageModel.java:165)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModelIT.should_generate_answer_and_return_token_usage_and_finish_reason_stop(MistralAiChatModelIT.java:69)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\r\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)\r\n\tat org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)\r\n\tat org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)\r\n\tat com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1888)\r\n\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1375)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1512)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:348)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\r\n\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2125)\r\n\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1533)\r\n\tat retrofit2.converter.jackson.JacksonResponseBodyConverter.convert(JacksonResponseBodyConverter.java:33)\r\n\tat retrofit2.converter.jackson.JacksonResponseBodyConverter.convert(JacksonResponseBodyConverter.java:23)\r\n\tat retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243)\r\n\tat retrofit2.OkHttpCall.execute(OkHttpCall.java:204)\r\n\tat dev.langchain4j.model.mistralai.internal.client.DefaultMistralAiClient.chatCompletion(DefaultMistralAiClient.java:82)\r\n\t... 75 more\r\n2025-01-28 11:24:48 [main] dev.langchain4j.model.mistralai.internal.client.MistralAiRequestLoggingInterceptor.log()\r\nDEBUG: Request:\r\n- method: POST\r\n- url: https://api.mistral.ai/v1/chat/completions\r\n- headers: [Authorization: Bearer go...sC]\r\n- body: {\r\n  \"model\" : \"open-mistral-7b\",\r\n  \"messages\" : [ {\r\n    \"role\" : \"user\",\r\n    \"content\" : \"What is the capital of Peru?\"\r\n  } ],\r\n  \"temperature\" : 0.1,\r\n  \"stream\" : false\r\n}\r\n2025-01-28 11:24:49 [main] dev.langchain4j.model.mistralai.internal.client.MistralAiResponseLoggingInterceptor.log()\r\nDEBUG: Response:\r\n- status code: 200\r\n- headers: [date: Tue, 28 Jan 2025 10:24:50 GMT], [content-type: application/json], [x-ratelimitbysize-remaining-month: 9941875503], [x-ratelimitbysize-limit-minute: 2000000], [x-ratelimitbysize-remaining-minute: 495337], [ratelimitbysize-reset: 11], [ratelimitbysize-remaining: 495337], [ratelimitbysize-query-cost: 32008], [ratelimitbysize-limit: 2000000], [x-ratelimitbysize-limit-month: 10000000000], [x-envoy-upstream-service-time: 507], [access-control-allow-origin: *], [x-kong-upstream-latency: 508], [x-kong-proxy-latency: 1], [x-kong-request-id: 55fa9b6f3ac0b66310f311251dbf7e40], [cf-cache-status: DYNAMIC], [set-cookie: __cf_bm=O91n7kM.nXPtHxrK9AfcnqkHwfaS7AfXydww_Oog_4Q-1738059890-1.0.1.1-FiaLizuUkHwPYDgT1brZdcVPOMeLIby0d29NGYgNSJSIxA3WMhwfA2PNWmSf8O_r3.zq2bs.vby6ZCTQsPfpBw; path=/; expires=Tue, 28-Jan-25 10:54:50 GMT; domain=.mistral.ai; HttpOnly; Secure; SameSite=None], [server: cloudflare], [cf-ray: 909046653a5efddc-MUC], [alt-svc: h3=\":443\"; ma=86400]\r\n- body: {\"id\":\"2a4ac84a1a3a4c438adb592550357dc3\",\"object\":\"chat.completion\",\"created\":1738059889,\"model\":\"open-mistral-7b\",\"choices\":[{\"index\":0,\"message\":{\"role\":\"assistant\",\"tool_calls\":null,\"content\":\"The capital of Peru is Lima. It's located on the central coast of Peru and is one of the largest cities in South America. Lima was founded by Spanish conquistador Francisco Pizarro in 1535 and has served as the capital of Peru since then. The city is known for its rich history, colonial architecture, and vibrant culture.\"},\"finish_reason\":\"stop\"}],\"usage\":{\"prompt_tokens\":10,\"total_tokens\":86,\"completion_tokens\":76}}\r\n\r\njava.lang.RuntimeException: java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\r\n\tat dev.langchain4j.internal.RetryUtils$RetryPolicy.withRetry(RetryUtils.java:195)\r\n\tat dev.langchain4j.internal.RetryUtils.withRetry(RetryUtils.java:229)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.generate(MistralAiChatModel.java:172)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.generate(MistralAiChatModel.java:114)\r\n\tat dev.langchain4j.model.chat.ChatLanguageModel.generate(ChatLanguageModel.java:165)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModelIT.should_generate_answer_and_return_token_usage_and_finish_reason_stop(MistralAiChatModelIT.java:69)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1596)\r\nCaused by: java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\tat dev.langchain4j.model.mistralai.internal.client.DefaultMistralAiClient.chatCompletion(DefaultMistralAiClient.java:89)\r\n\tat dev.langchain4j.model.mistralai.MistralAiChatModel.lambda$generate$0(MistralAiChatModel.java:172)\r\n\tat dev.langchain4j.internal.RetryUtils$RetryPolicy.withRetry(RetryUtils.java:192)\r\n\t... 8 more\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `dev.langchain4j.model.mistralai.internal.api.MistralAiChatCompletionResponse` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 2]\r\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1888)\r\n\tat com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1375)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1512)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:348)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)\r\n\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2125)\r\n\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1533)\r\n\tat retrofit2.converter.jackson.JacksonResponseBodyConverter.convert(JacksonResponseBodyConverter.java:33)\r\n\tat retrofit2.converter.jackson.JacksonResponseBodyConverter.convert(JacksonResponseBodyConverter.java:23)\r\n\tat retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:243)\r\n\tat retrofit2.OkHttpCall.execute(OkHttpCall.java:204)\r\n\tat dev.langchain4j.model.mistralai.internal.client.DefaultMistralAiClient.chatCompletion(DefaultMistralAiClient.java:82)\r\n\t... 10 more\r\n\r\n```\r\n"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "ok, so it looks like those default constructor were required after all ;)"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok dependency might break existing code that relies on Lombok annotations for building objects. Users will now need to use the builder methods provided manually.\n\n\n#### Potential Design Issues\n-  The manual builder pattern might be more verbose and less readable than Lombok annotations, potentially making the code harder to maintain.\n-  The manual builder pattern might lead to inconsistencies in how objects are built across the codebase if not implemented uniformly.\n\n\n#### Potential Bugs\n-  Manual builder methods might introduce bugs if not implemented correctly, such as missing parameters or incorrect default values.\n-  The removal of Lombok might expose hidden bugs related to object creation and immutability that were previously handled by Lombok.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: Valid messages are sent to the chat model\n  - When: The chat model is called with a list of valid messages\n  - Then: The model should return a valid response\n\n-\n  - Given: Valid text segments are sent to the embedding model\n  - When: The embedding model is called with a list of valid text segments\n  - Then: The model should return a valid embedding\n\n-\n  - Given: Valid parameters are provided to the chat model\n  - When: The chat model is called with valid parameters\n  - Then: The model should return a valid response\n\n-\n  - Given: A valid API key is provided\n  - When: The chat or embedding model is initialized with a valid API key\n  - Then: The model should authenticate successfully\n\n-\n  - Given: A valid model name is provided\n  - When: The chat or embedding model is initialized with a valid model name\n  - Then: The model should initialize successfully\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid API key is provided\n  - When: The chat or embedding model is initialized with an invalid API key\n  - Then: The model should throw an authentication exception\n\n-\n  - Given: An invalid model name is provided\n  - When: The chat or embedding model is initialized with an invalid model name\n  - Then: The model should throw an exception indicating that the model is not found\n\n-\n  - Given: The API endpoint is not reachable\n  - When: The chat or embedding model is called when the API endpoint is not reachable\n  - Then: The model should throw a connection exception\n\n-\n  - Given: Invalid parameters are provided to the chat model\n  - When: The chat model is called with invalid parameters such as negative temperature or max tokens\n  - Then: The model should throw an exception indicating that the parameters are invalid\n\n-\n  - Given: The API returns an error response\n  - When: The chat or embedding model is called and the API returns an error response\n  - Then: The model should throw an exception indicating the error\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A very large number of messages are sent to the chat model\n  - When: The chat model is called with a list of messages exceeding a typical use case\n  - Then: The model should handle the large input without crashing or timing out, and return a valid response\n\n-\n  - Given: A very large text segment is sent to the embedding model\n  - When: The embedding model is called with a text segment exceeding a typical use case\n  - Then: The model should handle the large input without crashing or timing out, and return a valid embedding\n\n-\n  - Given: The API key is very long or contains special characters\n  - When: The chat or embedding model is initialized with a long or special character API key\n  - Then: The API key should be handled correctly without causing authentication issues\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "Hi @ehsavoie, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  Removal of Lombok dependency might break existing code that relies on Lombok annotations for building objects. Users will now need to use the builder methods provided manually.\n\n\n#### Potential Design Issues\n-  The manual builder pattern might be more verbose and less readable than Lombok annotations, potentially making the code harder to maintain.\n-  The manual builder pattern might lead to inconsistencies in how objects are built across the codebase if not implemented uniformly.\n\n\n#### Potential Bugs\n-  Manual builder methods might introduce bugs if not implemented correctly, such as missing parameters or incorrect default values.\n-  The removal of Lombok might expose hidden bugs related to object creation and immutability that were previously handled by Lombok.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: Valid messages are sent to the chat model\n  - When: The chat model is called with a list of valid messages\n  - Then: The model should return a valid response\n\n-\n  - Given: Valid text segments are sent to the embedding model\n  - When: The embedding model is called with a list of valid text segments\n  - Then: The model should return a valid embedding\n\n-\n  - Given: Valid parameters are provided to the chat model\n  - When: The chat model is called with valid parameters\n  - Then: The model should return a valid response\n\n-\n  - Given: A valid API key is provided\n  - When: The chat or embedding model is initialized with a valid API key\n  - Then: The model should authenticate successfully\n\n-\n  - Given: A valid model name is provided\n  - When: The chat or embedding model is initialized with a valid model name\n  - Then: The model should initialize successfully\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid API key is provided\n  - When: The chat or embedding model is initialized with an invalid API key\n  - Then: The model should throw an authentication exception\n\n-\n  - Given: An invalid model name is provided\n  - When: The chat or embedding model is initialized with an invalid model name\n  - Then: The model should throw an exception indicating that the model is not found\n\n-\n  - Given: The API endpoint is not reachable\n  - When: The chat or embedding model is called when the API endpoint is not reachable\n  - Then: The model should throw a connection exception\n\n-\n  - Given: Invalid parameters are provided to the chat model\n  - When: The chat model is called with invalid parameters such as negative temperature or max tokens\n  - Then: The model should throw an exception indicating that the parameters are invalid\n\n-\n  - Given: The API returns an error response\n  - When: The chat or embedding model is called and the API returns an error response\n  - Then: The model should throw an exception indicating the error\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A very large number of messages are sent to the chat model\n  - When: The chat model is called with a list of messages exceeding a typical use case\n  - Then: The model should handle the large input without crashing or timing out, and return a valid response\n\n-\n  - Given: A very large text segment is sent to the embedding model\n  - When: The embedding model is called with a text segment exceeding a typical use case\n  - Then: The model should handle the large input without crashing or timing out, and return a valid embedding\n\n-\n  - Given: The API key is very long or contains special characters\n  - When: The chat or embedding model is initialized with a long or special character API key\n  - Then: The API key should be handled correctly without causing authentication issues\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n"
    },
    {
        "author": {
            "login": "ehsavoie"
        },
        "body": "@dliubarskyi all should be fixed"
    }
]