[
    {
        "title": "Here is the MariaDB database store implementation."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Change\r\n\r\nPermit using MariaDB database store implementation.\r\nsee  https://mariadb.org/projects/mariadb-vector/ :)\r\n\r\n## General checklist\r\n- [X] There are no breaking changes\r\n- [X] I have added unit and/or integration tests for my change\r\n- [X] The tests cover both positive and negative cases\r\n- [X] I have manually run all the unit and integration tests in the module I have added/changed, and they are all green\r\n- [X] I have manually run all the unit and integration tests in the [core]\r\n- [x] I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs)\r\n- [ ] I have added an example in the [examples repo](https://github.com/langchain4j/langchain4j-examples) (only for \"big\" features)\r\n- [ ] I have added/updated [Spring Boot starter(s)](https://github.com/langchain4j/langchain4j-spring) (if applicable)\r\n\r\n\r\n## Checklist for adding new maven module\r\n- [X] I have added my new module in the root `pom.xml` and `langchain4j-bom/pom.xml`\r\n\r\n\r\n## Checklist for adding new embedding store integration\r\n- [X] I have added a `{NameOfIntegration}EmbeddingStoreIT` that extends from either `EmbeddingStoreIT` or `EmbeddingStoreWithFilteringIT`\r\n- [X] I have added a `{NameOfIntegration}EmbeddingStoreRemovalIT` that extends from `EmbeddingStoreWithRemovalIT`\r\n\r\n"
    },
    {
        "author": {
            "login": "kpavlov"
        },
        "body": "Thank you very much, @rusher\r\nWould it be possible to synchronize with main branch?\r\nI am sorry that there is no base JDBC embedding store to inherit from"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@rusher thank you!"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@rusher thank you!"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@rusher thanks a lot, great job!"
    },
    {
        "author": {
            "login": "kpavlov"
        },
        "body": "@langchain4j, would it make sense to have a generic `JdbcEmbeddingStore` or `AbstractJdbcEmbeddingStore` + maybe _jdbc-embedding-store_ maven module, so it would be possible to reuse some code and do not copy&paste everything in every relational database embedding store implementation?"
    },
    {
        "author": null,
        "body": "> @langchain4j, would it make sense to have a generic JdbcEmbeddingStore or AbstractJdbcEmbeddingStore + maybe jdbc-embedding-store maven module, so it would be possible to reuse some code and do not copy&paste everything in every relational database embedding store implementation?\r\n\r\nI am not sure, you can check PgVector, Oracle and MariaDB implementations and see if there is a lot that can be reused"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": "Resolved all reviews, but the pattern matching use recommendation, that I don't think is desirable to remain java 17 compatible.\r\nTell me if i need merging commits"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": "Anyway i can still help to get this PR merged ? "
    },
    {
        "author": null,
        "body": "Hi @rusher, sorry for delays!\r\n\r\n@kpavlov could you please help here? Do you think it is ready to be merged?"
    },
    {
        "author": {
            "login": "kpavlov"
        },
        "body": "@langchain4j , I am feeling a bit afraid to merge on top of failing integration tests..."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @langchain4j, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The introduction of MetadataStorageConfig and MetadataStorageMode might require users to update their configurations if they were relying on default metadata handling.\n\n\n#### Potential Design Issues\n-  The use of a single table for all embeddings might not scale well for very large datasets. Consider table partitioning or sharding.\n-  The abstraction of metadata handling might be too complex, making it difficult to understand and maintain.\n-  The tight coupling with MariaDB might make it difficult to switch to a different database in the future.\n\n\n#### Potential Bugs\n-  Incorrect handling of SQL keywords in metadata column names could lead to SQL errors or unexpected behavior.\n-  Potential issues with data type conversions when storing and retrieving metadata, especially with JSON storage.\n-  Race conditions or concurrency issues if multiple threads access the same store instance concurrently.\n-  Incorrect handling of null values in metadata could lead to unexpected search results or errors.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding is added to the store\n  - When: Adding an embedding and then retrieving it by its ID.\n  - Then: The embedding should be successfully added and retrievable by its ID.\n\n-\n  - Given: Multiple embeddings are added to the store\n  - When: Adding multiple embeddings and then searching for them.\n  - Then: All embeddings should be successfully added and searchable.\n\n-\n  - Given: A search is performed with a valid query embedding\n  - When: Searching for embeddings using a valid query embedding.\n  - Then: The most similar embeddings should be returned with correct scores.\n\n-\n  - Given: A filter is used to search for embeddings\n  - When: Searching for embeddings using a valid filter.\n  - Then: Only embeddings matching the filter criteria should be returned.\n\n-\n  - Given: Embeddings are removed from the store\n  - When: Removing embeddings and then attempting to retrieve them.\n  - Then: The removed embeddings should no longer be retrievable.\n\n-\n  - Given: Metadata is added to embeddings\n  - When: Adding embeddings with metadata and then searching for them.\n  - Then: The metadata should be stored and retrievable with the embeddings.\n\n-\n  - Given: Different distance types are used\n  - When: Searching for embeddings using different distance types (COSINE and EUCLIDEAN).\n  - Then: The search results should be based on the selected distance type.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided\n  - When: Creating a MariaDbEmbeddingStore with invalid database credentials.\n  - Then: The store should fail to initialize and throw an appropriate exception.\n\n-\n  - Given: An invalid SQL query is executed\n  - When: Executing a search or add operation with an invalid SQL query.\n  - Then: The store should throw an exception and not corrupt the database.\n\n-\n  - Given: A filter with an unsupported operator is used\n  - When: Searching with a filter containing an unsupported operator.\n  - Then: The store should throw an exception indicating that the filter is not supported.\n\n-\n  - Given: Metadata column definition is invalid\n  - When: Creating a store with an invalid metadata column definition.\n  - Then: The store should throw an exception during initialization.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: Searching for embeddings after adding a large number of them.\n  - Then: The search performance should not degrade significantly, and the store should handle the load without errors.\n\n-\n  - Given: Metadata contains special characters or is very long\n  - When: Adding and searching for embeddings with metadata containing special characters or long strings.\n  - Then: The store should handle the metadata correctly without errors or data loss.\n\n-\n  - Given: The database connection is lost during an operation\n  - When: Performing add, search, or remove operations while the database connection is interrupted.\n  - Then: The store should handle the connection loss gracefully and throw an appropriate exception.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @rusher, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The introduction of `MetadataStorageConfig` and `MetadataStorageMode` might require users to update their configurations if they were relying on default metadata handling.\n-  The change to use enquoteIdentifier might break existing code if table or column names were not valid identifiers.\n\n\n#### Potential Design Issues\n-  The use of a single `MetadataHandler` interface might become complex if more metadata storage strategies are introduced.\n-  The tight coupling with MariaDB's specific SQL syntax might make it difficult to support other databases in the future.\n\n\n#### Potential Bugs\n-  Incorrect handling of SQL keywords in metadata column names could lead to SQL errors.\n-  Potential issues with JSON parsing/serialization of metadata if not handled correctly.\n-  Incorrect mapping of filter operators could lead to unexpected search results.\n-  Race conditions or concurrency issues if the datasource is not properly managed.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding is added to the store\n  - When: Adding an embedding and then retrieving it by ID.\n  - Then: The embedding should be successfully added and retrievable by ID.\n\n-\n  - Given: Multiple embeddings are added to the store\n  - When: Adding multiple embeddings and then searching for them.\n  - Then: All embeddings should be successfully added and retrievable.\n\n-\n  - Given: Embeddings are searched with a valid filter\n  - When: Searching for embeddings with a valid filter.\n  - Then: Only the embeddings matching the filter should be returned.\n\n-\n  - Given: Embeddings are removed by ID\n  - When: Adding embeddings, removing them by ID, and then attempting to retrieve them.\n  - Then: The removed embeddings should no longer be retrievable.\n\n-\n  - Given: Embeddings are removed by filter\n  - When: Adding embeddings, removing them by filter, and then attempting to retrieve them.\n  - Then: The removed embeddings should no longer be retrievable.\n\n-\n  - Given: Embeddings are searched with a minimum score\n  - When: Searching for embeddings with a minimum score.\n  - Then: Only the embeddings with a score greater than or equal to the minimum score should be returned.\n\n-\n  - Given: Embeddings are added with metadata\n  - When: Adding embeddings with metadata and then searching for them with a filter on the metadata.\n  - Then: The metadata should be stored correctly and retrievable during search.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided\n  - When: Creating a MariaDbEmbeddingStore with invalid database credentials.\n  - Then: The store should throw an exception and not initialize.\n\n-\n  - Given: An invalid table name is provided\n  - When: Creating a MariaDbEmbeddingStore with an invalid table name.\n  - Then: The store should throw an exception and not initialize.\n\n-\n  - Given: An invalid dimension is provided\n  - When: Creating a MariaDbEmbeddingStore with an invalid dimension.\n  - Then: The store should throw an exception and not initialize.\n\n-\n  - Given: A filter with an unsupported operator is used\n  - When: Searching for embeddings with a filter containing an unsupported operator.\n  - Then: The store should throw an exception and not perform the search.\n\n-\n  - Given: An attempt is made to add embeddings with mismatched IDs\n  - When: Calling addAll with a list of IDs that does not match the size of the embeddings list.\n  - Then: The store should throw an exception and not add the embeddings.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: Searching for embeddings after adding a large number of embeddings.\n  - Then: The search performance should not degrade significantly, and the store should handle the load without errors.\n\n-\n  - Given: Metadata contains special characters or is very long\n  - When: Adding and searching for embeddings with metadata containing special characters or long strings.\n  - Then: The store should correctly handle the metadata without errors or data loss.\n\n-\n  - Given: The database connection is lost during an operation\n  - When: Performing add, search, or remove operations while the database connection is interrupted.\n  - Then: The store should handle the connection loss gracefully and throw an appropriate exception.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": "2 changes : \r\n* correct some pom.xml indentation that was failing with spotless blocking testing\r\n* correct some minor issues reported by codacy"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @rusher, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `MetadataStorageConfig` interface and its implementations might introduce breaking changes if consumers have implemented their own versions.\n-  The introduction of `MetadataStorageMode` enum might break existing code if consumers are relying on specific string values for metadata storage configuration.\n\n\n#### Potential Design Issues\n-  The use of a single `DataSource` might limit scalability and performance in high-concurrency scenarios.\n-  The tight coupling between the store and the MariaDB-specific SQL queries might make it difficult to switch to a different database in the future.\n-  The `MetadataHandler` interface and its implementations might become complex and difficult to maintain as more metadata storage options are added.\n-  The use of string concatenation for building SQL queries might make the code harder to read and maintain.\n\n\n#### Potential Bugs\n- \u26a0\ufe0f SQL injection vulnerabilities if input parameters are not properly sanitized.\n-  Incorrect handling of metadata types during storage and retrieval, leading to data corruption or loss.\n-  Race conditions or concurrency issues if multiple threads access the store simultaneously.\n-  Incorrect handling of null values in metadata, leading to unexpected behavior during filtering.\n-  Potential issues with index creation or usage, leading to performance degradation.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding is added to the store\n  - When: Adding and searching for embeddings\n  - Then: The embedding should be stored and retrieved correctly\n\n-\n  - Given: Multiple embeddings are added to the store\n  - When: Adding and searching for multiple embeddings\n  - Then: All embeddings should be stored and retrieved correctly\n\n-\n  - Given: Embeddings are added with metadata\n  - When: Adding and searching for embeddings with metadata\n  - Then: The metadata should be stored and retrieved correctly\n\n-\n  - Given: Embeddings are removed from the store\n  - When: Removing and searching for embeddings\n  - Then: The removed embeddings should no longer be found\n\n-\n  - Given: A filter is used to search for embeddings\n  - When: Searching for embeddings with a filter\n  - Then: Only the embeddings that match the filter should be returned\n\n-\n  - Given: Different distance types are used\n  - When: Searching for embeddings with different distance types\n  - Then: The search results should be correct for the selected distance type\n\n-\n  - Given: Custom table, id, embedding, content and metadata column names are used\n  - When: Creating a MariaDbEmbeddingStore with custom names\n  - Then: The store should work correctly with the custom names\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided\n  - When: Creating a MariaDbEmbeddingStore\n  - Then: The store should fail to initialize and throw an exception\n\n-\n  - Given: An invalid SQL query is used\n  - When: Performing any operation on the store\n  - Then: The store should throw an exception and not corrupt the database\n\n-\n  - Given: A filter is used with an unsupported operator\n  - When: Searching for embeddings with a filter\n  - Then: The store should throw an exception\n\n-\n  - Given: Metadata column definition is not valid\n  - When: Creating a MariaDbEmbeddingStore with invalid metadata configuration\n  - Then: The store should throw an exception\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: Searching for embeddings\n  - Then: The search performance should not degrade significantly\n\n-\n  - Given: Metadata contains special characters or is very long\n  - When: Adding and searching embeddings with metadata\n  - Then: The metadata should be stored and retrieved correctly\n\n-\n  - Given: The database connection is lost during an operation\n  - When: Adding, removing, or searching embeddings\n  - Then: The operation should fail gracefully and not leave the store in an inconsistent state\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": "Anything needed still ? I cannot have codacy not having any new issue, those remaining are expected"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @rusher, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `MetadataStorageConfig` interface and its implementations might introduce breaking changes if consumers have implemented custom configurations.\n-  The introduction of `MariaDBDistanceType` enum might break existing code if consumers were relying on hardcoded distance calculation logic.\n\n\n#### Potential Design Issues\n-  The `MetadataHandler` interface and its implementations might become complex and difficult to maintain as more metadata storage options are added.\n-  The tight coupling between the `MariaDbEmbeddingStore` and the underlying database might make it difficult to switch to a different database in the future.\n-  The use of raw SQL queries might make the code less readable and harder to debug.\n\n\n#### Potential Bugs\n- \u26a0\ufe0f SQL injection vulnerabilities if input parameters are not properly sanitized.\n-  Incorrect handling of metadata with special characters or different data types might lead to data corruption or retrieval issues.\n-  Race conditions or concurrency issues if multiple threads access the store simultaneously.\n-  Potential issues with index creation or usage, leading to slow search performance.\n-  Incorrect handling of null values in metadata might lead to unexpected behavior.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding and text segment are added to the store\n  - When: Adding an embedding and text segment to the store.\n  - Then: The embedding and text segment should be stored correctly, and the ID should be returned.\n\n-\n  - Given: Multiple embeddings are added to the store\n  - When: Adding multiple embeddings to the store.\n  - Then: All embeddings should be stored correctly, and their IDs should be returned.\n\n-\n  - Given: A search is performed with a valid query embedding\n  - When: Searching for embeddings with a valid query embedding.\n  - Then: The most similar embeddings should be returned with their scores.\n\n-\n  - Given: A search is performed with a filter\n  - When: Searching for embeddings with a filter.\n  - Then: Only the embeddings that match the filter criteria should be returned.\n\n-\n  - Given: Embeddings are removed by ID\n  - When: Removing embeddings by their IDs.\n  - Then: The specified embeddings should be removed from the store.\n\n-\n  - Given: Embeddings are removed by filter\n  - When: Removing embeddings by a filter.\n  - Then: The specified embeddings should be removed from the store.\n\n-\n  - Given: All embeddings are removed\n  - When: Removing all embeddings.\n  - Then: All embeddings should be removed from the store.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided\n  - When: Creating a MariaDbEmbeddingStore with invalid database credentials.\n  - Then: The store should fail to initialize and throw an appropriate exception.\n\n-\n  - Given: An invalid SQL query is used\n  - When: Executing a search or add operation with an invalid SQL query.\n  - Then: The store should throw an exception and not corrupt the database.\n\n-\n  - Given: A filter with an unsupported operator is used\n  - When: Searching with a filter containing an unsupported operator.\n  - Then: The store should throw an exception indicating that the filter is not supported.\n\n-\n  - Given: Metadata column definition is not valid\n  - When: Creating a MariaDbEmbeddingStore with an invalid metadata column definition.\n  - Then: The store should throw an exception indicating that the metadata definition is not valid.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: Searching for embeddings after adding a large number of embeddings.\n  - Then: The search performance should not degrade significantly, and the store should handle the load without errors.\n\n-\n  - Given: Metadata contains special characters or is very long\n  - When: Adding and searching for embeddings with metadata containing special characters or long strings.\n  - Then: The metadata should be stored and retrieved correctly without any data loss or corruption.\n\n-\n  - Given: The database connection is lost during an operation\n  - When: Simulating a database connection loss during an add or search operation.\n  - Then: The operation should fail gracefully, and the store should not be left in an inconsistent state.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "rusher"
        },
        "body": "resolve the points indicated in @dliubarskyi review.\r\nremains \r\n* the doc issue. I think recommendation is not the best, you'll tell\r\n* the honton licence skipping removal. if removed, this will result in \r\n`[ERROR] Failed to execute goal org.honton.chas:license-maven-plugin:0.0.6:compliance (default-cli) on project langchain4j-mariadb: org.mariadb.jdbc:mariadb-java-client:jar:3.5.1 does not have acceptable license [{name:LGPL-2.1-or-later}] -> [Help 1]`. other projects have the same.  The other solution is to change the configuration part : \r\n```\r\n<configuration>\r\n    <acceptableLicenses combine.children=\"append\">\r\n        <license>\r\n            <name>LGPL-2.1-or-later</name>\r\n            <url>https://spdx.org/licenses/LGPL-2.1-or-later.html</url>\r\n        </license>\r\n    </acceptableLicenses>\r\n</configuration> \r\n```\r\n\r\n"
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "Hi @rusher\r\n\r\n> the honton licence skipping removal. if removed, this will result in\r\n\r\nPlease use this approach:\r\n\r\n```xml\r\n<configuration>\r\n    <acceptableLicenses combine.children=\"append\">\r\n        <license>\r\n            <name>LGPL-2.1-or-later</name>\r\n            <url>https://spdx.org/licenses/LGPL-2.1-or-later.html</url>\r\n        </license>\r\n    </acceptableLicenses>\r\n</configuration> \r\n```"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @rusher, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `MetadataStorageConfig` interface and its implementations might introduce breaking changes if consumers have implemented their own versions.\n\n\n#### Potential Design Issues\n-  The `MetadataHandler` interface and its implementations might become complex to maintain as more metadata storage modes are added.\n-  The use of string concatenation for building SQL queries might lead to readability and maintainability issues.\n-  The `MariaDbFilterMapper` might become complex to maintain as more filter types are added.\n\n\n#### Potential Bugs\n-  SQL injection vulnerabilities if input parameters are not properly sanitized.\n-  Potential issues with handling different data types in metadata when using COLUMN_PER_KEY mode.\n-  Incorrect handling of null values in metadata during filtering.\n-  Race conditions or concurrency issues if multiple threads access the store simultaneously.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding is added to the store\n  - When: Adding an embedding and then searching for it.\n  - Then: The embedding should be stored correctly and can be retrieved using search.\n\n-\n  - Given: Multiple embeddings are added to the store\n  - When: Adding multiple embeddings and then searching for them.\n  - Then: All embeddings should be stored correctly and can be retrieved using search.\n\n-\n  - Given: Embeddings are added with metadata\n  - When: Adding embeddings with metadata and then searching with filters.\n  - Then: The metadata should be stored correctly and can be used for filtering during search.\n\n-\n  - Given: Embeddings are removed from the store\n  - When: Adding embeddings, removing some of them, and then searching.\n  - Then: The removed embeddings should no longer be returned by search.\n\n-\n  - Given: A filter is used during search\n  - When: Searching with different filters and verifying the results.\n  - Then: Only embeddings matching the filter criteria should be returned.\n\n-\n  - Given: Different distance types are used\n  - When: Creating a store with different distance types and verifying the search results.\n  - Then: The search results should be ordered according to the selected distance type.\n\n-\n  - Given: Custom table and column names are used\n  - When: Creating a store with custom table and column names and performing operations.\n  - Then: The store should function correctly with the custom names.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided\n  - When: Creating a MariaDbEmbeddingStore with invalid database credentials.\n  - Then: The store should fail to initialize and throw an appropriate exception.\n\n-\n  - Given: An invalid SQL query is executed\n  - When: Executing a search or add operation that results in an invalid SQL query.\n  - Then: The store should catch the SQL exception and throw a runtime exception with a descriptive message.\n\n-\n  - Given: A filter with an unsupported operator is used\n  - When: Searching with a filter containing an unsupported operator.\n  - Then: The store should throw an UnsupportedOperationException.\n\n-\n  - Given: Metadata column definition is not valid\n  - When: Creating a MariaDbEmbeddingStore with an invalid metadata column definition.\n  - Then: The store should throw an IllegalArgumentException.\n\n-\n  - Given: Metadata indexes are defined for JSON metadata\n  - When: Creating a MariaDbEmbeddingStore with metadata indexes defined for JSON metadata.\n  - Then: The store should throw a RuntimeException.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: Searching for embeddings after adding a large number of embeddings.\n  - Then: The search performance should not degrade significantly, and the store should handle the load without errors.\n\n-\n  - Given: Metadata contains special characters or is very long\n  - When: Adding and searching for embeddings with metadata containing special characters or long strings.\n  - Then: The metadata should be stored and retrieved correctly without any data loss or corruption.\n\n-\n  - Given: The database connection is lost during an operation\n  - When: Performing add, search, or remove operations while the database connection is interrupted.\n  - Then: The store should handle the connection loss gracefully and throw an appropriate exception.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The introduction of MetadataStorageConfig and MetadataStorageMode might require users to update their configuration if they were relying on default metadata handling.\n-  If users were directly querying the database table, the change in table schema (addition of metadata columns) could break their queries.\n\n\n#### Potential Design Issues\n-  The MetadataStorageMode enum and associated classes (JSONMetadataHandler, ColumnsMetadataHandler) introduce complexity.  Consider if the abstraction is necessary or if a simpler configuration would suffice.\n-  The reliance on string manipulation for SQL queries can be error-prone and difficult to maintain. Consider using a query builder library or an ORM to improve code clarity and reduce the risk of errors.\n\n\n#### Potential Bugs\n- \u26a0\ufe0f SQL injection vulnerabilities if input validation and sanitization are not properly implemented, especially in the filter mapping logic.\n-  Incorrect handling of different data types in metadata, leading to data corruption or incorrect search results.\n-  Race conditions or concurrency issues when multiple threads or processes access the embedding store simultaneously.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A MariaDB embedding store is created and configured correctly.\n  - When: Performing basic CRUD operations on the embedding store.\n  - Then: Embeddings can be added, searched, and removed successfully.\n\n-\n  - Given: Embeddings are added with associated metadata.\n  - When: Searching for embeddings with specific metadata values.\n  - Then: The metadata should be stored and retrieved correctly when searching.\n\n-\n  - Given: A filter is applied to the search query.\n  - When: Searching with a filter.\n  - Then: Only embeddings that match the filter criteria should be returned.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided.\n  - When: Creating a MariaDbEmbeddingStore with incorrect credentials.\n  - Then: The application should fail to initialize the embedding store and provide an informative error message.\n\n-\n  - Given: An attempt is made to add an embedding with a dimension that does not match the table's dimension.\n  - When: Adding an embedding with an incorrect dimension.\n  - Then: The application should throw an exception.\n\n-\n  - Given: A filter is applied with a key that does not exist in the metadata.\n  - When: Searching with a non-existent metadata key.\n  - Then: The query should return an empty result set or handle the missing key gracefully without throwing an exception.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store.\n  - When: Searching for similar embeddings.\n  - Then: Search performance should remain acceptable.\n\n-\n  - Given: Metadata contains special characters or is very long.\n  - When: Adding and retrieving embeddings with metadata.\n  - Then: The metadata should be stored and retrieved correctly.\n\n-\n  - Given: The MariaDB server becomes temporarily unavailable.\n  - When: Performing operations on the embedding store during the outage.\n  - Then: The application should handle the connection loss gracefully and attempt to reconnect.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The introduction of MetadataStorageConfig and its associated modes (COMBINED_JSON, COLUMN_PER_KEY) might require existing users to update their configurations, especially if they were relying on default behavior or custom implementations for metadata storage.\n-  The change in pom.xml to version 1.0.0-beta1 could introduce compatibility issues with older versions of LangChain4j or other dependencies.\n\n\n#### Potential Design Issues\n-  The MetadataStorageConfig introduces complexity and might be difficult for users to understand and configure correctly.\n-  The separation of metadata handling into different classes (ColumnsMetadataHandler, JSONMetadataHandler) might lead to code duplication and maintenance issues.\n-  The reliance on SQL keywords and identifier quoting might introduce database-specific dependencies and limit portability to other database systems.\n\n\n#### Potential Bugs\n- \u26a0\ufe0f SQL injection vulnerabilities if input validation and escaping are not properly implemented, especially in the filter mapping logic.\n-  Incorrect handling of different data types in metadata, leading to data corruption or incorrect search results.\n-  Performance issues with large datasets or complex filters, especially with the COMBINED_JSON metadata storage mode.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid MariaDB datasource is configured.\n  - When: Creating a MariaDbEmbeddingStore instance.\n  - Then: The store should successfully connect to the database and perform embedding operations.\n\n-\n  - Given: An embedding is added to the store with associated metadata.\n  - When: Adding and searching embeddings with metadata.\n  - Then: The embedding and metadata should be stored correctly in the database, and a search query with a matching filter should return the embedding.\n\n-\n  - Given: Multiple embeddings are added to the store, and a search query is performed with a specified maximum number of results.\n  - When: Adding and searching multiple embeddings.\n  - Then: The store should return the most similar embeddings up to the specified maximum, ordered by score.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials or connection URL are provided.\n  - When: Creating a MariaDbEmbeddingStore instance.\n  - Then: The store should fail to initialize and throw an appropriate exception, preventing further operations.\n\n-\n  - Given: An attempt is made to add an embedding with a dimension that does not match the table's defined dimension.\n  - When: Adding an embedding.\n  - Then: The store should reject the embedding and throw an exception, preventing data corruption.\n\n-\n  - Given: A filter is applied with an invalid key or data type that does not exist in the metadata.\n  - When: Searching embeddings with a filter.\n  - Then: The store should throw an exception or return an empty result set, indicating that the filter cannot be applied.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store, close to the maximum allowed by MariaDB.\n  - When: Adding and searching embeddings.\n  - Then: The store should handle the large number of embeddings without errors, and search queries should still return accurate results within acceptable performance bounds.\n\n-\n  - Given: Metadata contains special characters or reserved keywords that require escaping.\n  - When: Adding embeddings with metadata.\n  - Then: The store should correctly escape these characters to prevent SQL injection vulnerabilities or parsing errors.\n\n-\n  - Given: The MariaDB server becomes temporarily unavailable during an operation.\n  - When: Adding, removing, or searching embeddings.\n  - Then: The store should handle the connection error gracefully, potentially retrying the operation or throwing an exception that allows the application to handle the failure.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "Hi @dliubarskyi, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The introduction of MetadataStorageConfig and its related classes could be a breaking change if users were relying on internal implementation details or if the default configuration is not suitable for all use cases.\n-  The change in pom.xml to update the parent version could introduce breaking changes if the parent version contains breaking changes.\n\n\n#### Potential Design Issues\n-  The design might not be optimal for very large datasets, as all embeddings are stored in a single table. Consider partitioning or sharding for scalability.\n-  The abstraction level might be too low, exposing too much database-specific logic to the user. Consider providing a higher-level API for common operations.\n-  The MetadataStorageConfig design might become complex to manage as more storage modes and options are added. Consider using a more flexible configuration system.\n\n\n#### Potential Bugs\n- \u26a0\ufe0f SQL injection vulnerabilities if input validation and sanitization are not properly implemented, especially in the filter mapping logic.\n-  Incorrect handling of different data types in metadata, leading to errors during storage or retrieval.\n-  Race conditions or concurrency issues if the store is used in a multi-threaded environment without proper synchronization.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A MariaDbEmbeddingStore is created and initialized.\n  - When: Creating a MariaDbEmbeddingStore with valid configuration.\n  - Then: The store should be ready to accept embeddings and perform searches.\n\n-\n  - Given: An embedding is added to the store.\n  - When: Adding an embedding.\n  - Then: The embedding should be stored correctly and retrievable by ID.\n\n-\n  - Given: A search is performed for similar embeddings.\n  - When: Searching for similar embeddings.\n  - Then: The search should return the most similar embeddings within the specified score and result limits.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid database credentials are provided.\n  - When: Creating a MariaDbEmbeddingStore with invalid credentials.\n  - Then: The store should fail to initialize and throw an appropriate exception.\n\n-\n  - Given: An attempt is made to add an embedding with a dimension that does not match the table's dimension.\n  - When: Adding an embedding with an incorrect dimension.\n  - Then: An exception should be thrown.\n\n-\n  - Given: An attempt is made to search with a filter that contains invalid syntax.\n  - When: Searching with an invalid filter.\n  - Then: An exception should be thrown.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store.\n  - When: Searching for similar embeddings.\n  - Then: Ensure that search performance remains acceptable and that no database connection limits are reached.\n\n-\n  - Given: Metadata contains special characters or is very long.\n  - When: Adding embeddings with metadata and then searching with filters.\n  - Then: Ensure that the metadata is stored and retrieved correctly, and that filtering works as expected.\n\n-\n  - Given: The database connection is lost during an add or search operation.\n  - When: Simulating a database connection loss.\n  - Then: Ensure that the operation fails gracefully and that no data is corrupted.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n"
    }
]