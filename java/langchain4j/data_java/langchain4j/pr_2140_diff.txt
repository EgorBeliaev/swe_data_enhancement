diff --git a/langchain4j-core/src/test/java/dev/langchain4j/store/embedding/EmbeddingStoreIT.java b/langchain4j-core/src/test/java/dev/langchain4j/store/embedding/EmbeddingStoreIT.java
index 575a3a090eb..1f16938a93f 100644
--- a/langchain4j-core/src/test/java/dev/langchain4j/store/embedding/EmbeddingStoreIT.java
+++ b/langchain4j-core/src/test/java/dev/langchain4j/store/embedding/EmbeddingStoreIT.java
@@ -68,17 +68,35 @@ void should_add_embedding_with_segment_with_metadata() {
         }
         assertThat(match.embedded().metadata().getLong("long_max")).isEqualTo(Long.MAX_VALUE);
 
-        assertThat(match.embedded().metadata().getFloat("float_min")).isEqualTo(-Float.MAX_VALUE);
-        assertThat(match.embedded().metadata().getFloat("float_minus_1")).isEqualTo(-1f);
-        assertThat(match.embedded().metadata().getFloat("float_0")).isEqualTo(Float.MIN_VALUE);
-        assertThat(match.embedded().metadata().getFloat("float_1")).isEqualTo(1f);
-        assertThat(match.embedded().metadata().getFloat("float_123")).isEqualTo(1.23456789f);
-        assertThat(match.embedded().metadata().getFloat("float_max")).isEqualTo(Float.MAX_VALUE);
-
-        assertThat(match.embedded().metadata().getDouble("double_minus_1")).isEqualTo(-1d);
-        assertThat(match.embedded().metadata().getDouble("double_0")).isEqualTo(Double.MIN_VALUE);
-        assertThat(match.embedded().metadata().getDouble("double_1")).isEqualTo(1d);
-        assertThat(match.embedded().metadata().getDouble("double_123")).isEqualTo(1.23456789d);
+        if (testFloatExactly()) {
+            assertThat(match.embedded().metadata().getFloat("float_min")).isEqualTo(-Float.MAX_VALUE);
+            assertThat(match.embedded().metadata().getFloat("float_minus_1")).isEqualTo(-1f);
+            assertThat(match.embedded().metadata().getFloat("float_0")).isEqualTo(Float.MIN_VALUE);
+            assertThat(match.embedded().metadata().getFloat("float_1")).isEqualTo(1f);
+            assertThat(match.embedded().metadata().getFloat("float_123")).isEqualTo(1.23456789f);
+            assertThat(match.embedded().metadata().getFloat("float_max")).isEqualTo(Float.MAX_VALUE);
+        } else {
+            double floatPercentage = floatPercentage();
+            assertThat(match.embedded().metadata().getFloat("float_min")).isCloseTo(-Float.MAX_VALUE, withPercentage(floatPercentage));
+            assertThat(match.embedded().metadata().getFloat("float_minus_1")).isCloseTo(-1f, withPercentage(floatPercentage));
+            assertThat(match.embedded().metadata().getFloat("float_0")).isCloseTo(Float.MIN_VALUE, withPercentage(floatPercentage));
+            assertThat(match.embedded().metadata().getFloat("float_1")).isCloseTo(1f, withPercentage(floatPercentage));
+            assertThat(match.embedded().metadata().getFloat("float_123")).isCloseTo(1.23456789f, withPercentage(floatPercentage));
+            assertThat(match.embedded().metadata().getFloat("float_max")).isCloseTo(Float.MAX_VALUE, withPercentage(floatPercentage));
+        }
+
+        if (testDoubleExactly()) {
+            assertThat(match.embedded().metadata().getDouble("double_minus_1")).isEqualTo(-1d);
+            assertThat(match.embedded().metadata().getDouble("double_0")).isEqualTo(Double.MIN_VALUE);
+            assertThat(match.embedded().metadata().getDouble("double_1")).isEqualTo(1d);
+            assertThat(match.embedded().metadata().getDouble("double_123")).isEqualTo(1.23456789d);
+        } else {
+            double doublePercentage = doublePercentage();
+            assertThat(match.embedded().metadata().getDouble("double_minus_1")).isCloseTo(-1d, withPercentage(doublePercentage));
+            assertThat(match.embedded().metadata().getDouble("double_0")).isCloseTo(Double.MIN_VALUE, withPercentage(doublePercentage));
+            assertThat(match.embedded().metadata().getDouble("double_1")).isCloseTo(1d, withPercentage(doublePercentage));
+            assertThat(match.embedded().metadata().getDouble("double_123")).isCloseTo(1.23456789d, withPercentage(doublePercentage));
+        }
 
         // new API
         assertThat(embeddingStore().search(EmbeddingSearchRequest.builder()
@@ -91,6 +109,42 @@ protected boolean testLong1746714878034235396() {
         return true;
     }
 
+    /**
+     * Whether to test float metadata exactly or not.
+     *
+     * @return True if test float metadata exactly.
+     */
+    protected boolean testFloatExactly() {
+        return true;
+    }
+
+    /**
+     * Whether to test double metadata exactly or not.
+     *
+     * @return True if test double metadata exactly.
+     */
+    protected boolean testDoubleExactly() {
+        return true;
+    }
+
+    /**
+     * Float percentage close to.
+     *
+     * @return float percentage.
+     */
+    protected double floatPercentage() {
+        return 0.01;
+    }
+
+    /**
+     * Double percentage close to.
+     *
+     * @return double percentage.
+     */
+    protected double doublePercentage() {
+        return 0.01;
+    }
+
     protected Metadata createMetadata() {
 
         Metadata metadata = new Metadata();
