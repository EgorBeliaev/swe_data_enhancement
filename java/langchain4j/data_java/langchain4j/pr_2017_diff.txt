diff --git a/langchain4j-dashscope/pom.xml b/langchain4j-dashscope/pom.xml
index 1a596a3b1f8..f0f5afe412b 100644
--- a/langchain4j-dashscope/pom.xml
+++ b/langchain4j-dashscope/pom.xml
@@ -24,7 +24,7 @@
         <dependency>
             <groupId>com.alibaba</groupId>
             <artifactId>dashscope-sdk-java</artifactId>
-            <version>2.16.8</version>
+            <version>2.16.9</version>
         </dependency>
 
         <dependency>
diff --git a/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenHelper.java b/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenHelper.java
index 639554268d8..c5eeb445151 100644
--- a/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenHelper.java
+++ b/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenHelper.java
@@ -61,9 +61,7 @@
 import static dev.langchain4j.data.message.ChatMessageType.SYSTEM;
 import static dev.langchain4j.data.message.ChatMessageType.TOOL_EXECUTION_RESULT;
 import static dev.langchain4j.data.message.ChatMessageType.USER;
-import static dev.langchain4j.internal.Utils.getOrDefault;
-import static dev.langchain4j.internal.Utils.isNullOrBlank;
-import static dev.langchain4j.internal.Utils.isNullOrEmpty;
+import static dev.langchain4j.internal.Utils.*;
 import static dev.langchain4j.model.chat.request.json.JsonSchemaElementHelper.toMap;
 import static dev.langchain4j.model.output.FinishReason.LENGTH;
 import static dev.langchain4j.model.output.FinishReason.STOP;
@@ -97,34 +95,26 @@ static Message toQwenMessage(ChatMessage message) {
     }
 
     static String toSingleText(ChatMessage message) {
-        switch (message.type()) {
-            case USER:
-                return ((UserMessage) message).contents()
-                        .stream()
-                        .filter(TextContent.class::isInstance)
-                        .map(TextContent.class::cast)
-                        .map(TextContent::text)
-                        .collect(Collectors.joining("\n"));
-            case AI:
-                return ((AiMessage) message).text();
-            case SYSTEM:
-                return ((SystemMessage) message).text();
-            case TOOL_EXECUTION_RESULT:
-                return ((ToolExecutionResultMessage) message).text();
-            default:
-                return "";
-        }
+        return switch (message.type()) {
+            case USER -> ((UserMessage) message).contents()
+                    .stream()
+                    .filter(TextContent.class::isInstance)
+                    .map(TextContent.class::cast)
+                    .map(TextContent::text)
+                    .collect(Collectors.joining("\n"));
+            case AI -> ((AiMessage) message).text();
+            case SYSTEM -> ((SystemMessage) message).text();
+            case TOOL_EXECUTION_RESULT -> ((ToolExecutionResultMessage) message).text();
+            default -> "";
+        };
     }
 
     static String nameFrom(ChatMessage message) {
-        switch (message.type()) {
-            case USER:
-                return ((UserMessage) message).name();
-            case TOOL_EXECUTION_RESULT:
-                return ((ToolExecutionResultMessage) message).toolName();
-            default:
-                return null;
-        }
+        return switch (message.type()) {
+            case USER -> ((UserMessage) message).name();
+            case TOOL_EXECUTION_RESULT -> ((ToolExecutionResultMessage) message).toolName();
+            default -> null;
+        };
     }
 
     static String toolCallIdFrom(ChatMessage message) {
@@ -155,24 +145,19 @@ static MultiModalMessage toQwenMultiModalMessage(ChatMessage message) {
     }
 
     static List<Map<String, Object>> toMultiModalContents(ChatMessage message) {
-        switch (message.type()) {
-            case USER:
-                return ((UserMessage) message).contents()
-                        .stream()
-                        .map(QwenHelper::toMultiModalContent)
-                        .collect(Collectors.toList());
-            case AI:
-                return Collections.singletonList(
-                        Collections.singletonMap("text", ((AiMessage) message).text()));
-            case SYSTEM:
-                return Collections.singletonList(
-                        Collections.singletonMap("text", ((SystemMessage) message).text()));
-            case TOOL_EXECUTION_RESULT:
-                return Collections.singletonList(
-                        Collections.singletonMap("text", ((ToolExecutionResultMessage) message).text()));
-            default:
-                return Collections.emptyList();
-        }
+        return switch (message.type()) {
+            case USER -> ((UserMessage) message).contents()
+                    .stream()
+                    .map(QwenHelper::toMultiModalContent)
+                    .collect(Collectors.toList());
+            case AI -> Collections.singletonList(
+                    Collections.singletonMap("text", ((AiMessage) message).text()));
+            case SYSTEM -> Collections.singletonList(
+                    Collections.singletonMap("text", ((SystemMessage) message).text()));
+            case TOOL_EXECUTION_RESULT -> Collections.singletonList(
+                    Collections.singletonMap("text", ((ToolExecutionResultMessage) message).text()));
+            default -> Collections.emptyList();
+        };
     }
 
     static Map<String, Object> toMultiModalContent(Content content) {
@@ -263,6 +248,10 @@ static boolean hasAnswer(GenerationResult result) {
                 .map(GenerationResult::getOutput)
                 .map(GenerationOutput::getChoices)
                 .filter(choices -> !choices.isEmpty())
+                .map(choices -> choices.get(0))
+                .map(Choice::getMessage)
+                .map(Message::getContent)
+                .filter(Utils::isNotNullOrBlank)
                 .isPresent();
     }
 
@@ -331,16 +320,12 @@ static FinishReason finishReasonFrom(GenerationResult result) {
                 choice.getFinishReason() :
                 "tool_calls";
 
-        switch (finishReason) {
-            case "stop":
-                return STOP;
-            case "length":
-                return LENGTH;
-            case "tool_calls":
-                return TOOL_EXECUTION;
-            default:
-                return null;
-        }
+        return switch (finishReason) {
+            case "stop" -> STOP;
+            case "length" -> LENGTH;
+            case "tool_calls" -> TOOL_EXECUTION;
+            default -> null;
+        };
     }
 
     static FinishReason finishReasonFrom(MultiModalConversationResult result) {
@@ -352,14 +337,11 @@ static FinishReason finishReasonFrom(MultiModalConversationResult result) {
                 .map(MultiModalConversationOutput.Choice::getFinishReason)
                 .orElse("");
 
-        switch (finishReason) {
-            case "stop":
-                return STOP;
-            case "length":
-                return LENGTH;
-            default:
-                return null;
-        }
+        return switch (finishReason) {
+            case "stop" -> STOP;
+            case "length" -> LENGTH;
+            default -> null;
+        };
     }
 
     public static boolean isMultimodalModel(String modelName) {
@@ -385,6 +367,7 @@ static ToolBase toToolFunction(ToolSpecification toolSpecification) {
         return ToolFunction.builder().function(functionDefinition).build();
     }
 
+    @SuppressWarnings("deprecation")
     private static JsonObject toParameters(ToolSpecification toolSpecification) {
         if (toolSpecification.parameters() != null) {
             return JsonUtils.toJsonObject(toMap(toolSpecification.parameters()));
@@ -399,24 +382,15 @@ static AiMessage aiMessageFrom(GenerationResult result) {
         if (isFunctionToolCalls(result)) {
             String text = answerFrom(result);
             return isNullOrBlank(text) ?
-                    new AiMessage(functionToolCallsFrom(result)) :
-                    new AiMessage(text, functionToolCallsFrom(result));
+                    new AiMessage(toolExecutionRequestsFrom(result)) :
+                    new AiMessage(text, toolExecutionRequestsFrom(result));
         } else {
             return new AiMessage(answerFrom(result));
         }
     }
 
-    private static List<ToolExecutionRequest> functionToolCallsFrom(GenerationResult result) {
-        List<ToolCallBase> toolCalls = Optional.of(result)
-                .map(GenerationResult::getOutput)
-                .map(GenerationOutput::getChoices)
-                .filter(choices -> !choices.isEmpty())
-                .map(choices -> choices.get(0))
-                .map(Choice::getMessage)
-                .map(Message::getToolCalls)
-                .orElseThrow(IllegalStateException::new);
-
-        return toolCalls.stream()
+    private static List<ToolExecutionRequest> toolExecutionRequestsFrom(GenerationResult result) {
+        return toolCallsFrom(result).stream()
                 .filter(ToolCallFunction.class::isInstance)
                 .map(ToolCallFunction.class::cast)
                 .map(toolCall -> ToolExecutionRequest.builder()
@@ -427,6 +401,17 @@ private static List<ToolExecutionRequest> functionToolCallsFrom(GenerationResult
                 .collect(Collectors.toList());
     }
 
+    static List<ToolCallBase> toolCallsFrom(GenerationResult result) {
+        return Optional.of(result)
+                .map(GenerationResult::getOutput)
+                .map(GenerationOutput::getChoices)
+                .filter(choices -> !choices.isEmpty())
+                .map(choices -> choices.get(0))
+                .map(Choice::getMessage)
+                .map(Message::getToolCalls)
+                .orElseThrow(IllegalStateException::new);
+    }
+
     static String toolCallIdFromMessage(GenerationResult result) {
         // Not sure about the difference between Message::getToolCallId() and ToolCallFunction::getId().
         // Encapsulate a method to get the ID using Message::getToolCallId() when ToolCallFunction::getId() is null.
diff --git a/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingChatModel.java b/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingChatModel.java
index db9cea8c56b..0eddce570be 100644
--- a/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingChatModel.java
+++ b/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingChatModel.java
@@ -11,6 +11,7 @@
 import com.alibaba.dashscope.exception.NoApiKeyException;
 import com.alibaba.dashscope.exception.UploadFileException;
 import com.alibaba.dashscope.protocol.Protocol;
+import dev.langchain4j.agent.tool.ToolSpecification;
 import dev.langchain4j.data.message.AiMessage;
 import dev.langchain4j.data.message.ChatMessage;
 import dev.langchain4j.internal.Utils;
@@ -23,6 +24,7 @@
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -30,6 +32,7 @@
 
 import static com.alibaba.dashscope.aigc.conversation.ConversationParam.ResultFormat.MESSAGE;
 import static dev.langchain4j.internal.Utils.isNotNullOrBlank;
+import static dev.langchain4j.internal.Utils.isNullOrEmpty;
 import static dev.langchain4j.model.dashscope.QwenHelper.*;
 import static dev.langchain4j.spi.ServiceHelper.loadFactories;
 import static java.util.Collections.emptyList;
@@ -103,11 +106,36 @@ public void generate(List<ChatMessage> messages, StreamingResponseHandler<AiMess
         if (isMultimodalModel) {
             generateByMultimodalModel(messages, handler);
         } else {
-            generateByNonMultimodalModel(messages, handler);
+            generateByNonMultimodalModel(messages, null, null, handler);
         }
     }
 
-    private void generateByNonMultimodalModel(List<ChatMessage> messages, StreamingResponseHandler<AiMessage> handler) {
+    @Override
+    public void generate(List<ChatMessage> messages,
+                         List<ToolSpecification> toolSpecifications,
+                         StreamingResponseHandler<AiMessage> handler) {
+        if (isMultimodalModel) {
+            throw new IllegalArgumentException("Tools are currently not supported by this model");
+        } else {
+            generateByNonMultimodalModel(messages, toolSpecifications, null, handler);
+        }
+    }
+
+    @Override
+    public void generate(List<ChatMessage> messages,
+                         ToolSpecification toolSpecification,
+                         StreamingResponseHandler<AiMessage> handler) {
+        if (isMultimodalModel) {
+            throw new IllegalArgumentException("Tools are currently not supported by this model");
+        } else {
+            generateByNonMultimodalModel(messages, null, toolSpecification, handler);
+        }
+    }
+
+    private void generateByNonMultimodalModel(List<ChatMessage> messages,
+                                              List<ToolSpecification> toolSpecifications,
+                                              ToolSpecification toolThatMustBeExecuted,
+                                              StreamingResponseHandler<AiMessage> handler) {
         GenerationParam.GenerationParamBuilder<?, ?> builder = GenerationParam.builder()
                 .apiKey(apiKey)
                 .model(modelName)
@@ -126,9 +154,16 @@ private void generateByNonMultimodalModel(List<ChatMessage> messages, StreamingR
             builder.stopStrings(stops);
         }
 
+        if (!isNullOrEmpty(toolSpecifications)) {
+            builder.tools(toToolFunctions(toolSpecifications));
+        } else if (toolThatMustBeExecuted != null) {
+            builder.tools(toToolFunctions(Collections.singleton(toolThatMustBeExecuted)));
+            builder.toolChoice(toToolFunction(toolThatMustBeExecuted));
+        }
+
         GenerationParam param = builder.build();
 
-        ChatModelRequest modelListenerRequest = createModelListenerRequest(param, messages, null);
+        ChatModelRequest modelListenerRequest = createModelListenerRequest(param, messages, toolSpecifications);
         Map<Object, Object> attributes = new ConcurrentHashMap<>();
         onListenRequest(listeners, modelListenerRequest, attributes);
 
@@ -136,7 +171,7 @@ private void generateByNonMultimodalModel(List<ChatMessage> messages, StreamingR
         AtomicReference<String> responseId = new AtomicReference<>();
 
         try {
-            generation.streamCall(builder.build(), new ResultCallback<GenerationResult>() {
+            generation.streamCall(param, new ResultCallback<>() {
                 @Override
                 public void onEvent(GenerationResult result) {
                     String delta = responseBuilder.append(result);
@@ -191,7 +226,7 @@ private void generateByMultimodalModel(List<ChatMessage> messages, StreamingResp
         AtomicReference<String> responseId = new AtomicReference<>();
 
         try {
-            conv.streamCall(param, new ResultCallback<MultiModalConversationResult>() {
+            conv.streamCall(param, new ResultCallback<>() {
                 @Override
                 public void onEvent(MultiModalConversationResult result) {
                     String delta = responseBuilder.append(result);
diff --git a/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingResponseBuilder.java b/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingResponseBuilder.java
index 28e762a559f..786ec37ac92 100644
--- a/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingResponseBuilder.java
+++ b/langchain4j-dashscope/src/main/java/dev/langchain4j/model/dashscope/QwenStreamingResponseBuilder.java
@@ -4,21 +4,27 @@
 import com.alibaba.dashscope.aigc.generation.GenerationUsage;
 import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationResult;
 import com.alibaba.dashscope.aigc.multimodalconversation.MultiModalConversationUsage;
+import com.alibaba.dashscope.tools.ToolCallBase;
+import com.alibaba.dashscope.tools.ToolCallFunction;
+import dev.langchain4j.agent.tool.ToolExecutionRequest;
 import dev.langchain4j.data.message.AiMessage;
 import dev.langchain4j.model.output.FinishReason;
 import dev.langchain4j.model.output.Response;
 import dev.langchain4j.model.output.TokenUsage;
 
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
 import static dev.langchain4j.internal.Utils.isNullOrBlank;
 import static dev.langchain4j.model.dashscope.QwenHelper.*;
+import static java.util.stream.Collectors.toList;
 
 public class QwenStreamingResponseBuilder {
     private final StringBuilder generatedContent = new StringBuilder();
-
+    private final Map<Integer, ToolExecutionRequestBuilder> indexToToolExecutionRequestBuilder = new ConcurrentHashMap<>();
     private Integer inputTokenCount;
-
     private Integer outputTokenCount;
-
     private FinishReason finishReason;
 
     public QwenStreamingResponseBuilder() {}
@@ -37,15 +43,38 @@ public String append(GenerationResult partialResponse) {
         FinishReason finishReason = finishReasonFrom(partialResponse);
         if (finishReason != null) {
             this.finishReason = finishReason;
-            if (!hasAnswer(partialResponse)) {
-                return null;
-            }
         }
 
-        String partialContent = answerFrom(partialResponse);
-        generatedContent.append(partialContent);
+        if (hasAnswer(partialResponse)) {
+            String partialContent = answerFrom(partialResponse);
+            generatedContent.append(partialContent);
+            return partialContent;
+        } else if (isFunctionToolCalls(partialResponse)) {
+            List<ToolCallBase> toolCalls = toolCallsFrom(partialResponse);
+            for (int index = 0; index < toolCalls.size(); index++) {
+                // It looks like the index of the list matches the 'index' property in the response,
+                // which can't be directly accessed by java sdk.
+                if (toolCalls.get(index) instanceof ToolCallFunction toolCall) {
+                    ToolExecutionRequestBuilder toolExecutionRequestBuilder
+                            = indexToToolExecutionRequestBuilder.computeIfAbsent(index, idx -> new ToolExecutionRequestBuilder());
+                    if (toolCall.getId() != null) {
+                        toolExecutionRequestBuilder.idBuilder.append(toolCall.getId());
+                    }
+
+                    ToolCallFunction.CallFunction functionCall = toolCall.getFunction();
+
+                    if (functionCall.getName() != null) {
+                        toolExecutionRequestBuilder.nameBuilder.append(functionCall.getName());
+                    }
+
+                    if (functionCall.getArguments() != null) {
+                        toolExecutionRequestBuilder.argumentsBuilder.append(functionCall.getArguments());
+                    }
+                }
+            }
+        }
 
-        return partialContent;
+        return null;
     }
 
     public String append(MultiModalConversationResult partialResponse) {
@@ -62,19 +91,40 @@ public String append(MultiModalConversationResult partialResponse) {
         FinishReason finishReason = finishReasonFrom(partialResponse);
         if (finishReason != null) {
             this.finishReason = finishReason;
-            if (!hasAnswer(partialResponse)) {
-                return null;
-            }
         }
 
-        String partialContent = answerFrom(partialResponse);
-        generatedContent.append(partialContent);
+        if (hasAnswer(partialResponse)) {
+            String partialContent = answerFrom(partialResponse);
+            generatedContent.append(partialContent);
+            return partialContent;
+        }
 
-        return partialContent;
+        return null;
     }
 
     public Response<AiMessage> build() {
         String text = generatedContent.toString();
+
+        if (!indexToToolExecutionRequestBuilder.isEmpty()) {
+            List<ToolExecutionRequest> toolExecutionRequests = indexToToolExecutionRequestBuilder.values().stream()
+                    .map(it -> ToolExecutionRequest.builder()
+                            .id(it.idBuilder.toString())
+                            .name(it.nameBuilder.toString())
+                            .arguments(it.argumentsBuilder.toString())
+                            .build())
+                    .collect(toList());
+
+            AiMessage aiMessage = isNullOrBlank(text) ?
+                    AiMessage.from(toolExecutionRequests) :
+                    AiMessage.from(text, toolExecutionRequests);
+
+            return Response.from(
+                    aiMessage,
+                    new TokenUsage(inputTokenCount, outputTokenCount),
+                    finishReason
+            );
+        }
+
         if (!isNullOrBlank(text)) {
             return Response.from(
                     AiMessage.from(text),
@@ -85,4 +135,11 @@ public Response<AiMessage> build() {
 
         return null;
     }
+
+    private static class ToolExecutionRequestBuilder {
+
+        private final StringBuffer idBuilder = new StringBuffer();
+        private final StringBuffer nameBuilder = new StringBuffer();
+        private final StringBuffer argumentsBuilder = new StringBuffer();
+    }
 }
diff --git a/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenChatModelIT.java b/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenChatModelIT.java
index 663e0226eae..77f5b0fb76b 100644
--- a/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenChatModelIT.java
+++ b/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenChatModelIT.java
@@ -5,7 +5,6 @@
 import dev.langchain4j.agent.tool.ToolSpecification;
 import dev.langchain4j.data.message.*;
 import dev.langchain4j.model.chat.ChatLanguageModel;
-import dev.langchain4j.model.chat.listener.*;
 import dev.langchain4j.model.output.Response;
 import dev.langchain4j.model.output.TokenUsage;
 import org.junit.jupiter.api.Test;
@@ -15,7 +14,6 @@
 
 import java.util.LinkedList;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicReference;
 
 import static dev.langchain4j.agent.tool.JsonSchemaProperty.INTEGER;
 import static dev.langchain4j.data.message.ToolExecutionResultMessage.from;
@@ -26,8 +24,6 @@
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
-import static org.assertj.core.api.AssertionsForClassTypes.assertThatExceptionOfType;
 
 @EnabledIfEnvironmentVariable(named = "DASHSCOPE_API_KEY", matches = ".+")
 public class QwenChatModelIT {
@@ -96,6 +92,7 @@ public void should_call_function_with_argument_then_answer(String modelName) {
                 .build();
 
         String toolName = "getCurrentWeather";
+        //noinspection deprecation
         ToolSpecification hasArgToolSpec = ToolSpecification.builder()
                 .name(toolName)
                 .description("Query the weather of a specified city")
@@ -139,6 +136,7 @@ public void should_call_must_be_executed_call_function(String modelName) {
                 .build();
 
         String toolName = "getCurrentWeather";
+        //noinspection deprecation
         ToolSpecification mustBeExecutedTool = ToolSpecification.builder()
                 .name(toolName)
                 .description("Query the weather of a specified city")
@@ -167,6 +165,7 @@ void should_call_must_be_executed_call_function_with_argument_then_answer(String
                 .build();
 
         String toolName = "calculator";
+        //noinspection deprecation
         ToolSpecification calculator = ToolSpecification.builder()
                 .name(toolName)
                 .description("returns a sum of two numbers")
diff --git a/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelIT.java b/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelIT.java
index fdbf2e03f58..64fd406a444 100644
--- a/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelIT.java
+++ b/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelIT.java
@@ -1,26 +1,31 @@
 package dev.langchain4j.model.dashscope;
 
+import dev.langchain4j.agent.tool.JsonSchemaProperty;
+import dev.langchain4j.agent.tool.ToolExecutionRequest;
+import dev.langchain4j.agent.tool.ToolSpecification;
 import dev.langchain4j.data.message.AiMessage;
+import dev.langchain4j.data.message.ChatMessage;
+import dev.langchain4j.data.message.ToolExecutionResultMessage;
 import dev.langchain4j.data.message.UserMessage;
-import dev.langchain4j.model.StreamingResponseHandler;
 import dev.langchain4j.model.chat.StreamingChatLanguageModel;
 import dev.langchain4j.model.chat.TestStreamingResponseHandler;
-import dev.langchain4j.model.chat.listener.*;
 import dev.langchain4j.model.output.Response;
+import dev.langchain4j.model.output.TokenUsage;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeoutException;
-import java.util.concurrent.atomic.AtomicReference;
+import java.util.List;
 
+import static dev.langchain4j.agent.tool.JsonSchemaProperty.INTEGER;
+import static dev.langchain4j.data.message.ToolExecutionResultMessage.from;
+import static dev.langchain4j.data.message.UserMessage.userMessage;
 import static dev.langchain4j.model.dashscope.QwenTestHelper.*;
+import static dev.langchain4j.model.output.FinishReason.STOP;
+import static dev.langchain4j.model.output.FinishReason.TOOL_EXECUTION;
+import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
-import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
 
 @EnabledIfEnvironmentVariable(named = "DASHSCOPE_API_KEY", matches = ".+")
 public class QwenStreamingChatModelIT {
@@ -40,6 +45,189 @@ public void should_send_non_multimodal_messages_and_receive_response(String mode
         assertThat(response.content().text()).endsWith("That's all!");
     }
 
+    @ParameterizedTest
+    @MethodSource("dev.langchain4j.model.dashscope.QwenTestHelper#functionCallChatModelNameProvider")
+    public void should_call_function_with_no_argument_then_answer(String modelName) {
+        StreamingChatLanguageModel model = QwenStreamingChatModel.builder()
+                .apiKey(apiKey())
+                .modelName(modelName)
+                .build();
+
+        String toolName = "getCurrentDateAndTime";
+        ToolSpecification noArgToolSpec = ToolSpecification.builder()
+                .name(toolName)
+                .description("Get the current date and time")
+                .build();
+
+        UserMessage userMessage = UserMessage.from("What time is it?");
+
+        TestStreamingResponseHandler<AiMessage> handler = new TestStreamingResponseHandler<>();
+        model.generate(singletonList(userMessage), singletonList(noArgToolSpec), handler);
+        Response<AiMessage> response = handler.get();
+
+        assertThat(response.content().text()).isNull();
+        assertThat(response.content().toolExecutionRequests()).hasSize(1);
+        ToolExecutionRequest toolExecutionRequest = response.content().toolExecutionRequests().get(0);
+        assertThat(toolExecutionRequest.name()).isEqualTo(toolName);
+        assertThat(toolExecutionRequest.arguments()).isEqualTo("{}");
+        assertThat(response.finishReason()).isEqualTo(TOOL_EXECUTION);
+
+        ToolExecutionResultMessage toolExecutionResultMessage = from(toolExecutionRequest, "10 o'clock");
+        List<ChatMessage> messages = asList(userMessage, response.content(), toolExecutionResultMessage);
+
+        TestStreamingResponseHandler<AiMessage> secondHandler = new TestStreamingResponseHandler<>();
+        model.generate(messages, singletonList(noArgToolSpec), secondHandler);
+        Response<AiMessage> secondResponse = secondHandler.get();
+
+        AiMessage secondAiMessage = secondResponse.content();
+        assertThat(secondAiMessage.text()).contains("10");
+        assertThat(secondAiMessage.toolExecutionRequests()).isNull();
+
+        TokenUsage secondTokenUsage = secondResponse.tokenUsage();
+        assertThat(secondTokenUsage.inputTokenCount()).isGreaterThan(0);
+        assertThat(secondTokenUsage.outputTokenCount()).isGreaterThan(0);
+        assertThat(secondTokenUsage.totalTokenCount())
+                .isEqualTo(secondTokenUsage.inputTokenCount() + secondTokenUsage.outputTokenCount());
+        assertThat(secondResponse.finishReason()).isEqualTo(STOP);
+    }
+
+    @ParameterizedTest
+    @MethodSource("dev.langchain4j.model.dashscope.QwenTestHelper#functionCallChatModelNameProvider")
+    public void should_call_function_with_argument_then_answer(String modelName) {
+        StreamingChatLanguageModel model = QwenStreamingChatModel.builder()
+                .apiKey(apiKey())
+                .modelName(modelName)
+                .build();
+
+        String toolName = "getCurrentWeather";
+        //noinspection deprecation
+        ToolSpecification hasArgToolSpec = ToolSpecification.builder()
+                .name(toolName)
+                .description("Query the weather of a specified city")
+                .addParameter("cityName", JsonSchemaProperty.STRING)
+                .build();
+
+        UserMessage userMessage = UserMessage.from("Weather in Beijing?");
+
+        TestStreamingResponseHandler<AiMessage> handler = new TestStreamingResponseHandler<>();
+        model.generate(singletonList(userMessage), singletonList(hasArgToolSpec), handler);
+        Response<AiMessage> response = handler.get();
+
+        assertThat(response.content().text()).isNull();
+        assertThat(response.content().toolExecutionRequests()).hasSize(1);
+        ToolExecutionRequest toolExecutionRequest = response.content().toolExecutionRequests().get(0);
+        assertThat(toolExecutionRequest.name()).isEqualTo(toolName);
+        assertThat(toolExecutionRequest.arguments()).contains("Beijing");
+        assertThat(response.finishReason()).isEqualTo(TOOL_EXECUTION);
+
+        ToolExecutionResultMessage toolExecutionResultMessage = from(toolExecutionRequest, "rainy");
+        List<ChatMessage> messages = asList(userMessage, response.content(), toolExecutionResultMessage);
+
+        TestStreamingResponseHandler<AiMessage> secondHandler = new TestStreamingResponseHandler<>();
+        model.generate(messages, singletonList(hasArgToolSpec), secondHandler);
+        Response<AiMessage> secondResponse = secondHandler.get();
+
+        AiMessage secondAiMessage = secondResponse.content();
+        assertThat(secondAiMessage.text()).contains("rain");
+        assertThat(secondAiMessage.toolExecutionRequests()).isNull();
+
+        TokenUsage secondTokenUsage = secondResponse.tokenUsage();
+        assertThat(secondTokenUsage.inputTokenCount()).isGreaterThan(0);
+        assertThat(secondTokenUsage.outputTokenCount()).isGreaterThan(0);
+        assertThat(secondTokenUsage.totalTokenCount())
+                .isEqualTo(secondTokenUsage.inputTokenCount() + secondTokenUsage.outputTokenCount());
+        assertThat(secondResponse.finishReason()).isEqualTo(STOP);
+    }
+
+    @ParameterizedTest
+    @MethodSource("dev.langchain4j.model.dashscope.QwenTestHelper#functionCallChatModelNameProvider")
+    public void should_call_must_be_executed_call_function(String modelName) {
+        StreamingChatLanguageModel model = QwenStreamingChatModel.builder()
+                .apiKey(apiKey())
+                .modelName(modelName)
+                .build();
+
+        String toolName = "getCurrentWeather";
+        //noinspection deprecation
+        ToolSpecification mustBeExecutedTool = ToolSpecification.builder()
+                .name(toolName)
+                .description("Query the weather of a specified city")
+                .addParameter("cityName", JsonSchemaProperty.STRING)
+                .build();
+
+        // not related to tools
+        UserMessage userMessage = UserMessage.from("How many students in the classroom?");
+
+        TestStreamingResponseHandler<AiMessage> handler = new TestStreamingResponseHandler<>();
+        model.generate(singletonList(userMessage), mustBeExecutedTool, handler);
+        Response<AiMessage> response = handler.get();
+
+        assertThat(response.content().text()).isNull();
+        assertThat(response.content().toolExecutionRequests()).hasSize(1);
+        ToolExecutionRequest toolExecutionRequest = response.content().toolExecutionRequests().get(0);
+        assertThat(toolExecutionRequest.name()).isEqualTo(toolName);
+        assertThat(toolExecutionRequest.arguments()).hasSizeGreaterThan(0);
+        assertThat(response.finishReason()).isEqualTo(TOOL_EXECUTION);
+    }
+
+    @ParameterizedTest
+    @MethodSource("dev.langchain4j.model.dashscope.QwenTestHelper#functionCallChatModelNameProvider")
+    void should_call_must_be_executed_call_function_with_argument_then_answer(String modelName) {
+        StreamingChatLanguageModel model = QwenStreamingChatModel.builder()
+                .apiKey(apiKey())
+                .modelName(modelName)
+                .build();
+
+        String toolName = "calculator";
+        //noinspection deprecation
+        ToolSpecification calculator = ToolSpecification.builder()
+                .name(toolName)
+                .description("returns a sum of two numbers")
+                .addParameter("first", INTEGER)
+                .addParameter("second", INTEGER)
+                .build();
+
+        UserMessage userMessage = userMessage("2+2=?");
+
+        TestStreamingResponseHandler<AiMessage> handler = new TestStreamingResponseHandler<>();
+        model.generate(singletonList(userMessage), calculator, handler);
+        Response<AiMessage> response = handler.get();
+
+        AiMessage aiMessage = response.content();
+        assertThat(aiMessage.text()).isNull();
+        assertThat(aiMessage.toolExecutionRequests()).hasSize(1);
+
+        ToolExecutionRequest toolExecutionRequest = aiMessage.toolExecutionRequests().get(0);
+        assertThat(toolExecutionRequest.id()).isNotNull();
+        assertThat(toolExecutionRequest.name()).isEqualTo(toolName);
+        assertThat(toolExecutionRequest.arguments()).isEqualToIgnoringWhitespace("{\"first\": 2, \"second\": 2}");
+
+        TokenUsage tokenUsage = response.tokenUsage();
+        assertThat(tokenUsage.inputTokenCount()).isGreaterThan(0);
+        assertThat(tokenUsage.outputTokenCount()).isGreaterThan(0);
+        assertThat(tokenUsage.totalTokenCount())
+                .isEqualTo(tokenUsage.inputTokenCount() + tokenUsage.outputTokenCount());
+        assertThat(response.finishReason()).isEqualTo(TOOL_EXECUTION);
+
+        ToolExecutionResultMessage toolExecutionResultMessage = from(toolExecutionRequest, "4");
+        List<ChatMessage> messages = asList(userMessage, aiMessage, toolExecutionResultMessage);
+
+        TestStreamingResponseHandler<AiMessage> secondHandler = new TestStreamingResponseHandler<>();
+        model.generate(messages, singletonList(calculator), secondHandler);
+        Response<AiMessage> secondResponse = secondHandler.get();
+
+        AiMessage secondAiMessage = secondResponse.content();
+        assertThat(secondAiMessage.text()).contains("4");
+        assertThat(secondAiMessage.toolExecutionRequests()).isNull();
+
+        TokenUsage secondTokenUsage = secondResponse.tokenUsage();
+        assertThat(secondTokenUsage.inputTokenCount()).isGreaterThan(0);
+        assertThat(secondTokenUsage.outputTokenCount()).isGreaterThan(0);
+        assertThat(secondTokenUsage.totalTokenCount())
+                .isEqualTo(secondTokenUsage.inputTokenCount() + secondTokenUsage.outputTokenCount());
+        assertThat(secondResponse.finishReason()).isEqualTo(STOP);
+    }
+
     @ParameterizedTest
     @MethodSource("dev.langchain4j.model.dashscope.QwenTestHelper#vlChatModelNameProvider")
     public void should_send_multimodal_image_url_and_receive_response(String modelName) {
diff --git a/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelListenerIT.java b/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelListenerIT.java
index 03453d9e49a..97b5f02c0ed 100644
--- a/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelListenerIT.java
+++ b/langchain4j-dashscope/src/test/java/dev/langchain4j/model/dashscope/QwenStreamingChatModelListenerIT.java
@@ -41,9 +41,4 @@ protected StreamingChatLanguageModel createFailingModel(ChatModelListener listen
     protected Class<? extends Exception> expectedExceptionClass() {
         return com.alibaba.dashscope.exception.ApiException.class;
     }
-
-    @Override
-    protected boolean supportsTools() {
-        return false;
-    }
 }
