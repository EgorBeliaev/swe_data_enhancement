[
    {
        "title": "Structured output docs for Ollama"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "<!--\r\nThank you so much for your contribution!\r\n\r\nPlease fill in all the sections below.\r\nPlease open the PR as a draft initially. Once it is reviewed and approved, we will ask you to add documentation and examples.\r\nPlease note that PRs with breaking changes or without tests will be rejected.\r\n\r\nPlease note that PRs will be reviewed based on the priority of the issues they address.\r\nWe ask for your patience. We are doing our best to review your PR as quickly as possible.\r\nPlease refrain from pinging and asking when it will be reviewed. Thank you for understanding!\r\n-->\r\n\r\n\r\n\r\n## Change\r\nAdd documentation about Structured Outputs support in Ollama\r\n\r\n\r\n## General checklist\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [x] There are no breaking changes\r\n- [ ] I have added unit and/or integration tests for my change\r\n- [ ] The tests cover both positive and negative cases\r\n- [ ] I have manually run all the unit and integration tests in the module I have added/changed, and they are all green\r\n- [ ] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules, and they are all green\r\n<!-- Before adding documentation and example(s) (below), please wait until the PR is reviewed and approved. -->\r\n- [ ] I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs)\r\n- [ ] I have added an example in the [examples repo](https://github.com/langchain4j/langchain4j-examples) (only for \"big\" features)\r\n- [ ] I have added/updated [Spring Boot starter(s)](https://github.com/langchain4j/langchain4j-spring) (if applicable)\r\n\r\n\r\n## Checklist for adding new maven module\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have added my new module in the root `pom.xml` and `langchain4j-bom/pom.xml`\r\n\r\n\r\n## Checklist for adding new embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have added a `{NameOfIntegration}EmbeddingStoreIT` that extends from either `EmbeddingStoreIT` or `EmbeddingStoreWithFilteringIT`\r\n- [ ] I have added a `{NameOfIntegration}EmbeddingStoreRemovalIT` that extends from `EmbeddingStoreWithRemovalIT`\r\n\r\n## Checklist for changing existing embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [ ] I have manually verified that the `{NameOfIntegration}EmbeddingStore` works correctly with the data persisted using the latest released version of LangChain4j\r\n"
    },
    {
        "author": null,
        "body": "@bidek thanks a lot!"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "Hi @bidek, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `format` parameter is deprecated in favor of `responseFormat`. This might break existing code that uses the `format` parameter.\n\n\n#### Potential Design Issues\n-  The introduction of `ResponseFormat` and `ResponseFormatType` might add complexity to the API.\n-  The documentation mentions that `AIService` will automatically generate schema from interface return value, but it is not clear how this is implemented and if there are any limitations.\n\n\n#### Potential Bugs\n-  Incorrect handling of edge cases in JSON schema parsing or generation might lead to unexpected behavior or errors.\n-  The model might not always adhere perfectly to the provided JSON schema, especially for complex schemas or ambiguous prompts.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid JSON schema.\n  - When: The OllamaChatModel is configured with a valid JSON schema.\n  - Then: The Ollama model should correctly generate a JSON response that adheres to the schema.\n\n-\n  - Given: A prompt that is compatible with the provided JSON schema.\n  - When: The OllamaChatModel is configured with a JSON schema and receives a prompt that aligns with the schema's requirements.\n  - Then: The Ollama model should generate a JSON response that adheres to the schema.\n\n-\n  - Given: The `RESPONSE_FORMAT_JSON_SCHEMA` capability is set.\n  - When: The OllamaChatModel is created with the `RESPONSE_FORMAT_JSON_SCHEMA` capability and used with `AIService`.\n  - Then: The `AIService` should automatically generate the schema from the interface return value.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An invalid JSON schema.\n  - When: The OllamaChatModel is configured with an invalid JSON schema.\n  - Then: The OllamaChatModel should throw an exception or return an error message.\n\n-\n  - Given: A prompt that is not compatible with the provided JSON schema.\n  - When: The OllamaChatModel is configured with a JSON schema and receives a prompt that does not align with the schema's requirements.\n  - Then: The Ollama model should return an error message or a JSON response that does not fully adhere to the schema.\n\n-\n  - Given: The Ollama server is unavailable or returns an error.\n  - When: The Ollama server is not reachable or returns an error during a request.\n  - Then: The OllamaChatModel should handle the error gracefully and throw an exception or return an error message.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A complex JSON schema with nested objects and arrays.\n  - When: The OllamaChatModel is configured with the complex JSON schema.\n  - Then: The Ollama model should correctly generate a JSON response that adheres to the schema.\n\n-\n  - Given: A JSON schema with optional properties.\n  - When: The OllamaChatModel is configured with the JSON schema containing optional properties.\n  - Then: The Ollama model should generate a JSON response that may or may not include the optional properties.\n\n-\n  - Given: A JSON schema with specific data types (e.g., integer, boolean).\n  - When: The OllamaChatModel is configured with the JSON schema specifying data types.\n  - Then: The Ollama model should generate a JSON response with the correct data types.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n"
    }
]