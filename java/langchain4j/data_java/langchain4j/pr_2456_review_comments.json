[
    {
        "title": "Fix NullPointerException if the response doesn't contain usage info"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Currently when using the OpenAI embedding model, if there is no `usage` element in the response it fails with a `NullPointerException`.\r\n\r\nThere are some model serving runtimes (like SBERT) which do not provide the `usage` element on embedding responses.\r\n\r\nFor example...\r\n\r\n`curl -X POST http://localhost:11434/v1/embeddings -H \"Accept: application/json\" -H \"Content-Type: application/json\" -d @input.json > output.json`\r\n\r\ninput.json:\r\n```json\r\n{\r\n  \"model\": \"nomic-embed-text:v1.5\",\r\n  \"input\": [\r\n    \"Parasol Insurance Company\\nPolicy Document\\n\\n1. Coverage\\n1.1. This policy provides coverage for the insured vehicle as specified in the declarations page.\\n1.2. Coverage types may include:\\n\\n1.2.1. Liability (Bodily Injury and Property Damage)\\n1.2.2. Collision\\n1.2.3. Comprehensive\\n1.2.4. Personal Injury Protection (PIP)\\n1.2.5. Uninsured / Underinsured Motorist\\n\\n1.3. Specific coverage limits and deductibles are listed on the declarations page.\\n\\n2. Policy Term\\n2.1. The policy term is six months from the date of inception, unless otherwise specified.\\n2.2. Renewal is not automatic and must be initiated by the policyholder.\\n\\n3. Exclusions\\n3.1. Damage caused by intential acts or gross negligence is not covered.\\n3.2. Normal wear and tear is excluded from coverage.\\n3.3. Damage resulting from racing is excluded\\n3.4. Damage resulting from using the vehicle for commercial purposes without proper endorsement\\n\\nis excluded.\\n3.5. Driving under the influence of alcohol or drugs voids coverage for that incident.\\n\\n4. Claim Process\\n4.1. Claims should be filed as soon as possible after an incident.\\n4.2. Policyholders must provide all relevant information, including police reports when applicable.\\n4.3. An adjuster may be assigned to inspect the vehicle and assess damages.\",\r\n    \"4.3.\\n\\nAn adjuster may be assigned to inspect the vehicle and assess damages.\\n\\n5. Premiums and Deductibles\\n5.1. Premiums are calculated based on factors including driver history, vehicle type, and coverage\\n\\nselected.\\n5.2. Deductibles apply to collision and comprehensive coverage as specified on the declarations\\n\\npage.\\n\\n6. Cancellation\\n6.1. The policyholder may cancel at any time with pro-rata refund of premiums.\\n6.2. The insurer reserves the right to cancel within 30 days notice, or immediately in cases of\\n\\nnon-payment or fraud.\\n\\n7. Definitions\\n7.1. \"Insured vehicle\" refers to the automobile listed on the declarations page.\\n\\n7.2. \"Accident\" means a sudden, unexpected event resulting in damage or injury.\\n\\n8. Additional Provisions\\n8.1. Coverage extends to other drivers listed on the policy.\\n8.2. Rental car coverage may be included if specified on the declarations page.\\n8.3. Roadside assistance may be available if specified on the declarations page.\\n\\n9. Contact Information\\nFor claims or inquiries:\\nPhone: 800-CAR-SAFE\\nEmail: claims@parasol.com\"\r\n  ]\r\n}\r\n```\r\n\r\noutput.json:\r\n```json\r\n{\r\n  \"object\": \"list\",\r\n  \"data\": [\r\n    {\r\n      \"object\": \"embedding\",\r\n      \"embedding\": [\r\n        0.061953582,\r\n        0.023107821,\r\n        -0.18001755\r\n      ],\r\n      \"index\": 0\r\n    },\r\n    {\r\n      \"object\": \"embedding\",\r\n      \"embedding\": [\r\n        0.030326294,\r\n        0.0034915505,\r\n        -0.15638898,\r\n        -0.013955873,\r\n        0.06822011,\r\n        -0.01184705,\r\n        0.024880989\r\n      ],\r\n      \"index\": 1\r\n    }\r\n  ],\r\n  \"model\": \"nomic-embed-text:v1.5\"\r\n}\r\n```\r\n\r\nYou end up with\r\n\r\n```\r\njava.lang.NullPointerException\r\n        at java.base/java.util.Objects.requireNonNull(Objects.java:233)\r\n        at java.base/java.util.Optional.of(Optional.java:113)\r\n        at java.base/java.util.stream.ReduceOps$2ReducingSink.get(ReduceOps.java:129)\r\n        at java.base/java.util.stream.ReduceOps$2ReducingSink.get(ReduceOps.java:107)\r\n        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\r\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.base/java.util.stream.ReferencePipeline.reduce(ReferencePipeline.java:662)\r\n        at dev.langchain4j.model.openai.OpenAiEmbeddingModel.embedBatchedTexts(OpenAiEmbeddingModel.java:139)\r\n        at dev.langchain4j.model.openai.OpenAiEmbeddingModel.embedAll(OpenAiEmbeddingModel.java:114)\r\n```\r\n\r\nThe fix here is to filter out all results that are `null` before trying to reduce to a `TokenUsage`."
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@edeandrea thank you!"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @edeandrea, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The change modifies how token usage is handled, which might affect code that relies on the previous behavior of always having a non-null token usage.\n\n\n#### Potential Design Issues\n-  The fix addresses the immediate NullPointerException but doesn't provide a more robust way to handle missing or invalid usage data. A more comprehensive approach might involve logging a warning or using a default value.\n\n\n#### Potential Bugs\n-  If the filter(Objects::nonNull) is not correctly applied, it might still lead to a NullPointerException if the stream contains null values.\n-  The change relies on the assumption that if the usage field is missing, it should be treated as null. If there are other cases where the usage field is present but invalid, it might lead to unexpected behavior.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding request with a usage field in the response\n  - When: The embedding model is called with a valid request\n  - Then: The code should return a valid response with the correct embeddings and token usage\n\n-\n  - Given: A valid embedding request with no usage field in the response\n  - When: The embedding model is called with a valid request that does not return a usage field\n  - Then: The code should return a valid response with the correct embeddings and null token usage\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: A very large number of text segments are sent for embedding\n  - When: The embedding model is called with a large number of text segments\n  - Then: The code should not throw a NullPointerException and should handle the large number of segments correctly\n\n-\n  - Given: The embedding API returns an error\n  - When: The embedding API returns an error response\n  - Then: The code should handle the error gracefully and not throw a NullPointerException\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: An embedding response with a null usage field\n  - When: The embedding model is called with a request that results in a null usage field in the response\n  - Then: The code should not throw a NullPointerException and should return a valid response with null token usage\n\n-\n  - Given: An embedding response with an empty usage field\n  - When: The embedding model is called with a request that results in an empty usage field in the response\n  - Then: The code should not throw a NullPointerException and should return a valid response with null token usage\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @edeandrea, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The change in how token usage is handled might expose a bug if the consumer code was relying on a NullPointerException being thrown when usage is missing.\n\n\n#### Potential Design Issues\n-  The code now handles missing 'usage' gracefully, but it might be better to log a warning or error if the usage is missing, as it might indicate an issue with the model or the API.\n\n\n#### Potential Bugs\n-  If the response structure changes in the future, the code might not handle it correctly, especially if new fields are added or existing ones are removed.\n-  The fix relies on `Objects::nonNull` filter, which might not be the most efficient way to handle nulls in a stream. It might be better to use `Optional` to avoid the filter.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: An embedding response with a valid 'usage' object\n  - When: The embedding model is called with a request that results in a valid usage object in the response.\n  - Then: The code should correctly parse the usage information and return it as part of the response.\n\n-\n  - Given: An embedding response without a 'usage' object\n  - When: The embedding model is called with a request that results in a response without a usage object.\n  - Then: The code should not throw a NullPointerException and should return a response with null token usage.\n\n-\n  - Given: Multiple text segments are provided for embedding\n  - When: The embedding model is called with multiple text segments.\n  - Then: The code should correctly process all segments and return a list of embeddings.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An embedding response with a missing 'embedding' array\n  - When: The embedding model is called with a request that results in a response missing the embedding array.\n  - Then: The code should throw an exception or return an error response.\n\n-\n  - Given: An embedding response with an invalid 'embedding' array (e.g., wrong data type)\n  - When: The embedding model is called with a request that results in a response with an invalid embedding array.\n  - Then: The code should throw an exception or return an error response.\n\n-\n  - Given: An embedding response with a missing 'data' array\n  - When: The embedding model is called with a request that results in a response missing the data array.\n  - Then: The code should throw an exception or return an error response.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: An embedding response with an empty 'usage' object\n  - When: The embedding model is called with a request that results in an empty usage object in the response.\n  - Then: The code should not throw a NullPointerException and should handle the empty usage object gracefully.\n\n-\n  - Given: An embedding response with a 'usage' object that has null values\n  - When: The embedding model is called with a request that results in a usage object with null values in the response.\n  - Then: The code should not throw a NullPointerException and should handle the null values gracefully.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "Hi @edeandrea, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The change in how token usage is handled might expose a bug if the consumer code was relying on a NullPointerException being thrown when usage is missing.\n\n\n#### Potential Design Issues\n-  The code now handles missing 'usage' gracefully, but it might be better to log a warning or error if the usage is missing, as it might indicate an issue with the model or the API.\n\n\n#### Potential Bugs\n-  If the response structure changes in the future, the code might not handle it correctly, especially if new fields are added or existing ones are removed.\n-  The fix relies on `Objects::nonNull` filter, which might not be the most efficient way to handle nulls in a stream. It might be better to use `Optional` to avoid the filter.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u274c\n#### Suggested Positive Test Scenarios\n-\n  - Given: An embedding response with a valid 'usage' object\n  - When: The embedding model is called with a request that results in a valid usage object in the response.\n  - Then: The code should correctly parse the usage information and return it as part of the response.\n\n-\n  - Given: An embedding response without a 'usage' object\n  - When: The embedding model is called with a request that results in a response without a usage object.\n  - Then: The code should not throw a NullPointerException and should return a response with null token usage.\n\n-\n  - Given: Multiple text segments are provided for embedding\n  - When: The embedding model is called with multiple text segments.\n  - Then: The code should correctly process all segments and return a list of embeddings.\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: An embedding response with a missing 'embedding' array\n  - When: The embedding model is called with a request that results in a response missing the embedding array.\n  - Then: The code should throw an exception or return an error response.\n\n-\n  - Given: An embedding response with an invalid 'embedding' array (e.g., wrong data type)\n  - When: The embedding model is called with a request that results in a response with an invalid embedding array.\n  - Then: The code should throw an exception or return an error response.\n\n-\n  - Given: An embedding response with a missing 'data' array\n  - When: The embedding model is called with a request that results in a response missing the data array.\n  - Then: The code should throw an exception or return an error response.\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: An embedding response with an empty 'usage' object\n  - When: The embedding model is called with a request that results in an empty usage object in the response.\n  - Then: The code should not throw a NullPointerException and should handle the empty usage object gracefully.\n\n-\n  - Given: An embedding response with a 'usage' object that has null values\n  - When: The embedding model is called with a request that results in a usage object with null values in the response.\n  - Then: The code should not throw a NullPointerException and should handle the null values gracefully.\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n"
    },
    {
        "author": {
            "login": "edeandrea"
        },
        "body": "@dliubarskyi see #2459 "
    }
]