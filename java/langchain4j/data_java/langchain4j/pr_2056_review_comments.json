[
    {
        "title": "migrate vespa to jackson + tests and refactorings"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "<!--\r\nThank you so much for your contribution!\r\n\r\nPlease fill in all the sections below.\r\nPlease open the PR as a draft initially. Once it is reviewed and approved, we will ask you to add documentation and examples.\r\nPlease note that PRs with breaking changes or without tests will be rejected.\r\n\r\nPlease note that PRs will be reviewed based on the priority of the issues they address.\r\nWe ask for your patience. We are doing our best to review your PR as quickly as possible.\r\nPlease refrain from pinging and asking when it will be reviewed. Thank you for understanding!\r\n-->\r\n\r\n## Issue\r\n<!-- Please specify the ID of the issue this PR is addressing. For example: \"Closes #1234\" or \"Fixes #1234\" -->\r\nCloses #1681\r\n\r\n## Change\r\n<!-- Please describe the changes you made. -->\r\n\r\n1. Raise the baseline from jdk8 to jdk17 (because the newest vespa-feed-client is no longer support jdk8).\r\n2. Migrate from Gson to Jackson.\r\n3. Get rid of Lombok\r\n4. Implement VespaEmbeddingStoreIT\r\n5. <s>VespaEmbeddingStoreCloudIT</s> will be done in scope of other ticket\r\n6. Support new API search()\r\n7. Support logRequests & logResponses\r\n8. Make parameters keyPath & certPath optional\r\n9. Support removeAll()\r\n\r\n## General checklist\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [x] There are no breaking changes\r\n- [x] I have added unit and integration tests for my change\r\n- [x] I have manually run all the unit and integration tests in the module I have added/changed, and they are all green\r\n- [x] I have manually run all the unit and integration tests in the [core](https://github.com/langchain4j/langchain4j/tree/main/langchain4j-core) and [main](https://github.com/langchain4j/langchain4j/tree/main/langchain4j) modules, and they are all green\r\n<!-- Before adding documentation and example(s) (below), please wait until the PR is reviewed and approved. -->\r\n- [x] <s>I have added/updated the [documentation](https://github.com/langchain4j/langchain4j/tree/main/docs/docs)</s> will be done in scope of other ticket\r\n- [x] I have added an example in the [examples repo](https://github.com/langchain4j/langchain4j-examples) (only for \"big\" features) will be updated in scope of other ticket\r\n- [x] I have added/updated [Spring Boot starter(s)](https://github.com/langchain4j/langchain4j-spring) (if applicable)\r\n\r\n\r\n## Checklist for changing existing embedding store integration\r\n<!-- Please double-check the following points and mark them like this: [X] -->\r\n- [x] I have manually verified that the `{NameOfIntegration}EmbeddingStore` works correctly with the data persisted using the latest released version of LangChain4j\r\n"
    },
    {
        "author": null,
        "body": "@Heezer thanks a lot!"
    },
    {
        "author": {
            "login": "Martin7-1"
        },
        "body": "Thank you!"
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": null,
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": ""
    },
    {
        "author": {
            "login": "dliubarskyi"
        },
        "body": "@Heezer thanks a lot, great job!"
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": "@langchain4j  there are lots of builds failing, I suppose my changes have nothing to do with that \ud83d\ude04 "
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": "@langchain4j I would like to take point 5 - updating of `VespaEmbeddingStoreCloudIT` and documentation into separate issues, otherwise it's way too much \ud83d\ude04 what is actually the case already anyway \ud83d\ude04 fine? removing draft label then..."
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @Heezer, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n- \u26a0\ufe0f The `VespaEmbeddingStore` constructor now requires `clusterName` parameter.\n-  The `VespaEmbeddingStore` constructor now accepts `logRequests` and `logResponses` parameters.\n-  The `VespaEmbeddingStore` now uses Jackson instead of Gson for JSON serialization/deserialization.\n- \u26a0\ufe0f The `VespaEmbeddingStore` now uses a new API `search` instead of `findRelevant`.\n- \u26a0\ufe0f The `VespaEmbeddingStore` now returns `EmbeddingSearchResult` instead of `List<EmbeddingMatch<TextSegment>>`.\n\n\n#### Potential Design Issues\n-  The `VespaClient` class is copied from `vespa-feed-client` and might not be the best way to handle the client creation.\n-  The `VespaEmbeddingStore` class has a lot of parameters in the constructor, which might make it hard to use.\n-  The logging interceptors are added to the OkHttpClient builder, which might not be the best place for them.\n\n\n#### Potential Bugs\n-  Incorrect handling of edge cases in the new search API might lead to unexpected results.\n-  Potential issues with SSL configuration if key and cert paths are not handled correctly.\n-  The new logging interceptors might introduce performance overhead if not configured properly.\n-  The migration from Gson to Jackson might introduce subtle bugs related to JSON parsing.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid embedding and text segment are provided\n  - When: add is called with a valid embedding and text segment\n  - Then: The embedding should be added to the store and can be retrieved\n\n-\n  - Given: A list of valid embeddings and text segments are provided\n  - When: addAll is called with a list of valid embeddings and text segments\n  - Then: All embeddings should be added to the store and can be retrieved\n\n-\n  - Given: A valid embedding is provided\n  - When: add is called with a valid embedding\n  - Then: The embedding should be added to the store and can be retrieved\n\n-\n  - Given: A list of valid embeddings is provided\n  - When: addAll is called with a list of valid embeddings\n  - Then: All embeddings should be added to the store and can be retrieved\n\n-\n  - Given: A valid embedding and a minScore are provided\n  - When: findRelevant is called with a valid embedding and a minScore\n  - Then: Only embeddings with a score greater than or equal to the minScore should be returned\n\n-\n  - Given: A valid embedding and maxResults are provided\n  - When: findRelevant is called with a valid embedding and maxResults\n  - Then: Only the specified number of embeddings should be returned\n\n-\n  - Given: The store contains embeddings\n  - When: removeAll is called\n  - Then: removeAll should remove all embeddings from the store\n\n-\n  - Given: The store is empty\n  - When: removeAll is called\n  - Then: removeAll should not throw an exception\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid URL is provided\n  - When: VespaEmbeddingStore is initialized with an invalid URL\n  - Then: An exception should be thrown\n\n-\n  - Given: Invalid key or cert path is provided\n  - When: VespaEmbeddingStore is initialized with invalid key or cert paths\n  - Then: An exception should be thrown\n\n-\n  - Given: Vespa server is not available\n  - When: VespaEmbeddingStore tries to connect to an unavailable server\n  - Then: An exception should be thrown\n\n-\n  - Given: An invalid embedding is provided\n  - When: add or addAll is called with an invalid embedding\n  - Then: An exception should be thrown\n\n-\n  - Given: An invalid document type is provided\n  - When: VespaEmbeddingStore is initialized with an invalid document type\n  - Then: An exception should be thrown\n\n-\n  - Given: An invalid namespace is provided\n  - When: VespaEmbeddingStore is initialized with an invalid namespace\n  - Then: An exception should be thrown\n\n-\n  - Given: An invalid rank profile is provided\n  - When: VespaEmbeddingStore is initialized with an invalid rank profile\n  - Then: An exception should be thrown\n\n-\n  - Given: A negative maxResults is provided\n  - When: findRelevant is called with a negative maxResults\n  - Then: An exception should be thrown\n\n-\n  - Given: A maxResults of 0 is provided\n  - When: findRelevant is called with a maxResults of 0\n  - Then: An empty list should be returned\n\n-\n  - Given: A minScore greater than 1 is provided\n  - When: findRelevant is called with a minScore greater than 1\n  - Then: An empty list should be returned\n\n-\n  - Given: A minScore less than -1 is provided\n  - When: findRelevant is called with a minScore less than -1\n  - Then: An empty list should be returned\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: addAll is called with a large list of embeddings\n  - Then: The store should handle the large number of embeddings without performance degradation or errors\n\n-\n  - Given: An empty list of embeddings is provided\n  - When: addAll is called with an empty list\n  - Then: The store should handle the empty list without errors\n\n-\n  - Given: A very long text segment is provided\n  - When: add or addAll is called with a very long text segment\n  - Then: The store should handle the long text segment without errors\n\n-\n  - Given: A very short text segment is provided\n  - When: add or addAll is called with a very short text segment\n  - Then: The store should handle the short text segment without errors\n\n-\n  - Given: A text segment with special characters is provided\n  - When: add or addAll is called with a text segment containing special characters\n  - Then: The store should handle the special characters without errors\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": "> @langchain4j there are lots of builds failing, I suppose my changes have nothing to do with that \ud83d\ude04\r\n\r\n@langchain4j builds 17 and 21 fail with timeouts in azure-open-ai \ud83e\udd37\u200d\u2642\ufe0f"
    },
    {
        "author": null,
        "body": "Hi @Heezer, happy New Year! \ud83e\udd73 \r\n\r\n> @langchain4j builds 17 and 21 fail with timeouts in azure-open-ai \ud83e\udd37\u200d\u2642\ufe0f\r\n\r\nNo worries, please ignore tests not related to your changes"
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": "> Hi @Heezer, happy New Year! \ud83e\udd73 \n\nThx and happy New Year back \u2603\ufe0f"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @Heezer, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `VespaQueryApi` and `VespaQueryClient` classes have been removed, and the `VespaClient` class now uses Jackson instead of Gson for JSON serialization/deserialization. This might break code that directly uses these classes or relies on Gson.\n-  The constructor of `VespaEmbeddingStore` now accepts `String` for key and cert paths instead of `Path`. This might break code that uses the old constructor.\n- \u26a0\ufe0f The `findRelevant` method is replaced with `search` method which returns `EmbeddingSearchResult` instead of `List<EmbeddingMatch<TextSegment>>`.\n\n\n#### Potential Design Issues\n-  The `VespaClient` class is copied from `vespa-feed-client` and might not be the most efficient way to handle Vespa API calls. It might be better to use the official Vespa client library when it becomes available.\n-  The `VespaEmbeddingStore` class has a lot of configuration parameters, which might make it difficult to use. It might be better to use a builder pattern or a configuration object to manage these parameters.\n-  The logging interceptors might introduce performance overhead. It might be better to make them optional or configurable.\n\n\n#### Potential Bugs\n-  There might be issues with SSL certificate handling if the provided paths are incorrect or the certificates are not in the expected format.\n-  The logic for generating document IDs might have issues if the `avoidDups` flag is not handled correctly.\n-  The new `search` method might have issues with handling edge cases related to minScore and maxResults.\n-  The `removeAll` method might not work correctly if the cluster name is not configured properly.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid Vespa server is running\n  - When: various operations are performed\n  - Then: The store should successfully add, search, and remove embeddings\n\n-\n  - Given: Embeddings are added with and without IDs\n  - When: add and addAll are called with and without IDs\n  - Then: The store should correctly store and retrieve embeddings using both methods\n\n-\n  - Given: Embeddings are added with and without text segments\n  - When: add and addAll are called with and without text segments\n  - Then: The store should correctly store and retrieve embeddings and associated text segments\n\n-\n  - Given: A search is performed with a valid query embedding\n  - When: findRelevant is called with a valid query embedding\n  - Then: The store should return relevant embeddings based on cosine similarity\n\n-\n  - Given: removeAll is called\n  - When: removeAll is called\n  - Then: The store should remove all embeddings\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid SSL certificate or key paths are provided\n  - When: VespaEmbeddingStore is created with incorrect keyPath or certPath\n  - Then: The store should throw an exception during initialization\n\n-\n  - Given: An invalid URL is provided\n  - When: VespaEmbeddingStore is created with an invalid URL\n  - Then: The store should throw an exception during initialization\n\n-\n  - Given: An attempt is made to add embeddings with mismatched IDs, embeddings, and segments\n  - When: addAll is called with lists of different sizes\n  - Then: The store should throw an IllegalArgumentException\n\n-\n  - Given: A search is performed with a negative maxResults\n  - When: findRelevant is called with a negative maxResults\n  - Then: The store should throw an IllegalArgumentException\n\n-\n  - Given: A search is performed with a maxResults of 0\n  - When: findRelevant is called with maxResults set to 0\n  - Then: The store should return an empty list\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: addAll is called with a list of thousands of embeddings\n  - Then: The store should handle the large number of embeddings without performance degradation or errors\n\n-\n  - Given: A search is performed with a very low minScore\n  - When: findRelevant is called with a minScore close to 0\n  - Then: The store should return all embeddings, or as many as maxResults allows, regardless of their relevance\n\n-\n  - Given: A search is performed with a very high minScore\n  - When: findRelevant is called with a minScore close to 1\n  - Then: The store should return only the most relevant embeddings, or an empty list if no embeddings match\n\n-\n  - Given: The Vespa server is temporarily unavailable\n  - When: any operation is performed while the server is down\n  - Then: The store should handle the connection error gracefully and throw a meaningful exception\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "<details>\n<summary>Click here to view this outdated comment. Please see my most recent comment below.</summary>\nHi @Heezer, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The `VespaQueryApi` and `VespaQueryClient` classes have been removed, and the `VespaClient` class now uses Jackson instead of Gson for JSON serialization/deserialization. This might break code that directly uses these classes or relies on Gson.\n-  The constructor of `VespaEmbeddingStore` now accepts `String` for key and cert paths instead of `Path`. This might break code that uses the old constructor.\n- \u26a0\ufe0f The `findRelevant` method is replaced with `search` method which returns `EmbeddingSearchResult` instead of `List<EmbeddingMatch<TextSegment>>`.\n\n\n#### Potential Design Issues\n-  The `VespaClient` class is copied from `vespa-feed-client` and might not be the most efficient way to handle Vespa API calls. It might be better to use the official Vespa client library when it becomes available.\n-  The `VespaEmbeddingStore` class has a lot of configuration parameters, which might make it difficult to use. It might be better to use a builder pattern or a configuration object to manage these parameters.\n-  The logging interceptors might introduce performance overhead. It might be better to make them optional or configurable.\n\n\n#### Potential Bugs\n-  There might be issues with SSL certificate handling if the provided paths are incorrect or the certificates are not in the expected format.\n-  The logic for generating document IDs might have issues if the `avoidDups` flag is not handled correctly.\n-  The new `search` method might have issues with handling edge cases related to minScore and maxResults.\n-  The `removeAll` method might not work correctly if the cluster name is not configured properly.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid Vespa server is running\n  - When: various operations are performed\n  - Then: The store should successfully add, search, and remove embeddings\n\n-\n  - Given: Embeddings are added with and without IDs\n  - When: add and addAll are called with and without IDs\n  - Then: The store should correctly store and retrieve embeddings using both methods\n\n-\n  - Given: Embeddings are added with and without text segments\n  - When: add and addAll are called with and without text segments\n  - Then: The store should correctly store and retrieve embeddings and associated text segments\n\n-\n  - Given: A search is performed with a valid query embedding\n  - When: findRelevant is called with a valid query embedding\n  - Then: The store should return relevant embeddings based on cosine similarity\n\n-\n  - Given: removeAll is called\n  - When: removeAll is called\n  - Then: The store should remove all embeddings\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid SSL certificate or key paths are provided\n  - When: VespaEmbeddingStore is created with incorrect keyPath or certPath\n  - Then: The store should throw an exception during initialization\n\n-\n  - Given: An invalid URL is provided\n  - When: VespaEmbeddingStore is created with an invalid URL\n  - Then: The store should throw an exception during initialization\n\n-\n  - Given: An attempt is made to add embeddings with mismatched IDs, embeddings, and segments\n  - When: addAll is called with lists of different sizes\n  - Then: The store should throw an IllegalArgumentException\n\n-\n  - Given: A search is performed with a negative maxResults\n  - When: findRelevant is called with a negative maxResults\n  - Then: The store should throw an IllegalArgumentException\n\n-\n  - Given: A search is performed with a maxResults of 0\n  - When: findRelevant is called with maxResults set to 0\n  - Then: The store should return an empty list\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added to the store\n  - When: addAll is called with a list of thousands of embeddings\n  - Then: The store should handle the large number of embeddings without performance degradation or errors\n\n-\n  - Given: A search is performed with a very low minScore\n  - When: findRelevant is called with a minScore close to 0\n  - Then: The store should return all embeddings, or as many as maxResults allows, regardless of their relevance\n\n-\n  - Given: A search is performed with a very high minScore\n  - When: findRelevant is called with a minScore close to 1\n  - Then: The store should return only the most relevant embeddings, or an empty list if no embeddings match\n\n-\n  - Given: The Vespa server is temporarily unavailable\n  - When: any operation is performed while the server is down\n  - Then: The store should handle the connection error gracefully and throw a meaningful exception\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n\n</details>"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "Hi @Heezer, thank you very much for your PR! \u2764\ufe0f\nI'm a bot powered by Google AI Gemini gemini-2.0-flash-exp.\nThe maintainers of LangChain4j will perform a thorough code review as soon as they can, but in the meantime, here\u2019s a preliminary review from me. I hope you find it helpful.\n\n### Potential Issues\n\n#### Potential Breaking Changes\n-  The constructor of `VespaEmbeddingStore` has been changed to use `String` instead of `Path` for key and cert paths, and also added `clusterName`, `logRequests` and `logResponses` parameters. This might break existing code that uses the old constructor.\n- \u26a0\ufe0f The `findRelevant` method has been removed and replaced with `search` method which returns `EmbeddingSearchResult` instead of `List<EmbeddingMatch<TextSegment>>`. This will break existing code that uses the old method.\n-  The underlying Vespa client library has been changed from `vespa-feed-client` to `okhttp3` and `retrofit2`. This might break existing code that relies on the old client library.\n-  The dependency on `com.google.code.gson` has been removed and replaced with `com.fasterxml.jackson.core`. This might break existing code that relies on the old dependency.\n-  The dependency on `lombok` has been removed. This might break existing code that relies on lombok annotations.\n\n\n#### Potential Design Issues\n-  The `VespaClient` class is a workaround and might need to be replaced with the official Vespa client library in the future.\n-  The `VespaEmbeddingStore` class is tightly coupled with the Vespa API and might be difficult to extend or modify in the future.\n-  The logging interceptors might add overhead to the requests and responses, especially if the logging level is set to debug.\n\n\n#### Potential Bugs\n-  There might be issues with SSL certificate handling if the provided paths are incorrect or the certificates are invalid.\n-  There might be issues with the new `search` method if the query parameters are not correctly formatted or if the Vespa server returns an unexpected response.\n-  There might be issues with the `removeAll` method if the cluster name is incorrect or if the Vespa server returns an error.\n-  There might be issues with the logging interceptors if the logging configuration is not set up correctly.\n-  There might be issues with the new `VespaClient` class if the PEM parsing logic is not robust enough.\n\n\n### Testing\n\nChanges in this PR are sufficiently tested: \u2705\n#### Suggested Positive Test Scenarios\n-\n  - Given: A valid Vespa configuration\n  - When: VespaEmbeddingStore is created with valid parameters\n  - Then: Embeddings should be added and searchable\n\n-\n  - Given: Embeddings are added with and without IDs\n  - When: add and addAll are called with and without IDs\n  - Then: All embeddings should be searchable\n\n-\n  - Given: Embeddings are added with and without text segments\n  - When: add and addAll are called with and without text segments\n  - Then: All embeddings should be searchable\n\n-\n  - Given: Embeddings are added with a specific ID\n  - When: add is called with a specific ID\n  - Then: The embedding should be searchable using the same ID\n\n-\n  - Given: Embeddings are added with a text segment\n  - When: add is called with a text segment\n  - Then: The embedding and the text segment should be searchable\n\n-\n  - Given: Multiple embeddings are added at once\n  - When: addAll is called with a list of embeddings\n  - Then: All embeddings should be searchable\n\n-\n  - Given: A search is performed with a minScore\n  - When: search is called with a minScore\n  - Then: Only embeddings with a score greater than or equal to the minScore should be returned\n\n-\n  - Given: A search is performed with a maxResults\n  - When: search is called with a maxResults\n  - Then: No more than maxResults embeddings should be returned\n\n-\n  - Given: All embeddings are removed\n  - When: removeAll is called\n  - Then: The store should be empty\n\n\n\n#### Suggested Negative Test Scenarios\n-\n  - Given: Invalid URL is provided\n  - When: VespaEmbeddingStore is created with an invalid URL\n  - Then: An exception should be thrown during initialization\n\n-\n  - Given: Invalid key or cert path is provided\n  - When: VespaEmbeddingStore is created with invalid key or cert paths\n  - Then: An exception should be thrown during initialization\n\n-\n  - Given: Vespa server is not available\n  - When: Vespa server is down or not reachable\n  - Then: An exception should be thrown when trying to add or search embeddings\n\n-\n  - Given: An attempt to add embeddings with mismatched IDs and segments\n  - When: addAll is called with mismatched lists of ids, embeddings and segments\n  - Then: An IllegalArgumentException should be thrown\n\n-\n  - Given: An attempt to search with a negative maxResults\n  - When: search is called with a negative maxResults\n  - Then: An exception should be thrown\n\n-\n  - Given: An attempt to search with a maxResults of 0\n  - When: search is called with a maxResults of 0\n  - Then: An empty list of matches should be returned\n\n\n\n#### Suggested Corner Case Test Scenarios\n-\n  - Given: A large number of embeddings are added at once\n  - When: addAll is called with a large list of embeddings\n  - Then: The store should handle the load without errors and all embeddings should be searchable\n\n-\n  - Given: An empty text segment is added\n  - When: add or addAll is called with an empty text segment\n  - Then: The store should handle the empty text segment and the embedding should be searchable\n\n-\n  - Given: A very long text segment is added\n  - When: add or addAll is called with a very long text segment\n  - Then: The store should handle the long text segment and the embedding should be searchable\n\n-\n  - Given: A text segment with special characters is added\n  - When: add or addAll is called with a text segment containing special characters\n  - Then: The store should handle the special characters and the embedding should be searchable\n\n\n\n### Documentation\n\nChanges in this PR are sufficiently documented: \u2705\n"
    },
    {
        "author": {
            "login": "Heezer"
        },
        "body": "@langchain4j, @Martin7-1  guys, can you review pls? \ud83d\ude4f "
    }
]