diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CaReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CaReconciler.java
index 82ddce809b..0f9f75c176 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CaReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CaReconciler.java
@@ -329,7 +329,7 @@ Future<Void> reconcileClusterOperatorSecret(Clock clock) {
                     );
 
                     return secretOperator.reconcile(reconciliation, reconciliation.namespace(), KafkaResources.clusterOperatorCertsSecretName(reconciliation.name()), coSecret)
-                            .map((Void) null);
+                            .mapEmpty();
                 });
     }
 
@@ -523,7 +523,7 @@ Future<Void> maybeRollingUpdateForNewClusterCaKey() {
 
             if (clusterCa.certsRemoved()) {
                 return secretOperator.reconcile(reconciliation, reconciliation.namespace(), AbstractModel.clusterCaCertSecretName(reconciliation.name()), clusterCa.caCertSecret())
-                        .map((Void) null);
+                        .mapEmpty();
             } else {
                 return Future.succeededFuture();
             }
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CruiseControlReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CruiseControlReconciler.java
index 441ea2fa99..4a2b8566a0 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CruiseControlReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/CruiseControlReconciler.java
@@ -153,7 +153,7 @@ protected Future<Void> networkPolicy() {
                             CruiseControlResources.networkPolicyName(reconciliation.name()),
                             cruiseControl != null ? cruiseControl.generateNetworkPolicy(
                                 operatorNamespace, operatorNamespaceLabels, isTopicOperatorEnabled) : null
-                    ).map((Void) null);
+                    ).mapEmpty();
         } else {
             return Future.succeededFuture();
         }
@@ -171,7 +171,7 @@ protected Future<Void> serviceAccount() {
                         reconciliation.namespace(),
                         CruiseControlResources.serviceAccountName(reconciliation.name()),
                         cruiseControl != null ? cruiseControl.generateServiceAccount() : null
-                ).map((Void) null);
+                ).mapEmpty();
     }
 
     /**
@@ -197,11 +197,11 @@ protected Future<Void> configMap() {
                                         reconciliation.namespace(),
                                         CruiseControlResources.configMapName(reconciliation.name()),
                                         configMap
-                                ).map((Void) null);
+                                ).mapEmpty();
                     });
         } else {
             return configMapOperator.reconcile(reconciliation, reconciliation.namespace(), CruiseControlResources.configMapName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -229,7 +229,7 @@ protected Future<Void> certificatesSecret(Clock clock) {
                     });
         } else {
             return secretOperator.reconcile(reconciliation, reconciliation.namespace(), CruiseControlResources.secretName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -276,12 +276,12 @@ protected Future<Void> apiSecret() {
 
                         this.apiSecretHash = ReconcilerUtils.hashSecretContent(newCcApiUsersSecret);
                         return secretOperator.reconcile(reconciliation, reconciliation.namespace(), CruiseControlResources.apiSecretName(reconciliation.name()), newCcApiUsersSecret)
-                            .map((Void) null);
+                            .mapEmpty();
                     }
                 );
         } else {
             return secretOperator.reconcile(reconciliation, reconciliation.namespace(), CruiseControlResources.apiSecretName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -297,7 +297,7 @@ protected Future<Void> service() {
                         reconciliation.namespace(),
                         CruiseControlResources.serviceName(reconciliation.name()),
                         cruiseControl != null ? cruiseControl.generateService() : null
-                ).map((Void) null);
+                ).mapEmpty();
     }
 
     /**
@@ -319,10 +319,10 @@ protected Future<Void> deployment(boolean isOpenShift, ImagePullPolicy imagePull
 
             return deploymentOperator
                     .reconcile(reconciliation, reconciliation.namespace(), CruiseControlResources.componentName(reconciliation.name()), deployment)
-                    .map((Void) null);
+                    .mapEmpty();
         } else {
             return deploymentOperator.reconcile(reconciliation, reconciliation.namespace(), CruiseControlResources.componentName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/DefaultKafkaQuotasManager.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/DefaultKafkaQuotasManager.java
index 778f8a3d8d..06e4ac8cb1 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/DefaultKafkaQuotasManager.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/DefaultKafkaQuotasManager.java
@@ -203,7 +203,7 @@ private static Future<Void> alterQuotas(
 
         return VertxUtil
             .kafkaFutureToVertxFuture(reconciliation, vertx, kafkaAdmin.alterClientQuotas(List.of(clientQuotaAlteration)).values().get(DEFAULT_USER_ENTITY))
-            .map((Void) null);
+            .mapEmpty();
     }
 
     /**
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/EntityOperatorReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/EntityOperatorReconciler.java
index 6efc3178e0..e872f6d8b8 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/EntityOperatorReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/EntityOperatorReconciler.java
@@ -137,11 +137,11 @@ protected Future<Void> topicOperatorCruiseControlApiSecret() {
                         Secret newSecret = entityOperator.topicOperator().generateCruiseControlApiSecret(oldSecret);
                         this.ccApiSecretHash = ReconcilerUtils.hashSecretContent(newSecret);
                         return secretOperator.reconcile(reconciliation, reconciliation.namespace(), ccApiSecretName, newSecret)
-                            .map((Void) null);
+                            .mapEmpty();
                     });
             } else {
                 return secretOperator.reconcile(reconciliation, reconciliation.namespace(), ccApiSecretName, null)
-                    .map((Void) null);
+                    .mapEmpty();
             }
         }
         return Future.succeededFuture();
@@ -159,7 +159,7 @@ protected Future<Void> serviceAccount() {
                         reconciliation.namespace(),
                         KafkaResources.entityOperatorDeploymentName(reconciliation.name()),
                         entityOperator != null ? entityOperator.generateServiceAccount() : null
-                ).map((Void) null);
+                ).mapEmpty();
     }
 
     /**
@@ -176,7 +176,7 @@ protected Future<Void> entityOperatorRole() {
                         reconciliation.namespace(),
                         KafkaResources.entityOperatorDeploymentName(reconciliation.name()),
                         entityOperator != null ? entityOperator.generateRole(reconciliation.namespace(), reconciliation.namespace()) : null
-                ).map((Void) null);
+                ).mapEmpty();
     }
 
     /**
@@ -196,7 +196,7 @@ protected Future<Void> topicOperatorRole() {
                                 watchedNamespace,
                                 KafkaResources.entityOperatorDeploymentName(reconciliation.name()),
                                 entityOperator.generateRole(reconciliation.namespace(), watchedNamespace)
-                        ).map((Void) null);
+                        ).mapEmpty();
             } else {
                 return Future.succeededFuture();
             }
@@ -222,7 +222,7 @@ protected Future<Void> userOperatorRole() {
                                 watchedNamespace,
                                 KafkaResources.entityOperatorDeploymentName(reconciliation.name()),
                                 entityOperator.generateRole(reconciliation.namespace(), watchedNamespace)
-                        ).map((Void) null);
+                        ).mapEmpty();
             } else {
                 return Future.succeededFuture();
             }
@@ -254,11 +254,11 @@ protected Future<Void> topicOperatorRoleBindings() {
                     KafkaResources.entityTopicOperatorRoleBinding(reconciliation.name()), entityOperator.topicOperator().generateRoleBindingForRole(reconciliation.namespace(), reconciliation.namespace()));
 
             return Future.join(ownNamespaceFuture, watchedNamespaceFuture)
-                    .map((Void) null);
+                    .mapEmpty();
         } else {
             return roleBindingOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityTopicOperatorRoleBinding(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -285,11 +285,11 @@ protected Future<Void> userOperatorRoleBindings() {
                     KafkaResources.entityUserOperatorRoleBinding(reconciliation.name()), entityOperator.userOperator().generateRoleBindingForRole(reconciliation.namespace(), reconciliation.namespace()));
 
             return Future.join(ownNamespaceFuture, watchedNamespaceFuture)
-                    .map((Void) null);
+                    .mapEmpty();
         } else {
             return roleBindingOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityUserOperatorRoleBinding(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -309,11 +309,11 @@ protected Future<Void> topicOperatorConfigMap() {
                                     KafkaResources.entityTopicOperatorLoggingConfigMapName(reconciliation.name()),
                                     entityOperator.topicOperator().generateMetricsAndLogConfigMap(logging)
                             )
-                    ).map((Void) null);
+                    ).mapEmpty();
         } else {
             return configMapOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityTopicOperatorLoggingConfigMapName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -333,11 +333,11 @@ protected Future<Void> userOperatorConfigMap() {
                                     KafkaResources.entityUserOperatorLoggingConfigMapName(reconciliation.name()),
                                     entityOperator.userOperator().generateMetricsAndLogConfigMap(logging)
                             )
-                    ).map((Void) null);
+                    ).mapEmpty();
         } else {
             return configMapOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityUserOperatorLoggingConfigMapName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -366,7 +366,7 @@ protected Future<Void> topicOperatorSecret(Clock clock) {
         } else {
             return secretOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityTopicOperatorSecretName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -395,7 +395,7 @@ protected Future<Void> userOperatorSecret(Clock clock) {
         } else {
             return secretOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityUserOperatorSecretName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
     /**
@@ -411,7 +411,7 @@ protected Future<Void> networkPolicy() {
                             reconciliation.namespace(),
                             KafkaResources.entityOperatorDeploymentName(reconciliation.name()),
                             entityOperator != null ? entityOperator.generateNetworkPolicy() : null
-                    ).map((Void) null);
+                    ).mapEmpty();
         } else {
             return Future.succeededFuture();
         }
@@ -438,11 +438,11 @@ protected Future<Void> deployment(boolean isOpenShift, ImagePullPolicy imagePull
 
             return deploymentOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityOperatorDeploymentName(reconciliation.name()), deployment)
-                    .map((Void) null);
+                    .mapEmpty();
         } else  {
             return deploymentOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.entityOperatorDeploymentName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KRaftMetadataManager.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KRaftMetadataManager.java
index 82e7137e9d..defd96c594 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KRaftMetadataManager.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KRaftMetadataManager.java
@@ -166,6 +166,6 @@ private static Future<Void> updateVersion(
 
         return VertxUtil
                 .kafkaFutureToVertxFuture(reconciliation, vertx, kafkaAdmin.updateFeatures(Map.of(METADATA_VERSION_KEY, featureUpdate), options).values().get(METADATA_VERSION_KEY))
-                .map((Void) null);
+                .mapEmpty();
     }
 }
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java
index 9edfb963db..289c1c906e 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaConnectAssemblyOperator.java
@@ -288,7 +288,7 @@ private Future<Void> updateConnectorsThatConnectClusterWasDeleted(Reconciliation
                         noConnectCluster(reconciliation.namespace(), reconciliation.name())));
             }
             return Future.join(connectorFutures);
-        }).map((Void) null);
+        }).mapEmpty();
     }
 
     /**
@@ -343,7 +343,7 @@ private Future<Void> reconcileConnectors(Reconciliation reconciliation, KafkaCon
                             ? maybeUpdateConnectorStatus(reconciliation, connector, null, null)
                             : maybeUpdateConnectorStatus(reconciliation, connector, null, zeroReplicas(namespace, connectName)))
                         .collect(Collectors.toList())
-                )).map((Void) null);
+                )).mapEmpty();
         } else {
             String host = KafkaConnectResources.qualifiedServiceName(connectName, namespace);
             KafkaConnectApi apiClient = connectClientProvider.apply(vertx);
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaExporterReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaExporterReconciler.java
index eb1b4c8288..8f6adc2c77 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaExporterReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaExporterReconciler.java
@@ -112,7 +112,7 @@ private Future<Void> serviceAccount() {
                         reconciliation.namespace(),
                         KafkaExporterResources.componentName(reconciliation.name()),
                         kafkaExporter != null ? kafkaExporter.generateServiceAccount() : null
-                ).map((Void) null);
+                ).mapEmpty();
     }
 
     /**
@@ -140,7 +140,7 @@ private Future<Void> certificatesSecret(Clock clock) {
         } else {
             return secretOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaExporterResources.secretName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
@@ -157,7 +157,7 @@ protected Future<Void> networkPolicy() {
                             reconciliation.namespace(),
                             KafkaExporterResources.componentName(reconciliation.name()),
                             kafkaExporter != null ? kafkaExporter.generateNetworkPolicy() : null
-                    ).map((Void) null);
+                    ).mapEmpty();
         } else {
             return Future.succeededFuture();
         }
@@ -183,11 +183,11 @@ private Future<Void> deployment(boolean isOpenShift, ImagePullPolicy imagePullPo
 
             return deploymentOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaExporterResources.componentName(reconciliation.name()), deployment)
-                    .map((Void) null);
+                    .mapEmpty();
         } else  {
             return deploymentOperator
                     .reconcile(reconciliation, reconciliation.namespace(), KafkaExporterResources.componentName(reconciliation.name()), null)
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaListenersReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaListenersReconciler.java
index 7a275ad63c..f020ff553e 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaListenersReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaListenersReconciler.java
@@ -145,7 +145,7 @@ protected Future<Void> services() {
         services.addAll(kafka.generateExternalBootstrapServices());
         services.addAll(kafka.generatePerPodServices());
 
-        return serviceOperator.batchReconcile(reconciliation, reconciliation.namespace(), services, kafka.getSelectorLabels()).map((Void) null);
+        return serviceOperator.batchReconcile(reconciliation, reconciliation.namespace(), services, kafka.getSelectorLabels()).mapEmpty();
     }
 
     /**
@@ -158,7 +158,7 @@ protected Future<Void> routes() {
         routes.addAll(kafka.generateExternalRoutes());
 
         if (pfa.hasRoutes()) {
-            return routeOperator.batchReconcile(reconciliation, reconciliation.namespace(), routes, kafka.getSelectorLabels()).map((Void) null);
+            return routeOperator.batchReconcile(reconciliation, reconciliation.namespace(), routes, kafka.getSelectorLabels()).mapEmpty();
         } else {
             if (!routes.isEmpty()) {
                 LOGGER.warnCr(reconciliation, "The OpenShift route API is not available in this Kubernetes cluster. Exposing Kafka cluster {} using routes is not possible.", reconciliation.name());
@@ -178,7 +178,7 @@ protected Future<Void> ingresses() {
         List<Ingress> ingresses = new ArrayList<>(kafka.generateExternalBootstrapIngresses());
         ingresses.addAll(kafka.generateExternalIngresses());
 
-        return ingressOperator.batchReconcile(reconciliation, reconciliation.namespace(), ingresses, kafka.getSelectorLabels()).map((Void) null);
+        return ingressOperator.batchReconcile(reconciliation, reconciliation.namespace(), ingresses, kafka.getSelectorLabels()).mapEmpty();
     }
 
     /**
@@ -453,7 +453,7 @@ protected Future<Void> loadBalancerServicesReady() {
 
         return Future
                 .join(listenerFutures)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -534,7 +534,7 @@ protected Future<Void> nodePortServicesReady() {
 
         return Future
                 .join(listenerFutures)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -619,7 +619,7 @@ protected Future<Void> routesReady() {
 
         return Future
                 .join(listenerFutures)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -691,7 +691,7 @@ protected Future<Void> ingressesReady() {
 
         return Future
                 .join(listenerFutures)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaNodeUnregistration.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaNodeUnregistration.java
index ccf215c78f..150342481e 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaNodeUnregistration.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaNodeUnregistration.java
@@ -61,7 +61,7 @@ public static Future<Void> unregisterNodes(
                         adminClient.close();
                         return Future.succeededFuture();
                     })
-                    .map((Void) null);
+                    .mapEmpty();
         } catch (KafkaException e) {
             LOGGER.warnCr(reconciliation, "Failed to unregister nodes", e);
             return Future.failedFuture(e);
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaReconciler.java
index be817e7c6d..4189c72c2b 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/KafkaReconciler.java
@@ -347,7 +347,7 @@ protected Future<Void> manualPodCleaning() {
     protected Future<Void> networkPolicy() {
         if (isNetworkPolicyGeneration) {
             return networkPolicyOperator.reconcile(reconciliation, reconciliation.namespace(), KafkaResources.kafkaNetworkPolicyName(reconciliation.name()), kafka.generateNetworkPolicy(operatorNamespace, operatorNamespaceLabels))
-                    .map((Void) null);
+                    .mapEmpty();
         } else {
             return Future.succeededFuture();
         }
@@ -527,7 +527,7 @@ protected Future<Void> pvcs(KafkaStatus kafkaStatus) {
     protected Future<Void> serviceAccount() {
         return serviceAccountOperator
                 .reconcile(reconciliation, reconciliation.namespace(), KafkaResources.kafkaComponentName(reconciliation.name()), kafka.generateServiceAccount())
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -549,7 +549,7 @@ protected Future<Void> initClusterRoleBinding() {
                                 desired
                         ),
                 desired
-        ).map((Void) null);
+        ).mapEmpty();
     }
 
     /**
@@ -593,7 +593,7 @@ protected Future<Void> scaleDown() {
                             }
                         }
 
-                        return Future.join(ops).map((Void) null);
+                        return Future.join(ops).mapEmpty();
                     }
                 });
     }
@@ -719,7 +719,7 @@ protected Future<Void> perBrokerKafkaConfiguration(MetricsAndLogging metricsAndL
 
                     return Future
                             .join(ops)
-                            .map((Void) null);
+                            .mapEmpty();
                 });
     }
 
@@ -1101,7 +1101,7 @@ protected Future<Void> sharedKafkaConfigurationCleanup() {
         // Deleting resource which likely does not exist would cause more load on the Kubernetes API then trying to get
         // it first because of the watch if it was deleted etc.
         return configMapOperator.reconcile(reconciliation, reconciliation.namespace(), KafkaResources.kafkaMetricsAndLogConfigMapName(reconciliation.name()), null)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -1259,7 +1259,7 @@ protected Future<Void> updateNodePoolStatuses(KafkaStatus kafkaStatus) {
 
             // Return future
             return Future.join(statusUpdateFutures)
-                    .map((Void) null);
+                    .mapEmpty();
         } else {
             return Future.succeededFuture();
         }
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ManualPodCleaner.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ManualPodCleaner.java
index 96d20571a5..94bd57b180 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ManualPodCleaner.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ManualPodCleaner.java
@@ -172,7 +172,7 @@ private Future<Void> cleanPodPvcAndPodSet(String podSetName, String podName, Lis
 
                     return strimziPodSetOperator.reconcile(reconciliation, reconciliation.namespace(), podSetName, reducedPodSet)
                             .compose(ignore -> deletePodAndPvc(podName, deletePvcs))
-                            .map((Void) null);
+                            .mapEmpty();
                 });
     }
 
@@ -209,6 +209,6 @@ private Future<Void> deletePodAndPvc(String podName, List<PersistentVolumeClaim>
                     }
                     return Future.join(deleteResults);
                 })
-                .map((Void) null);
+                .mapEmpty();
     }
 }
\ No newline at end of file
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/PvcReconciler.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/PvcReconciler.java
index d71dca5155..b668e281a1 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/PvcReconciler.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/PvcReconciler.java
@@ -70,7 +70,7 @@ public Future<Collection<Integer>> resizeAndReconcilePvcs(KafkaStatus kafkaStatu
                             // * The PVC doesn't exist yet, we should create it
                             // * The PVC is not Bound, we should reconcile it
                             return pvcOperator.reconcile(reconciliation, reconciliation.namespace(), desiredPvc.getMetadata().getName(), desiredPvc)
-                                    .map((Void) null);
+                                    .mapEmpty();
                         } else if (currentPvc.getStatus().getConditions().stream().anyMatch(cond -> "Resizing".equals(cond.getType()) && "true".equals(cond.getStatus().toLowerCase(Locale.ENGLISH))))  {
                             // The PVC is Bound, but it is already resizing => Nothing to do, we should let it resize
                             LOGGER.debugCr(reconciliation, "The PVC {} is resizing, nothing to do", desiredPvc.getMetadata().getName());
@@ -91,7 +91,7 @@ public Future<Collection<Integer>> resizeAndReconcilePvcs(KafkaStatus kafkaStatu
                             } else  {
                                 // size didn't change, just reconcile
                                 return pvcOperator.reconcile(reconciliation, reconciliation.namespace(), desiredPvc.getMetadata().getName(), desiredPvc)
-                                        .map((Void) null);
+                                        .mapEmpty();
                             }
                         }
                     });
@@ -136,7 +136,7 @@ private Future<Void> resizePvc(KafkaStatus kafkaStatus, PersistentVolumeClaim cu
                             // Resizing supported by SC => We can reconcile the PVC to have it resized
                             LOGGER.infoCr(reconciliation, "Resizing PVC {} from {} to {}.", desired.getMetadata().getName(), current.getStatus().getCapacity().get("storage").getAmount(), desired.getSpec().getResources().getRequests().get("storage").getAmount());
                             return pvcOperator.reconcile(reconciliation, reconciliation.namespace(), desired.getMetadata().getName(), desired)
-                                    .map((Void) null);
+                                    .mapEmpty();
                         }
                     });
         } else {
@@ -166,7 +166,7 @@ public Future<Void> deletePersistentClaims(List<String> maybeDeletePvcs, List<St
         }
 
         return Future.all(futures)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -183,7 +183,7 @@ private Future<Void> considerPersistentClaimDeletion(String pvcName)   {
                     if (pvc != null && Annotations.booleanAnnotation(pvc, Annotations.ANNO_STRIMZI_IO_DELETE_CLAIM, false)) {
                         LOGGER.infoCr(reconciliation, "Deleting PVC {}", pvcName);
                         return pvcOperator.reconcile(reconciliation, reconciliation.namespace(), pvcName, null)
-                                .map((Void) null);
+                                .mapEmpty();
                     } else {
                         return Future.succeededFuture();
                     }
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ReconcilerUtils.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ReconcilerUtils.java
index c0c464c253..7e11bcaea0 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ReconcilerUtils.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/assembly/ReconcilerUtils.java
@@ -94,7 +94,7 @@ public static Future<Void> podsReady(Reconciliation reconciliation, PodOperator
         }
 
         return Future.join(podFutures)
-                .map((Void) null);
+                .mapEmpty();
     }
 
     /**
@@ -253,11 +253,11 @@ public static Future<Void> reconcileJmxSecret(Reconciliation reconciliation, Sec
                     if (desiredJmxSecret != null)  {
                         // Desired secret is not null => should be updated
                         return secretOperator.reconcile(reconciliation, reconciliation.namespace(), cluster.jmx().secretName(), desiredJmxSecret)
-                                .map((Void) null);
+                                .mapEmpty();
                     } else if (currentJmxSecret != null)    {
                         // Desired secret is null but current is not => we should delete the secret
                         return secretOperator.reconcile(reconciliation, reconciliation.namespace(), cluster.jmx().secretName(), null)
-                                .map((Void) null);
+                                .mapEmpty();
                     } else {
                         // Both current and desired secret are null => nothing to do
                         return Future.succeededFuture();
diff --git a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/kubernetes/AbstractNamespacedResourceOperator.java b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/kubernetes/AbstractNamespacedResourceOperator.java
index 5285266d17..08f1a76dca 100644
--- a/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/kubernetes/AbstractNamespacedResourceOperator.java
+++ b/cluster-operator/src/main/java/io/strimzi/operator/cluster/operator/resource/kubernetes/AbstractNamespacedResourceOperator.java
@@ -401,7 +401,7 @@ public Future<Void> waitFor(Reconciliation reconciliation, String namespace, Str
      * @return                  A Future with True if the deletion succeeded and False when it failed.
      */
     public Future<Void> deleteAsync(Reconciliation reconciliation, String namespace, String name, boolean cascading) {
-        return internalDelete(reconciliation, namespace, name, cascading).map((Void) null);
+        return internalDelete(reconciliation, namespace, name, cascading).mapEmpty();
     }
 
     /**
diff --git a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java
index a9a30e31ab..9b04c7da09 100644
--- a/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java
+++ b/cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaStatusTest.java
@@ -523,7 +523,7 @@ public MockInitialStatusKafkaAssemblyOperator(Vertx vertx, PlatformFeaturesAvail
         @Override
         Future<Void> reconcile(ReconciliationState reconcileState)  {
             return reconcileState.initialStatus()
-                    .map((Void) null);
+                    .mapEmpty();
         }
     }
 }
