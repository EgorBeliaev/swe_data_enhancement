[
    {
        "title": "Use StringBuilder for some toString methods instead of string concatenation "
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Description\r\n1. Passing a string builder along while creating ids (those with embedded ids) so that only one string builder will be created along the way\r\n\r\n## Motivation and Context\r\n1. While creating ids, say taskId, a string builder will be created to do so but this taskId will need a stageExecutionId which will trigger the creation of another string builder and stageExecutionId needs stagesId and the same will happen again.\r\n2. We see some crazy cpu usage for toString method due to string concatenation, T212253302\r\n![image](https://github.com/user-attachments/assets/993744cf-a10b-4469-8019-1afee5d67a2c)\r\n\r\n\r\n## Impact\r\n<!---Describe any public API or user-facing feature change or any performance impact-->\r\n\r\n## Test Plan\r\n1. Doing verifier tests\r\n\r\n## Contributor checklist\r\n\r\n- [ ] Please make sure your submission complies with our [contributing guide](https://github.com/prestodb/presto/blob/master/CONTRIBUTING.md), in particular [code style](https://github.com/prestodb/presto/blob/master/CONTRIBUTING.md#code-style) and [commit standards](https://github.com/prestodb/presto/blob/master/CONTRIBUTING.md#commit-standards).\r\n- [ ] PR description addresses the issue accurately and concisely.  If the change is non-trivial, a GitHub Issue is referenced.\r\n- [ ] Documented new properties (with its default value), SQL syntax, functions, or other functionality.\r\n- [ ] If release notes are required, they follow the [release notes guidelines](https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines).\r\n- [ ] Adequate tests were added if applicable.\r\n- [ ] CI passed.\r\n\r\n## Release Notes\r\nPlease follow [release notes guidelines](https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines) and fill in the release notes below.\r\n\r\n```\r\n== RELEASE NOTES ==\r\n\r\nOptimizations\r\n* Improve toString method for a few Id classes using StringBuilder :pr:`24341`\r\n```\r\n\r\n"
    },
    {
        "author": {
            "login": "NikhilCollooru"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shangm2"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sdruzkin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "tdcmeehan"
        },
        "body": ""
    },
    {
        "author": {
            "login": "yhwang"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shangm2"
        },
        "body": ""
    },
    {
        "author": {
            "login": "NikhilCollooru"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sdruzkin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shangm2"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sdruzkin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "NikhilCollooru"
        },
        "body": "LGTM"
    },
    {
        "author": {
            "login": "linux-foundation-easycla"
        },
        "body": "<a href=\"https://easycla.lfx.linuxfoundation.org/#/?version=2\"><img src=\"https://s3.amazonaws.com/cla-project-logo-prod/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ></a><br/><br />The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: shangm2  (e2826f134b99cf6a8820f797ae88826fffecfaca)</li></ul><!-- Date Modified: 2025-01-24 17:41:28.599703 -->"
    },
    {
        "author": {
            "login": "Sullivan-Patrick"
        },
        "body": "I'm not sure, but I'd expect the compiler to implicitly use Stringbuilder for these cases. This seems to confirm that, at least after J9: \r\n\r\nhttps://stackoverflow.com/questions/1532461/stringbuilder-vs-string-concatenation-in-tostring-in-java\r\n\r\nDid you do a perf test after your changes to see if it makes a difference?"
    },
    {
        "author": {
            "login": "kaikalur"
        },
        "body": "> I'm not sure, but I'd expect the compiler to implicitly use Stringbuilder for these cases. This seems to confirm that, at least after J9:\r\n> \r\n> https://stackoverflow.com/questions/1532461/stringbuilder-vs-string-concatenation-in-tostring-in-java\r\n> \r\n> Did you do a perf test after your changes to see if it makes a difference?\r\n\r\nYou can decompile the classfile and see! I'd be surprised if it's at JIT level"
    },
    {
        "author": {
            "login": "hantangwangd"
        },
        "body": "It seems that in `.class` flies these codes have all been turned into `StringBuilder.append()` by java compiler. Have you observed any performance differences before and after this change?"
    },
    {
        "author": {
            "login": "shangm2"
        },
        "body": "@Sullivan-Patrick @kaikalur @hantangwangd  you guys are absolutely correct. It is using the builder under the hood and there is no perf diff before and after the change. Sometimes, it can be worse depending on the perf time. Thanks folks."
    },
    {
        "author": {
            "login": "tdcmeehan"
        },
        "body": "Perhaps the kernel of truth here is we are doing too many useless allocations to serialize TaskIds.  We serialize them by first converting them to String, then serializing the String.  Perhaps we could just directly serialize the TaskId and dependent structures like `StageExecutionId` and `StageId` with custom serializers.\r\n\r\nFor example, we have a custom serializer for Block:\r\n\r\n```java\r\njsonBinder(binder).addSerializerBinding(Block.class).to(BlockJsonSerde.Serializer.class);\r\n```\r\n\r\nWe could try adding three of them for the structures above and see if this reduces useless allocations.  Perhaps under heavy load there is a marginal performance improvement.\r\n\r\nLong term, we should probably investigate using binary serialization for better scalability and efficiency."
    },
    {
        "author": {
            "login": "prestodb-ci"
        },
        "body": "Saved that user @shangm2 is from Meta"
    },
    {
        "author": {
            "login": "NikhilCollooru"
        },
        "body": "Are there any unit tests that test this code ? If not can we add one ?"
    },
    {
        "author": {
            "login": "shangm2"
        },
        "body": "> Are there any unit tests that test this code ? If not can we add one ?\r\n\r\nGood point. Checking."
    },
    {
        "author": {
            "login": "shangm2"
        },
        "body": "@NikhilCollooru just added unit tests."
    }
]