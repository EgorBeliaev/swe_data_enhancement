[
    {
        "title": "[Clickhouse] add DateTime64 type support"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Description\r\nThis adds support to the missing type DateTime64 from ClickHouse.\r\n\r\n## Motivation and Context\r\nI noticed DateTime64 is not supported. As mentioned in https://github.com/prestodb/presto/issues/20958, DateTime64 supports milliseconds, whereas DateTime doesn't.\r\n\r\n## Impact\r\nWe are currently blocked from using prestodb because every entry we have in our tables has a column createdAt with the type DateTime64. Milliseconds make sense when we are dealing with user/system events.\r\n\r\n## Test Plan\r\nTests were added showing the creation of a table with a DateTime64 column (mapped from timestamp in prestodb), insertion of timestamps into a DateTime64 column with 0 or multiple millisecond digits, and finally the selection of them.\r\n\r\n## Release Notes\r\n\r\n```\r\nClickhouse Connector Changes\r\n* Add ``DateTime64`` type support. :pr:`24344`\r\n```\r\n\r\n"
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": "You'll need to add some tests to verify the mapping works correctly.\r\n\r\nBased on your PR description, it sounds like you may have been trying to create tables in clickhouse through presto? If so, you won't be able to use the same column type names that clickhouse uses. You'll need to use the mapped type. i.e. DateTime64 should map to timestamp. See `TestClickhouseDistributedQueries` for example tests."
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": "This is a great improvement to the connector. Mostly just style nits. Mainly, I am concerned about the performance. I think it would be great to implement this without any string parsing. Have you attempted any other solutions?\r\n\r\nAlso, our clickhouse-jdbc client dependency is quite out of date. We might be able to upgrade it to the latest `com.clickhouse:clickhouse-jdbc:0.7.2` which may provide more options for timestamps, though I haven't looked further into it."
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "steveburnett"
        },
        "body": "Thanks for the doc! Nit of formatting in the header, the table looks great! "
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": ""
    },
    {
        "author": {
            "login": "steveburnett"
        },
        "body": "LGTM! (docs)\r\n\r\nPull updated branch, new local doc build, looks good. Thanks!"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": "Code LGTM. two doc comments. "
    },
    {
        "author": {
            "login": "steveburnett"
        },
        "body": "One nit of phrasing. Thanks!"
    },
    {
        "author": {
            "login": "steveburnett"
        },
        "body": "LGTM! (docs) \r\n\r\nPull updated branch, new local doc build, looks good. Thanks!"
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": "Thanks for this great work!"
    },
    {
        "author": {
            "login": "jaystarshot"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jaystarshot"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jaystarshot"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": ""
    },
    {
        "author": {
            "login": "jaystarshot"
        },
        "body": ""
    },
    {
        "author": {
            "login": "tdcmeehan"
        },
        "body": ""
    },
    {
        "author": {
            "login": "linux-foundation-easycla"
        },
        "body": "<a href=\"https://easycla.lfx.linuxfoundation.org/#/?version=2\"><img src=\"https://s3.amazonaws.com/cla-project-logo-prod/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ></a><br/><br />The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: Apidcloud / name: Lu\u00eds Fernandes  (7a3feeaba0521b524f6887ae1e4ef4c33d86958c)</li></ul><!-- Date Modified: 2025-01-15 14:44:36.858533 -->"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "I\u2019ve based myself on that file and timestamp has the same issue. Invalid column type after I try to do an assertUpdate with a create table. Date works fine. Datetime, datetime64, or timestamp don\u2019t.\r\n\r\nOn 9 Jan 2025, at 23:33, Zac Blanco ***@***.***> wrote:\r\n\r\n\ufeff\r\n\r\n@ZacBlanco requested changes on this pull request.\r\n\r\nYou'll need to add some tests to verify the mapping works correctly.\r\n\r\nBased on your PR description, it sounds like you may have been trying to create tables in clickhouse through presto? If so, you won't be able to use the same column type names that clickhouse uses. You'll need to use the mapped type. i.e. DateTime64 should map to timestamp. See TestClickhouseDistributedQueries for example tests.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/prestodb/presto/pull/24344#pullrequestreview-2541076207>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AA4MM4XPY3IFBUHSYFETN5D2J32LZAVCNFSM6AAAAABU4UGAZSVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZDKNBRGA3TMMRQG4>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n"
    },
    {
        "author": {
            "login": "steveburnett"
        },
        "body": "Thanks for the release note! Minor rephrasing suggestion. \r\n\r\n```\r\n== RELEASE NOTES ==\r\n\r\nClickhouse Connector Changes\r\n* Add ``DateTime64`` type support. :pr:`24344`\r\n```"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Changed the release notes. Today im still trying to add the tests. And while i was able to get the create table and insert to kind of work, the data that appears on clickhouse side is different than when I do it through the UI on :8080."
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Somehow in the tests, this timestamp string (`insert into t1 VALUES (timestamp '2025-01-08 12:35:59.079')`) becomes `1736292959079` (Tuesday, 7 January 2025 23:35:59.079), but when I do it on the UI at :8080 the same timestamp string becomes `1736336159079` (Wednesday, 8 January 2025 11:35:59.079). How come?"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Ah, it seems the timezone in tests is totally off. How can i change that? I'm based in Vienna, whereas tests are running in Bahia Mexico lol\r\n<img width=\"1203\" alt=\"ui-timezone\" src=\"https://github.com/user-attachments/assets/72cb6aae-49cf-4799-8d1e-14581791f4c7\" />\r\n<img width=\"1166\" alt=\"test-timezone\" src=\"https://github.com/user-attachments/assets/671dd709-3abe-4541-a39a-564ca7f8459f\" />\r\n"
    },
    {
        "author": {
            "login": "ZacBlanco"
        },
        "body": "You don't need to change the time zone in the tests - it should be left as is. I would recommend using the `presto-cli` for local testing rather than the UI. You can set your session timezone by specifying a JVM argument to the CLI. If you want your testing environment to match the tests you can set the JVM parameter `-Duser.timezone=America/Bahia_Banderas`"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "I'm trying to convert the hour I want in UTC to the test timezone and use that in the insert statement. I assumed it would transform it to the UTC counterpart, but it went back almost 24h. What am I missing?\r\n\r\n```\r\nString tableT = \"t1\";\r\n\r\n        // Get the current time zone\r\n        String testTimeZone = TimeZone.getDefault().getID();\r\n\r\n        ZonedDateTime originalTimestamp = ZonedDateTime.parse(\"2025-01-08T12:34:56.179Z\", DateTimeFormatter.ISO_ZONED_DATE_TIME);\r\n        ZonedDateTime adjustedTimestamp = originalTimestamp.withZoneSameInstant(ZoneId.of(testTimeZone));\r\n\r\n        // adjustedTimestampString is correct: 2025-01-08 06:34:56.179\"\r\n        String adjustedTimestampString = adjustedTimestamp.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\"));\r\n\r\n        assertUpdate(\"CREATE TABLE \" + tableT + \" (ts timestamp not null)\");\r\n        assertUpdate(\"INSERT INTO \" + tableT + \" (ts) VALUES (timestamp '\" + adjustedTimestampString + \"')\", 1);\r\n        // After insert it is wrong. 2025-01-07 17:34:56.179 \r\n        // In docker, the timezone is UTC within clickhouse and the entry shows 2025-01-07 17:34:56.179\r\n```"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "After further checking, the test presto client session is defined in TestingSession.DEFAULT_TIME_ZONE_KEY as Pacific/Apia (UTC+13). But like this the select query is wrong, am I'm also wondering why. Specifically, why is it 6 hours more than the Pacific/Apia? \r\n<img width=\"1133\" alt=\"Screenshot 2025-01-10 at 22 25 47\" src=\"https://github.com/user-attachments/assets/1fa9f3d1-0f13-4de2-9058-0b2490a14948\" />\r\n<img width=\"1376\" alt=\"Screenshot 2025-01-10 at 22 25 10\" src=\"https://github.com/user-attachments/assets/08aceeab-3f27-44ee-a1a8-4e24a61937b8\" />\r\n\r\n```\r\n@Test\r\n    public void testInsertAndSelectFromDateTimeTables() {\r\n        String tableT = \"t1\";\r\n\r\n        // this would get America/Bahia if we were to use it\r\n        String testTimeZone = TimeZone.getDefault().getID();\r\n\r\n        ZonedDateTime originalTimestamp = ZonedDateTime.parse(\"2025-01-08T12:34:56.179Z\", DateTimeFormatter.ISO_ZONED_DATE_TIME);\r\n        // presto client test session is set to Pacific/Apia\r\n        ZonedDateTime adjustedTimestamp = originalTimestamp.withZoneSameInstant(ZoneId.of(TestingSession.DEFAULT_TIME_ZONE_KEY.getId()));\r\n\r\n        // Pacific/Apia becomes 2025-01-09 01:34:56.179 (correct)\r\n        // America/Bahia becomes 2025-01-08 06:34:56.179\" (correct)\r\n        String adjustedTimestampString = adjustedTimestamp.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\"));\r\n\r\n        assertUpdate(\"CREATE TABLE \" + tableT + \" (ts timestamp not null)\");\r\n        assertUpdate(\"INSERT INTO \" + tableT + \" (ts) VALUES (timestamp '\" + adjustedTimestampString + \"')\", 1);\r\n        // wrong for America/Bahia. 2025-01-07 17:34:56.179. After insert it's wrong. in docker, the timezone is UTC within clickhouse and the entry shows 2025-01-07 17:34:56.179\r\n        // But correct when using Pacific/Apia! 2025-01-08 12:34:56.179\r\n        \r\n        assertQuery(\r\n                \"SELECT * FROM \" + tableT + \" LIMIT 100\",\r\n                \"VALUES (timestamp  '2025-01-08T12:34:56.179')\");\r\n        // select is correct when using America/Bahia. Actual is exactly 2025-01-08T12:34:56.179\r\n        // But wrong when using Pacific/Apia, even though the clickhouse server is now correct with 2025-01-08 12:34:56.179\r\n        // Actual comes as 2025-01-09T07:34:56.179\r\n    }\r\n```\r\n\r\nComments in the source code that might hint something:\r\n<img width=\"1199\" alt=\"image\" src=\"https://github.com/user-attachments/assets/27e51751-bce4-4773-8549-f6a7c307789d\" />"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Finally seems to be working. Can you tell me the process of creating the tar.gz prestodb file available for download, so that we can start using this version tomorrow?"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Thanks for the prompt review. Already pushed the changes.\r\n\r\nI do agree the clickhouse jdbc is really outdated, and I tried clickhouse jdbc 0.3.2 at some point. But the server wouldn't start because of this:\r\n<img width=\"1580\" alt=\"Screenshot 2025-01-13 at 11 55 57\" src=\"https://github.com/user-attachments/assets/57e7dae2-45e9-4f94-b3e9-c91d4505f4ee\" />\r\nI can also remember some issues creating the tpch tables in TestclickHouseDistributedQueries but can't reproduce it again.\r\n\r\nEither way, I would try to update clickhouse jdbc to the new org com.clickhouse 0.7.2 in a subsequent MR, as it would most likely have other problems.\r\n\r\n**Edit**:\r\nAlso added a table to the docs"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Can you retrigger the CI? It seems one of the test suites timed out\r\n\r\n**Edit**: Thanks, it seems to be ok now"
    },
    {
        "author": {
            "login": "Apidcloud"
        },
        "body": "Rebased and squashed commits"
    }
]