diff --git a/app/src/main/java/org/bepass/oblivion/ConnectionAwareBaseActivity.java b/app/src/main/java/org/bepass/oblivion/ConnectionAwareBaseActivity.java
new file mode 100644
index 00000000..622c4a59
--- /dev/null
+++ b/app/src/main/java/org/bepass/oblivion/ConnectionAwareBaseActivity.java
@@ -0,0 +1,72 @@
+package org.bepass.oblivion;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
+import android.os.IBinder;
+import android.os.Messenger;
+
+import androidx.appcompat.app.AppCompatActivity;
+
+
+/**
+ * Those activities that inherit this class observe connection state by default and have access to lastKnownConnectionState variable.
+ */
+public abstract class ConnectionAwareBaseActivity extends AppCompatActivity {
+
+    protected ConnectionState lastKnownConnectionState = ConnectionState.DISCONNECTED;
+
+    private Messenger serviceMessenger;
+    private boolean isBound;
+
+    private ServiceConnection connection = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName className, IBinder service) {
+            serviceMessenger = new Messenger(service);
+            isBound = true;
+            observeConnectionStatus();
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName arg0) {
+            serviceMessenger = null;
+            isBound = false;
+        }
+    };
+
+    abstract String getKey();
+    abstract void onConnectionStateChange(ConnectionState state);
+
+    private void observeConnectionStatus() {
+        if (!isBound) return;
+        OblivionVpnService.registerConnectionStateObserver(getKey(), serviceMessenger, state -> {
+            lastKnownConnectionState = state;
+            onConnectionStateChange(state);
+        });
+    }
+
+    private void unsubscribeConnectionStatus() {
+        if (!isBound) return;
+        OblivionVpnService.unregisterConnectionStateObserver(getKey(), serviceMessenger);
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        // Bind to the service
+        bindService(new Intent(this, OblivionVpnService.class), connection, Context.BIND_AUTO_CREATE);
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+        // Unbind from the service
+        if (isBound) {
+            unsubscribeConnectionStatus();
+            unbindService(connection);
+            isBound = false;
+        }
+    }
+
+}
diff --git a/app/src/main/java/org/bepass/oblivion/MainActivity.java b/app/src/main/java/org/bepass/oblivion/MainActivity.java
index 736d2c61..93f9e47d 100644
--- a/app/src/main/java/org/bepass/oblivion/MainActivity.java
+++ b/app/src/main/java/org/bepass/oblivion/MainActivity.java
@@ -15,14 +15,13 @@
 
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.content.ContextCompat;
 
 import com.suke.widget.SwitchButton;
 
-public class MainActivity extends AppCompatActivity {
-
-    private static final String ConnectionStateObserverKey = "mainActivity";
+public class MainActivity extends ConnectionAwareBaseActivity {
     // Views
     ImageView infoIcon, bugIcon, settingsIcon;
     TouchAwareSwitch switchButton;
@@ -31,24 +30,6 @@ public class MainActivity extends AppCompatActivity {
     Boolean canShowNotification = false;
     private ActivityResultLauncher<String> pushNotificationPermissionLauncher;
     private ActivityResultLauncher<Intent> vpnPermissionLauncher;
-    private Messenger serviceMessenger;
-    private boolean isBound;
-    private ConnectionState lastKnownConnectionState = ConnectionState.DISCONNECTED;
-
-    private final ServiceConnection connection = new ServiceConnection() {
-        @Override
-        public void onServiceConnected(ComponentName className, IBinder service) {
-            serviceMessenger = new Messenger(service);
-            isBound = true;
-            observeConnectionStatus();
-        }
-
-        @Override
-        public void onServiceDisconnected(ComponentName arg0) {
-            serviceMessenger = null;
-            isBound = false;
-        }
-    };
 
 
     private SwitchButton.OnCheckedChangeListener createSwitchCheckedChangeListener() {
@@ -82,20 +63,15 @@ protected void onCreate(Bundle savedInstanceState) {
     }
 
 
-    private void observeConnectionStatus() {
-        if (!isBound) return;
-        OblivionVpnService.registerConnectionStateObserver(ConnectionStateObserverKey, serviceMessenger, new ConnectionStateChangeListener() {
-            @Override
-            public void onChange(ConnectionState state) {
-                lastKnownConnectionState = state;
-                updateUi();
-            }
-        });
+    @NonNull
+    @Override
+    String getKey() {
+        return "mainActivity";
     }
 
-    private void unsubscribeConnectionStatus() {
-        if (!isBound) return;
-        OblivionVpnService.unregisterConnectionStateObserver(ConnectionStateObserverKey, serviceMessenger);
+    @Override
+    void onConnectionStateChange(ConnectionState state) {
+        updateUi();
     }
 
     private void updateUi() {
@@ -112,24 +88,6 @@ private void updateUi() {
         }
     }
 
-    @Override
-    protected void onStart() {
-        super.onStart();
-        // Bind to the service
-        bindService(new Intent(this, OblivionVpnService.class), connection, Context.BIND_AUTO_CREATE);
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        // Unbind from the service
-        if (isBound) {
-            unsubscribeConnectionStatus();
-            unbindService(connection);
-            isBound = false;
-        }
-    }
-
     private void connected() {
         stateText.setText("اتصال برقرار شد");
         switchButton.setChecked(true, false);
diff --git a/app/src/main/java/org/bepass/oblivion/OblivionVpnService.java b/app/src/main/java/org/bepass/oblivion/OblivionVpnService.java
index d1ed1cdd..62c17efa 100644
--- a/app/src/main/java/org/bepass/oblivion/OblivionVpnService.java
+++ b/app/src/main/java/org/bepass/oblivion/OblivionVpnService.java
@@ -22,6 +22,7 @@
 import androidx.core.app.NotificationChannelCompat;
 import androidx.core.app.NotificationCompat;
 import androidx.core.app.NotificationManagerCompat;
+import androidx.core.content.ContextCompat;
 
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -67,6 +68,19 @@ public void run() {
     private FileManager fileManager;
     private ConnectionState lastKnownState = ConnectionState.DISCONNECTED;
 
+    public static void startVpnService(Context context) {
+        Intent intent = new Intent(context, OblivionVpnService.class);
+        intent.setAction(OblivionVpnService.FLAG_VPN_START);
+        ContextCompat.startForegroundService(context, intent);
+    }
+
+
+    public static void stopVpnService(Context context) {
+        Intent intent = new Intent(context, OblivionVpnService.class);
+        intent.setAction(OblivionVpnService.FLAG_VPN_STOP);
+        ContextCompat.startForegroundService(context, intent);
+    }
+
     public static void registerConnectionStateObserver(String key, Messenger serviceMessenger, ConnectionStateChangeListener observer) {
         // Create a message for the service
         Message subscriptionMessage = Message.obtain(null, OblivionVpnService.MSG_CONNECTION_STATE_SUBSCRIBE);
@@ -137,9 +151,7 @@ public static Map<String, Integer> splitHostAndPort(String hostPort) {
     }
 
     private static int findFreePort() {
-        ServerSocket socket = null;
-        try {
-            socket = new ServerSocket(0);
+        try (ServerSocket socket = new ServerSocket(0)) {
             socket.setReuseAddress(true);
             int port = socket.getLocalPort();
             try {
@@ -148,14 +160,7 @@ private static int findFreePort() {
                 // Ignore IOException on close()
             }
             return port;
-        } catch (IOException e) {
-        } finally {
-            if (socket != null) {
-                try {
-                    socket.close();
-                } catch (IOException e) {
-                }
-            }
+        } catch (IOException ignored) {
         }
         throw new IllegalStateException("Could not find a free TCP/IP port to start embedded Jetty HTTP Server on");
     }
@@ -333,7 +338,7 @@ private void publishConnectionState(ConnectionState state) {
     }
 
     private void publishConnectionStateTo(String observerKey, ConnectionState state) {
-        Log.i("Publisher", "Publishing state " + state);
+        Log.i("Publisher", "Publishing state " + state + " to " + observerKey);
         Messenger observer = connectionStateObservers.get(observerKey);
         if (observer == null) return;
         Bundle args = new Bundle();
@@ -379,7 +384,7 @@ public void addConnectionStateObserver(String key, Messenger messenger) {
         connectionStateObservers.put(key, messenger);
     }
 
-    public void removeConnectionStateObserver(String key, Messenger messenger) {
+    public void removeConnectionStateObserver(String key) {
         connectionStateObservers.remove(key);
     }
 
@@ -504,19 +509,18 @@ public void onChange(ConnectionState state) {
                     if (key == null)
                         throw new RuntimeException("No key was provided for the connection state observer");
                     if (service.connectionStateObservers.containsKey(key)) {
-                        //Already subscribed. Just push the latest known state to it.
-                        service.publishConnectionStateTo(key, service.lastKnownState);
-                        break;
+                        //Already subscribed
+                        return;
                     }
                     service.addConnectionStateObserver(key, message.replyTo);
-                    service.publishConnectionState(service.lastKnownState);
+                    service.publishConnectionStateTo(key, service.lastKnownState);
                     break;
                 }
                 case MSG_CONNECTION_STATE_UNSUBSCRIBE: {
                     String key = message.getData().getString("key");
                     if (key == null)
                         throw new RuntimeException("No observer was specified to unregister");
-                    service.removeConnectionStateObserver(key, null);
+                    service.removeConnectionStateObserver(key);
                     break;
                 }
                 default: {
diff --git a/app/src/main/java/org/bepass/oblivion/QuickStartService.java b/app/src/main/java/org/bepass/oblivion/QuickStartService.java
index 9d81cee2..32e8f727 100644
--- a/app/src/main/java/org/bepass/oblivion/QuickStartService.java
+++ b/app/src/main/java/org/bepass/oblivion/QuickStartService.java
@@ -61,39 +61,32 @@ public void onStopListening() {
     @Override
     public void onClick() {
         Tile tile = getQsTile();
+        if (tile == null) {
+            //Quick setting tile was not registered by system. Return to prevent crash
+            return;
+        }
         if (tile.getState() == Tile.STATE_INACTIVE) {
             Intent vpnIntent = OblivionVpnService.prepare(this);
             if (vpnIntent != null) {
                 Toast.makeText(this, "لطفا یک‌بار از درون اپلیکیشن متصل شوید", Toast.LENGTH_LONG).show();
             } else {
-                startVpnService();
+                OblivionVpnService.startVpnService(this);
             }
         } else {
-            stopVpnService();
+            OblivionVpnService.stopVpnService(this);
         }
     }
 
-
-    private void startVpnService() {
-        //Toast.makeText(getApplicationContext(), calculateArgs(), Toast.LENGTH_LONG).show();
-        Intent intent = new Intent(this, OblivionVpnService.class);
-        intent.setAction(OblivionVpnService.FLAG_VPN_START);
-        ContextCompat.startForegroundService(this, intent);
-    }
-
-
-    private void stopVpnService() {
-        Intent intent = new Intent(this, OblivionVpnService.class);
-        intent.setAction(OblivionVpnService.FLAG_VPN_STOP);
-        ContextCompat.startForegroundService(this, intent);
-    }
-
     private void subscribe() {
         if (!isBound) return;
         OblivionVpnService.registerConnectionStateObserver(CONNECTION_OBSERVER_KEY, serviceMessenger, new ConnectionStateChangeListener() {
             @Override
             public void onChange(ConnectionState state) {
                 Tile tile = getQsTile();
+                if (tile == null) {
+                    //Quick setting tile was not registered by system. Return to prevent crash
+                    return;
+                }
                 switch (state) {
                     case DISCONNECTED:
                         tile.setState(Tile.STATE_INACTIVE);
