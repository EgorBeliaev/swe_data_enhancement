diff --git a/src/main/java/meteordevelopment/meteorclient/systems/modules/Module.java b/src/main/java/meteordevelopment/meteorclient/systems/modules/Module.java
index 2b20b44d57..6acfd83a8c 100644
--- a/src/main/java/meteordevelopment/meteorclient/systems/modules/Module.java
+++ b/src/main/java/meteordevelopment/meteorclient/systems/modules/Module.java
@@ -25,12 +25,13 @@
 import java.util.Objects;
 
 public abstract class Module implements ISerializable<Module>, Comparable<Module> {
-    protected final MinecraftClient mc;
+    protected static final MinecraftClient mc = MinecraftClient.getInstance();
 
     public final Category category;
     public final String name;
     public final String title;
     public final String description;
+    public final String[] aliases;
     public final Color color;
 
     public final Settings settings = new Settings();
@@ -46,12 +47,13 @@ public abstract class Module implements ISerializable<Module>, Comparable<Module
     public boolean chatFeedback = true;
     public boolean favorite = false;
 
-    public Module(Category category, String name, String description) {
-        this.mc = MinecraftClient.getInstance();
+    public Module(Category category, String name, String description, String... aliases) {
+        if (name.contains(" ")) MeteorClient.LOG.warn("Module '{}' contains invalid characters in its name making it incompatible with Meteor Client commands.", name);
         this.category = category;
         this.name = name;
         this.title = Utils.nameToTitle(name);
         this.description = description;
+        this.aliases = aliases;
         this.color = Color.fromHsv(Utils.random(0.0, 360.0), 0.35, 1);
     }
 
diff --git a/src/main/java/meteordevelopment/meteorclient/systems/modules/Modules.java b/src/main/java/meteordevelopment/meteorclient/systems/modules/Modules.java
index 88f47fc812..e5b0de8cd7 100644
--- a/src/main/java/meteordevelopment/meteorclient/systems/modules/Modules.java
+++ b/src/main/java/meteordevelopment/meteorclient/systems/modules/Modules.java
@@ -121,6 +121,7 @@ public static Iterable<Category> loopCategories() {
         return CATEGORIES;
     }
 
+    @Deprecated(forRemoval = true)
     public static Category getCategoryByHash(int hash) {
         for (Category category : CATEGORIES) {
             if (category.hashCode() == hash) return category;
@@ -174,6 +175,10 @@ public Set<Module> searchTitles(String text) {
 
         for (Module module : this.moduleInstances.values()) {
             int score = Utils.searchLevenshteinDefault(module.title, text, false);
+            for (String alias : module.aliases) {
+                int aliasScore = Utils.searchLevenshteinDefault(alias, text, false);
+                if (aliasScore < score) score = aliasScore;
+            }
             modules.put(module, modules.getOrDefault(module, 0) + score);
         }
 
diff --git a/src/main/java/meteordevelopment/meteorclient/systems/modules/render/blockesp/BlockESP.java b/src/main/java/meteordevelopment/meteorclient/systems/modules/render/blockesp/BlockESP.java
index 39b6096f4a..1e8485f9b2 100644
--- a/src/main/java/meteordevelopment/meteorclient/systems/modules/render/blockesp/BlockESP.java
+++ b/src/main/java/meteordevelopment/meteorclient/systems/modules/render/blockesp/BlockESP.java
@@ -83,7 +83,7 @@ public class BlockESP extends Module {
     private Dimension lastDimension;
 
     public BlockESP() {
-        super(Categories.Render, "block-esp", "Renders specified blocks through walls.");
+        super(Categories.Render, "block-esp", "Renders specified blocks through walls.", "search");
 
         RainbowColors.register(this::onTickRainbow);
     }
