[
    {
        "title": "Fixed potential crash due to Enums implementing interfaces/abstract methods"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Type of change\r\n\r\n- [x] Bug fix\r\n- [ ] New feature\r\n\r\n## Description\r\n\r\nIt is possible that `getEnumConstants` returns null, even though it has been called on the class returned by `getClass` of an enum constant. This is the case if the Enum contains an abstract method or an interface which are implemented by the constants, like this:\r\n```java\r\nenum SomeEnum implements SomeInterface {\r\n    SomeEnumConstant {\r\n        @Override\r\n        public void someMethodInheritedFromTheInterface() { ... }\r\n        \r\n        @Override\r\n        public void someAbstractMethod() { ... }\r\n    };\r\n    \r\n    public abstract void someAbstractMethod();\r\n}\r\n\r\nSomeEnum.SomeEnumConstant.getClass().getEnumConstants() == null\r\n```\r\nIn this case `SomeEnumConstant.getClass().getEnumConstants()` returns null because the class returned by getClass is not actually SomeEnum but something like SomeEnum$1 for each implmenting constant. Instead `getDeclaringClass` should be used to get the actual enum class.\r\n\r\n## Related issues\r\n\r\n--\r\n\r\n# How Has This Been Tested?\r\n\r\nNoticed it while writing an Add-On, this definitely fixes it.\r\n\r\n# Checklist:\r\n\r\n- [x] My code follows the style guidelines of this project.\r\n- [x] I have added comments to my code in more complex areas.\r\n- [x] I have tested the code in both development and production environments.\r\n"
    },
    {
        "author": {
            "login": "Wide-Cat"
        },
        "body": "Good catch \ud83d\udc4d "
    }
]