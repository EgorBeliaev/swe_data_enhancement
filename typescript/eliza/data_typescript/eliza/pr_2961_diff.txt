diff --git a/packages/core/__tests__/parsing.test.ts b/packages/core/__tests__/parsing.test.ts
index d2739fa8890..b91e390a12a 100644
--- a/packages/core/__tests__/parsing.test.ts
+++ b/packages/core/__tests__/parsing.test.ts
@@ -74,18 +74,24 @@ describe("Parsing Module", () => {
                 "item2",
                 "item3",
             ]);
-            input = "```json\n[\"A's item\", \"B's item\", \"C's item\"]\n```";
+            input = '```json\n["A\'s item", "B\'s item", "C\'s item"]\n```';
             expect(parseJsonArrayFromText(input)).toEqual([
                 "A's item",
                 "B's item",
                 "C's item",
             ]);
-            input = "[\"A's item\", \"B's item\", \"C's item\"]";
+            input = '["A\'s item", "B\'s item", "C\'s item"]';
             expect(parseJsonArrayFromText(input)).toEqual([
                 "A's item",
                 "B's item",
                 "C's item",
             ]);
+            input = `[
+                'MANAGE_POSITIONS_RETRIGGER_EVALUATOR'
+              ]`;
+            expect(parseJsonArrayFromText(input)).toEqual([
+                "MANAGE_POSITIONS_RETRIGGER_EVALUATOR",
+            ]);
         });
 
         it("should handle empty arrays", () => {
diff --git a/packages/core/src/parsing.ts b/packages/core/src/parsing.ts
index b27dcdf8407..75ea8373df8 100644
--- a/packages/core/src/parsing.ts
+++ b/packages/core/src/parsing.ts
@@ -15,7 +15,7 @@ If {{agentName}} is talking too much, you can choose [IGNORE]
 Your response must include one of the options.`;
 
 export const parseShouldRespondFromText = (
-    text: string,
+    text: string
 ): "RESPOND" | "IGNORE" | "STOP" | null => {
     const match = text
         .split("\n")[0]
@@ -27,12 +27,12 @@ export const parseShouldRespondFromText = (
     return match
         ? (match[0].toUpperCase() as "RESPOND" | "IGNORE" | "STOP")
         : text.includes("RESPOND")
-          ? "RESPOND"
-          : text.includes("IGNORE")
-            ? "IGNORE"
-            : text.includes("STOP")
-              ? "STOP"
-              : null;
+        ? "RESPOND"
+        : text.includes("IGNORE")
+        ? "IGNORE"
+        : text.includes("STOP")
+        ? "STOP"
+        : null;
 };
 
 export const booleanFooter = `Respond with only a YES or a NO.`;
@@ -91,7 +91,10 @@ export function parseJsonArrayFromText(text: string) {
     if (jsonBlockMatch) {
         try {
             // Only replace quotes that are actually being used for string delimitation
-            const normalizedJson = jsonBlockMatch[1].replace(/(?<!\\)'([^']*)'(?=[,}\]])/g, '"$1"');
+            const normalizedJson = jsonBlockMatch[1].replace(
+                /(?<!\\)'([^']*)'(?=\s*[,}\]])/g,
+                '"$1"'
+            );
             jsonData = JSON.parse(normalizedJson);
         } catch (e) {
             console.error("Error parsing JSON:", e);
@@ -107,7 +110,10 @@ export function parseJsonArrayFromText(text: string) {
         if (arrayMatch) {
             try {
                 // Only replace quotes that are actually being used for string delimitation
-                const normalizedJson = arrayMatch[0].replace(/(?<!\\)'([^']*)'(?=[,}\]])/g, '"$1"');
+                const normalizedJson = arrayMatch[0].replace(
+                    /(?<!\\)'([^']*)'(?=\s*[,}\]])/g,
+                    '"$1"'
+                );
                 jsonData = JSON.parse(normalizedJson);
             } catch (e) {
                 console.error("Error parsing JSON:", e);
@@ -134,7 +140,7 @@ export function parseJsonArrayFromText(text: string) {
  * @returns An object parsed from the JSON string if successful; otherwise, null or the result of parsing an array.
  */
 export function parseJSONObjectFromText(
-    text: string,
+    text: string
 ): Record<string, any> | null {
     let jsonData = null;
 
@@ -184,7 +190,7 @@ export function parseJSONObjectFromText(
  */
 export function extractAttributes(
     response: string,
-    attributesToExtract?: string[],
+    attributesToExtract?: string[]
 ): { [key: string]: string | undefined } {
     const attributes: { [key: string]: string | undefined } = {};
 
@@ -198,7 +204,7 @@ export function extractAttributes(
         // Extract only specified attributes
         attributesToExtract.forEach((attribute) => {
             const match = response.match(
-                new RegExp(`"${attribute}"\\s*:\\s*"([^"]*)"`, "i"),
+                new RegExp(`"${attribute}"\\s*:\\s*"([^"]*)"`, "i")
             );
             if (match) {
                 attributes[attribute] = match[1];
@@ -228,7 +234,7 @@ export function cleanJsonResponse(response: string): string {
 export const postActionResponseFooter = `Choose any combination of [LIKE], [RETWEET], [QUOTE], and [REPLY] that are appropriate. Each action must be on its own line. Your response must only include the chosen actions.`;
 
 export const parseActionResponseFromText = (
-    text: string,
+    text: string
 ): { actions: ActionResponse } => {
     const actions: ActionResponse = {
         like: false,
@@ -267,7 +273,7 @@ export const parseActionResponseFromText = (
  */
 export function truncateToCompleteSentence(
     text: string,
-    maxLength: number,
+    maxLength: number
 ): string {
     if (text.length <= maxLength) {
         return text;
