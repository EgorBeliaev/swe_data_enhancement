diff --git a/apps/meteor/app/api/server/api.ts b/apps/meteor/app/api/server/api.ts
index 560a92733ad4..7854138c063b 100644
--- a/apps/meteor/app/api/server/api.ts
+++ b/apps/meteor/app/api/server/api.ts
@@ -3,6 +3,7 @@ import { Logger } from '@rocket.chat/logger';
 import { Users } from '@rocket.chat/models';
 import { Random } from '@rocket.chat/random';
 import type { JoinPathPattern, Method } from '@rocket.chat/rest-typings';
+import { wrapExceptions } from '@rocket.chat/tools';
 import express from 'express';
 import type { Request, Response } from 'express';
 import { Accounts } from 'meteor/accounts-base';
@@ -404,10 +405,14 @@ export class APIClass<TBasePath extends string = ''> {
 	public reloadRoutesToRefreshRateLimiter(): void {
 		this._routes.forEach((route) => {
 			if (this.shouldAddRateLimitToRoute(route.options)) {
-				this.addRateLimiterRuleForRoutes({
-					routes: [route.path],
-					rateLimiterOptions: route.options.rateLimiterOptions || defaultRateLimiterOptions,
-					endpoints: Object.keys(route.endpoints).filter((endpoint) => endpoint !== 'options'),
+				wrapExceptions(() =>
+					this.addRateLimiterRuleForRoutes({
+						routes: [route.path],
+						rateLimiterOptions: route.options.rateLimiterOptions || defaultRateLimiterOptions,
+						endpoints: Object.keys(route.endpoints).filter((endpoint) => endpoint !== 'options'),
+					}),
+				).catch((error) => {
+					console.error(error.message);
 				});
 			}
 		});
@@ -426,10 +431,10 @@ export class APIClass<TBasePath extends string = ''> {
 			throw new Meteor.Error('"rateLimiterOptions" must be an object');
 		}
 		if (!rateLimiterOptions.numRequestsAllowed) {
-			throw new Meteor.Error('You must set "numRequestsAllowed" property in rateLimiter for REST API endpoint');
+			throw new Meteor.Error(`You must set "numRequestsAllowed" property in rateLimiter for REST API endpoint: ${routes}`);
 		}
 		if (!rateLimiterOptions.intervalTimeInMS) {
-			throw new Meteor.Error('You must set "intervalTimeInMS" property in rateLimiter for REST API endpoint');
+			throw new Meteor.Error(`You must set "intervalTimeInMS" property in rateLimiter for REST API endpoint: ${routes}`);
 		}
 		const addRateLimitRuleToEveryRoute = (routes: string[]) => {
 			routes.forEach((route) => {
diff --git a/apps/meteor/app/api/server/v1/users.ts b/apps/meteor/app/api/server/v1/users.ts
index 020269e6ef71..c3cc0e3e1f00 100644
--- a/apps/meteor/app/api/server/v1/users.ts
+++ b/apps/meteor/app/api/server/v1/users.ts
@@ -623,7 +623,7 @@ API.v1.addRoute(
 		authRequired: false,
 		rateLimiterOptions: {
 			numRequestsAllowed: settings.get('Rate_Limiter_Limit_RegisterUser') ?? 1,
-			intervalTimeInMS: settings.get('API_Enable_Rate_Limiter_Limit_Time_Default'),
+			intervalTimeInMS: settings.get('API_Enable_Rate_Limiter_Limit_Time_Default') ?? 600000,
 		},
 		validateParams: isUserRegisterParamsPOST,
 	},
