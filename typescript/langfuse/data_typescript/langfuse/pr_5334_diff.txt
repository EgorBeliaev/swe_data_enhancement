diff --git a/web/src/components/trace/ObservationTree.tsx b/web/src/components/trace/ObservationTree.tsx
index 7e634f17a8c1..83c27fcc697d 100644
--- a/web/src/components/trace/ObservationTree.tsx
+++ b/web/src/components/trace/ObservationTree.tsx
@@ -39,7 +39,11 @@ export const ObservationTree = ({
   toggleCollapsedObservation: (id: string) => void;
   collapseAll: () => void;
   expandAll: () => void;
-  trace: Trace & { latency?: number };
+  trace: Omit<Trace, "input" | "output"> & {
+    latency?: number;
+    input: string | undefined;
+    output: string | undefined;
+  };
   scores: APIScore[];
   currentObservationId: string | undefined;
   setCurrentObservationId: (id: string | undefined) => void;
@@ -117,7 +121,11 @@ export const ObservationTree = ({
 };
 
 const ObservationTreeTraceNode = (props: {
-  trace: Trace & { latency?: number };
+  trace: Omit<Trace, "input" | "output"> & {
+    input: string | undefined;
+    output: string | undefined;
+    latency?: number;
+  };
   expandAll: () => void;
   collapseAll: () => void;
   scores: APIScore[];
diff --git a/web/src/components/trace/TracePreview.tsx b/web/src/components/trace/TracePreview.tsx
index 5f3d731bcb80..fc405f2a7b95 100644
--- a/web/src/components/trace/TracePreview.tsx
+++ b/web/src/components/trace/TracePreview.tsx
@@ -51,8 +51,8 @@ export const TracePreview = ({
 }: {
   trace: Omit<Trace, "input" | "output"> & {
     latency?: number;
-    input: string | null;
-    output: string | null;
+    input: string | undefined;
+    output: string | undefined;
   };
   observations: ObservationReturnType[];
   scores: APIScore[];
diff --git a/web/src/components/trace/TraceTimelineView.tsx b/web/src/components/trace/TraceTimelineView.tsx
index e7db1c82b27c..21006c4db688 100644
--- a/web/src/components/trace/TraceTimelineView.tsx
+++ b/web/src/components/trace/TraceTimelineView.tsx
@@ -333,8 +333,8 @@ export function TraceTimelineView({
 }: {
   trace: Omit<Trace, "input" | "output"> & {
     latency?: number;
-    input: string | null;
-    output: string | null;
+    input: string | undefined;
+    output: string | undefined;
   };
   observations: Array<ObservationReturnType>;
   projectId: string;
diff --git a/web/src/components/trace/index.tsx b/web/src/components/trace/index.tsx
index 9b0e89e587a4..ede275b13c56 100644
--- a/web/src/components/trace/index.tsx
+++ b/web/src/components/trace/index.tsx
@@ -55,8 +55,8 @@ import { useHasEntitlement } from "@/src/features/entitlements/hooks";
 export function Trace(props: {
   observations: Array<ObservationReturnType>;
   trace: Omit<Trace, "input" | "output"> & {
-    input: string | null;
-    output: string | null;
+    input: string | undefined;
+    output: string | undefined;
   };
   scores: APIScore[];
   projectId: string;
diff --git a/web/src/components/ui/CodeJsonViewer.tsx b/web/src/components/ui/CodeJsonViewer.tsx
index 9955a58b4b36..bdfdfa1b0ff3 100644
--- a/web/src/components/ui/CodeJsonViewer.tsx
+++ b/web/src/components/ui/CodeJsonViewer.tsx
@@ -223,11 +223,11 @@ export const IOTableCell = ({
             className,
           )}
         >
-          {stringifyJsonNode(data)}
+          {data ? stringifyJsonNode(data) : undefined}
         </div>
       ) : (
         <JSONView
-          json={stringifyJsonNode(data)}
+          json={data ? stringifyJsonNode(data) : undefined}
           className={cn(
             "h-full w-full self-stretch overflow-y-auto rounded-sm",
             className,
diff --git a/web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx b/web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx
index b9702cc003f5..3a01de641278 100644
--- a/web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx
+++ b/web/src/ee/features/playground/page/components/JumpToPlaygroundButton.tsx
@@ -28,7 +28,10 @@ type JumpToPlaygroundButtonProps = (
     }
   | {
       source: "generation";
-      generation: Observation;
+      generation: Omit<Observation, "input" | "output"> & {
+        input: string | undefined;
+        output: string | undefined;
+      };
       analyticsEventName: "trace_detail:test_in_playground_button_click";
     }
 ) & {
@@ -133,7 +136,12 @@ const parsePrompt = (prompt: Prompt): PlaygroundCache => {
   }
 };
 
-const parseGeneration = (generation: Observation): PlaygroundCache => {
+const parseGeneration = (
+  generation: Omit<Observation, "input" | "output"> & {
+    input: string | undefined;
+    output: string | undefined;
+  },
+): PlaygroundCache => {
   if (generation.type !== "GENERATION") return null;
 
   const modelParams = parseModelParams(generation);
@@ -179,7 +187,7 @@ const parseGeneration = (generation: Observation): PlaygroundCache => {
 };
 
 function parseModelParams(
-  generation: Observation,
+  generation: Omit<Observation, "input" | "output">,
 ):
   | (Partial<UIModelParams> & Pick<UIModelParams, "provider" | "model">)
   | undefined {
diff --git a/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx b/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx
index ca2cb14f5f84..7c73b9d93775 100644
--- a/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx
+++ b/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx
@@ -28,8 +28,8 @@ export const NewDatasetItemFromTrace = (props: {
   projectId: string;
   traceId: string;
   observationId?: string;
-  input: string | null;
-  output: string | null;
+  input: string | undefined;
+  output: string | undefined;
   metadata: Prisma.JsonValue;
 }) => {
   const parsedInput =
diff --git a/web/src/server/api/routers/observations.ts b/web/src/server/api/routers/observations.ts
index 6da81abd811b..0a2fec88a11a 100644
--- a/web/src/server/api/routers/observations.ts
+++ b/web/src/server/api/routers/observations.ts
@@ -33,8 +33,8 @@ export const observationsRouter = createTRPCRouter({
         }
         return {
           ...obs,
-          input: JSON.stringify(obs.input),
-          output: JSON.stringify(obs.output),
+          input: obs.input ? JSON.stringify(obs.input) : undefined,
+          output: obs.output ? JSON.stringify(obs.output) : undefined,
           internalModel: obs?.internalModelId,
         };
       } catch (e) {
diff --git a/web/src/server/api/routers/traces.ts b/web/src/server/api/routers/traces.ts
index 11f2823f0a4a..6947e00f3968 100644
--- a/web/src/server/api/routers/traces.ts
+++ b/web/src/server/api/routers/traces.ts
@@ -190,8 +190,8 @@ export const traceRouter = createTRPCRouter({
       }
       return {
         ...trace,
-        input: JSON.stringify(trace.input),
-        output: JSON.stringify(trace.output),
+        input: trace.input ? JSON.stringify(trace.input) : undefined,
+        output: trace.output ? JSON.stringify(trace.output) : undefined,
       };
     }),
   byIdWithObservationsAndScores: protectedGetTraceProcedure
@@ -253,14 +253,14 @@ export const traceRouter = createTRPCRouter({
 
       return {
         ...trace,
-        input: JSON.stringify(trace.input),
-        output: JSON.stringify(trace.output),
+        input: trace.input ? JSON.stringify(trace.input) : undefined,
+        output: trace.output ? JSON.stringify(trace.output) : undefined,
         scores: validatedScores,
         latency: latencyMs !== undefined ? latencyMs / 1000 : undefined,
         observations: observations.map((o) => ({
           ...o,
-          input: null, // this is not queried above.
-          output: null,
+          output: undefined,
+          input: undefined, // this is not queried above.
         })) as ObservationReturnType[],
       };
     }),
