This pull request introduces a new select-all interface along with batch action capabilities for tables. Below are the key changes and implementations made:

1. **Batch Actions:**
   - Define `BatchActionType` enum with `Create` and `Delete` actions in `types.ts`.
   - Implement `BatchActionQuerySchema` and `CreateBatchActionSchema` to support batch action queries.
   - Create `BatchActionQueue` in `batchActionQueue.ts` to manage batch action jobs.
   - Extend `queues.ts` with `BatchActionProcessingEventSchema` and integrate `BatchActionQueue`.
   - Add `handleBatchActionJob` function in `handleBatchActionJob.ts` to execute batch actions.

2. **UI Components:**
   - Add `DataTableSelectAllBanner` for the new select all user interface in `data-table-select-all-banner.tsx`.
   - Implement `TableActionMenu` and `TableActionDialog` for managing batch actions from the UI, located in `TableActionMenu.tsx` and `TableActionDialog.tsx`.
   - Update `DataTableToolbar` to support multi-select actions.

3. **API and Server:**
   - Implement `createBatchActionJob` function in `createBatchActionJob.ts` to initiate batch action tasks.
   - Update `traceRouter` in `traces.ts` to support batch delete operations.
   - Introduce `tableRouter` in `tableRouter.ts` for querying batch action progress.

4. **Testing:**
   - Develop tests for batch action processing, including chunk handling and filtered queries in `batchAction.test.ts`.

5. **Miscellaneous:**
   - Revise `useSessionStorage` to ensure state synchronization across tabs.
   - Introduce `useSelectAll` hook for managing select-all state within tables.

Additionally, note that standard DD observability settings will be added via Terraform post-merge as indicated by a contributor.