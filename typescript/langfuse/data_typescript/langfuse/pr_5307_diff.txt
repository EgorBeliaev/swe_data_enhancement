diff --git a/web/src/components/trace/TracePreview.tsx b/web/src/components/trace/TracePreview.tsx
index aceb60921a49..5f3d731bcb80 100644
--- a/web/src/components/trace/TracePreview.tsx
+++ b/web/src/components/trace/TracePreview.tsx
@@ -49,7 +49,11 @@ export const TracePreview = ({
   viewType = "detailed",
   className,
 }: {
-  trace: Trace & { latency?: number };
+  trace: Omit<Trace, "input" | "output"> & {
+    latency?: number;
+    input: string | null;
+    output: string | null;
+  };
   observations: ObservationReturnType[];
   scores: APIScore[];
   commentCounts?: Map<string, number>;
diff --git a/web/src/components/trace/TraceTimelineView.tsx b/web/src/components/trace/TraceTimelineView.tsx
index 9c41a7fa26db..e7db1c82b27c 100644
--- a/web/src/components/trace/TraceTimelineView.tsx
+++ b/web/src/components/trace/TraceTimelineView.tsx
@@ -331,7 +331,11 @@ export function TraceTimelineView({
   projectId,
   scores,
 }: {
-  trace: Trace & { latency?: number };
+  trace: Omit<Trace, "input" | "output"> & {
+    latency?: number;
+    input: string | null;
+    output: string | null;
+  };
   observations: Array<ObservationReturnType>;
   projectId: string;
   scores: APIScore[];
diff --git a/web/src/components/trace/index.tsx b/web/src/components/trace/index.tsx
index 0af650d861dd..9b0e89e587a4 100644
--- a/web/src/components/trace/index.tsx
+++ b/web/src/components/trace/index.tsx
@@ -54,7 +54,10 @@ import { useHasEntitlement } from "@/src/features/entitlements/hooks";
 
 export function Trace(props: {
   observations: Array<ObservationReturnType>;
-  trace: Trace;
+  trace: Omit<Trace, "input" | "output"> & {
+    input: string | null;
+    output: string | null;
+  };
   scores: APIScore[];
   projectId: string;
   viewType?: "detailed" | "focused";
diff --git a/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx b/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx
index 3aae6d4ed7d5..ca2cb14f5f84 100644
--- a/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx
+++ b/web/src/features/datasets/components/NewDatasetItemFromObservationButton.tsx
@@ -22,15 +22,26 @@ import { useHasProjectAccess } from "@/src/features/rbac/utils/checkProjectAcces
 import { Button } from "@/src/components/ui/button";
 import { usePostHogClientCapture } from "@/src/features/posthog-analytics/usePostHogClientCapture";
 import { useIsAuthenticatedAndProjectMember } from "@/src/features/auth/hooks";
+import { parseJsonPrioritised } from "@langfuse/shared";
 
 export const NewDatasetItemFromTrace = (props: {
   projectId: string;
   traceId: string;
   observationId?: string;
-  input: Prisma.JsonValue;
-  output: Prisma.JsonValue;
+  input: string | null;
+  output: string | null;
   metadata: Prisma.JsonValue;
 }) => {
+  const parsedInput =
+    props.input && typeof props.input === "string"
+      ? (parseJsonPrioritised(props.input) ?? null)
+      : null;
+
+  const parsedOutput =
+    props.output && typeof props.output === "string"
+      ? (parseJsonPrioritised(props.output) ?? null)
+      : null;
+
   const [isFormOpen, setIsFormOpen] = useState(false);
   const isAuthenticatedAndProjectMember = useIsAuthenticatedAndProjectMember(
     props.projectId,
@@ -124,8 +135,8 @@ export const NewDatasetItemFromTrace = (props: {
             traceId={props.traceId}
             observationId={props.observationId}
             projectId={props.projectId}
-            input={props.input}
-            output={props.output}
+            input={parsedInput}
+            output={parsedOutput}
             metadata={props.metadata}
             onFormSuccess={() => setIsFormOpen(false)}
             className="h-full overflow-y-auto"
