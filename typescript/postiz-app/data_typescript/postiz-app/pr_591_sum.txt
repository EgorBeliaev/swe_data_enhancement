This PR introduces a new functionality for webhook management, integrating it into the backend API and frontend UI. Detailed instructions and changes are as follows:

1. **Backend API Enhancements:**
   - Implement a new `WebhookController` registered with GET, POST, PUT, and DELETE methods for webhook HTTP requests. Update `api.module.ts` and `webhooks.controller.ts`.
   - Enhance permission logic in `permissions.service.ts` to include a new `WEBHOOKS` section and adjust error handling and messaging for webhook limits in `subscription.exception.ts`.

2. **Frontend UI Updates:**
   - Replace the existing `SettingsComponent` with `SettingsPopup`, update settings navigation, and add a hidden "Settings" menu item within `settings/page.tsx`, `settings.component.tsx`, and `top.menu.tsx`.
   - Refine UI components by updating channel functions with confirmation dialogs and error handling in `teams.component.tsx` and `impersonate.tsx`.
   - Introduce new React components in `webhooks.tsx`, with a form for adding or editing webhooks.

3. **Workers and Libraries Enhancements:**
   - Inject a `WebhooksService` and add a new event handler in `posts.controller.ts` to process webhook events.
   - Update the database module, posts logic in `posts.repository.ts` and `posts.service.ts`, extend the pricing model for webhook limits, and modify the schema in `schema.prisma` to support webhook data storage.

4. **New Domain for Webhooks:**
   - Create repository and service classes in `webhooks.repository.ts` and `webhooks.service.ts` for managing webhooks, including creation, deletion, digesting, and firing notifications.
   - Introduce `webhooks.dto.ts` for validation and data transfer.

Ensure that any implementation of webhooks follows these structural and logical updates across the specified files.