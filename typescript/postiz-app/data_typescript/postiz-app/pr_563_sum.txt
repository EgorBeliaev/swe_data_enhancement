**Instructions for Implementing Farcaster Authentication:**

1. **Backend Changes:**
   - Implement a new `FarcasterProvider` class at `backend/src/services/auth/providers/farcaster.provider.ts` with required authentication methods.
   - Update the `providers.factory.ts` in `backend/src/services/auth/providers/` to support `FARCASTER` in the `loadProvider` method.

2. **Frontend Changes:**
   - Create a new React component for Farcaster authentication at `frontend/src/components/auth/providers/farcaster.provider.tsx`.
   - Add a `NeynarAuthButton` component in `frontend/src/components/auth/nayner.auth.button.tsx`.
   - In `frontend/src/app/layout.tsx`, add `neynarClientId` to `VariableContextComponent`.
   - Update the `login.tsx` and `register.tsx` components in `frontend/src/components/auth/` to include the Farcaster provider conditionally.

3. **Prisma Updates:**
   - Modify `libraries/nestjs-libraries/src/database/prisma/schema.prisma` by adding `FARCASTER` to the `Provider` enum.

4. **Shared Libraries Updates:**
   - Update the `variable.context.tsx` in `libraries/react-shared-libraries/src/helpers/` to include `neynarClientId` in the context interface.

5. **Integration Instructions:**
   - Ensure integration with Neynar API for authentication flow from frontend to backend. Users should authenticate using their Farcaster account through Neynar.
   - Follow the sequence diagram provided for API call flow to implement step-by-step user authentication using Farcaster.