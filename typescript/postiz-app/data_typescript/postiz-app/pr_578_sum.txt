### Instructions for Changes in the Repository

1. **Nostr Provider Implementation:**
   - Add a new provider component for Nostr across both frontend and backend.
   - Ensure integration management, authentication mechanisms, and relay communication capabilities are included.

2. **Frontend Modifications:**
   - In `apps/frontend/src/components/launches/providers/nostr/nostr.provider.tsx`, implement a default export using a `withProvider` Higher-Order Component (HOC).
   - In `apps/frontend/src/components/launches/providers/show.all.providers.tsx`, import and include `NostrProvider` in the `Providers` array.

3. **Web3 Component:**
   - Create a `WrapcasterProvider` React component in `apps/frontend/src/components/launches/web3/providers/nostr.provider.tsx`.

4. **Backend Modifications:**
   - In `libraries/nestjs-libraries/src/integrations/integration.manager.ts`, import and add `NostrProvider` to the `socialIntegrationList`.
   - Implement `NostrProvider` class in `libraries/nestjs-libraries/src/integrations/social/nostr.provider.ts` with authentication and posting methods.

5. **Dependencies Update:**
   - Update `package.json` to add `nostr-tools` and `ws` packages and increase other dependency versions accordingly.

These changes aim to enable users to interact with the Nostr decentralized social network using the current provider infrastructure of the application.