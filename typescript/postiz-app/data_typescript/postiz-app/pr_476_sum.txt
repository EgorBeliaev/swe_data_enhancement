Add new endpoints for customer management in the `IntegrationsController` and update related logic across both backend and frontend components to support customer selection and integration filtering:

1. **Backend Changes:**
   - `apps/backend/src/api/routes/integrations.controller.ts`: Implement methods `getCustomers`, `updateIntegrationGroup`, and `updateOnCustomerName`. Update `getIntegrationList` to include a `customer` field.

2. **Frontend Changes:**
   - `apps/frontend/src/app/global.scss`: Add hover effect to `.col-calendar` class.
   - `apps/frontend/src/components/launches/add.edit.model.tsx`: Introduce state variables `customer` and `totalCustomers`, update filtering logic for integrations and handle post submissions.
   - `apps/frontend/src/components/launches/calendar.context.tsx`: Extend `Integrations` interface to optionally include `customer`.
   - `apps/frontend/src/components/launches/customer.modal.tsx`: Add `CustomerModal` component for customer integration management.
   - `apps/frontend/src/components/launches/calendar.tsx`: Revise control flow, remove `DNDProvider`.
   - `apps/frontend/src/components/launches/launches.component.tsx`: Implement drag-and-drop functionality, introduce `MenuGroupComponent` and `MenuComponent`.
   - `apps/frontend/src/components/launches/menu/menu.tsx`: Add `addToCustomer` method to trigger `CustomerModal`.

3. **Database Schema Update:**
   - `libraries/nestjs-libraries/src/database/prisma/schema.prisma`: Add `Customer` model, update `Integration` model with `customerId`.

4. **Repository Enhancements:**
   - `libraries/nestjs-libraries/src/database/prisma/integrations/integration.repository.ts`: Add methods for customer management.
   - `libraries/nestjs-libraries/src/database/prisma/integrations/integration.service.ts`: Expand with methods for customer data management.

These changes enhance customer management and integration functionalities across the application.