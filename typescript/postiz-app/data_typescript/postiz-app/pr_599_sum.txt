**Instructions for Changes:**

1. **Backend Updates:**
   - Update method signatures in `auth.controller.ts`, `auth.service.ts`, and `providers.interface.ts` to include an optional query parameter for `oauthLink` and `generateLink`.
   - Extend `providers.factory.ts` to incorporate a new case for `WALLET` and load the `WalletProvider`.
   - Add `WalletProvider` class in `wallet.provider.ts` with methods for `generateLink`, `getToken`, and `getUser`, and implement Redis storage for challenges and signature verification.
   - Modify the database schema in `schema.prisma` to include a new `WALLET` option.
   - Add necessary dependencies for Solana wallet integration in `package.json` (use `wallet-adapter`, `bs58`, and `tweetnacl`).

2. **Frontend Enhancements:**
   - Adjust layout dimensions in `layout.tsx` (from 614px to 660px).
   - Introduce a new CSS class `.tbaom7c` in `global.scss` for element hiding.
   - Update login and registration functionality in `login.tsx` and `register.tsx` to incorporate wallet functionality using `WalletProvider`.
   - Add new UI components `WalletUiProvider` and `wallet.provider.tsx` to support wallet connection and authentication, enabling dynamic importing based on `billingEnabled`.

3. **Review and Testing:**
   - Verify OAuth link generation, token validation, and user retrieval logic.
   - Test the integration of wallet login flow both on client-side and server-side.
   - Ensure no issues with Redis challenge storage and cryptographic operations.

These changes collectively introduce a digital wallet authentication system, enhancing both backend functionality and frontend user interface to support seamless wallet-based login and registration.