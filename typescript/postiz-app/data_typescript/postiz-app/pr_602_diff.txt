diff --git a/apps/backend/src/api/routes/posts.controller.ts b/apps/backend/src/api/routes/posts.controller.ts
index 81307e607..c9866bcde 100644
--- a/apps/backend/src/api/routes/posts.controller.ts
+++ b/apps/backend/src/api/routes/posts.controller.ts
@@ -28,6 +28,7 @@ import { AgentGraphService } from '@gitroom/nestjs-libraries/agent/agent.graph.s
 import { Response } from 'express';
 import { GetUserFromRequest } from '@gitroom/nestjs-libraries/user/user.from.request';
 import { ShortLinkService } from '@gitroom/nestjs-libraries/short-linking/short.link.service';
+import { CreateTagDto } from '@gitroom/nestjs-libraries/dtos/posts/create.tag.dto';
 
 @ApiTags('Posts')
 @Controller('/posts')
@@ -71,6 +72,28 @@ export class PostsController {
     return this._postsService.createComment(org.id, user.id, id, body.comment);
   }
 
+  @Get('/tags')
+  async getTags(@GetOrgFromRequest() org: Organization) {
+    return { tags: await this._postsService.getTags(org.id) };
+  }
+
+  @Post('/tags')
+  async createTag(
+    @GetOrgFromRequest() org: Organization,
+    @Body() body: CreateTagDto
+  ) {
+    return this._postsService.createTag(org.id, body);
+  }
+
+  @Put('/tags/:id')
+  async editTag(
+    @GetOrgFromRequest() org: Organization,
+    @Body() body: CreateTagDto,
+    @Param('id') id: string
+  ) {
+    return this._postsService.editTag(id, org.id, body);
+  }
+
   @Get('/')
   async getPosts(
     @GetOrgFromRequest() org: Organization,
diff --git a/apps/frontend/src/app/global.scss b/apps/frontend/src/app/global.scss
index 2c1b87fbc..a6f84b974 100644
--- a/apps/frontend/src/app/global.scss
+++ b/apps/frontend/src/app/global.scss
@@ -1,8 +1,8 @@
 @tailwind base;
 @tailwind components;
 @tailwind utilities;
-@import "./colors.scss";
-@import "./polonto.css";
+@import './colors.scss';
+@import './polonto.css';
 
 body,
 html {
@@ -379,14 +379,14 @@ html {
   -webkit-text-fill-color: white !important;
 }
 div div .set-font-family {
-  font-family: "Helvetica Neue", Helvetica !important;
+  font-family: 'Helvetica Neue', Helvetica !important;
   font-stretch: 100% !important;
   font-style: normal !important;
   font-weight: 400 !important;
 }
 
 .col-calendar:hover:before {
-  content: "Date passed";
+  content: 'Date passed';
   color: white;
   position: absolute;
   left: 50%;
@@ -397,26 +397,68 @@ div div .set-font-family {
 }
 
 .loading-shimmer {
-    position: relative;
-    color: rgba(255, 255, 255, .5);
+  position: relative;
+  color: rgba(255, 255, 255, 0.5);
 }
 
 .loading-shimmer:before {
-    content: attr(data-text);
-    position: absolute;
-    overflow: hidden;
-    max-width: 100%;
-    white-space: nowrap;
-    color: white;
-    animation: loading 4s linear 0s infinite;
-    filter: blur(0.4px);
+  content: attr(data-text);
+  position: absolute;
+  overflow: hidden;
+  max-width: 100%;
+  white-space: nowrap;
+  color: white;
+  animation: loading 4s linear 0s infinite;
+  filter: blur(0.4px);
 }
 @keyframes loading {
-    0% {
-        max-width: 0;
-    }
+  0% {
+    max-width: 0;
+  }
 }
 
 .tbaom7c {
   display: none;
-}
\ No newline at end of file
+}
+
+.tags-top > div {
+  flex: 1;
+  margin-right: 20px;
+  border: 0 !important;
+  background: transparent !important;
+  padding-left: 0 !important;
+}
+
+.tags-top .react-tags__combobox {
+  margin-left: 5px;
+}
+
+.tags-top .react-tags__combobox {
+  height: 35px;
+  display: flex;
+  background-color: #141c2c;
+  padding-left: 10px;
+  padding-right: 10px;
+  min-width: 150px;
+  text-align: left;
+  border-width: 1px;
+  border-radius: 4px;
+  border-color: var(--color-fifth);
+}
+
+.tags-top .react-tags__list,
+.tags-top .react-tags__list li,
+.tags-top .react-tags__list li > div {
+  height: 35px;
+}
+
+.tags-top .react-tags__listbox {
+  z-index: 1000 !important;
+}
+
+.tags-top .react-tags__list-item > div {
+  display: flex;
+  align-items: center;
+  padding-left: 5px;
+  padding-right: 5px;
+}
diff --git a/apps/frontend/src/components/launches/add.edit.model.tsx b/apps/frontend/src/components/launches/add.edit.model.tsx
index 58c10eb29..a986bb436 100644
--- a/apps/frontend/src/components/launches/add.edit.model.tsx
+++ b/apps/frontend/src/components/launches/add.edit.model.tsx
@@ -52,13 +52,12 @@ import { useUser } from '@gitroom/frontend/components/layout/user.context';
 import { makeId } from '@gitroom/nestjs-libraries/services/make.is';
 import Image from 'next/image';
 import { weightedLength } from '@gitroom/helpers/utils/count.length';
-import { uniqBy } from 'lodash';
-import { Select } from '@gitroom/react/form/select';
 import { useClickOutside } from '@gitroom/frontend/components/layout/click.outside';
 import { useUppyUploader } from '@gitroom/frontend/components/media/new.uploader';
 import { LoadingComponent } from '@gitroom/frontend/components/layout/loading';
 import { DropFiles } from '@gitroom/frontend/components/layout/drop.files';
 import { SelectCustomer } from '@gitroom/frontend/components/launches/select.customer';
+import { TagsComponent } from './tags.component';
 
 function countCharacters(text: string, type: string): number {
   if (type !== 'x') {
@@ -141,6 +140,14 @@ export const AddEditModal: FC<{
   // are we in edit mode?
   const existingData = useExistingData();
 
+  const [tags, setTags] = useState<any[]>(
+    // @ts-ignore
+    existingData?.posts?.[0]?.tags?.map((p: any) => ({
+      label: p.tag.name,
+      value: p.tag.name,
+    })) || []
+  );
+
   // Post for
   const [postFor, setPostFor] = useState<Information | undefined>();
 
@@ -387,6 +394,7 @@ export const AddEditModal: FC<{
         body: JSON.stringify({
           ...(postFor ? { order: postFor.id } : {}),
           type,
+          tags,
           shortLink,
           date: dateState.utc().format('YYYY-MM-DDTHH:mm:ss'),
           posts: allKeys.map((p) => ({
@@ -416,6 +424,7 @@ export const AddEditModal: FC<{
       integrations,
       existingData,
       selectedIntegrations,
+      tags,
     ]
   );
 
@@ -814,7 +823,13 @@ export const AddEditModal: FC<{
           )}
         >
           <div className="mx-[16px]">
-            <TopTitle title="">
+            <TopTitle title="" removeTitle={true}>
+              <TagsComponent
+                name="tags"
+                label="Tags"
+                initial={tags}
+                onChange={(e) => setTags(e.target.value)}
+              />
               <svg
                 width="10"
                 height="11"
diff --git a/apps/frontend/src/components/launches/calendar.context.tsx b/apps/frontend/src/components/launches/calendar.context.tsx
index 613c0ba36..1e817c19b 100644
--- a/apps/frontend/src/components/launches/calendar.context.tsx
+++ b/apps/frontend/src/components/launches/calendar.context.tsx
@@ -14,7 +14,7 @@ import {
 import dayjs from 'dayjs';
 import useSWR from 'swr';
 import { useFetch } from '@gitroom/helpers/utils/custom.fetch';
-import { Post, Integration } from '@prisma/client';
+import { Post, Integration, Tags } from '@prisma/client';
 import { useSearchParams } from 'next/navigation';
 import isoWeek from 'dayjs/plugin/isoWeek';
 import weekOfYear from 'dayjs/plugin/weekOfYear';
@@ -32,7 +32,7 @@ export const CalendarContext = createContext({
   comments: [] as Array<{ date: string; total: number }>,
   integrations: [] as (Integrations & { refreshNeeded?: boolean })[],
   trendings: [] as string[],
-  posts: [] as Array<Post & { integration: Integration }>,
+  posts: [] as Array<Post & { integration: Integration, tags: {tag: Tags}[] }>,
   reloadCalendarView: () => {
     /** empty **/
   },
diff --git a/apps/frontend/src/components/launches/calendar.tsx b/apps/frontend/src/components/launches/calendar.tsx
index ab750e75f..fd259fdb7 100644
--- a/apps/frontend/src/components/launches/calendar.tsx
+++ b/apps/frontend/src/components/launches/calendar.tsx
@@ -21,7 +21,7 @@ import clsx from 'clsx';
 import { useFetch } from '@gitroom/helpers/utils/custom.fetch';
 import { ExistingDataContextProvider } from '@gitroom/frontend/components/launches/helpers/use.existing.data';
 import { useDrag, useDrop } from 'react-dnd';
-import { Integration, Post, State } from '@prisma/client';
+import { Integration, Post, State, Tags, TagsPosts } from '@prisma/client';
 import { useAddProvider } from '@gitroom/frontend/components/launches/add.provider.component';
 import { useToaster } from '@gitroom/react/toaster/toaster';
 import { useUser } from '@gitroom/frontend/components/layout/user.context';
@@ -634,7 +634,9 @@ export const CalendarColumn: FC<{
                         )}
                       >
                         <Image
-                          src={selectedIntegrations.picture || '/no-picture.jpg'}
+                          src={
+                            selectedIntegrations.picture || '/no-picture.jpg'
+                          }
                           className="rounded-full"
                           alt={selectedIntegrations.identifier}
                           width={32}
@@ -677,7 +679,7 @@ const CalendarItem: FC<{
   integrations: Integrations[];
   state: State;
   display: 'day' | 'week' | 'month';
-  post: Post & { integration: Integration };
+  post: Post & { integration: Integration; tags: { tag: Tags }[] };
 }> = memo((props) => {
   const {
     editPost,
@@ -711,21 +713,45 @@ const CalendarItem: FC<{
       className={clsx('w-full flex h-full flex-1 flex-col group', 'relative')}
       style={{ opacity }}
     >
-      <div className="text-white bg-forth text-[11px] h-[15px] w-full rounded-tr-[10px] rounded-tl-[10px] flex justify-center gap-[10px] px-[5px]">
+      <div
+        className={clsx(
+          'text-white bg-forth text-[11px] h-[15px] w-full rounded-tr-[10px] rounded-tl-[10px] flex justify-center gap-[10px] px-[5px]'
+        )}
+        style={{
+          backgroundColor: post?.tags?.[0]?.tag?.color,
+        }}
+      >
         <div
-          className="hidden group-hover:block hover:underline cursor-pointer"
+          className={clsx(
+            post?.tags?.[0]?.tag?.color ? 'mix-blend-difference' : '',
+            'group-hover:hidden cursor-pointer'
+          )}
+        >
+          {post.tags.map((p) => p.tag.name).join(', ')}
+        </div>
+        <div
+          className={clsx(
+            'hidden group-hover:block hover:underline cursor-pointer',
+            post?.tags?.[0]?.tag?.color && 'mix-blend-difference'
+          )}
           onClick={duplicatePost}
         >
           <Duplicate />
         </div>
         <div
-          className="hidden group-hover:block hover:underline cursor-pointer"
+          className={clsx(
+            'hidden group-hover:block hover:underline cursor-pointer',
+            post?.tags?.[0]?.tag?.color && 'mix-blend-difference'
+          )}
           onClick={preview}
         >
           <Preview />
         </div>{' '}
         <div
-          className="hidden group-hover:block hover:underline cursor-pointer"
+          className={clsx(
+            'hidden group-hover:block hover:underline cursor-pointer',
+            post?.tags?.[0]?.tag?.color && 'mix-blend-difference'
+          )}
           onClick={statistics}
         >
           <Statistics />
@@ -778,7 +804,7 @@ const Duplicate = () => {
     >
       <path
         d="M27 5H9C8.46957 5 7.96086 5.21071 7.58579 5.58579C7.21071 5.96086 7 6.46957 7 7V9H5C4.46957 9 3.96086 9.21071 3.58579 9.58579C3.21071 9.96086 3 10.4696 3 11V25C3 25.5304 3.21071 26.0391 3.58579 26.4142C3.96086 26.7893 4.46957 27 5 27H23C23.5304 27 24.0391 26.7893 24.4142 26.4142C24.7893 26.0391 25 25.5304 25 25V23H27C27.5304 23 28.0391 22.7893 28.4142 22.4142C28.7893 22.0391 29 21.5304 29 21V7C29 6.46957 28.7893 5.96086 28.4142 5.58579C28.0391 5.21071 27.5304 5 27 5ZM23 11V13H5V11H23ZM23 25H5V15H23V25ZM27 21H25V11C25 10.4696 24.7893 9.96086 24.4142 9.58579C24.0391 9.21071 23.5304 9 23 9H9V7H27V21Z"
-        fill="white"
+        fill="currentColor"
       />
     </svg>
   );
@@ -797,7 +823,7 @@ const Preview = () => {
     >
       <path
         d="M30.9137 15.595C30.87 15.4963 29.8112 13.1475 27.4575 10.7937C24.3212 7.6575 20.36 6 16 6C11.64 6 7.67874 7.6575 4.54249 10.7937C2.18874 13.1475 1.12499 15.5 1.08624 15.595C1.02938 15.7229 1 15.8613 1 16.0012C1 16.1412 1.02938 16.2796 1.08624 16.4075C1.12999 16.5062 2.18874 18.8538 4.54249 21.2075C7.67874 24.3425 11.64 26 16 26C20.36 26 24.3212 24.3425 27.4575 21.2075C29.8112 18.8538 30.87 16.5062 30.9137 16.4075C30.9706 16.2796 31 16.1412 31 16.0012C31 15.8613 30.9706 15.7229 30.9137 15.595ZM16 24C12.1525 24 8.79124 22.6012 6.00874 19.8438C4.86704 18.7084 3.89572 17.4137 3.12499 16C3.89551 14.5862 4.86686 13.2915 6.00874 12.1562C8.79124 9.39875 12.1525 8 16 8C19.8475 8 23.2087 9.39875 25.9912 12.1562C27.1352 13.2912 28.1086 14.5859 28.8812 16C27.98 17.6825 24.0537 24 16 24ZM16 10C14.8133 10 13.6533 10.3519 12.6666 11.0112C11.6799 11.6705 10.9108 12.6075 10.4567 13.7039C10.0026 14.8003 9.88377 16.0067 10.1153 17.1705C10.3468 18.3344 10.9182 19.4035 11.7573 20.2426C12.5965 21.0818 13.6656 21.6532 14.8294 21.8847C15.9933 22.1162 17.1997 21.9974 18.2961 21.5433C19.3924 21.0892 20.3295 20.3201 20.9888 19.3334C21.6481 18.3467 22 17.1867 22 16C21.9983 14.4092 21.3657 12.884 20.2408 11.7592C19.1159 10.6343 17.5908 10.0017 16 10ZM16 20C15.2089 20 14.4355 19.7654 13.7777 19.3259C13.1199 18.8864 12.6072 18.2616 12.3045 17.5307C12.0017 16.7998 11.9225 15.9956 12.0768 15.2196C12.2312 14.4437 12.6122 13.731 13.1716 13.1716C13.731 12.6122 14.4437 12.2312 15.2196 12.0769C15.9956 11.9225 16.7998 12.0017 17.5307 12.3045C18.2616 12.6072 18.8863 13.1199 19.3259 13.7777C19.7654 14.4355 20 15.2089 20 16C20 17.0609 19.5786 18.0783 18.8284 18.8284C18.0783 19.5786 17.0609 20 16 20Z"
-        fill="white"
+        fill="currentColor"
       />
     </svg>
   );
@@ -816,7 +842,7 @@ export const Statistics = () => {
     >
       <path
         d="M28 25H27V5C27 4.73478 26.8946 4.48043 26.7071 4.29289C26.5196 4.10536 26.2652 4 26 4H19C18.7348 4 18.4804 4.10536 18.2929 4.29289C18.1054 4.48043 18 4.73478 18 5V10H12C11.7348 10 11.4804 10.1054 11.2929 10.2929C11.1054 10.4804 11 10.7348 11 11V16H6C5.73478 16 5.48043 16.1054 5.29289 16.2929C5.10536 16.4804 5 16.7348 5 17V25H4C3.73478 25 3.48043 25.1054 3.29289 25.2929C3.10536 25.4804 3 25.7348 3 26C3 26.2652 3.10536 26.5196 3.29289 26.7071C3.48043 26.8946 3.73478 27 4 27H28C28.2652 27 28.5196 26.8946 28.7071 26.7071C28.8946 26.5196 29 26.2652 29 26C29 25.7348 28.8946 25.4804 28.7071 25.2929C28.5196 25.1054 28.2652 25 28 25ZM20 6H25V25H20V6ZM13 12H18V25H13V12ZM7 18H11V25H7V18Z"
-        fill="white"
+        fill="currentColor"
       />
     </svg>
   );
diff --git a/apps/frontend/src/components/launches/helpers/top.title.component.tsx b/apps/frontend/src/components/launches/helpers/top.title.component.tsx
index 68942ef30..d851d1813 100644
--- a/apps/frontend/src/components/launches/helpers/top.title.component.tsx
+++ b/apps/frontend/src/components/launches/helpers/top.title.component.tsx
@@ -3,15 +3,17 @@ import { FC, ReactNode } from 'react';
 export const TopTitle: FC<{
   title: string;
   shouldExpend?: boolean;
+  removeTitle?: boolean;
   expend?: () => void;
   collapse?: () => void;
   children?: ReactNode;
 }> = (props) => {
-  const { title, children, shouldExpend, expend, collapse } = props;
+  const { title, removeTitle, children, shouldExpend, expend, collapse } =
+    props;
 
   return (
     <div className="h-[57px] border-b flex items-center border-customColor6 px-[16px] -mx-[16px]">
-      <div className="flex-1">{title}</div>
+      {!removeTitle && <div className="flex-1">{title}</div>}
       {children}
       {shouldExpend !== undefined && (
         <div className="cursor-pointer">
@@ -48,4 +50,4 @@ export const TopTitle: FC<{
       )}
     </div>
   );
-};
\ No newline at end of file
+};
diff --git a/apps/frontend/src/components/launches/providers/x/x.provider.tsx b/apps/frontend/src/components/launches/providers/x/x.provider.tsx
index 78f141b75..e00df91a0 100644
--- a/apps/frontend/src/components/launches/providers/x/x.provider.tsx
+++ b/apps/frontend/src/components/launches/providers/x/x.provider.tsx
@@ -28,7 +28,6 @@ export default withProvider(
   },
   (settings) => {
     if (settings?.[0]?.value) {
-      console.log(4000);
       return 4000;
     }
     return 280;
diff --git a/apps/frontend/src/components/launches/tags.component.tsx b/apps/frontend/src/components/launches/tags.component.tsx
new file mode 100644
index 000000000..ce224d45e
--- /dev/null
+++ b/apps/frontend/src/components/launches/tags.component.tsx
@@ -0,0 +1,243 @@
+import { FC, useCallback, useMemo, useState } from 'react';
+import { ReactTags } from 'react-tag-autocomplete';
+import { useFetch } from '@gitroom/helpers/utils/custom.fetch';
+import useSWR from 'swr';
+import { TopTitle } from '@gitroom/frontend/components/launches/helpers/top.title.component';
+import { Input } from '@gitroom/react/form/input';
+import { ColorPicker } from '@gitroom/react/form/color.picker';
+import { Button } from '@gitroom/react/form/button';
+import { uniqBy } from 'lodash';
+
+export const TagsComponent: FC<{
+  name: string;
+  label: string;
+  initial: any[];
+  onChange: (event: { target: { value: any[]; name: string } }) => void;
+}> = (props) => {
+  const { onChange, name, initial } = props;
+  const fetch = useFetch();
+  const [tagValue, setTagValue] = useState<any[]>(initial?.slice(0) || []);
+  const [suggestions, setSuggestions] = useState<string>('');
+  const [showModal, setShowModal] = useState<any>(false);
+
+  const loadTags = useCallback(async () => {
+    return (await fetch('/posts/tags')).json();
+  }, []);
+
+  const { isLoading, data, mutate } = useSWR<{
+    tags: { name: string; color: string }[];
+  }>('tags', loadTags);
+
+  const onDelete = useCallback(
+    (tagIndex: number) => {
+      const modify = tagValue.filter((_, i) => i !== tagIndex);
+      setTagValue(modify);
+      onChange({ target: { value: modify, name } });
+    },
+    [tagValue]
+  );
+
+  const createNewTag = useCallback(
+    async (newTag: any) => {
+      const val = await new Promise((resolve) => {
+        setShowModal({
+          tag: newTag.value,
+          resolve,
+          close: () => setShowModal(false),
+        });
+      });
+
+      setShowModal(false);
+      mutate();
+
+      return val;
+    },
+    [mutate]
+  );
+
+  const edit = useCallback(
+    (tag: any) => async (e: any) => {
+      e.stopPropagation();
+      e.preventDefault();
+      const val = await new Promise((resolve) => {
+        setShowModal({
+          tag: tag.name,
+          color: tag.color,
+          id: tag.id,
+          resolve,
+          close: () => setShowModal(false),
+        });
+      });
+
+      setShowModal(false);
+      mutate();
+
+      const modify = tagValue.map((t) => {
+        if (t.label === tag.name) {
+          return { value: val, label: val };
+        }
+
+        return t;
+      });
+
+      setTagValue(modify);
+      onChange({ target: { value: modify, name } });
+    },
+    [tagValue, data]
+  );
+
+  const onAddition = useCallback(
+    async (newTag: any) => {
+      if (tagValue.length >= 3) {
+        return;
+      }
+
+      const getTag = data?.tags?.find((f) => f.name === newTag.label)
+        ? newTag.label
+        : await createNewTag(newTag);
+
+      const modify = [...tagValue, { value: getTag, label: getTag }];
+      setTagValue(modify);
+      onChange({ target: { value: modify, name } });
+    },
+    [tagValue, data]
+  );
+
+  // useEffect(() => {
+  //   const settings = getValues()[props.name];
+  //   if (settings) {
+  //     setTagValue(settings);
+  //   }
+  // }, []);
+
+  const suggestionsArray = useMemo(() => {
+    return uniqBy<{ label: string; value: string }>(
+      [
+        ...(data?.tags.map((p) => ({
+          label: p.name,
+          value: p.name,
+        })) || []),
+        ...tagValue,
+        { label: suggestions, value: suggestions },
+      ].filter((f) => f.label),
+      (o) => o.label
+    );
+  }, [suggestions, tagValue]);
+
+  if (isLoading) {
+    return null;
+  }
+
+  return (
+    <>
+      {showModal && <ShowModal {...showModal} />}
+      <div className="flex-1 flex tags-top">
+        <ReactTags
+          placeholderText="Add a tag"
+          suggestions={suggestionsArray}
+          selected={tagValue}
+          onAdd={onAddition}
+          onInput={setSuggestions}
+          onDelete={onDelete}
+          renderTag={(tag) => {
+            const findTag = data?.tags?.find((f) => f.name === tag.tag.label);
+            const findIndex = tagValue.findIndex(
+              (f) => f.label === tag.tag.label
+            );
+            return (
+              <div
+                className={`min-w-[50px] float-left ml-[4px] p-[3px] rounded-sm relative`}
+                style={{ backgroundColor: findTag?.color }}
+              >
+                <div
+                  className="absolute -top-[5px] left-[10px] text-[12px] text-red-600 bg-white px-[3px] rounded-full"
+                  onClick={edit(findTag)}
+                >
+                  Edit
+                </div>
+                <div
+                  className="absolute -top-[5px] -left-[5px] text-[12px] text-red-600 bg-white px-[3px] rounded-full"
+                  onClick={() => onDelete(findIndex)}
+                >
+                  X
+                </div>
+                <div className="text-white mix-blend-difference">
+                  {tag.tag.label}
+                </div>
+              </div>
+            );
+          }}
+        />
+      </div>
+    </>
+  );
+};
+
+const ShowModal: FC<{
+  tag: string;
+  color?: string;
+  id?: string;
+  close: () => void;
+  resolve: (value: string) => void;
+}> = (props) => {
+  const { close, tag, resolve, color: theColor, id } = props;
+  const fetch = useFetch();
+  const [color, setColor] = useState<string>(theColor || '#942828');
+  const [tagName, setTagName] = useState<string>(tag);
+  const save = useCallback(async () => {
+    await fetch(id ? `/posts/tags/${id}` : '/posts/tags', {
+      method: id ? 'PUT' : 'POST',
+      body: JSON.stringify({ name: tagName, color }),
+    });
+
+    resolve(tagName);
+  }, [tagName, color, id]);
+  return (
+    <div className="bg-black/40 fixed left-0 top-0 w-full h-full z-[500]">
+      <div className="relative w-[500px] mx-auto flex gap-[20px] flex-col flex-1 rounded-[4px] border border-customColor6 bg-sixth p-[16px] pt-0">
+        <TopTitle title={`Create a new tag`} />
+        <button
+          className="outline-none absolute right-[20px] top-[15px] mantine-UnstyledButton-root mantine-ActionIcon-root hover:bg-tableBorder cursor-pointer mantine-Modal-close mantine-1dcetaa"
+          type="button"
+        >
+          <svg
+            viewBox="0 0 15 15"
+            fill="none"
+            xmlns="http://www.w3.org/2000/svg"
+            width="16"
+            height="16"
+            onClick={close}
+          >
+            <path
+              d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z"
+              fill="currentColor"
+              fillRule="evenodd"
+              clipRule="evenodd"
+            ></path>
+          </svg>
+        </button>
+
+        <div>
+          <Input
+            name="name"
+            disableForm={true}
+            label="Name"
+            value={tagName}
+            onChange={(e) => setTagName(e.target.value)}
+          />
+          <ColorPicker
+            onChange={(e) => setColor(e.target.value)}
+            label="Tag Color"
+            name="color"
+            value={color}
+            enabled={true}
+            canBeCancelled={false}
+          />
+          <Button onClick={save} className="mt-[16px]">
+            Save
+          </Button>
+        </div>
+      </div>
+    </div>
+  );
+};
diff --git a/libraries/nestjs-libraries/src/database/prisma/posts/posts.repository.ts b/libraries/nestjs-libraries/src/database/prisma/posts/posts.repository.ts
index 825deb8e9..28e6b9e15 100644
--- a/libraries/nestjs-libraries/src/database/prisma/posts/posts.repository.ts
+++ b/libraries/nestjs-libraries/src/database/prisma/posts/posts.repository.ts
@@ -7,6 +7,7 @@ import dayjs from 'dayjs';
 import isoWeek from 'dayjs/plugin/isoWeek';
 import weekOfYear from 'dayjs/plugin/weekOfYear';
 import { v4 as uuidv4 } from 'uuid';
+import { CreateTagDto } from '@gitroom/nestjs-libraries/dtos/posts/create.tag.dto';
 
 dayjs.extend(isoWeek);
 dayjs.extend(weekOfYear);
@@ -16,7 +17,9 @@ export class PostsRepository {
   constructor(
     private _post: PrismaRepository<'post'>,
     private _popularPosts: PrismaRepository<'popularPosts'>,
-    private _comments: PrismaRepository<'comments'>
+    private _comments: PrismaRepository<'comments'>,
+    private _tags: PrismaRepository<'tags'>,
+    private _tagsPosts: PrismaRepository<'tagsPosts'>
   ) {}
 
   getOldPosts(orgId: string, date: string) {
@@ -121,11 +124,13 @@ export class PostsRepository {
         },
         deletedAt: null,
         parentPostId: null,
-        ...query.customer ? {
-          integration: {
-            customerId: query.customer,
-          }
-        }: {},
+        ...(query.customer
+          ? {
+              integration: {
+                customerId: query.customer,
+              },
+            }
+          : {}),
       },
       select: {
         id: true,
@@ -135,6 +140,11 @@ export class PostsRepository {
         submittedForOrganizationId: true,
         submittedForOrderId: true,
         state: true,
+        tags: {
+          select: {
+            tag: true,
+          },
+        },
         integration: {
           select: {
             id: true,
@@ -186,6 +196,11 @@ export class PostsRepository {
         ...(includeIntegration
           ? {
               integration: true,
+              tags: {
+                select: {
+                  tag: true,
+                },
+              },
             }
           : {}),
         childrenPost: true,
@@ -256,7 +271,8 @@ export class PostsRepository {
     state: 'draft' | 'schedule' | 'now',
     orgId: string,
     date: string,
-    body: PostBody
+    body: PostBody,
+    tags: { value: string; label: string }[]
   ) {
     const posts: Post[] = [];
     const uuid = uuidv4();
@@ -315,6 +331,44 @@ export class PostsRepository {
           },
         })
       );
+
+      if (posts.length === 1) {
+        await this._tagsPosts.model.tagsPosts.deleteMany({
+          where: {
+            post: {
+              id: posts[0].id,
+            },
+          },
+        });
+
+        if (tags.length) {
+          const tagsList = await this._tags.model.tags.findMany({
+            where: {
+              orgId: orgId,
+              name: {
+                in: tags.map((tag) => tag.label),
+              },
+            },
+          });
+
+          if (tagsList.length) {
+            await this._post.model.post.update({
+              where: {
+                id: posts[posts.length - 1].id,
+              },
+              data: {
+                tags: {
+                  createMany: {
+                    data: tagsList.map((tag) => ({
+                      tagId: tag.id,
+                    })),
+                  },
+                },
+              },
+            });
+          }
+        }
+      }
     }
 
     const previousPost = body.group
@@ -500,6 +554,36 @@ export class PostsRepository {
     });
   }
 
+  async getTags(orgId: string) {
+    return this._tags.model.tags.findMany({
+      where: {
+        orgId,
+      },
+    });
+  }
+
+  createTag(orgId: string, body: CreateTagDto) {
+    return this._tags.model.tags.create({
+      data: {
+        orgId,
+        name: body.name,
+        color: body.color,
+      },
+    });
+  }
+
+  editTag(id: string, orgId: string, body: CreateTagDto) {
+    return this._tags.model.tags.update({
+      where: {
+        id,
+      },
+      data: {
+        name: body.name,
+        color: body.color,
+      },
+    });
+  }
+
   createComment(
     orgId: string,
     userId: string,
diff --git a/libraries/nestjs-libraries/src/database/prisma/posts/posts.service.ts b/libraries/nestjs-libraries/src/database/prisma/posts/posts.service.ts
index a30414823..0964994b8 100644
--- a/libraries/nestjs-libraries/src/database/prisma/posts/posts.service.ts
+++ b/libraries/nestjs-libraries/src/database/prisma/posts/posts.service.ts
@@ -23,6 +23,7 @@ import utc from 'dayjs/plugin/utc';
 import { MediaService } from '@gitroom/nestjs-libraries/database/prisma/media/media.service';
 import { ShortLinkService } from '@gitroom/nestjs-libraries/short-linking/short.link.service';
 import { WebhooksService } from '@gitroom/nestjs-libraries/database/prisma/webhooks/webhooks.service';
+import { CreateTagDto } from '@gitroom/nestjs-libraries/dtos/posts/create.tag.dto';
 dayjs.extend(utc);
 
 type PostWithConditionals = Post & {
@@ -595,7 +596,8 @@ export class PostsService {
           body.type === 'now'
             ? dayjs().format('YYYY-MM-DDTHH:mm:00')
             : body.date,
-          post
+          post,
+          body.tags
         );
 
       if (!posts?.length) {
@@ -792,6 +794,7 @@ export class PostsService {
           date: randomDate,
           order: '',
           shortLink: false,
+          tags: [],
           posts: [
             {
               group,
@@ -884,6 +887,18 @@ export class PostsService {
     return this._postRepository.getComments(postId);
   }
 
+  getTags(orgId: string) {
+    return this._postRepository.getTags(orgId);
+  }
+
+  createTag(orgId: string, body: CreateTagDto) {
+    return this._postRepository.createTag(orgId, body);
+  }
+
+  editTag(id: string, orgId: string, body: CreateTagDto) {
+    return this._postRepository.editTag(id, orgId, body);
+  }
+
   createComment(
     orgId: string,
     userId: string,
diff --git a/libraries/nestjs-libraries/src/database/prisma/schema.prisma b/libraries/nestjs-libraries/src/database/prisma/schema.prisma
index 31acc5845..d9724fbea 100644
--- a/libraries/nestjs-libraries/src/database/prisma/schema.prisma
+++ b/libraries/nestjs-libraries/src/database/prisma/schema.prisma
@@ -34,6 +34,34 @@ model Organization {
   plugs             Plugs[]
   customers         Customer[]
   webhooks          Webhooks[]
+  tags              Tags[]
+}
+
+model Tags {
+  id        String   @id @default(uuid())
+  name      String
+  color     String
+  orgId     String
+  organization Organization @relation(fields: [orgId], references: [id])
+  posts     TagsPosts[]
+  deletedAt DateTime?
+  createdAt DateTime @default(now())
+  updatedAt DateTime @updatedAt
+
+  @@index([orgId])
+  @@index([deletedAt])
+}
+
+model TagsPosts {
+  postId    String
+  post      Post   @relation(fields: [postId], references: [id])
+  tagId     String
+  tag       Tags   @relation(fields: [tagId], references: [id])
+  createdAt DateTime @default(now())
+  updatedAt DateTime @updatedAt
+
+  @@id([postId, tagId])
+  @@unique([postId, tagId])
 }
 
 model User {
@@ -348,6 +376,7 @@ model Post {
   lastMessage         Messages? @relation(fields: [lastMessageId], references: [id])
   payoutProblems      PayoutProblems[]
   comments            Comments[]
+  tags                TagsPosts[]
   error               String?
   createdAt           DateTime     @default(now())
   updatedAt           DateTime     @updatedAt
diff --git a/libraries/nestjs-libraries/src/dtos/posts/create.post.dto.ts b/libraries/nestjs-libraries/src/dtos/posts/create.post.dto.ts
index 3965f7103..008958b51 100644
--- a/libraries/nestjs-libraries/src/dtos/posts/create.post.dto.ts
+++ b/libraries/nestjs-libraries/src/dtos/posts/create.post.dto.ts
@@ -1,13 +1,23 @@
 import {
-  ArrayMinSize, IsArray, IsBoolean, IsDateString, IsDefined, IsIn, IsOptional, IsString, MinLength, ValidateIf, ValidateNested
+  ArrayMinSize,
+  IsArray,
+  IsBoolean,
+  IsDateString,
+  IsDefined,
+  IsIn,
+  IsOptional,
+  IsString,
+  MinLength,
+  ValidateIf,
+  ValidateNested,
 } from 'class-validator';
 import { Type } from 'class-transformer';
 import { DevToSettingsDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/dev.to.settings.dto';
-import {MediaDto} from "@gitroom/nestjs-libraries/dtos/media/media.dto";
-import {AllProvidersSettings} from "@gitroom/nestjs-libraries/dtos/posts/providers-settings/all.providers.settings";
-import {MediumSettingsDto} from "@gitroom/nestjs-libraries/dtos/posts/providers-settings/medium.settings.dto";
-import {HashnodeSettingsDto} from "@gitroom/nestjs-libraries/dtos/posts/providers-settings/hashnode.settings.dto";
-import {RedditSettingsDto} from "@gitroom/nestjs-libraries/dtos/posts/providers-settings/reddit.dto";
+import { MediaDto } from '@gitroom/nestjs-libraries/dtos/media/media.dto';
+import { AllProvidersSettings } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/all.providers.settings';
+import { MediumSettingsDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/medium.settings.dto';
+import { HashnodeSettingsDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/hashnode.settings.dto';
+import { RedditSettingsDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/reddit.dto';
 import { YoutubeSettingsDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/youtube.settings.dto';
 import { PinterestSettingsDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/pinterest.dto';
 import { DribbbleDto } from '@gitroom/nestjs-libraries/dtos/posts/providers-settings/dribbble.dto';
@@ -36,8 +46,8 @@ export class PostContent {
   @IsArray()
   @IsOptional()
   @Type(() => MediaDto)
-  @ValidateNested({each: true})
-  image: MediaDto[]
+  @ValidateNested({ each: true })
+  image: MediaDto[];
 }
 
 export class Post {
@@ -63,23 +73,33 @@ export class Post {
     discriminator: {
       property: '__type',
       subTypes: [
-          { value: DevToSettingsDto, name: 'devto' },
-          { value: MediumSettingsDto, name: 'medium' },
-          { value: HashnodeSettingsDto, name: 'hashnode' },
-          { value: RedditSettingsDto, name: 'reddit' },
-          { value: LemmySettingsDto, name: 'lemmy' },
-          { value: YoutubeSettingsDto, name: 'youtube' },
-          { value: PinterestSettingsDto, name: 'pinterest' },
-          { value: DribbbleDto, name: 'dribbble' },
-          { value: TikTokDto, name: 'tiktok' },
-          { value: DiscordDto, name: 'discord' },
-          { value: SlackDto, name: 'slack' },
+        { value: DevToSettingsDto, name: 'devto' },
+        { value: MediumSettingsDto, name: 'medium' },
+        { value: HashnodeSettingsDto, name: 'hashnode' },
+        { value: RedditSettingsDto, name: 'reddit' },
+        { value: LemmySettingsDto, name: 'lemmy' },
+        { value: YoutubeSettingsDto, name: 'youtube' },
+        { value: PinterestSettingsDto, name: 'pinterest' },
+        { value: DribbbleDto, name: 'dribbble' },
+        { value: TikTokDto, name: 'tiktok' },
+        { value: DiscordDto, name: 'discord' },
+        { value: SlackDto, name: 'slack' },
       ],
     },
   })
   settings: AllProvidersSettings;
 }
 
+class Tags {
+  @IsDefined()
+  @IsString()
+  value: string;
+
+  @IsDefined()
+  @IsString()
+  label: string;
+}
+
 export class CreatePostDto {
   @IsDefined()
   @IsIn(['draft', 'schedule', 'now'])
@@ -97,6 +117,11 @@ export class CreatePostDto {
   @IsDateString()
   date: string;
 
+  @IsArray()
+  @IsDefined()
+  @ValidateNested({ each: true })
+  tags: Tags[];
+
   @ValidateIf((o) => o.type !== 'draft')
   @IsDefined()
   @Type(() => Post)
diff --git a/libraries/nestjs-libraries/src/dtos/posts/create.tag.dto.ts b/libraries/nestjs-libraries/src/dtos/posts/create.tag.dto.ts
new file mode 100644
index 000000000..a499e52ae
--- /dev/null
+++ b/libraries/nestjs-libraries/src/dtos/posts/create.tag.dto.ts
@@ -0,0 +1,9 @@
+import { IsString } from 'class-validator';
+
+export class CreateTagDto {
+  @IsString()
+  name: string;
+
+  @IsString()
+  color: string;
+}
diff --git a/libraries/react-shared-libraries/src/form/color.picker.tsx b/libraries/react-shared-libraries/src/form/color.picker.tsx
index 6e929e6dc..760cfa06a 100644
--- a/libraries/react-shared-libraries/src/form/color.picker.tsx
+++ b/libraries/react-shared-libraries/src/form/color.picker.tsx
@@ -8,12 +8,14 @@ export const ColorPicker: FC<{
   name: string;
   label: string;
   enabled: boolean;
+  onChange?: (params: { target: { name: string, value: string } }) => void;
+  value?: string;
   canBeCancelled: boolean;
 }> = (props) => {
-  const { name, label, enabled, canBeCancelled } = props;
+  const { name, label, enabled,  value, canBeCancelled, onChange } = props;
   const form = useFormContext();
-  const color = form.register(name);
-  const watch = form.watch(name);
+  const color = onChange ? {onChange} : form.register(name);
+  const watch = onChange ? value : form.watch(name);
   const [enabledState, setEnabledState] = useState(!!watch);
 
   const enable = useCallback(async () => {
@@ -29,9 +31,7 @@ export const ColorPicker: FC<{
   if (!enabledState) {
     return (
       <div>
-        <Button onClick={enable}>
-          Enable color picker
-        </Button>
+        <Button onClick={enable}>Enable color picker</Button>
       </div>
     );
   }
