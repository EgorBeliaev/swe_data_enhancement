diff --git a/lib/Models/HomeModel.dart b/lib/Models/HomeModel.dart
new file mode 100644
index 0000000..14a10da
--- /dev/null
+++ b/lib/Models/HomeModel.dart
@@ -0,0 +1,64 @@
+import 'dart:convert';
+
+import 'package:flutter/foundation.dart';
+
+// ignore_for_file: public_member_api_docs, sort_constructors_first
+class HomeModel {
+  String title;
+  List playlists;
+
+  HomeModel({
+    required this.title,
+    required this.playlists,
+  });
+
+  String get getTitle => title;
+  List get getPlaylist => playlists;
+
+  set setTitle(String title) => this.title = title;
+  set setPlaylist(List playlists) => this.playlists = playlists;
+
+  HomeModel copyWith({
+    String? title,
+    List? playlists,
+  }) {
+    return HomeModel(
+      title: title ?? this.title,
+      playlists: playlists ?? this.playlists,
+    );
+  }
+
+  Map<String, dynamic> toMap() {
+    return <String, dynamic>{
+      'title': title,
+      'playlist': playlists,
+    };
+  }
+
+  factory HomeModel.fromMap(Map<String, dynamic> map) {
+    return HomeModel(
+      title: map['title'] as String,
+      playlists: List.from(
+        (map['playlist'] as List),
+      ),
+    );
+  }
+
+  String toJson() => json.encode(toMap());
+
+  factory HomeModel.fromJson(String source) =>
+      HomeModel.fromMap(json.decode(source) as Map<String, dynamic>);
+
+  @override
+  String toString() => 'HomeModel(title: $title, playlist: $playlists)';
+
+  @override
+  bool operator ==(covariant HomeModel other) {
+    if (identical(this, other)) return true;
+
+    return other.title == title && listEquals(other.playlists, playlists);
+  }
+
+  @override
+  int get hashCode => title.hashCode ^ playlists.hashCode;
+}
diff --git a/lib/data/home1.dart b/lib/data/home1.dart
index 4715b6d..acc3abf 100644
--- a/lib/data/home1.dart
+++ b/lib/data/home1.dart
@@ -4,6 +4,8 @@ import 'dart:developer';
 import 'package:hive_flutter/hive_flutter.dart';
 import 'package:http/http.dart';
 
+import '../Models/HomeModel.dart';
+
 Box box = Hive.box('settings');
 
 class HomeApi {
@@ -82,46 +84,10 @@ class HomeApi {
         return element['itemSectionRenderer']['contents'][0]['shelfRenderer'];
       }).toList();
 
-      final List finalResult = shelfRenderer.map((element) {
-        if (element['title']['runs'][0]['text'].trim() !=
-            'Highlights from Global Citizen Live') {
-          return {
-            'title': element['title']['runs'][0]['text'],
-            'playlists': element['title']['runs'][0]['text'].trim() ==
-                        'Charts' ||
-                    element['title']['runs'][0]['text'].trim() == 'Classements'
-                ? formatChartItems(
-                    element['content']['horizontalListRenderer']['items']
-                        as List,
-                  )
-                : element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('Music Videos') ||
-                        element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('Nouveaux clips') ||
-                        element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('En Musique Avec Moi') ||
-                        element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('Performances Uniques')
-                    ? formatVideoItems(
-                        element['content']['horizontalListRenderer']['items']
-                            as List,
-                      )
-                    : formatItems(
-                        element['content']['horizontalListRenderer']['items']
-                            as List,
-                      ),
-          };
-        } else {
-          return null;
-        }
-      }).toList();
+      var finalResult = _finalResult(shelfRenderer);
 
       final List finalHeadResult = formatHeadItems(headResult);
-      finalResult.removeWhere((element) => element == null);
+      finalResult.removeWhere((element) => element.playlists.isEmpty);
 
       return {'body': finalResult, 'head': finalHeadResult};
     } catch (e) {
@@ -130,6 +96,63 @@ class HomeApi {
     }
   }
 
+  /*
+   * Gets the final list of playlists sorted by the name of each iterated item,
+   * this list contains the url of the video and playlists of each horizontal 
+   * column reflected in Youtube.
+   */
+  List<HomeModel> _finalResult(List shelfRenderer) {
+    var data = <HomeModel>[];
+
+    try {
+      for (var element in shelfRenderer) {
+        HomeModel homeModel = HomeModel(title: "", playlists: []);
+
+        if (element['title']['runs'][0]['text'].trim() !=
+            'Highlights from Global Citizen Live') {
+          homeModel.title = element['title']['runs'][0]['text'].toString();
+
+          if (element['content']['horizontalListRenderer']['items'][0]
+                      ['gridPlaylistRenderer'] !=
+                  null &&
+              element['content']['horizontalListRenderer']['items'][0]
+                          ['gridPlaylistRenderer']['shortBylineText']['runs'][0]
+                      ['text']
+                  .toString()
+                  .trim()
+                  .toLowerCase()
+                  .contains('chart')) {
+            //Lists YouTube Music Global Charts.
+            homeModel.playlists = formatChartItems(
+                element['content']['horizontalListRenderer']['items']);
+            data.add(homeModel);
+          }
+
+          if (element['content']['horizontalListRenderer']['items'][0]
+                  ['gridVideoRenderer'] !=
+              null) {
+            //The video playlist is added.
+            homeModel.playlists = formatVideoItems(
+                element['content']['horizontalListRenderer']['items']);
+            data.add(homeModel);
+          }
+
+          if (element['content']['horizontalListRenderer']['items'][0]
+                  ['compactStationRenderer'] !=
+              null) {
+            //Lists other than videos or video playlists are added.
+            homeModel.playlists = formatItems(
+                element['content']['horizontalListRenderer']['items']);
+            data.add(homeModel);
+          }
+        }
+      }
+      return data;
+    } catch (e) {
+      return <HomeModel>[];
+    }
+  }
+
   List formatChartItems(List itemsList) {
     try {
       final List result = itemsList.map((e) {
diff --git a/lib/screens/HomeScreen.dart b/lib/screens/HomeScreen.dart
index 165d085..e9366a6 100644
--- a/lib/screens/HomeScreen.dart
+++ b/lib/screens/HomeScreen.dart
@@ -10,6 +10,7 @@ import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
 import 'package:hive_flutter/hive_flutter.dart';
 import 'package:vibe_music/Models/Artist.dart';
+import 'package:vibe_music/Models/HomeModel.dart';
 import 'package:vibe_music/Models/Thumbnail.dart';
 import 'package:vibe_music/Models/Track.dart';
 import 'package:vibe_music/data/home1.dart';
@@ -36,15 +37,9 @@ class HomeScreen extends StatefulWidget {
 class _HomeScreenState extends State<HomeScreen>
     with AutomaticKeepAliveClientMixin<HomeScreen> {
   List? head = [];
-  List? body = [];
+  List<HomeModel> body = [];
   List recommendations = [];
   bool isLoading = true;
-  PageController songsController = PageController(
-    viewportFraction: 0.9,
-  );
-  PageController recommendationsController = PageController(
-    viewportFraction: 0.9,
-  );
   @override
   void initState() {
     super.initState();
@@ -67,12 +62,6 @@ class _HomeScreenState extends State<HomeScreen>
       body = home['body'];
       recommendations = recommend;
       isLoading = false;
-      if (recommendationsController.hasClients) {
-        recommendationsController.jumpTo(0);
-      }
-      if (songsController.hasClients) {
-        songsController.jumpTo(0);
-      }
     });
   }
 
@@ -432,8 +421,10 @@ class _HomeScreenState extends State<HomeScreen>
                                                 ),
                                               ),
                                               ExpandablePageView(
-                                                controller:
-                                                    recommendationsController,
+                                                controller: PageController(
+                                                  initialPage: 0,
+                                                  viewportFraction: 0.9,
+                                                ),
                                                 padEnds: false,
                                                 children: [
                                                   Column(
@@ -527,9 +518,8 @@ class _HomeScreenState extends State<HomeScreen>
                                           ),
                                         if (body != null && body!.isNotEmpty)
                                           ...body!.map((item) {
-                                            String title = item['title'];
-                                            List content =
-                                                item['playlists'] as List;
+                                            String title = item.title;
+                                            List content = item.playlists;
                                             bool areSongs = content.isNotEmpty
                                                 ? content.first['videoId'] !=
                                                     null
@@ -572,7 +562,11 @@ class _HomeScreenState extends State<HomeScreen>
                                                         if (areSongs)
                                                           ExpandablePageView(
                                                             controller:
-                                                                songsController,
+                                                                PageController(
+                                                              initialPage: 0,
+                                                              viewportFraction:
+                                                                  0.9,
+                                                            ),
                                                             padEnds: false,
                                                             children: [
                                                               Column(
