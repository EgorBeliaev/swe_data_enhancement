diff --git a/android/app/build.gradle b/android/app/build.gradle
index d2c2c8b..8d3f561 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -44,7 +44,7 @@ android {
     }
 
     sourceSets {
-        main.java.srcDirs += 'src/main/kotlin'
+        main.java.srcDirs +=  'src/main/kotlin'
     }
 
     defaultConfig {
@@ -64,7 +64,7 @@ android {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
-           storeFile file(keystoreProperties['storeFile'])
+           storeFile file('key.jks')
            storePassword keystoreProperties['storePassword']
        }
    }
diff --git a/lib/Models/HomeModel.dart b/lib/Models/HomeModel.dart
new file mode 100644
index 0000000..fb9c7ca
--- /dev/null
+++ b/lib/Models/HomeModel.dart
@@ -0,0 +1,64 @@
+import 'dart:convert';
+
+import 'package:flutter/foundation.dart';
+
+// ignore_for_file: public_member_api_docs, sort_constructors_first
+class HomeModel {
+  String title;
+  List playlist;
+
+  HomeModel({
+    required this.title,
+    required this.playlist,
+  });
+
+  String get getTitle => title;
+  List get getPlaylist => playlist;
+
+  set setTitle(String title) => this.title = title;
+  set setPlaylist(List playlist) => this.playlist = playlist;
+
+  HomeModel copyWith({
+    String? title,
+    List? playlist,
+  }) {
+    return HomeModel(
+      title: title ?? this.title,
+      playlist: playlist ?? this.playlist,
+    );
+  }
+
+  Map<String, dynamic> toMap() {
+    return <String, dynamic>{
+      'title': title,
+      'playlist': playlist,
+    };
+  }
+
+  factory HomeModel.fromMap(Map<String, dynamic> map) {
+    return HomeModel(
+      title: map['title'] as String,
+      playlist: List.from(
+        (map['playlist'] as List),
+      ),
+    );
+  }
+
+  String toJson() => json.encode(toMap());
+
+  factory HomeModel.fromJson(String source) =>
+      HomeModel.fromMap(json.decode(source) as Map<String, dynamic>);
+
+  @override
+  String toString() => 'HomeModel(title: $title, playlist: $playlist)';
+
+  @override
+  bool operator ==(covariant HomeModel other) {
+    if (identical(this, other)) return true;
+
+    return other.title == title && listEquals(other.playlist, playlist);
+  }
+
+  @override
+  int get hashCode => title.hashCode ^ playlist.hashCode;
+}
diff --git a/lib/data/home1.dart b/lib/data/home1.dart
index 4715b6d..730f887 100644
--- a/lib/data/home1.dart
+++ b/lib/data/home1.dart
@@ -3,6 +3,7 @@ import 'dart:developer';
 
 import 'package:hive_flutter/hive_flutter.dart';
 import 'package:http/http.dart';
+import 'package:vibe_music/Models/HomeModel.dart';
 
 Box box = Hive.box('settings');
 
@@ -82,43 +83,7 @@ class HomeApi {
         return element['itemSectionRenderer']['contents'][0]['shelfRenderer'];
       }).toList();
 
-      final List finalResult = shelfRenderer.map((element) {
-        if (element['title']['runs'][0]['text'].trim() !=
-            'Highlights from Global Citizen Live') {
-          return {
-            'title': element['title']['runs'][0]['text'],
-            'playlists': element['title']['runs'][0]['text'].trim() ==
-                        'Charts' ||
-                    element['title']['runs'][0]['text'].trim() == 'Classements'
-                ? formatChartItems(
-                    element['content']['horizontalListRenderer']['items']
-                        as List,
-                  )
-                : element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('Music Videos') ||
-                        element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('Nouveaux clips') ||
-                        element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('En Musique Avec Moi') ||
-                        element['title']['runs'][0]['text']
-                            .toString()
-                            .contains('Performances Uniques')
-                    ? formatVideoItems(
-                        element['content']['horizontalListRenderer']['items']
-                            as List,
-                      )
-                    : formatItems(
-                        element['content']['horizontalListRenderer']['items']
-                            as List,
-                      ),
-          };
-        } else {
-          return null;
-        }
-      }).toList();
+      final List<HomeModel> finalResult = _finalResult(shelfRenderer);
 
       final List finalHeadResult = formatHeadItems(headResult);
       finalResult.removeWhere((element) => element == null);
@@ -130,6 +95,64 @@ class HomeApi {
     }
   }
 
+  /*
+   * Gets the final list of playlists sorted by the name of each iterated item,
+   * this list contains the url of the video and playlists of each horizontal 
+   * column reflected in Youtube.
+   */
+  List<HomeModel> _finalResult(List shelfRenderer) {
+    var data = <HomeModel>[];
+
+    try {
+      for (var element in shelfRenderer) {
+        HomeModel homeModel = HomeModel(title: "", playlist: []);
+
+        if (element['title']['runs'][0]['text'].trim() !=
+            'Highlights from Global Citizen Live') {
+          homeModel.title = element['title']['runs'][0]['text'].toString();
+
+          if (element['content']['horizontalListRenderer']['items'][0]
+                      ['gridPlaylistRenderer'] !=
+                  null &&
+              element['content']['horizontalListRenderer']['items'][0]
+                          ['gridPlaylistRenderer']['shortBylineText']['runs'][0]
+                      ['text']
+                  .toString()
+                  .trim()
+                  .toLowerCase()
+                  .contains('chart')) {
+            //Lists YouTube Music Global Charts.
+            homeModel.playlist = formatChartItems(
+                element['content']['horizontalListRenderer']['items']);
+            data.add(homeModel);
+          }
+
+          if (element['content']['horizontalListRenderer']['items'][0]
+                  ['gridVideoRenderer'] !=
+              null) {
+            //The video playlist is added.
+            homeModel.playlist = formatVideoItems(
+                element['content']['horizontalListRenderer']['items']);
+            data.add(homeModel);
+          }
+
+          if (element['content']['horizontalListRenderer']['items'][0]
+                  ['compactStationRenderer'] !=
+              null) {
+            //Lists other than videos or video playlists are added.
+            homeModel.playlist = formatItems(
+                element['content']['horizontalListRenderer']['items']);
+            data.add(homeModel);
+          }
+        }
+      }
+    } catch (e) {
+      return <HomeModel>[];
+    }
+
+    return data;
+  }
+
   List formatChartItems(List itemsList) {
     try {
       final List result = itemsList.map((e) {
