### Instructions for Implementation:

1. **Move Episode Comments:**
   - Relocate the comments section to be grouped with the episode selection menu for more streamlined aesthetics. This setup facilitates potential future functionality to add comments post-login.

2. **State Maintenance and Performance:**
   - Implement state maintenance and keep alive to prevent performance degradation caused by frequent reconstructions of the comments section.

3. **Mobile Experience:**
   - Ensure that on mobile devices in fullscreen mode, only the episode selection menu is toggled, not the comments section.

4. **Comment Loading Optimization:**
   - Adjust the logic so that comments are loaded only when the user navigates to the comments tab, rather than automatically during every episode view.

5. **Tab and Keep Alive Mechanism:**
   - Address issues with comment section loading when switching episodes. Evaluate if the current keep alive implementation might impact performance adversely.

6. **Refactor Media Player Coupling:**
   - Limit media player direct coupling to `player_controller.dart` and `player_item_surface.dart`, ensuring no direct media player references outside these components.

7. **Investigate `keepAlive` and Flutter Performance:**
   - Examine the `keepAlive` approach for resolving tab switch lag, noting that in release mode the lag may be reduced but could still be an issue on lower-performance devices.
   - Explore alternatives that might be causing the lag, such as maintaining all tab bodies within the component tree.

8. **Consider Alternative Tab Implementation:**
   - Contemplate implementing a pseudo-tab that doesn't maintain all tab contents or handle transition animations, which may alleviate tab-related lag. 

### Issue Description in the Original Repository:

The initial setup had the episode comments section loaded automatically with each episode viewing, causing potential performance issues and unnecessary resource usage. Switching between episodes also created bugs. Additionally, tightly coupled media player logic was scattered outside designated areas, prompting a need for refactoring. Another critical pain point was the lag experienced during tab switching, particularly on resource-constrained devices, necessitating an examination and potential redesign of the tab mechanism.