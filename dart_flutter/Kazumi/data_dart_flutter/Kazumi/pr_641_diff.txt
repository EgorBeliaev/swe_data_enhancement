diff --git a/lib/bean/widget/collect_button.dart b/lib/bean/widget/collect_button.dart
index c5305f8c..8dfbffce 100644
--- a/lib/bean/widget/collect_button.dart
+++ b/lib/bean/widget/collect_button.dart
@@ -4,11 +4,18 @@ import 'package:kazumi/pages/collect/collect_controller.dart';
 import 'package:flutter_modular/flutter_modular.dart';
 
 class CollectButton extends StatefulWidget {
-  const CollectButton(
-      {super.key, required this.bangumiItem, this.color = Colors.white});
+  const CollectButton({
+    super.key,
+    required this.bangumiItem,
+    this.color = Colors.white,
+    this.onOpen,
+    this.onClose,
+  });
 
   final BangumiItem bangumiItem;
   final Color color;
+  final void Function()? onOpen;
+  final void Function()? onClose;
 
   @override
   State<CollectButton> createState() => _CollectButtonState();
@@ -67,6 +74,8 @@ class _CollectButtonState extends State<CollectButton> {
     collectType = collectController.getCollectType(widget.bangumiItem);
     return MenuAnchor(
       consumeOutsideTap: true,
+      onClose: widget.onClose,
+      onOpen: widget.onOpen,
       builder:
           (BuildContext context, MenuController controller, Widget? child) {
         return IconButton(
diff --git a/lib/pages/player/player_controller.dart b/lib/pages/player/player_controller.dart
index bfc8b248..8f8a09b1 100644
--- a/lib/pages/player/player_controller.dart
+++ b/lib/pages/player/player_controller.dart
@@ -70,6 +70,8 @@ abstract class _PlayerController with Store {
   bool brightnessSeeking = false;
   @observable
   bool volumeSeeking = false;
+  @observable
+  bool canHidePlayerPanel = true;
 
   // 视频地址
   String videoUrl = '';
diff --git a/lib/pages/player/player_controller.g.dart b/lib/pages/player/player_controller.g.dart
index 7a8b3dfb..846302c0 100644
--- a/lib/pages/player/player_controller.g.dart
+++ b/lib/pages/player/player_controller.g.dart
@@ -233,6 +233,22 @@ mixin _$PlayerController on _PlayerController, Store {
     });
   }
 
+  late final _$canHidePlayerPanelAtom =
+      Atom(name: '_PlayerController.canHidePlayerPanel', context: context);
+
+  @override
+  bool get canHidePlayerPanel {
+    _$canHidePlayerPanelAtom.reportRead();
+    return super.canHidePlayerPanel;
+  }
+
+  @override
+  set canHidePlayerPanel(bool value) {
+    _$canHidePlayerPanelAtom.reportWrite(value, super.canHidePlayerPanel, () {
+      super.canHidePlayerPanel = value;
+    });
+  }
+
   late final _$loadingAtom =
       Atom(name: '_PlayerController.loading', context: context);
 
@@ -378,6 +394,7 @@ showVolume: ${showVolume},
 showPlaySpeed: ${showPlaySpeed},
 brightnessSeeking: ${brightnessSeeking},
 volumeSeeking: ${volumeSeeking},
+canHidePlayerPanel: ${canHidePlayerPanel},
 loading: ${loading},
 playing: ${playing},
 isBuffering: ${isBuffering},
diff --git a/lib/pages/player/player_item.dart b/lib/pages/player/player_item.dart
index ec3856bc..19669a33 100644
--- a/lib/pages/player/player_item.dart
+++ b/lib/pages/player/player_item.dart
@@ -144,7 +144,7 @@ class _PlayerItemState extends State<PlayerItem>
     }
   }
 
-  void handleHove() {
+  void _handleHove() {
     if (!playerController.showVideoController) {
       displayVideoController();
     }
@@ -264,7 +264,7 @@ class _PlayerItemState extends State<PlayerItem>
 
   void startHideTimer() {
     hideTimer = Timer(const Duration(seconds: 4), () {
-      if (mounted) {
+      if (mounted && playerController.canHidePlayerPanel) {
         playerController.showVideoController = false;
         animationController?.reverse();
       }
@@ -272,6 +272,11 @@ class _PlayerItemState extends State<PlayerItem>
     });
   }
 
+  // Used to pass hideTimer operation to panel layer
+  void cancelHideTimer() {
+    hideTimer?.cancel();
+  }
+
   Timer getPlayerTimer() {
     return Timer.periodic(const Duration(seconds: 1), (timer) {
       playerController.playing = playerController.playerPlaying;
@@ -580,11 +585,20 @@ class _PlayerItemState extends State<PlayerItem>
                       !playerController.showVideoController)
                   ? SystemMouseCursors.none
                   : SystemMouseCursors.basic,
-              onHover: (_) {
+              onHover: (PointerEvent pointerEvent) {
                 // workaround for android.
                 // I don't know why, but android tap event will trigger onHover event.
                 if (Utils.isDesktop()) {
-                  handleHove();
+                  if (pointerEvent.position.dy > 50 &&
+                      pointerEvent.position.dy <
+                          MediaQuery.of(context).size.height - 70) {
+                    _handleHove();
+                  } else {
+                    if (!playerController.showVideoController) {
+                      animationController?.forward();
+                      playerController.showVideoController = true;
+                    }
+                  }
                 }
               },
               child: Listener(
@@ -803,8 +817,9 @@ class _PlayerItemState extends State<PlayerItem>
                             handleProgressBarDragEnd: handleProgressBarDragEnd,
                             animationController: animationController!,
                             keyboardFocus: widget.keyboardFocus,
-                            handleHove: handleHove,
                             sendDanmaku: widget.sendDanmaku,
+                            startHideTimer: startHideTimer,
+                            cancelHideTimer: cancelHideTimer,
                           )
                         : SmallestPlayerItemPanel(
                             onBackPressed: widget.onBackPressed,
@@ -816,7 +831,9 @@ class _PlayerItemState extends State<PlayerItem>
                             handleProgressBarDragEnd: handleProgressBarDragEnd,
                             animationController: animationController!,
                             keyboardFocus: widget.keyboardFocus,
-                            handleHove: handleHove,
+                            handleHove: _handleHove,
+                            startHideTimer: startHideTimer,
+                            cancelHideTimer: cancelHideTimer,
                           ),
                     // 播放器手势控制
                     Positioned.fill(
diff --git a/lib/pages/player/player_item_panel.dart b/lib/pages/player/player_item_panel.dart
index 00861aa6..e36babbd 100644
--- a/lib/pages/player/player_item_panel.dart
+++ b/lib/pages/player/player_item_panel.dart
@@ -30,8 +30,9 @@ class PlayerItemPanel extends StatefulWidget {
     required this.animationController,
     required this.openMenu,
     required this.keyboardFocus,
-    required this.handleHove,
     required this.sendDanmaku,
+    required this.startHideTimer,
+    required this.cancelHideTimer,
   });
 
   final void Function(BuildContext) onBackPressed;
@@ -42,9 +43,10 @@ class PlayerItemPanel extends StatefulWidget {
   final void Function() handleFullscreen;
   final void Function(ThumbDragDetails details) handleProgressBarDragStart;
   final void Function() handleProgressBarDragEnd;
-  final void Function() handleHove;
   final AnimationController animationController;
   final FocusNode keyboardFocus;
+  final void Function() startHideTimer;
+  final void Function() cancelHideTimer;
   final void Function(String) sendDanmaku;
 
   @override
@@ -135,14 +137,22 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
             child: const Text('发送'),
           ),
         ),
-        onChanged: (_) {
-          widget.handleHove();
+        onTapAlwaysCalled: true,
+        onTap: () {
+          widget.cancelHideTimer();
+          playerController.canHidePlayerPanel = false;
         },
         onSubmitted: (msg) {
           widget.sendDanmaku(msg);
+          widget.cancelHideTimer();
+          widget.startHideTimer();
+          playerController.canHidePlayerPanel = true;
           textController.clear();
         },
         onTapOutside: (_) {
+          widget.cancelHideTimer();
+          widget.startHideTimer();
+          playerController.canHidePlayerPanel = true;
           widget.keyboardFocus.requestFocus();
         },
       ),
@@ -342,12 +352,12 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                 position: topOffsetAnimation,
                 child: Container(
                   height: 50,
-                  decoration: BoxDecoration(
+                  decoration: const BoxDecoration(
                     gradient: LinearGradient(
                       begin: Alignment.topCenter,
                       end: Alignment.bottomCenter,
                       colors: [
-                        Colors.black.withOpacity(0.9),
+                        Colors.black87,
                         Colors.transparent,
                       ],
                     ),
@@ -368,14 +378,14 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
               child: SlideTransition(
                 position: bottomOffsetAnimation,
                 child: Container(
-                  height: 80,
-                  decoration: BoxDecoration(
+                  height: 70,
+                  decoration: const BoxDecoration(
                     gradient: LinearGradient(
                       begin: Alignment.topCenter,
                       end: Alignment.bottomCenter,
                       colors: [
                         Colors.transparent,
-                        Colors.black.withOpacity(0.9),
+                        Colors.black87,
                       ],
                     ),
                   ),
@@ -543,92 +553,125 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
               visible: !playerController.lockPanel,
               child: SlideTransition(
                 position: topOffsetAnimation,
-                child: Row(
-                  children: [
-                    IconButton(
-                      color: Colors.white,
-                      icon: const Icon(Icons.arrow_back_rounded),
-                      onPressed: () {
-                        widget.onBackPressed(context);
-                      },
-                    ),
-                    (videoPageController.isFullscreen || Utils.isDesktop())
-                        ? Text(
-                            ' ${videoPageController.title} [${videoPageController.roadList[videoPageController.currentRoad].identifier[videoPageController.currentEpisode - 1]}]',
-                            style: TextStyle(
-                                color: Colors.white,
-                                fontSize: Theme.of(context)
-                                    .textTheme
-                                    .titleMedium!
-                                    .fontSize),
-                          )
-                        : Container(),
-                    // 拖动条
-                    const Expanded(
-                      child: dtb.DragToMoveArea(child: SizedBox(height: 40)),
-                    ),
-                    // 跳过
-                    forwardIcon(),
-                    // 追番
-                    CollectButton(bangumiItem: infoController.bangumiItem),
-                    MenuAnchor(
-                      consumeOutsideTap: true,
-                      builder: (BuildContext context, MenuController controller,
-                          Widget? child) {
-                        return IconButton(
-                          onPressed: () {
-                            if (controller.isOpen) {
-                              controller.close();
-                            } else {
-                              controller.open();
-                            }
-                          },
-                          icon: const Icon(
-                            Icons.more_vert,
-                            color: Colors.white,
-                          ),
-                        );
-                      },
-                      menuChildren: [
-                        MenuItemButton(
-                          onPressed: () {
-                            widget.showDanmakuSwitch();
-                          },
-                          child: const Padding(
-                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
-                            child: Text("弹幕切换"),
+                child: MouseRegion(
+                  cursor: (videoPageController.isFullscreen &&
+                          !playerController.showVideoController)
+                      ? SystemMouseCursors.none
+                      : SystemMouseCursors.basic,
+                  onEnter: (_) {
+                    widget.cancelHideTimer();
+                  },
+                  onExit: (_) {
+                    widget.cancelHideTimer();
+                    widget.startHideTimer();
+                  },
+                  child: Row(
+                    children: [
+                      IconButton(
+                        color: Colors.white,
+                        icon: const Icon(Icons.arrow_back_rounded),
+                        onPressed: () {
+                          widget.onBackPressed(context);
+                        },
+                      ),
+                      (videoPageController.isFullscreen || Utils.isDesktop())
+                          ? Text(
+                              ' ${videoPageController.title} [${videoPageController.roadList[videoPageController.currentRoad].identifier[videoPageController.currentEpisode - 1]}]',
+                              style: TextStyle(
+                                  color: Colors.white,
+                                  fontSize: Theme.of(context)
+                                      .textTheme
+                                      .titleMedium!
+                                      .fontSize),
+                            )
+                          : Container(),
+                      // 拖动条
+                      const Expanded(
+                        child: dtb.DragToMoveArea(child: SizedBox(height: 40)),
+                      ),
+                      // 跳过
+                      forwardIcon(),
+                      // 追番
+                      CollectButton(
+                        bangumiItem: infoController.bangumiItem,
+                        onOpen: () {
+                          widget.cancelHideTimer();
+                          playerController.canHidePlayerPanel = false;
+                        },
+                        onClose: () {
+                          widget.cancelHideTimer();
+                          widget.startHideTimer();
+                          playerController.canHidePlayerPanel = true;
+                        },
+                      ),
+                      MenuAnchor(
+                        consumeOutsideTap: true,
+                        onOpen: () {
+                          widget.cancelHideTimer();
+                          playerController.canHidePlayerPanel = false;
+                        },
+                        onClose: () {
+                          widget.cancelHideTimer();
+                          widget.startHideTimer();
+                          playerController.canHidePlayerPanel = true;
+                        },
+                        builder: (BuildContext context,
+                            MenuController controller, Widget? child) {
+                          return IconButton(
+                            onPressed: () {
+                              if (controller.isOpen) {
+                                controller.close();
+                              } else {
+                                controller.open();
+                              }
+                            },
+                            icon: const Icon(
+                              Icons.more_vert,
+                              color: Colors.white,
+                            ),
+                          );
+                        },
+                        menuChildren: [
+                          MenuItemButton(
+                            onPressed: () {
+                              widget.showDanmakuSwitch();
+                            },
+                            child: const Padding(
+                              padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                              child: Text("弹幕切换"),
+                            ),
                           ),
-                        ),
-                        MenuItemButton(
-                          onPressed: () {
-                            showVideoInfo();
-                          },
-                          child: const Padding(
-                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
-                            child: Text("视频详情"),
+                          MenuItemButton(
+                            onPressed: () {
+                              showVideoInfo();
+                            },
+                            child: const Padding(
+                              padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                              child: Text("视频详情"),
+                            ),
                           ),
-                        ),
-                        MenuItemButton(
-                          onPressed: () {
-                            bool needRestart = playerController.playing;
-                            playerController.pause();
-                            RemotePlay()
-                                .castVideo(context,
-                                    videoPageController.currentPlugin.referer)
-                                .whenComplete(() {
-                              if (needRestart) {
-                                playerController.play();
-                              }
-                            });
-                          },
-                          child: const Padding(
-                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
-                            child: Text("远程播放"),
+                          MenuItemButton(
+                            onPressed: () {
+                              bool needRestart = playerController.playing;
+                              playerController.pause();
+                              RemotePlay()
+                                  .castVideo(context,
+                                      videoPageController.currentPlugin.referer)
+                                  .whenComplete(() {
+                                if (needRestart) {
+                                  playerController.play();
+                                }
+                              });
+                            },
+                            child: const Padding(
+                              padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                              child: Text("远程播放"),
+                            ),
                           ),
-                        ),
-                      ],
-                    ),
-                  ],
+                        ],
+                      ),
+                    ],
+                  ),
                 ),
               ),
             ),
@@ -642,352 +685,397 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
               visible: !playerController.lockPanel,
               child: SlideTransition(
                 position: bottomOffsetAnimation,
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    if (!Utils.isDesktop() && !Utils.isTablet())
-                      Container(
-                        padding: const EdgeInsets.only(left: 10.0, bottom: 10),
-                        child: Text(
-                          "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
-                          style: const TextStyle(
-                            color: Colors.white,
-                            fontSize: 12.0,
-                            fontFeatures: [
-                              FontFeature.tabularFigures(),
-                            ],
+                child: MouseRegion(
+                  cursor: (videoPageController.isFullscreen &&
+                          !playerController.showVideoController)
+                      ? SystemMouseCursors.none
+                      : SystemMouseCursors.basic,
+                  onEnter: (_) {
+                    widget.cancelHideTimer();
+                  },
+                  onExit: (_) {
+                    widget.cancelHideTimer();
+                    widget.startHideTimer();
+                  },
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: [
+                      if (!Utils.isDesktop() && !Utils.isTablet())
+                        Container(
+                          padding:
+                              const EdgeInsets.only(left: 10.0, bottom: 10),
+                          child: Text(
+                            "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
+                            style: const TextStyle(
+                              color: Colors.white,
+                              fontSize: 12.0,
+                              fontFeatures: [
+                                FontFeature.tabularFigures(),
+                              ],
+                            ),
                           ),
                         ),
+                      Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10),
+                        child: ProgressBar(
+                          thumbRadius: 8,
+                          thumbGlowRadius: 18,
+                          timeLabelLocation: TimeLabelLocation.none,
+                          progress: playerController.currentPosition,
+                          buffered: playerController.buffer,
+                          total: playerController.duration,
+                          onSeek: (duration) {
+                            playerController.seek(duration);
+                          },
+                          onDragStart: (details) {
+                            widget.handleProgressBarDragStart(details);
+                          },
+                          onDragUpdate: (details) => {
+                            playerController.currentPosition = details.timeStamp
+                          },
+                          onDragEnd: () {
+                            widget.handleProgressBarDragEnd();
+                          },
+                        ),
                       ),
-                    Padding(
-                      padding: const EdgeInsets.symmetric(horizontal: 10),
-                      child: ProgressBar(
-                        thumbRadius: 8,
-                        thumbGlowRadius: 18,
-                        timeLabelLocation: TimeLabelLocation.none,
-                        progress: playerController.currentPosition,
-                        buffered: playerController.buffer,
-                        total: playerController.duration,
-                        onSeek: (duration) {
-                          playerController.seek(duration);
-                        },
-                        onDragStart: (details) {
-                          widget.handleProgressBarDragStart(details);
-                        },
-                        onDragUpdate: (details) => {
-                          playerController.currentPosition = details.timeStamp
-                        },
-                        onDragEnd: () {
-                          widget.handleProgressBarDragEnd();
-                        },
-                      ),
-                    ),
-                    Padding(
-                      padding: const EdgeInsets.symmetric(horizontal: 10),
-                      child: Row(
-                        children: [
-                          IconButton(
-                            color: Colors.white,
-                            icon: Icon(playerController.playing
-                                ? Icons.pause_rounded
-                                : Icons.play_arrow_rounded),
-                            onPressed: () {
-                              playerController.playOrPause();
-                            },
-                          ),
-                          // 更换选集
-                          if (videoPageController.isFullscreen ||
-                              Utils.isTablet() ||
-                              Utils.isDesktop())
+                      Padding(
+                        padding: const EdgeInsets.symmetric(horizontal: 10),
+                        child: Row(
+                          children: [
                             IconButton(
                               color: Colors.white,
-                              icon: const Icon(Icons.skip_next_rounded),
+                              icon: Icon(playerController.playing
+                                  ? Icons.pause_rounded
+                                  : Icons.play_arrow_rounded),
                               onPressed: () {
-                                if (videoPageController.loading) {
-                                  return;
-                                }
-                                if (videoPageController.currentEpisode ==
-                                    videoPageController
-                                        .roadList[
-                                            videoPageController.currentRoad]
-                                        .data
-                                        .length) {
-                                  KazumiDialog.showToast(
-                                    message: '已经是最新一集',
-                                  );
-                                  return;
-                                }
-                                KazumiDialog.showToast(
-                                    message:
-                                        '正在加载${videoPageController.roadList[videoPageController.currentRoad].identifier[videoPageController.currentEpisode]}');
-                                widget.changeEpisode(
-                                    videoPageController.currentEpisode + 1,
-                                    currentRoad:
-                                        videoPageController.currentRoad);
+                                playerController.playOrPause();
                               },
                             ),
-                          if (Utils.isDesktop() || Utils.isTablet())
-                            Container(
-                              padding: const EdgeInsets.only(left: 10.0),
-                              child: Text(
-                                "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
-                                style: const TextStyle(
-                                  color: Colors.white,
-                                  fontSize: 16.0,
-                                  fontFeatures: [
-                                    FontFeature.tabularFigures(),
-                                  ],
-                                ),
-                              ),
-                            ),
-                          if (Utils.isDesktop())
-                            Expanded(
-                              child: LayoutBuilder(
-                                builder: (context, constraints) {
-                                  bool isSpaceEnough =
-                                      constraints.maxWidth > 600;
-                                  return Center(
-                                    child: Row(
-                                      mainAxisAlignment:
-                                          MainAxisAlignment.center,
-                                      children: [
-                                        IconButton(
-                                          color: Colors.white,
-                                          icon: Icon(playerController.danmakuOn
-                                              ? Icons.subtitles_rounded
-                                              : Icons.subtitles_off_rounded),
-                                          onPressed: () {
-                                            _handleDanmaku();
-                                            setState(() {});
-                                          },
-                                          tooltip: playerController.danmakuOn
-                                              ? '关闭弹幕(d)'
-                                              : '打开弹幕(d)',
-                                        ),
-                                        IconButton(
-                                          tooltip: '弹幕设置',
-                                          onPressed: () {
-                                            widget.keyboardFocus.requestFocus();
-                                            KazumiDialog.show(
-                                                builder: (context) {
-                                              return DanmakuSettingsWindow(
-                                                  danmakuController:
-                                                      playerController
-                                                          .danmakuController);
-                                            });
-                                          },
-                                          color: Colors.white,
-                                          icon: const Icon(Icons.tune_rounded),
-                                        ),
-                                        if (isSpaceEnough) danmakuTextField(),
-                                      ],
-                                    ),
-                                  );
-                                },
-                              ),
-                            ),
-                          if (!Utils.isDesktop()) ...[
-                            IconButton(
-                              color: Colors.white,
-                              icon: Icon(playerController.danmakuOn
-                                  ? Icons.subtitles_rounded
-                                  : Icons.subtitles_off_rounded),
-                              onPressed: () {
-                                _handleDanmaku();
-                                setState(() {});
-                              },
-                              tooltip: playerController.danmakuOn
-                                  ? '关闭弹幕(d)'
-                                  : '打开弹幕(d)',
-                            ),
-                            if (playerController.danmakuOn) ...[
+                            // 更换选集
+                            if (videoPageController.isFullscreen ||
+                                Utils.isTablet() ||
+                                Utils.isDesktop())
                               IconButton(
-                                tooltip: '弹幕设置',
-                                onPressed: () {
-                                  KazumiDialog.show(builder: (context) {
-                                    return DanmakuSettingsWindow(
-                                        danmakuController:
-                                            playerController.danmakuController);
-                                  });
-                                },
                                 color: Colors.white,
-                                icon: const Icon(Icons.tune_rounded),
-                              ),
-                              Expanded(child: danmakuTextField()),
-                            ],
-                            if (!playerController.danmakuOn) const Spacer(),
-                          ],
-                          // 超分辨率
-                          MenuAnchor(
-                            consumeOutsideTap: true,
-                            builder: (BuildContext context,
-                                MenuController controller, Widget? child) {
-                              return TextButton(
+                                icon: const Icon(Icons.skip_next_rounded),
                                 onPressed: () {
-                                  if (controller.isOpen) {
-                                    controller.close();
-                                  } else {
-                                    controller.open();
+                                  if (videoPageController.loading) {
+                                    return;
+                                  }
+                                  if (videoPageController.currentEpisode ==
+                                      videoPageController
+                                          .roadList[
+                                              videoPageController.currentRoad]
+                                          .data
+                                          .length) {
+                                    KazumiDialog.showToast(
+                                      message: '已经是最新一集',
+                                    );
+                                    return;
                                   }
+                                  KazumiDialog.showToast(
+                                      message:
+                                          '正在加载${videoPageController.roadList[videoPageController.currentRoad].identifier[videoPageController.currentEpisode]}');
+                                  widget.changeEpisode(
+                                      videoPageController.currentEpisode + 1,
+                                      currentRoad:
+                                          videoPageController.currentRoad);
                                 },
-                                child: const Text(
-                                  '超分辨率',
-                                  style: TextStyle(color: Colors.white),
-                                ),
-                              );
-                            },
-                            menuChildren: List<MenuItemButton>.generate(
-                              3,
-                              (int index) => MenuItemButton(
-                                onPressed: () =>
-                                    playerController.setShader(index + 1),
-                                child: Padding(
-                                  padding:
-                                      const EdgeInsets.fromLTRB(0, 10, 10, 10),
-                                  child: Text(
-                                    index + 1 == 1
-                                        ? '关闭'
-                                        : index + 1 == 2
-                                            ? '效率档'
-                                            : '质量档',
-                                    style: TextStyle(
-                                      color: playerController
-                                                  .superResolutionType ==
-                                              index + 1
-                                          ? Theme.of(context)
-                                              .colorScheme
-                                              .primary
-                                          : null,
-                                    ),
+                              ),
+                            if (Utils.isDesktop() || Utils.isTablet())
+                              Container(
+                                padding: const EdgeInsets.only(left: 10.0),
+                                child: Text(
+                                  "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
+                                  style: const TextStyle(
+                                    color: Colors.white,
+                                    fontSize: 16.0,
+                                    fontFeatures: [
+                                      FontFeature.tabularFigures(),
+                                    ],
                                   ),
                                 ),
                               ),
-                            ),
-                          ),
-                          // 倍速播放
-                          MenuAnchor(
-                            consumeOutsideTap: true,
-                            builder: (BuildContext context,
-                                MenuController controller, Widget? child) {
-                              return TextButton(
+                            if (Utils.isDesktop())
+                              Expanded(
+                                child: LayoutBuilder(
+                                  builder: (context, constraints) {
+                                    bool isSpaceEnough =
+                                        constraints.maxWidth > 600;
+                                    return Center(
+                                      child: Row(
+                                        mainAxisAlignment:
+                                            MainAxisAlignment.center,
+                                        children: [
+                                          IconButton(
+                                            color: Colors.white,
+                                            icon: Icon(playerController
+                                                    .danmakuOn
+                                                ? Icons.subtitles_rounded
+                                                : Icons.subtitles_off_rounded),
+                                            onPressed: () {
+                                              _handleDanmaku();
+                                              setState(() {});
+                                            },
+                                            tooltip: playerController.danmakuOn
+                                                ? '关闭弹幕(d)'
+                                                : '打开弹幕(d)',
+                                          ),
+                                          IconButton(
+                                            tooltip: '弹幕设置',
+                                            onPressed: () {
+                                              widget.keyboardFocus
+                                                  .requestFocus();
+                                              KazumiDialog.show(
+                                                  builder: (context) {
+                                                return DanmakuSettingsWindow(
+                                                    danmakuController:
+                                                        playerController
+                                                            .danmakuController);
+                                              });
+                                            },
+                                            color: Colors.white,
+                                            icon:
+                                                const Icon(Icons.tune_rounded),
+                                          ),
+                                          if (isSpaceEnough) danmakuTextField(),
+                                        ],
+                                      ),
+                                    );
+                                  },
+                                ),
+                              ),
+                            if (!Utils.isDesktop()) ...[
+                              IconButton(
+                                color: Colors.white,
+                                icon: Icon(playerController.danmakuOn
+                                    ? Icons.subtitles_rounded
+                                    : Icons.subtitles_off_rounded),
                                 onPressed: () {
-                                  if (controller.isOpen) {
-                                    controller.close();
-                                  } else {
-                                    controller.open();
-                                  }
+                                  _handleDanmaku();
+                                  setState(() {});
                                 },
-                                child: Text(
-                                  playerController.playerSpeed == 1.0
-                                      ? '倍速'
-                                      : '${playerController.playerSpeed}x',
-                                  style: const TextStyle(color: Colors.white),
+                                tooltip: playerController.danmakuOn
+                                    ? '关闭弹幕(d)'
+                                    : '打开弹幕(d)',
+                              ),
+                              if (playerController.danmakuOn) ...[
+                                IconButton(
+                                  tooltip: '弹幕设置',
+                                  onPressed: () {
+                                    KazumiDialog.show(builder: (context) {
+                                      return DanmakuSettingsWindow(
+                                          danmakuController: playerController
+                                              .danmakuController);
+                                    });
+                                  },
+                                  color: Colors.white,
+                                  icon: const Icon(Icons.tune_rounded),
                                 ),
-                              );
-                            },
-                            menuChildren: [
-                              for (final double i
-                                  in defaultPlaySpeedList) ...<MenuItemButton>[
-                                MenuItemButton(
-                                  onPressed: () async {
-                                    await widget.setPlaybackSpeed(i);
+                                Expanded(child: danmakuTextField()),
+                              ],
+                              if (!playerController.danmakuOn) const Spacer(),
+                            ],
+                            // 超分辨率
+                            MenuAnchor(
+                              consumeOutsideTap: true,
+                              onOpen: () {
+                                widget.cancelHideTimer();
+                                playerController.canHidePlayerPanel = false;
+                              },
+                              onClose: () {
+                                widget.cancelHideTimer();
+                                widget.startHideTimer();
+                                playerController.canHidePlayerPanel = true;
+                              },
+                              builder: (BuildContext context,
+                                  MenuController controller, Widget? child) {
+                                return TextButton(
+                                  onPressed: () {
+                                    if (controller.isOpen) {
+                                      controller.close();
+                                    } else {
+                                      controller.open();
+                                    }
                                   },
+                                  child: const Text(
+                                    '超分辨率',
+                                    style: TextStyle(color: Colors.white),
+                                  ),
+                                );
+                              },
+                              menuChildren: List<MenuItemButton>.generate(
+                                3,
+                                (int index) => MenuItemButton(
+                                  onPressed: () =>
+                                      playerController.setShader(index + 1),
                                   child: Padding(
                                     padding: const EdgeInsets.fromLTRB(
                                         0, 10, 10, 10),
                                     child: Text(
-                                      '${i}x',
+                                      index + 1 == 1
+                                          ? '关闭'
+                                          : index + 1 == 2
+                                              ? '效率档'
+                                              : '质量档',
                                       style: TextStyle(
-                                          color:
-                                              i == playerController.playerSpeed
-                                                  ? Theme.of(context)
-                                                      .colorScheme
-                                                      .primary
-                                                  : null),
-                                    ),
-                                  ),
-                                ),
-                              ],
-                            ],
-                          ),
-                          MenuAnchor(
-                            consumeOutsideTap: true,
-                            builder: (BuildContext context,
-                                MenuController controller, Widget? child) {
-                              return IconButton(
-                                onPressed: () {
-                                  if (controller.isOpen) {
-                                    controller.close();
-                                  } else {
-                                    controller.open();
-                                  }
-                                },
-                                icon: const Icon(
-                                  Icons.aspect_ratio_rounded,
-                                  color: Colors.white,
-                                ),
-                                tooltip: '视频比例',
-                              );
-                            },
-                            menuChildren: List<MenuItemButton>.generate(
-                              3,
-                              (int index) => MenuItemButton(
-                                onPressed: () => playerController
-                                    .aspectRatioType = index + 1,
-                                child: Padding(
-                                  padding:
-                                      const EdgeInsets.fromLTRB(0, 10, 10, 10),
-                                  child: Text(
-                                    index + 1 == 1
-                                        ? '自动'
-                                        : index + 1 == 2
-                                            ? '裁切填充'
-                                            : '拉伸填充',
-                                    style: TextStyle(
-                                        color: index + 1 ==
-                                                playerController.aspectRatioType
+                                        color: playerController
+                                                    .superResolutionType ==
+                                                index + 1
                                             ? Theme.of(context)
                                                 .colorScheme
                                                 .primary
-                                            : null),
+                                            : null,
+                                      ),
+                                    ),
                                   ),
                                 ),
                               ),
                             ),
-                          ),
-                          (!videoPageController.isFullscreen &&
-                                  !Utils.isTablet() &&
-                                  !Utils.isDesktop())
-                              ? Container()
-                              : IconButton(
-                                  color: Colors.white,
-                                  icon: const Icon(Icons.menu_open_rounded),
+                            // 倍速播放
+                            MenuAnchor(
+                              consumeOutsideTap: true,
+                              onOpen: () {
+                                widget.cancelHideTimer();
+                                playerController.canHidePlayerPanel = false;
+                              },
+                              onClose: () {
+                                widget.cancelHideTimer();
+                                widget.startHideTimer();
+                                playerController.canHidePlayerPanel = true;
+                              },
+                              builder: (BuildContext context,
+                                  MenuController controller, Widget? child) {
+                                return TextButton(
                                   onPressed: () {
-                                    videoPageController.showTabBody =
-                                        !videoPageController.showTabBody;
-                                    widget.openMenu();
+                                    if (controller.isOpen) {
+                                      controller.close();
+                                    } else {
+                                      controller.open();
+                                    }
                                   },
-                                ),
-                          (Utils.isTablet() &&
-                                  videoPageController.isFullscreen &&
-                                  MediaQuery.of(context).size.height <
-                                      MediaQuery.of(context).size.width)
-                              ? Container()
-                              : IconButton(
-                                  color: Colors.white,
-                                  icon: Icon(videoPageController.isFullscreen
-                                      ? Icons.fullscreen_exit_rounded
-                                      : Icons.fullscreen_rounded),
+                                  child: Text(
+                                    playerController.playerSpeed == 1.0
+                                        ? '倍速'
+                                        : '${playerController.playerSpeed}x',
+                                    style: const TextStyle(color: Colors.white),
+                                  ),
+                                );
+                              },
+                              menuChildren: [
+                                for (final double i
+                                    in defaultPlaySpeedList) ...<MenuItemButton>[
+                                  MenuItemButton(
+                                    onPressed: () async {
+                                      await widget.setPlaybackSpeed(i);
+                                    },
+                                    child: Padding(
+                                      padding: const EdgeInsets.fromLTRB(
+                                          0, 10, 10, 10),
+                                      child: Text(
+                                        '${i}x',
+                                        style: TextStyle(
+                                            color: i ==
+                                                    playerController.playerSpeed
+                                                ? Theme.of(context)
+                                                    .colorScheme
+                                                    .primary
+                                                : null),
+                                      ),
+                                    ),
+                                  ),
+                                ],
+                              ],
+                            ),
+                            MenuAnchor(
+                              consumeOutsideTap: true,
+                              onOpen: () {
+                                widget.cancelHideTimer();
+                                playerController.canHidePlayerPanel = false;
+                              },
+                              onClose: () {
+                                widget.cancelHideTimer();
+                                widget.startHideTimer();
+                                playerController.canHidePlayerPanel = true;
+                              },
+                              builder: (BuildContext context,
+                                  MenuController controller, Widget? child) {
+                                return IconButton(
                                   onPressed: () {
-                                    widget.handleFullscreen();
+                                    if (controller.isOpen) {
+                                      controller.close();
+                                    } else {
+                                      controller.open();
+                                    }
                                   },
+                                  icon: const Icon(
+                                    Icons.aspect_ratio_rounded,
+                                    color: Colors.white,
+                                  ),
+                                  tooltip: '视频比例',
+                                );
+                              },
+                              menuChildren: List<MenuItemButton>.generate(
+                                3,
+                                (int index) => MenuItemButton(
+                                  onPressed: () => playerController
+                                      .aspectRatioType = index + 1,
+                                  child: Padding(
+                                    padding: const EdgeInsets.fromLTRB(
+                                        0, 10, 10, 10),
+                                    child: Text(
+                                      index + 1 == 1
+                                          ? '自动'
+                                          : index + 1 == 2
+                                              ? '裁切填充'
+                                              : '拉伸填充',
+                                      style: TextStyle(
+                                          color: index + 1 ==
+                                                  playerController
+                                                      .aspectRatioType
+                                              ? Theme.of(context)
+                                                  .colorScheme
+                                                  .primary
+                                              : null),
+                                    ),
+                                  ),
                                 ),
-                        ],
+                              ),
+                            ),
+                            (!videoPageController.isFullscreen &&
+                                    !Utils.isTablet() &&
+                                    !Utils.isDesktop())
+                                ? Container()
+                                : IconButton(
+                                    color: Colors.white,
+                                    icon: const Icon(Icons.menu_open_rounded),
+                                    onPressed: () {
+                                      videoPageController.showTabBody =
+                                          !videoPageController.showTabBody;
+                                      widget.openMenu();
+                                    },
+                                  ),
+                            (Utils.isTablet() &&
+                                    videoPageController.isFullscreen &&
+                                    MediaQuery.of(context).size.height <
+                                        MediaQuery.of(context).size.width)
+                                ? Container()
+                                : IconButton(
+                                    color: Colors.white,
+                                    icon: Icon(videoPageController.isFullscreen
+                                        ? Icons.fullscreen_exit_rounded
+                                        : Icons.fullscreen_rounded),
+                                    onPressed: () {
+                                      widget.handleFullscreen();
+                                    },
+                                  ),
+                          ],
+                        ),
                       ),
-                    ),
-                    if (Utils.isTablet() || Utils.isDesktop())
-                      const SizedBox(height: 6),
-                  ],
+                      if (Utils.isTablet() || Utils.isDesktop())
+                        const SizedBox(height: 6),
+                    ],
+                  ),
                 ),
               ),
             ),
diff --git a/lib/pages/player/smallest_player_item_panel.dart b/lib/pages/player/smallest_player_item_panel.dart
index 8b54dd2c..8bd525e7 100644
--- a/lib/pages/player/smallest_player_item_panel.dart
+++ b/lib/pages/player/smallest_player_item_panel.dart
@@ -28,6 +28,8 @@ class SmallestPlayerItemPanel extends StatefulWidget {
     required this.animationController,
     required this.keyboardFocus,
     required this.handleHove,
+    required this.startHideTimer,
+    required this.cancelHideTimer,
   });
 
   final void Function(BuildContext) onBackPressed;
@@ -39,6 +41,8 @@ class SmallestPlayerItemPanel extends StatefulWidget {
   final void Function() handleHove;
   final AnimationController animationController;
   final FocusNode keyboardFocus;
+  final void Function() startHideTimer;
+  final void Function() cancelHideTimer;
 
   @override
   State<SmallestPlayerItemPanel> createState() =>
@@ -206,12 +210,12 @@ class _SmallestPlayerItemPanelState extends State<SmallestPlayerItemPanel> {
                 position: topOffsetAnimation,
                 child: Container(
                   height: 50,
-                  decoration: BoxDecoration(
+                  decoration: const BoxDecoration(
                     gradient: LinearGradient(
                       begin: Alignment.topCenter,
                       end: Alignment.bottomCenter,
                       colors: [
-                        Colors.black.withOpacity(0.9),
+                        Colors.black87,
                         Colors.transparent,
                       ],
                     ),
@@ -233,13 +237,13 @@ class _SmallestPlayerItemPanelState extends State<SmallestPlayerItemPanel> {
                 position: bottomOffsetAnimation,
                 child: Container(
                   height: 50,
-                  decoration: BoxDecoration(
+                  decoration: const BoxDecoration(
                     gradient: LinearGradient(
                       begin: Alignment.topCenter,
                       end: Alignment.bottomCenter,
                       colors: [
                         Colors.transparent,
-                        Colors.black.withOpacity(0.9),
+                        Colors.black87,
                       ],
                     ),
                   ),
@@ -392,9 +396,29 @@ class _SmallestPlayerItemPanelState extends State<SmallestPlayerItemPanel> {
                       tooltip: playerController.danmakuOn ? '关闭弹幕' : '打开弹幕',
                     ),
                     // 追番
-                    CollectButton(bangumiItem: infoController.bangumiItem),
+                    CollectButton(
+                      bangumiItem: infoController.bangumiItem,
+                      onOpen: () {
+                        widget.cancelHideTimer();
+                        playerController.canHidePlayerPanel = false;
+                      },
+                      onClose: () {
+                        widget.cancelHideTimer();
+                        widget.startHideTimer();
+                        playerController.canHidePlayerPanel = true;
+                      },
+                    ),
                     MenuAnchor(
                       consumeOutsideTap: true,
+                      onOpen: () {
+                        widget.cancelHideTimer();
+                        playerController.canHidePlayerPanel = false;
+                      },
+                      onClose: () {
+                        widget.cancelHideTimer();
+                        widget.startHideTimer();
+                        playerController.canHidePlayerPanel = true;
+                      },
                       builder: (BuildContext context, MenuController controller,
                           Widget? child) {
                         return IconButton(
diff --git a/lib/pages/video/video_page.dart b/lib/pages/video/video_page.dart
index 07ec7416..b641e714 100644
--- a/lib/pages/video/video_page.dart
+++ b/lib/pages/video/video_page.dart
@@ -861,7 +861,9 @@ class _VideoPageState extends State<VideoPage>
                       child: Row(
                         children: [
                           Text(
-                            '  点我发弹幕  ',
+                            playerController.danmakuOn
+                                ? '  点我发弹幕  '
+                                : '  已关闭弹幕  ',
                             softWrap: false,
                             overflow: TextOverflow.clip,
                             style: TextStyle(
diff --git a/pubspec.lock b/pubspec.lock
index 15876ed7..9c6f2552 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -22,14 +22,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "6.11.0"
-  ansicolor:
-    dependency: transitive
-    description:
-      name: ansicolor
-      sha256: "50e982d500bc863e1d703448afdbf9e5a72eb48840a4f766fa361ffd6877055f"
-      url: "https://pub.dev"
-    source: hosted
-    version: "2.0.3"
   archive:
     dependency: transitive
     description:
@@ -473,14 +465,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "6.3.4"
-  flutter_native_splash:
-    dependency: "direct dev"
-    description:
-      name: flutter_native_splash
-      sha256: "1152ab0067ca5a2ebeb862fe0a762057202cceb22b7e62692dcbabf6483891bb"
-      url: "https://pub.dev"
-    source: hosted
-    version: "2.4.3"
   flutter_plugin_android_lifecycle:
     dependency: transitive
     description:
diff --git a/pubspec.yaml b/pubspec.yaml
index 8b197ffb..62696faf 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -157,7 +157,7 @@ dev_dependencies:
   mobx_codegen: ^2.3.0
   hive_generator: ^2.0.0
   flutter_launcher_icons: "^0.13.1"
-  flutter_native_splash: ^2.4.3
+#  flutter_native_splash: ^2.4.3
   msix: ^3.16.8
   
 
@@ -182,14 +182,14 @@ flutter_launcher_icons:
     image_path: assets/images/logo/logo_rounded.png
     icon_size: 256 # min:48, max:256, default: 48
 
-flutter_native_splash:
-  android: false
-  ios: true
-  web: false
-  color_ios: "#ffffff"
-  color_dark_ios: "#212121"
-  image_ios: assets/images/logo/logo_ios.png
-  image_dark_ios: assets/images/logo/logo_ios.png
+#flutter_native_splash:
+#  android: false
+#  ios: true
+#  web: false
+#  color_ios: "#ffffff"
+#  color_dark_ios: "#212121"
+#  image_ios: assets/images/logo/logo_ios.png
+#  image_dark_ios: assets/images/logo/logo_ios.png
 
 msix_config:
   display_name: Kazumi
