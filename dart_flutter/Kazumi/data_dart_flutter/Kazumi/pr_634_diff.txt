diff --git a/lib/bean/widget/collect_button.dart b/lib/bean/widget/collect_button.dart
index df58342b..1d9e5bc4 100644
--- a/lib/bean/widget/collect_button.dart
+++ b/lib/bean/widget/collect_button.dart
@@ -65,33 +65,53 @@ class _CollectButtonState extends State<CollectButton> {
   @override
   Widget build(BuildContext context) {
     collectType = collectController.getCollectType(widget.bangumiItem);
-    return PopupMenuButton(
-      tooltip: '',
-      icon: Icon(
-        getIconByInt(collectType),
-        color: widget.color,
-      ),
-      itemBuilder: (context) {
-        return List.generate(
-          6,
-          (i) => PopupMenuItem(
-            value: i,
+    return MenuAnchor(
+      builder:
+          (BuildContext context, MenuController controller, Widget? child) {
+        return IconButton(
+          onPressed: () {
+            if (controller.isOpen) {
+              controller.close();
+            } else {
+              controller.open();
+            }
+          },
+          icon: Icon(
+            getIconByInt(collectType),
+            color: widget.color,
+          ),
+        );
+      },
+      menuChildren: List<MenuItemButton>.generate(
+        6,
+        (int index) => MenuItemButton(
+          onPressed: () {
+            if (index != collectType && mounted) {
+              collectController.addCollect(widget.bangumiItem, type: index);
+              setState(() {});
+            }
+          },
+          child: Padding(
+            padding: const EdgeInsets.fromLTRB(0, 10, 10, 10),
             child: Row(
               mainAxisSize: MainAxisSize.min,
               children: [
-                Icon(getIconByInt(i)),
-                Text(' ${getTypeStringByInt(i)}'),
+                Icon(getIconByInt(index),
+                    color: index == collectType
+                        ? Theme.of(context).colorScheme.primary
+                        : null),
+                Text(
+                  ' ${getTypeStringByInt(index)}',
+                  style: TextStyle(
+                      color: index == collectType
+                          ? Theme.of(context).colorScheme.primary
+                          : null),
+                ),
               ],
             ),
           ),
-        );
-      },
-      onSelected: (value) {
-        if (value != collectType && mounted) {
-          collectController.addCollect(widget.bangumiItem, type: value);
-          setState(() {});
-        }
-      },
+        ),
+      ),
     );
   }
 }
diff --git a/lib/pages/info/info_page.dart b/lib/pages/info/info_page.dart
index 5be22bfa..af9778b4 100644
--- a/lib/pages/info/info_page.dart
+++ b/lib/pages/info/info_page.dart
@@ -225,7 +225,6 @@ class _InfoPageState extends State<InfoPage>
               onPressed: () async {
                 showModalBottomSheet(
                     isScrollControlled: true,
-                    enableDrag: false,
                     constraints: BoxConstraints(
                         maxHeight: MediaQuery.of(context).size.height * 3 / 4,
                         maxWidth: (Utils.isDesktop() || Utils.isTablet())
diff --git a/lib/pages/player/player_item.dart b/lib/pages/player/player_item.dart
index 971db5ee..54f1ed54 100644
--- a/lib/pages/player/player_item.dart
+++ b/lib/pages/player/player_item.dart
@@ -2,6 +2,7 @@ import 'dart:async';
 import 'dart:io';
 import 'package:audio_video_progress_bar/audio_video_progress_bar.dart';
 import 'package:kazumi/pages/player/player_item_panel.dart';
+import 'package:kazumi/pages/player/smallest_player_item_panel.dart';
 import 'package:kazumi/utils/logger.dart';
 import 'package:kazumi/utils/utils.dart';
 import 'package:kazumi/utils/webdav.dart';
@@ -37,6 +38,7 @@ class PlayerItem extends StatefulWidget {
     required this.changeEpisode,
     required this.onBackPressed,
     required this.keyboardFocus,
+    required this.sendDanmaku,
   });
 
   final VoidCallback openMenu;
@@ -44,6 +46,7 @@ class PlayerItem extends StatefulWidget {
   final Future<void> Function(int episode, {int currentRoad, int offset})
       changeEpisode;
   final void Function(BuildContext) onBackPressed;
+  final void Function(String) sendDanmaku;
   final FocusNode keyboardFocus;
 
   @override
@@ -141,7 +144,7 @@ class _PlayerItemState extends State<PlayerItem>
     }
   }
 
-  void _handleHove() {
+  void handleHove() {
     if (!playerController.showVideoController) {
       displayVideoController();
     }
@@ -507,8 +510,6 @@ class _PlayerItemState extends State<PlayerItem>
       vsync: this,
     );
     webDavEnable = setting.get(SettingBoxKey.webDavEnable, defaultValue: false);
-    playerController.danmakuOn =
-        setting.get(SettingBoxKey.danmakuEnabledByDefault, defaultValue: false);
     _border = setting.get(SettingBoxKey.danmakuBorder, defaultValue: true);
     _opacity = setting.get(SettingBoxKey.danmakuOpacity, defaultValue: 1.0);
     _duration = 8;
@@ -581,7 +582,7 @@ class _PlayerItemState extends State<PlayerItem>
                 // workaround for android.
                 // I don't know why, but android tap event will trigger onHover event.
                 if (Utils.isDesktop()) {
-                  _handleHove();
+                  handleHove();
                 }
               },
               child: Listener(
@@ -785,17 +786,36 @@ class _PlayerItemState extends State<PlayerItem>
                       ),
                     ),
                     // 播放器控制面板
-                    PlayerItemPanel(
-                      onBackPressed: widget.onBackPressed,
-                      setPlaybackSpeed: setPlaybackSpeed,
-                      showDanmakuSwitch: showDanmakuSwitch,
-                      changeEpisode: widget.changeEpisode,
-                      openMenu: widget.openMenu,
-                      handleFullscreen: handleFullscreen,
-                      handleProgressBarDragStart: handleProgressBarDragStart,
-                      handleProgressBarDragEnd: handleProgressBarDragEnd,
-                      animationController: animationController!,
-                    ),
+                    (Utils.isDesktop() ||
+                            Utils.isTablet() ||
+                            videoPageController.isFullscreen)
+                        ? PlayerItemPanel(
+                            onBackPressed: widget.onBackPressed,
+                            setPlaybackSpeed: setPlaybackSpeed,
+                            showDanmakuSwitch: showDanmakuSwitch,
+                            changeEpisode: widget.changeEpisode,
+                            openMenu: widget.openMenu,
+                            handleFullscreen: handleFullscreen,
+                            handleProgressBarDragStart:
+                                handleProgressBarDragStart,
+                            handleProgressBarDragEnd: handleProgressBarDragEnd,
+                            animationController: animationController!,
+                            keyboardFocus: widget.keyboardFocus,
+                            handleHove: handleHove,
+                            sendDanmaku: widget.sendDanmaku,
+                          )
+                        : SmallestPlayerItemPanel(
+                            onBackPressed: widget.onBackPressed,
+                            setPlaybackSpeed: setPlaybackSpeed,
+                            showDanmakuSwitch: showDanmakuSwitch,
+                            handleFullscreen: handleFullscreen,
+                            handleProgressBarDragStart:
+                                handleProgressBarDragStart,
+                            handleProgressBarDragEnd: handleProgressBarDragEnd,
+                            animationController: animationController!,
+                            keyboardFocus: widget.keyboardFocus,
+                            handleHove: handleHove,
+                          ),
                     // 播放器手势控制
                     Positioned.fill(
                         left: 16,
@@ -834,10 +854,6 @@ class _PlayerItemState extends State<PlayerItem>
                                 final double sectionWidth = totalWidth / 2;
                                 final double delta = details.delta.dy;
 
-                                /// 非全屏时禁用
-                                if (!videoPageController.isFullscreen) {
-                                  return;
-                                }
                                 if (tapPosition < sectionWidth) {
                                   // 左边区域
                                   playerController.brightnessSeeking = true;
diff --git a/lib/pages/player/player_item_panel.dart b/lib/pages/player/player_item_panel.dart
index f77169a7..5002f865 100644
--- a/lib/pages/player/player_item_panel.dart
+++ b/lib/pages/player/player_item_panel.dart
@@ -15,7 +15,6 @@ import 'package:kazumi/pages/info/info_controller.dart';
 import 'package:kazumi/utils/constants.dart';
 import 'package:hive/hive.dart';
 import 'package:kazumi/utils/storage.dart';
-import 'package:canvas_danmaku/canvas_danmaku.dart';
 import 'package:audio_video_progress_bar/audio_video_progress_bar.dart';
 
 class PlayerItemPanel extends StatefulWidget {
@@ -30,6 +29,9 @@ class PlayerItemPanel extends StatefulWidget {
     required this.handleProgressBarDragEnd,
     required this.animationController,
     required this.openMenu,
+    required this.keyboardFocus,
+    required this.handleHove,
+    required this.sendDanmaku,
   });
 
   final void Function(BuildContext) onBackPressed;
@@ -40,7 +42,10 @@ class PlayerItemPanel extends StatefulWidget {
   final void Function() handleFullscreen;
   final void Function(ThumbDragDetails details) handleProgressBarDragStart;
   final void Function() handleProgressBarDragEnd;
+  final void Function() handleHove;
   final AnimationController animationController;
+  final FocusNode keyboardFocus;
+  final void Function(String) sendDanmaku;
 
   @override
   State<PlayerItemPanel> createState() => _PlayerItemPanelState();
@@ -56,6 +61,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
       Modular.get<VideoPageController>();
   final InfoController infoController = Modular.get<InfoController>();
   final PlayerController playerController = Modular.get<PlayerController>();
+  final TextEditingController textController = TextEditingController();
 
   Future<void> _handleScreenshot() async {
     KazumiDialog.showToast(message: '截图中...');
@@ -83,60 +89,62 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
     playerController.danmakuOn = !playerController.danmakuOn;
   }
 
-  /// 发送弹幕 由于接口限制, 暂时未提交云端
-  void showShootDanmakuSheet() {
-    final TextEditingController textController = TextEditingController();
-    bool isSending = false;
-    KazumiDialog.show(builder: (context) {
-      return AlertDialog(
-        title: const Text('发送弹幕'),
-        content: StatefulBuilder(
-            builder: (BuildContext context, StateSetter setState) {
-          return TextField(
-            controller: textController,
-          );
-        }),
-        actions: [
-          TextButton(
-            onPressed: () => KazumiDialog.dismiss(),
-            child: Text(
-              '取消',
-              style: TextStyle(color: Theme.of(context).colorScheme.outline),
+  Widget danmakuTextField() {
+    return Container(
+      constraints: Utils.isDesktop()
+          ? const BoxConstraints(maxWidth: 500, maxHeight: 33)
+          : const BoxConstraints(maxHeight: 33),
+      padding: EdgeInsets.symmetric(horizontal: 8),
+      child: TextField(
+        style: TextStyle(fontSize: Utils.isDesktop() ? 15 : 13),
+        controller: textController,
+        textAlignVertical: TextAlignVertical.center,
+        decoration: InputDecoration(
+          enabled: playerController.danmakuOn,
+          filled: true,
+          fillColor: Colors.white70,
+          floatingLabelBehavior: FloatingLabelBehavior.never,
+          hintText: playerController.danmakuOn ? '发个友善的弹幕见证当下' : '已关闭弹幕',
+          hintStyle: TextStyle(fontSize: Utils.isDesktop() ? 15 : 13),
+          alignLabelWithHint: true,
+          contentPadding: EdgeInsets.symmetric(
+              vertical: 8, horizontal: Utils.isDesktop() ? 8 : 12),
+          border: OutlineInputBorder(
+            borderSide: BorderSide.none,
+            borderRadius:
+                BorderRadius.all(Radius.circular(Utils.isDesktop() ? 8 : 20)),
+          ),
+          suffixIcon: TextButton(
+            onPressed: () {
+              widget.sendDanmaku(textController.text);
+              textController.clear();
+            },
+            style: TextButton.styleFrom(
+              foregroundColor: playerController.danmakuOn
+                  ? Theme.of(context).colorScheme.onPrimaryContainer
+                  : Colors.white,
+              backgroundColor: playerController.danmakuOn
+                  ? Theme.of(context).colorScheme.primaryContainer
+                  : Theme.of(context).disabledColor,
+              shape: RoundedRectangleBorder(
+                borderRadius: BorderRadius.circular(Utils.isDesktop() ? 8 : 20),
+              ),
             ),
+            child: const Text('发送'),
           ),
-          StatefulBuilder(
-              builder: (BuildContext context, StateSetter setState) {
-            return TextButton(
-              onPressed: isSending
-                  ? null
-                  : () async {
-                      final String msg = textController.text;
-                      if (msg.isEmpty) {
-                        KazumiDialog.showToast(message: '弹幕内容为空');
-                        return;
-                      } else if (msg.length > 100) {
-                        KazumiDialog.showToast(message: '弹幕内容过长');
-                        return;
-                      }
-                      setState(() {
-                        isSending = true; // 开始发送，更新状态
-                      });
-                      // Todo 接口方限制
-
-                      setState(() {
-                        isSending = false; // 发送结束，更新状态
-                      });
-                      KazumiDialog.showToast(message: '发送成功');
-                      playerController.danmakuController
-                          .addDanmaku(DanmakuContentItem(msg, selfSend: true));
-                      KazumiDialog.dismiss();
-                    },
-              child: Text(isSending ? '发送中' : '发送'),
-            );
-          })
-        ],
-      );
-    });
+        ),
+        onChanged: (_) {
+          widget.handleHove();
+        },
+        onSubmitted: (msg) {
+          widget.sendDanmaku(msg);
+          textController.clear();
+        },
+        onTapOutside: (_) {
+          widget.keyboardFocus.requestFocus();
+        },
+      ),
+    );
   }
 
   void showVideoInfo() async {
@@ -358,7 +366,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
               child: SlideTransition(
                 position: bottomOffsetAnimation,
                 child: Container(
-                  height: 50,
+                  height: 80,
                   decoration: BoxDecoration(
                     gradient: LinearGradient(
                       begin: Alignment.topCenter,
@@ -383,7 +391,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                         Container(
                           padding: const EdgeInsets.all(8.0),
                           decoration: BoxDecoration(
-                            color: Colors.black.withOpacity(0.5),
+                            color: Colors.black54,
                             borderRadius: BorderRadius.circular(8.0), // 圆角
                           ),
                           child: Text(
@@ -410,7 +418,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                         Container(
                           padding: const EdgeInsets.all(8.0),
                           decoration: BoxDecoration(
-                            color: Colors.black.withOpacity(0.5),
+                            color: Colors.black54,
                             borderRadius: BorderRadius.circular(8.0), // 圆角
                           ),
                           child: const Row(
@@ -438,7 +446,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                         Container(
                             padding: const EdgeInsets.all(8.0),
                             decoration: BoxDecoration(
-                              color: Colors.black.withOpacity(0.5),
+                              color: Colors.black54,
                               borderRadius: BorderRadius.circular(8.0), // 圆角
                             ),
                             child: Row(
@@ -466,7 +474,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                         Container(
                             padding: const EdgeInsets.all(8.0),
                             decoration: BoxDecoration(
-                              color: Colors.black.withOpacity(0.5),
+                              color: Colors.black54,
                               borderRadius: BorderRadius.circular(8.0), // 圆角
                             ),
                             child: Row(
@@ -493,33 +501,35 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                   bottom: 0,
                   child: SlideTransition(
                     position: leftOffsetAnimation,
-                    child: Column(children: [
-                      const Spacer(),
-                      (playerController.lockPanel)
-                          ? Container()
-                          : IconButton(
-                              icon: const Icon(
-                                Icons.photo_camera_outlined,
-                                color: Colors.white,
+                    child: Column(
+                      children: [
+                        const Spacer(),
+                        (playerController.lockPanel)
+                            ? Container()
+                            : IconButton(
+                                icon: const Icon(
+                                  Icons.photo_camera_outlined,
+                                  color: Colors.white,
+                                ),
+                                onPressed: () {
+                                  _handleScreenshot();
+                                },
                               ),
-                              onPressed: () {
-                                _handleScreenshot();
-                              },
-                            ),
-                      IconButton(
-                        icon: Icon(
-                          playerController.lockPanel
-                              ? Icons.lock_outline
-                              : Icons.lock_open,
-                          color: Colors.white,
+                        IconButton(
+                          icon: Icon(
+                            playerController.lockPanel
+                                ? Icons.lock_outline
+                                : Icons.lock_open,
+                            color: Colors.white,
+                          ),
+                          onPressed: () {
+                            playerController.lockPanel =
+                                !playerController.lockPanel;
+                          },
                         ),
-                        onPressed: () {
-                          playerController.lockPanel =
-                              !playerController.lockPanel;
-                        },
-                      ),
-                      const Spacer(),
-                    ]),
+                        const Spacer(),
+                      ],
+                    ),
                   ),
                 ),
           // 自定义顶部组件
@@ -535,7 +545,7 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                   children: [
                     IconButton(
                       color: Colors.white,
-                      icon: const Icon(Icons.arrow_back),
+                      icon: const Icon(Icons.arrow_back_rounded),
                       onPressed: () {
                         widget.onBackPressed(context);
                       },
@@ -555,175 +565,66 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                     const Expanded(
                       child: dtb.DragToMoveArea(child: SizedBox(height: 40)),
                     ),
-                    PopupMenuButton(
-                      tooltip: '',
-                      child: Text(
-                          playerController.superResolutionType == 1
-                              ? 'OFF'
-                              : playerController.superResolutionType == 2
-                                  ? "Efficiency"
-                                  : "Quality",
-                          style: const TextStyle(
-                              color: Colors.white,
-                              fontSize: 12,
-                              fontWeight: FontWeight.bold)),
-                      itemBuilder: (context) {
-                        return const [
-                          PopupMenuItem(
-                            value: 1,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("OFF")],
-                            ),
-                          ),
-                          PopupMenuItem(
-                            value: 2,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("Efficiency")],
-                            ),
-                          ),
-                          PopupMenuItem(
-                            value: 3,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("Quality")],
-                            ),
-                          ),
-                        ];
-                      },
-                      onSelected: (value) {
-                        playerController.setShader(value);
-                      },
-                    ),
-                    const SizedBox(
-                      width: 20,
-                    ),
-                    PopupMenuButton(
-                      tooltip: '',
-                      child: Text(
-                          playerController.aspectRatioType == 1
-                              ? 'AUTO'
-                              : playerController.aspectRatioType == 2
-                                  ? 'COVER'
-                                  : 'FILL',
-                          style: const TextStyle(
-                              color: Colors.white,
-                              fontSize: 12,
-                              fontWeight: FontWeight.bold)),
-                      itemBuilder: (context) {
-                        return const [
-                          PopupMenuItem(
-                            value: 1,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("AUTO")],
-                            ),
-                          ),
-                          PopupMenuItem(
-                            value: 2,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("COVER")],
-                            ),
-                          ),
-                          PopupMenuItem(
-                            value: 3,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("FILL")],
-                            ),
-                          ),
-                        ];
-                      },
-                      onSelected: (value) {
-                        playerController.aspectRatioType = value;
-                      },
-                    ),
-                    TextButton(
-                      style: ButtonStyle(
-                        padding: WidgetStateProperty.all(EdgeInsets.zero),
-                      ),
-                      onPressed: () {
-                        // 倍速播放
-                        showSetSpeedSheet();
-                      },
-                      child: Text(
-                        '${playerController.playerSpeed}X',
-                        style: const TextStyle(
-                            color: Colors.white,
-                            fontSize: 12,
-                            fontWeight: FontWeight.bold),
-                      ),
-                    ),
+                    // 跳过
+                    forwardIcon(),
                     // 追番
                     CollectButton(bangumiItem: infoController.bangumiItem),
-                    PopupMenuButton(
-                      tooltip: '',
-                      icon: const Icon(
-                        Icons.more_vert,
-                        color: Colors.white,
-                      ),
-                      itemBuilder: (context) {
-                        return const [
-                          PopupMenuItem(
-                            value: 0,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("弹幕设置")],
-                            ),
+                    MenuAnchor(
+                      builder: (BuildContext context, MenuController controller,
+                          Widget? child) {
+                        return IconButton(
+                          onPressed: () {
+                            if (controller.isOpen) {
+                              controller.close();
+                            } else {
+                              controller.open();
+                            }
+                          },
+                          icon: const Icon(
+                            Icons.more_vert,
+                            color: Colors.white,
                           ),
-                          PopupMenuItem(
-                            value: 1,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("弹幕切换")],
-                            ),
+                        );
+                      },
+                      menuChildren: [
+                        MenuItemButton(
+                          onPressed: () {
+                            widget.showDanmakuSwitch();
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("弹幕切换"),
                           ),
-                          PopupMenuItem(
-                            value: 2,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("视频详情")],
-                            ),
+                        ),
+                        MenuItemButton(
+                          onPressed: () {
+                            showVideoInfo();
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("视频详情"),
                           ),
-                          PopupMenuItem(
-                            value: 3,
-                            child: Row(
-                              mainAxisSize: MainAxisSize.min,
-                              children: [Text("远程播放")],
-                            ),
+                        ),
+                        MenuItemButton(
+                          onPressed: () {
+                            bool needRestart = playerController.playing;
+                            playerController.pause();
+                            RemotePlay()
+                                .castVideo(context,
+                                    videoPageController.currentPlugin.referer)
+                                .whenComplete(() {
+                              if (needRestart) {
+                                playerController.play();
+                              }
+                            });
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("远程播放"),
                           ),
-                        ];
-                      },
-                      onSelected: (value) {
-                        if (value == 0) {
-                          KazumiDialog.show(builder: (context) {
-                            return DanmakuSettingsWindow(
-                                danmakuController:
-                                    playerController.danmakuController);
-                          });
-                        }
-                        if (value == 1) {
-                          widget.showDanmakuSwitch();
-                        }
-                        if (value == 2) {
-                          showVideoInfo();
-                        }
-                        if (value == 3) {
-                          bool needRestart = playerController.playing;
-                          playerController.pause();
-                          RemotePlay()
-                              .castVideo(context,
-                                  videoPageController.currentPlugin.referer)
-                              .whenComplete(() {
-                            if (needRestart) {
-                              playerController.play();
-                            }
-                          });
-                        }
-                      },
-                    )
+                        ),
+                      ],
+                    ),
                   ],
                 ),
               ),
@@ -738,50 +639,28 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
               visible: !playerController.lockPanel,
               child: SlideTransition(
                 position: bottomOffsetAnimation,
-                child: Row(
+                child: Column(
+                  crossAxisAlignment: CrossAxisAlignment.start,
                   children: [
-                    IconButton(
-                      color: Colors.white,
-                      icon: Icon(playerController.playing
-                          ? Icons.pause
-                          : Icons.play_arrow),
-                      onPressed: () {
-                        playerController.playOrPause();
-                      },
-                    ),
-                    // 更换选集
-                    (videoPageController.isFullscreen ||
-                            Utils.isTablet() ||
-                            Utils.isDesktop())
-                        ? IconButton(
+                    if (!Utils.isDesktop() && !Utils.isTablet())
+                      Container(
+                        padding: const EdgeInsets.only(left: 10.0, bottom: 10),
+                        child: Text(
+                          "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
+                          style: const TextStyle(
                             color: Colors.white,
-                            icon: const Icon(Icons.skip_next),
-                            onPressed: () {
-                              if (videoPageController.loading) {
-                                return;
-                              }
-                              if (videoPageController.currentEpisode ==
-                                  videoPageController
-                                      .roadList[videoPageController.currentRoad]
-                                      .data
-                                      .length) {
-                                KazumiDialog.showToast(
-                                  message: '已经是最新一集',
-                                );
-                                return;
-                              }
-                              KazumiDialog.showToast(
-                                  message:
-                                      '正在加载${videoPageController.roadList[videoPageController.currentRoad].identifier[videoPageController.currentEpisode]}');
-                              widget.changeEpisode(
-                                  videoPageController.currentEpisode + 1,
-                                  currentRoad: videoPageController.currentRoad);
-                            },
-                          )
-                        : Container(),
-                    forwardIcon(),
-                    Expanded(
+                            fontSize: 12.0,
+                            fontFeatures: [
+                              FontFeature.tabularFigures(),
+                            ],
+                          ),
+                        ),
+                      ),
+                    Padding(
+                      padding: const EdgeInsets.symmetric(horizontal: 10),
                       child: ProgressBar(
+                        thumbRadius: 8,
+                        thumbGlowRadius: 18,
                         timeLabelLocation: TimeLabelLocation.none,
                         progress: playerController.currentPosition,
                         buffered: playerController.buffer,
@@ -800,72 +679,308 @@ class _PlayerItemPanelState extends State<PlayerItemPanel> {
                         },
                       ),
                     ),
-                    ((Utils.isCompact()) && !videoPageController.isFullscreen)
-                        ? Container()
-                        : Container(
-                            padding: const EdgeInsets.only(left: 10.0),
-                            child: Text(
-                              "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
-                              style: TextStyle(
-                                color: Colors.white,
-                                fontSize: !Utils.isCompact() ? 16.0 : 12.0,
-                              ),
-                            ),
-                          ),
-                    // 弹幕相关
-                    (playerController.danmakuOn)
-                        ? IconButton(
+                    Padding(
+                      padding: const EdgeInsets.symmetric(horizontal: 10),
+                      child: Row(
+                        children: [
+                          IconButton(
                             color: Colors.white,
-                            icon: const Icon(Icons.notes),
+                            icon: Icon(playerController.playing
+                                ? Icons.pause_rounded
+                                : Icons.play_arrow_rounded),
                             onPressed: () {
-                              if (playerController.danDanmakus.isEmpty) {
+                              playerController.playOrPause();
+                            },
+                          ),
+                          // 更换选集
+                          if (videoPageController.isFullscreen ||
+                              Utils.isTablet() ||
+                              Utils.isDesktop())
+                            IconButton(
+                              color: Colors.white,
+                              icon: const Icon(Icons.skip_next_rounded),
+                              onPressed: () {
+                                if (videoPageController.loading) {
+                                  return;
+                                }
+                                if (videoPageController.currentEpisode ==
+                                    videoPageController
+                                        .roadList[
+                                            videoPageController.currentRoad]
+                                        .data
+                                        .length) {
+                                  KazumiDialog.showToast(
+                                    message: '已经是最新一集',
+                                  );
+                                  return;
+                                }
                                 KazumiDialog.showToast(
-                                  message: '当前剧集不支持弹幕发送的说',
-                                );
-                                return;
-                              }
-                              showShootDanmakuSheet();
+                                    message:
+                                        '正在加载${videoPageController.roadList[videoPageController.currentRoad].identifier[videoPageController.currentEpisode]}');
+                                widget.changeEpisode(
+                                    videoPageController.currentEpisode + 1,
+                                    currentRoad:
+                                        videoPageController.currentRoad);
+                              },
+                            ),
+                          if (Utils.isDesktop() || Utils.isTablet())
+                            Container(
+                              padding: const EdgeInsets.only(left: 10.0),
+                              child: Text(
+                                "${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
+                                style: const TextStyle(
+                                  color: Colors.white,
+                                  fontSize: 16.0,
+                                  fontFeatures: [
+                                    FontFeature.tabularFigures(),
+                                  ],
+                                ),
+                              ),
+                            ),
+                          if (Utils.isDesktop())
+                            Expanded(
+                              child: LayoutBuilder(
+                                builder: (context, constraints) {
+                                  bool isSpaceEnough =
+                                      constraints.maxWidth > 600;
+                                  return Center(
+                                    child: Row(
+                                      mainAxisAlignment:
+                                          MainAxisAlignment.center,
+                                      children: [
+                                        IconButton(
+                                          color: Colors.white,
+                                          icon: Icon(playerController.danmakuOn
+                                              ? Icons.subtitles_rounded
+                                              : Icons.subtitles_off_rounded),
+                                          onPressed: () {
+                                            _handleDanmaku();
+                                            setState(() {});
+                                          },
+                                          tooltip: playerController.danmakuOn
+                                              ? '关闭弹幕(d)'
+                                              : '打开弹幕(d)',
+                                        ),
+                                        IconButton(
+                                          tooltip: '弹幕设置',
+                                          onPressed: () {
+                                            widget.keyboardFocus.requestFocus();
+                                            KazumiDialog.show(
+                                                builder: (context) {
+                                              return DanmakuSettingsWindow(
+                                                  danmakuController:
+                                                      playerController
+                                                          .danmakuController);
+                                            });
+                                          },
+                                          color: Colors.white,
+                                          icon: const Icon(Icons.tune_rounded),
+                                        ),
+                                        if (isSpaceEnough) danmakuTextField(),
+                                      ],
+                                    ),
+                                  );
+                                },
+                              ),
+                            ),
+                          if (!Utils.isDesktop()) ...[
+                            IconButton(
+                              color: Colors.white,
+                              icon: Icon(playerController.danmakuOn
+                                  ? Icons.subtitles_rounded
+                                  : Icons.subtitles_off_rounded),
+                              onPressed: () {
+                                _handleDanmaku();
+                                setState(() {});
+                              },
+                              tooltip: playerController.danmakuOn
+                                  ? '关闭弹幕(d)'
+                                  : '打开弹幕(d)',
+                            ),
+                            if (playerController.danmakuOn) ...[
+                              IconButton(
+                                tooltip: '弹幕设置',
+                                onPressed: () {
+                                  KazumiDialog.show(builder: (context) {
+                                    return DanmakuSettingsWindow(
+                                        danmakuController:
+                                            playerController.danmakuController);
+                                  });
+                                },
+                                color: Colors.white,
+                                icon: const Icon(Icons.tune_rounded),
+                              ),
+                              Expanded(child: danmakuTextField()),
+                            ],
+                            if (!playerController.danmakuOn) const Spacer(),
+                          ],
+                          // 超分辨率
+                          MenuAnchor(
+                            builder: (BuildContext context,
+                                MenuController controller, Widget? child) {
+                              return TextButton(
+                                onPressed: () {
+                                  if (controller.isOpen) {
+                                    controller.close();
+                                  } else {
+                                    controller.open();
+                                  }
+                                },
+                                child: const Text(
+                                  '超分辨率',
+                                  style: TextStyle(color: Colors.white),
+                                ),
+                              );
                             },
-                          )
-                        : Container(),
-                    IconButton(
-                      color: Colors.white,
-                      icon: Icon(playerController.danmakuOn
-                          ? Icons.subtitles
-                          : Icons.subtitles_off),
-                      onPressed: () {
-                        _handleDanmaku();
-                      },
-                    ),
-                    (!videoPageController.isFullscreen &&
-                            !Utils.isTablet() &&
-                            !Utils.isDesktop())
-                        ? Container()
-                        : IconButton(
-                            color: Colors.white,
-                            icon: Icon(videoPageController.showTabBody
-                                ? Icons.menu_open
-                                : Icons.menu_open_outlined),
-                            onPressed: () {
-                              videoPageController.showTabBody =
-                                  !videoPageController.showTabBody;
-                              widget.openMenu();
+                            menuChildren: List<MenuItemButton>.generate(
+                              3,
+                              (int index) => MenuItemButton(
+                                onPressed: () =>
+                                    playerController.setShader(index + 1),
+                                child: Padding(
+                                  padding:
+                                      const EdgeInsets.fromLTRB(0, 10, 10, 10),
+                                  child: Text(
+                                    index + 1 == 1
+                                        ? '关闭'
+                                        : index + 1 == 2
+                                            ? '效率档'
+                                            : '质量档',
+                                    style: TextStyle(
+                                      color: playerController
+                                                  .superResolutionType ==
+                                              index + 1
+                                          ? Theme.of(context)
+                                              .colorScheme
+                                              .primary
+                                          : null,
+                                    ),
+                                  ),
+                                ),
+                              ),
+                            ),
+                          ),
+                          // 倍速播放
+                          MenuAnchor(
+                            builder: (BuildContext context,
+                                MenuController controller, Widget? child) {
+                              return TextButton(
+                                onPressed: () {
+                                  if (controller.isOpen) {
+                                    controller.close();
+                                  } else {
+                                    controller.open();
+                                  }
+                                },
+                                child: Text(
+                                  playerController.playerSpeed == 1.0
+                                      ? '倍速'
+                                      : '${playerController.playerSpeed}x',
+                                  style: const TextStyle(color: Colors.white),
+                                ),
+                              );
                             },
+                            menuChildren: [
+                              for (final double i
+                                  in defaultPlaySpeedList) ...<MenuItemButton>[
+                                MenuItemButton(
+                                  onPressed: () async {
+                                    await widget.setPlaybackSpeed(i);
+                                  },
+                                  child: Padding(
+                                    padding: const EdgeInsets.fromLTRB(
+                                        0, 10, 10, 10),
+                                    child: Text(
+                                      '${i}x',
+                                      style: TextStyle(
+                                          color:
+                                              i == playerController.playerSpeed
+                                                  ? Theme.of(context)
+                                                      .colorScheme
+                                                      .primary
+                                                  : null),
+                                    ),
+                                  ),
+                                ),
+                              ],
+                            ],
                           ),
-                    (Utils.isTablet() &&
-                            videoPageController.isFullscreen &&
-                            MediaQuery.of(context).size.height <
-                                MediaQuery.of(context).size.width)
-                        ? Container()
-                        : IconButton(
-                            color: Colors.white,
-                            icon: Icon(videoPageController.isFullscreen
-                                ? Icons.fullscreen_exit
-                                : Icons.fullscreen),
-                            onPressed: () {
-                              widget.handleFullscreen();
+                          MenuAnchor(
+                            builder: (BuildContext context,
+                                MenuController controller, Widget? child) {
+                              return IconButton(
+                                onPressed: () {
+                                  if (controller.isOpen) {
+                                    controller.close();
+                                  } else {
+                                    controller.open();
+                                  }
+                                },
+                                icon: const Icon(
+                                  Icons.aspect_ratio_rounded,
+                                  color: Colors.white,
+                                ),
+                                tooltip: '视频比例',
+                              );
                             },
+                            menuChildren: List<MenuItemButton>.generate(
+                              3,
+                              (int index) => MenuItemButton(
+                                onPressed: () => playerController
+                                    .aspectRatioType = index + 1,
+                                child: Padding(
+                                  padding:
+                                      const EdgeInsets.fromLTRB(0, 10, 10, 10),
+                                  child: Text(
+                                    index + 1 == 1
+                                        ? '自动'
+                                        : index + 1 == 2
+                                            ? '裁切填充'
+                                            : '拉伸填充',
+                                    style: TextStyle(
+                                        color: index + 1 ==
+                                                playerController.aspectRatioType
+                                            ? Theme.of(context)
+                                                .colorScheme
+                                                .primary
+                                            : null),
+                                  ),
+                                ),
+                              ),
+                            ),
                           ),
+                          (!videoPageController.isFullscreen &&
+                                  !Utils.isTablet() &&
+                                  !Utils.isDesktop())
+                              ? Container()
+                              : IconButton(
+                                  color: Colors.white,
+                                  icon: const Icon(Icons.menu_open_rounded),
+                                  onPressed: () {
+                                    videoPageController.showTabBody =
+                                        !videoPageController.showTabBody;
+                                    widget.openMenu();
+                                  },
+                                ),
+                          (Utils.isTablet() &&
+                                  videoPageController.isFullscreen &&
+                                  MediaQuery.of(context).size.height <
+                                      MediaQuery.of(context).size.width)
+                              ? Container()
+                              : IconButton(
+                                  color: Colors.white,
+                                  icon: Icon(videoPageController.isFullscreen
+                                      ? Icons.fullscreen_exit_rounded
+                                      : Icons.fullscreen_rounded),
+                                  onPressed: () {
+                                    widget.handleFullscreen();
+                                  },
+                                ),
+                        ],
+                      ),
+                    ),
+                    if (Utils.isTablet() || Utils.isDesktop())
+                      const SizedBox(height: 6),
                   ],
                 ),
               ),
diff --git a/lib/pages/player/smallest_player_item_panel.dart b/lib/pages/player/smallest_player_item_panel.dart
new file mode 100644
index 00000000..35d4d694
--- /dev/null
+++ b/lib/pages/player/smallest_player_item_panel.dart
@@ -0,0 +1,631 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_mobx/flutter_mobx.dart';
+import 'package:flutter_modular/flutter_modular.dart';
+import 'package:kazumi/utils/utils.dart';
+import 'package:kazumi/pages/video/video_controller.dart';
+import 'package:kazumi/bean/dialog/dialog_helper.dart';
+import 'package:kazumi/pages/player/player_controller.dart';
+import 'package:saver_gallery/saver_gallery.dart';
+import 'package:flutter/services.dart';
+import 'package:kazumi/utils/remote.dart';
+import 'package:kazumi/pages/settings/danmaku/danmaku_settings_window.dart';
+import 'package:kazumi/bean/widget/collect_button.dart';
+import 'package:kazumi/pages/info/info_controller.dart';
+import 'package:kazumi/utils/constants.dart';
+import 'package:hive/hive.dart';
+import 'package:kazumi/utils/storage.dart';
+import 'package:audio_video_progress_bar/audio_video_progress_bar.dart';
+
+class SmallestPlayerItemPanel extends StatefulWidget {
+  const SmallestPlayerItemPanel({
+    super.key,
+    required this.onBackPressed,
+    required this.setPlaybackSpeed,
+    required this.showDanmakuSwitch,
+    required this.handleFullscreen,
+    required this.handleProgressBarDragStart,
+    required this.handleProgressBarDragEnd,
+    required this.animationController,
+    required this.keyboardFocus,
+    required this.handleHove,
+  });
+
+  final void Function(BuildContext) onBackPressed;
+  final Future<void> Function(double) setPlaybackSpeed;
+  final void Function() showDanmakuSwitch;
+  final void Function() handleFullscreen;
+  final void Function(ThumbDragDetails details) handleProgressBarDragStart;
+  final void Function() handleProgressBarDragEnd;
+  final void Function() handleHove;
+  final AnimationController animationController;
+  final FocusNode keyboardFocus;
+
+  @override
+  State<SmallestPlayerItemPanel> createState() =>
+      _SmallestPlayerItemPanelState();
+}
+
+class _SmallestPlayerItemPanelState extends State<SmallestPlayerItemPanel> {
+  Box setting = GStorage.setting;
+  late bool haEnable;
+  late Animation<Offset> topOffsetAnimation;
+  late Animation<Offset> bottomOffsetAnimation;
+  late Animation<Offset> leftOffsetAnimation;
+  final VideoPageController videoPageController =
+      Modular.get<VideoPageController>();
+  final InfoController infoController = Modular.get<InfoController>();
+  final PlayerController playerController = Modular.get<PlayerController>();
+  final TextEditingController textController = TextEditingController();
+
+  void _handleDanmaku() {
+    if (playerController.danDanmakus.isEmpty) {
+      widget.showDanmakuSwitch();
+      return;
+    }
+    playerController.danmakuController.onClear();
+    playerController.danmakuOn = !playerController.danmakuOn;
+  }
+
+  void showVideoInfo() async {
+    String currentDemux = await Utils.getCurrentDemux();
+    KazumiDialog.show(
+        // onDismiss: () {
+        //   _focusNode.requestFocus();
+        // },
+        builder: (context) {
+      return AlertDialog(
+        title: const Text('视频详情'),
+        content: SelectableText.rich(
+          TextSpan(
+            children: [
+              TextSpan(text: '规则: ${videoPageController.currentPlugin.name}\n'),
+              TextSpan(text: '硬件解码: ${haEnable ? '启用' : '禁用'}\n'),
+              TextSpan(text: '解复用器: $currentDemux\n'),
+              const TextSpan(text: '资源地址: '),
+              TextSpan(
+                text: playerController.videoUrl,
+              ),
+            ],
+          ),
+          style: Theme.of(context).textTheme.bodyLarge!,
+        ),
+        actions: const [
+          TextButton(onPressed: KazumiDialog.dismiss, child: Text('取消')),
+        ],
+      );
+    });
+  }
+
+  void showForwardChange() {
+    KazumiDialog.show(builder: (context) {
+      String input = "";
+      return AlertDialog(
+        title: const Text('跳过秒数'),
+        content: StatefulBuilder(
+            builder: (BuildContext context, StateSetter setState) {
+          return TextField(
+            inputFormatters: [
+              FilteringTextInputFormatter.digitsOnly, // 只允许输入数字
+            ],
+            decoration: InputDecoration(
+              floatingLabelBehavior:
+                  FloatingLabelBehavior.never, // 控制label的显示方式
+              labelText: playerController.forwardTime.toString(),
+            ),
+            onChanged: (value) {
+              input = value;
+            },
+          );
+        }),
+        actions: <Widget>[
+          TextButton(
+            onPressed: () => KazumiDialog.dismiss(),
+            child: Text(
+              '取消',
+              style: TextStyle(color: Theme.of(context).colorScheme.outline),
+            ),
+          ),
+          TextButton(
+            onPressed: () async {
+              if (input != "") {
+                playerController.setForwardTime(int.parse(input));
+                KazumiDialog.dismiss();
+              } else {
+                KazumiDialog.dismiss();
+              }
+            },
+            child: const Text('确定'),
+          ),
+        ],
+      );
+    });
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    topOffsetAnimation = Tween<Offset>(
+      begin: const Offset(0.0, -1.0),
+      end: const Offset(0.0, 0.0),
+    ).animate(CurvedAnimation(
+      parent: widget.animationController,
+      curve: Curves.easeInOut,
+    ));
+    bottomOffsetAnimation = Tween<Offset>(
+      begin: const Offset(0.0, 1.0),
+      end: const Offset(0.0, 0.0),
+    ).animate(CurvedAnimation(
+      parent: widget.animationController,
+      curve: Curves.easeInOut,
+    ));
+    leftOffsetAnimation = Tween<Offset>(
+      begin: const Offset(1.0, 0.0),
+      end: const Offset(0.0, 0.0),
+    ).animate(CurvedAnimation(
+      parent: widget.animationController,
+      curve: Curves.easeInOut,
+    ));
+    haEnable = setting.get(SettingBoxKey.hAenable, defaultValue: true);
+  }
+
+  Widget forwardIcon() {
+    return Tooltip(
+      message: '长按修改时间',
+      child: GestureDetector(
+        onLongPress: () => showForwardChange(),
+        child: IconButton(
+          icon: Image.asset(
+            'assets/images/forward_80.png',
+            color: Colors.white,
+            height: 24,
+          ),
+          onPressed: () {
+            playerController.seek(playerController.currentPosition +
+                Duration(seconds: playerController.forwardTime));
+          },
+        ),
+      ),
+    );
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Observer(builder: (context) {
+      return Stack(
+        alignment: Alignment.center,
+        children: [
+          //顶部渐变区域
+          AnimatedPositioned(
+            duration: const Duration(seconds: 1),
+            top: 0,
+            left: 0,
+            right: 0,
+            child: Visibility(
+              visible: !playerController.lockPanel,
+              child: SlideTransition(
+                position: topOffsetAnimation,
+                child: Container(
+                  height: 50,
+                  decoration: BoxDecoration(
+                    gradient: LinearGradient(
+                      begin: Alignment.topCenter,
+                      end: Alignment.bottomCenter,
+                      colors: [
+                        Colors.black.withOpacity(0.9),
+                        Colors.transparent,
+                      ],
+                    ),
+                  ),
+                ),
+              ),
+            ),
+          ),
+
+          //底部渐变区域
+          AnimatedPositioned(
+            duration: const Duration(seconds: 1),
+            bottom: 0,
+            left: 0,
+            right: 0,
+            child: Visibility(
+              visible: !playerController.lockPanel,
+              child: SlideTransition(
+                position: bottomOffsetAnimation,
+                child: Container(
+                  height: 50,
+                  decoration: BoxDecoration(
+                    gradient: LinearGradient(
+                      begin: Alignment.topCenter,
+                      end: Alignment.bottomCenter,
+                      colors: [
+                        Colors.transparent,
+                        Colors.black.withOpacity(0.9),
+                      ],
+                    ),
+                  ),
+                ),
+              ),
+            ),
+          ),
+          // 顶部进度条
+          Positioned(
+              top: 25,
+              child: playerController.showSeekTime
+                  ? Wrap(
+                      alignment: WrapAlignment.center,
+                      children: <Widget>[
+                        Container(
+                          padding: const EdgeInsets.all(8.0),
+                          decoration: BoxDecoration(
+                            color: Colors.black54,
+                            borderRadius: BorderRadius.circular(8.0), // 圆角
+                          ),
+                          child: Text(
+                            playerController.currentPosition.compareTo(
+                                        playerController.playerPosition) >
+                                    0
+                                ? '快进 ${playerController.currentPosition.inSeconds - playerController.playerPosition.inSeconds} 秒'
+                                : '快退 ${playerController.playerPosition.inSeconds - playerController.currentPosition.inSeconds} 秒',
+                            style: const TextStyle(
+                              color: Colors.white,
+                            ),
+                          ),
+                        ),
+                      ],
+                    )
+                  : Container()),
+          // 顶部播放速度条
+          Positioned(
+              top: 25,
+              child: playerController.showPlaySpeed
+                  ? Wrap(
+                      alignment: WrapAlignment.center,
+                      children: <Widget>[
+                        Container(
+                          padding: const EdgeInsets.all(8.0),
+                          decoration: BoxDecoration(
+                            color: Colors.black54,
+                            borderRadius: BorderRadius.circular(8.0), // 圆角
+                          ),
+                          child: const Row(
+                            children: <Widget>[
+                              Icon(Icons.fast_forward, color: Colors.white),
+                              Text(
+                                ' 倍速播放',
+                                style: TextStyle(
+                                  color: Colors.white,
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                      ],
+                    )
+                  : Container()),
+          // 亮度条
+          Positioned(
+              top: 25,
+              child: playerController.showBrightness
+                  ? Wrap(
+                      alignment: WrapAlignment.center,
+                      children: <Widget>[
+                        Container(
+                            padding: const EdgeInsets.all(8.0),
+                            decoration: BoxDecoration(
+                              color: Colors.black54,
+                              borderRadius: BorderRadius.circular(8.0), // 圆角
+                            ),
+                            child: Row(
+                              children: <Widget>[
+                                const Icon(Icons.brightness_7,
+                                    color: Colors.white),
+                                Text(
+                                  ' ${(playerController.brightness * 100).toInt()} %',
+                                  style: const TextStyle(
+                                    color: Colors.white,
+                                  ),
+                                ),
+                              ],
+                            )),
+                      ],
+                    )
+                  : Container()),
+          // 音量条
+          Positioned(
+              top: 25,
+              child: playerController.showVolume
+                  ? Wrap(
+                      alignment: WrapAlignment.center,
+                      children: <Widget>[
+                        Container(
+                            padding: const EdgeInsets.all(8.0),
+                            decoration: BoxDecoration(
+                              color: Colors.black54,
+                              borderRadius: BorderRadius.circular(8.0), // 圆角
+                            ),
+                            child: Row(
+                              children: <Widget>[
+                                const Icon(Icons.volume_down,
+                                    color: Colors.white),
+                                Text(
+                                  ' ${playerController.volume.toInt()}%',
+                                  style: const TextStyle(
+                                    color: Colors.white,
+                                  ),
+                                ),
+                              ],
+                            )),
+                      ],
+                    )
+                  : Container()),
+          // 自定义顶部组件
+          Positioned(
+            top: 0,
+            left: 0,
+            right: 0,
+            child: Visibility(
+              visible: !playerController.lockPanel,
+              child: SlideTransition(
+                position: topOffsetAnimation,
+                child: Row(
+                  children: [
+                    IconButton(
+                      color: Colors.white,
+                      icon: const Icon(Icons.arrow_back_rounded),
+                      onPressed: () {
+                        widget.onBackPressed(context);
+                      },
+                    ),
+                    const Spacer(),
+                    // 跳过
+                    forwardIcon(),
+                    // 弹幕开关
+                    IconButton(
+                      color: Colors.white,
+                      icon: Icon(playerController.danmakuOn
+                          ? Icons.subtitles_rounded
+                          : Icons.subtitles_off_rounded),
+                      onPressed: () {
+                        _handleDanmaku();
+                        setState(() {});
+                      },
+                      tooltip: playerController.danmakuOn ? '关闭弹幕' : '打开弹幕',
+                    ),
+                    // 追番
+                    CollectButton(bangumiItem: infoController.bangumiItem),
+                    MenuAnchor(
+                      builder: (BuildContext context, MenuController controller,
+                          Widget? child) {
+                        return IconButton(
+                          onPressed: () {
+                            if (controller.isOpen) {
+                              controller.close();
+                            } else {
+                              controller.open();
+                            }
+                          },
+                          icon: const Icon(
+                            Icons.more_vert,
+                            color: Colors.white,
+                          ),
+                        );
+                      },
+                      menuChildren: [
+                        SubmenuButton(
+                          menuChildren: List<MenuItemButton>.generate(
+                            3,
+                            (int index) => MenuItemButton(
+                              onPressed: () =>
+                                  playerController.aspectRatioType = index + 1,
+                              child: Padding(
+                                padding:
+                                    const EdgeInsets.fromLTRB(0, 10, 10, 10),
+                                child: Text(
+                                  index + 1 == 1
+                                      ? '自动'
+                                      : index + 1 == 2
+                                          ? '裁切填充'
+                                          : '拉伸填充',
+                                  style: TextStyle(
+                                      color: index + 1 ==
+                                              playerController.aspectRatioType
+                                          ? Theme.of(context)
+                                              .colorScheme
+                                              .primary
+                                          : null),
+                                ),
+                              ),
+                            ),
+                          ),
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("视频比例"),
+                          ),
+                        ),
+                        SubmenuButton(
+                          menuChildren: [
+                            for (final double i
+                                in defaultPlaySpeedList) ...<MenuItemButton>[
+                              MenuItemButton(
+                                onPressed: () async {
+                                  await widget.setPlaybackSpeed(i);
+                                },
+                                child: Padding(
+                                  padding:
+                                      const EdgeInsets.fromLTRB(0, 10, 10, 10),
+                                  child: Text(
+                                    '${i}x',
+                                    style: TextStyle(
+                                        color: i == playerController.playerSpeed
+                                            ? Theme.of(context)
+                                                .colorScheme
+                                                .primary
+                                            : null),
+                                  ),
+                                ),
+                              ),
+                            ],
+                          ],
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("倍速"),
+                          ),
+                        ),
+                        SubmenuButton(
+                          menuChildren: List<MenuItemButton>.generate(
+                            3,
+                            (int index) => MenuItemButton(
+                              onPressed: () =>
+                                  playerController.setShader(index + 1),
+                              child: Padding(
+                                padding:
+                                    const EdgeInsets.fromLTRB(0, 10, 10, 10),
+                                child: Text(
+                                  index + 1 == 1
+                                      ? '关闭'
+                                      : index + 1 == 2
+                                          ? '效率档'
+                                          : '质量档',
+                                  style: TextStyle(
+                                    color: playerController
+                                                .superResolutionType ==
+                                            index + 1
+                                        ? Theme.of(context).colorScheme.primary
+                                        : null,
+                                  ),
+                                ),
+                              ),
+                            ),
+                          ),
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("超分辨率"),
+                          ),
+                        ),
+                        MenuItemButton(
+                          onPressed: () {
+                            widget.showDanmakuSwitch();
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("弹幕切换"),
+                          ),
+                        ),
+                        MenuItemButton(
+                          onPressed: () {
+                            KazumiDialog.show(builder: (context) {
+                              return DanmakuSettingsWindow(
+                                  danmakuController:
+                                      playerController.danmakuController);
+                            });
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("弹幕设置"),
+                          ),
+                        ),
+                        MenuItemButton(
+                          onPressed: () {
+                            showVideoInfo();
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("视频详情"),
+                          ),
+                        ),
+                        MenuItemButton(
+                          onPressed: () {
+                            bool needRestart = playerController.playing;
+                            playerController.pause();
+                            RemotePlay()
+                                .castVideo(context,
+                                    videoPageController.currentPlugin.referer)
+                                .whenComplete(() {
+                              if (needRestart) {
+                                playerController.play();
+                              }
+                            });
+                          },
+                          child: const Padding(
+                            padding: EdgeInsets.fromLTRB(0, 10, 10, 10),
+                            child: Text("远程播放"),
+                          ),
+                        ),
+                      ],
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ),
+          // 自定义播放器底部组件
+          Positioned(
+            bottom: 0,
+            left: 0,
+            right: 0,
+            child: Visibility(
+              visible: !playerController.lockPanel,
+              child: SlideTransition(
+                position: bottomOffsetAnimation,
+                child: Row(
+                  children: [
+                    IconButton(
+                      color: Colors.white,
+                      icon: Icon(playerController.playing
+                          ? Icons.pause_rounded
+                          : Icons.play_arrow_rounded),
+                      onPressed: () {
+                        playerController.playOrPause();
+                      },
+                    ),
+                    Expanded(
+                      child: ProgressBar(
+                        thumbRadius: 8,
+                        thumbGlowRadius: 18,
+                        timeLabelLocation: TimeLabelLocation.none,
+                        progress: playerController.currentPosition,
+                        buffered: playerController.buffer,
+                        total: playerController.duration,
+                        onSeek: (duration) {
+                          playerController.seek(duration);
+                        },
+                        onDragStart: (details) {
+                          widget.handleProgressBarDragStart(details);
+                        },
+                        onDragUpdate: (details) => {
+                          playerController.currentPosition = details.timeStamp
+                        },
+                        onDragEnd: () {
+                          widget.handleProgressBarDragEnd();
+                        },
+                      ),
+                    ),
+                    Text(
+                      "    ${Utils.durationToString(playerController.currentPosition)} / ${Utils.durationToString(playerController.duration)}",
+                      style: const TextStyle(
+                        color: Colors.white,
+                        fontSize: 12.0,
+                        fontFeatures: [
+                          FontFeature.tabularFigures(),
+                        ],
+                      ),
+                    ),
+                    IconButton(
+                      color: Colors.white,
+                      icon: Icon(videoPageController.isFullscreen
+                          ? Icons.fullscreen_exit_rounded
+                          : Icons.fullscreen_rounded),
+                      onPressed: () {
+                        widget.handleFullscreen();
+                      },
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ),
+        ],
+      );
+    });
+  }
+}
diff --git a/lib/pages/video/video_page.dart b/lib/pages/video/video_page.dart
index 4a0b9c3b..e22b6c01 100644
--- a/lib/pages/video/video_page.dart
+++ b/lib/pages/video/video_page.dart
@@ -1,4 +1,5 @@
 import 'dart:async';
+import 'package:canvas_danmaku/models/danmaku_content_item.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_modular/flutter_modular.dart';
 import 'package:kazumi/bean/appbar/sys_app_bar.dart';
@@ -219,6 +220,90 @@ class _VideoPageState extends State<VideoPage>
     Navigator.of(context).pop();
   }
 
+  /// 发送弹幕 由于接口限制, 暂时未提交云端
+  void sendDanmaku(String msg) async {
+    keyboardFocus.requestFocus();
+    if (playerController.danDanmakus.isEmpty) {
+      KazumiDialog.showToast(
+        message: '当前剧集不支持弹幕发送的说',
+      );
+      return;
+    }
+    if (msg.isEmpty) {
+      KazumiDialog.showToast(message: '弹幕内容为空');
+      return;
+    } else if (msg.length > 100) {
+      KazumiDialog.showToast(message: '弹幕内容过长');
+      return;
+    }
+    // Todo 接口方限制
+
+    playerController.danmakuController
+        .addDanmaku(DanmakuContentItem(msg, selfSend: true));
+  }
+
+  void showMobileDanmakuInput() {
+    final TextEditingController textController = TextEditingController();
+    showModalBottomSheet(
+      shape: const BeveledRectangleBorder(),
+      isScrollControlled: true,
+      context: context,
+      builder: (context) {
+        return Padding(
+          padding: EdgeInsets.only(
+            bottom: MediaQuery.of(context).viewInsets.bottom,
+            left: 8,
+          ),
+          child: Row(
+            mainAxisAlignment: MainAxisAlignment.center,
+            children: [
+              Expanded(
+                child: Container(
+                  constraints: const BoxConstraints(maxHeight: 34),
+                  child: TextField(
+                    style: const TextStyle(fontSize: 15),
+                    controller: textController,
+                    autofocus: true,
+                    textAlignVertical: TextAlignVertical.center,
+                    decoration: const InputDecoration(
+                      filled: true,
+                      floatingLabelBehavior: FloatingLabelBehavior.never,
+                      hintText: '发个友善的弹幕见证当下',
+                      hintStyle: TextStyle(fontSize: 14),
+                      alignLabelWithHint: true,
+                      contentPadding:
+                          EdgeInsets.symmetric(vertical: 8, horizontal: 12),
+                      border: OutlineInputBorder(
+                        borderSide: BorderSide.none,
+                        borderRadius: BorderRadius.all(Radius.circular(20)),
+                      ),
+                    ),
+                    onSubmitted: (msg) {
+                      sendDanmaku(msg);
+                      textController.clear();
+                      Navigator.pop(context);
+                    },
+                  ),
+                ),
+              ),
+              IconButton(
+                onPressed: () {
+                  sendDanmaku(textController.text);
+                  textController.clear();
+                  Navigator.pop(context);
+                },
+                icon: Icon(
+                  Icons.send_rounded,
+                  color: Theme.of(context).colorScheme.primary,
+                ),
+              )
+            ],
+          ),
+        );
+      },
+    );
+  }
+
   @override
   Widget build(BuildContext context) {
     WidgetsBinding.instance.addPostFrameCallback((_) {
@@ -526,6 +611,7 @@ class _VideoPageState extends State<VideoPage>
                   changeEpisode: changeEpisode,
                   onBackPressed: onBackPressed,
                   keyboardFocus: keyboardFocus,
+                  sendDanmaku: sendDanmaku,
                 ),
         ),
 
@@ -729,22 +815,74 @@ class _VideoPageState extends State<VideoPage>
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
-            TabBar(
-              dividerHeight: Utils.isDesktop() ? 0.5 : 0.2,
-              isScrollable: true,
-              tabAlignment: TabAlignment.start,
-              labelPadding:
-                  const EdgeInsetsDirectional.only(start: 30, end: 30),
-              onTap: (index) {
-                if (index == 0) {
-                  menuJumpToCurrentEpisode();
-                }
-              },
-              tabs: const [
-                Tab(text: '选集'),
-                Tab(text: '评论'),
+            Row(
+              children: [
+                TabBar(
+                  dividerHeight: 0,
+                  isScrollable: true,
+                  tabAlignment: TabAlignment.start,
+                  labelPadding:
+                      const EdgeInsetsDirectional.only(start: 30, end: 30),
+                  onTap: (index) {
+                    if (index == 0) {
+                      menuJumpToCurrentEpisode();
+                    }
+                  },
+                  tabs: const [
+                    Tab(text: '选集'),
+                    Tab(text: '评论'),
+                  ],
+                ),
+                if (!Utils.isDesktop() && !Utils.isTablet()) ...[
+                  const Spacer(),
+                  Container(
+                    decoration: BoxDecoration(
+                      borderRadius: BorderRadius.circular(25),
+                      border: Border.all(
+                        color: playerController.danmakuOn
+                            ? Theme.of(context).hintColor
+                            : Theme.of(context).disabledColor,
+                        width: 0.5,
+                      ),
+                    ),
+                    width: 120,
+                    height: 31,
+                    child: GestureDetector(
+                      onTap: () {
+                        if (playerController.danmakuOn) {
+                          showMobileDanmakuInput();
+                        } else {
+                          KazumiDialog.showToast(message: '请先打开弹幕');
+                        }
+                      },
+                      child: Row(
+                        children: [
+                          Text(
+                            '  点我发弹幕  ',
+                            softWrap: false,
+                            overflow: TextOverflow.clip,
+                            style: TextStyle(
+                              color: playerController.danmakuOn
+                                  ? Theme.of(context).hintColor
+                                  : Theme.of(context).disabledColor,
+                            ),
+                          ),
+                          Icon(
+                            Icons.send_rounded,
+                            size: 20,
+                            color: playerController.danmakuOn
+                                ? Theme.of(context).hintColor
+                                : Theme.of(context).disabledColor,
+                          ),
+                        ],
+                      ),
+                    ),
+                  ),
+                ],
+                const SizedBox(width: 8),
               ],
             ),
+            Divider(height: Utils.isDesktop() ? 0.5 : 0.2),
             Expanded(
               child: TabBarView(
                 children: [
