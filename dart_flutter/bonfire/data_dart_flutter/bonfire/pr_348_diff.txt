diff --git a/CHANGELOG.md b/CHANGELOG.md
index 29dcc0e51..4ac680cc0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,6 @@
+# [2.11.7]
+- Fix diagonal movement speed for enemies
+
 # [2.11.6]
 - Update Flame to `1.5.0`
 
diff --git a/example/lib/shared/npc/critter/critter.dart b/example/lib/shared/npc/critter/critter.dart
index 1e1e7a29f..6f8bf85d6 100644
--- a/example/lib/shared/npc/critter/critter.dart
+++ b/example/lib/shared/npc/critter/critter.dart
@@ -14,7 +14,7 @@ class Critter extends SimpleNpc
           animation: CritterSpriteSheet.simpleDirectionAnimation,
           position: position,
           size: Vector2.all(DungeonMap.tileSize * 0.8),
-          speed: DungeonMap.tileSize * 1.6,
+          speed: DungeonMap.tileSize * 2.75,
         ) {
     setupCollision(
       CollisionConfig(
diff --git a/lib/mixins/move_to_position_along_the_path.dart b/lib/mixins/move_to_position_along_the_path.dart
index 5bc86004f..3af6bc300 100644
--- a/lib/mixins/move_to_position_along_the_path.dart
+++ b/lib/mixins/move_to_position_along_the_path.dart
@@ -11,7 +11,6 @@ import 'package:flutter/widgets.dart';
 
 /// Mixin responsible for find path using `a_star_algorithm` and moving the component through the path
 mixin MoveToPositionAlongThePath on Movement {
-  static const REDUCTION_SPEED_DIAGONAL = 0.7;
   static const REDUCTION_TO_AVOID_ROUNDING_PROBLEMS = 4;
 
   List<Offset> _currentPath = [];
@@ -120,27 +119,25 @@ mixin MoveToPositionAlongThePath on Movement {
     } else {
       bool onMove = false;
       if (diffX.abs() > 0.01 && diffY.abs() > 0.01) {
-        final displacementXDiagonal = displacementX * REDUCTION_SPEED_DIAGONAL;
-        final displacementYDiagonal = displacementY * REDUCTION_SPEED_DIAGONAL;
         if (diffX > 0 && diffY > 0) {
           onMove = moveDownRight(
-            displacementXDiagonal,
-            displacementYDiagonal,
+            displacementX,
+            displacementY,
           );
         } else if (diffX < 0 && diffY > 0) {
           onMove = moveDownLeft(
-            displacementXDiagonal,
-            displacementYDiagonal,
+            displacementX,
+            displacementY,
           );
         } else if (diffX > 0 && diffY < 0) {
           onMove = moveUpRight(
-            displacementXDiagonal,
-            displacementYDiagonal,
+            displacementX,
+            displacementY,
           );
         } else if (diffX < 0 && diffY < 0) {
           onMove = moveUpLeft(
-            displacementXDiagonal,
-            displacementYDiagonal,
+            displacementX,
+            displacementY,
           );
         }
       } else if (diffX.abs() > 0.01) {
diff --git a/lib/mixins/movement.dart b/lib/mixins/movement.dart
index ce4fdba4c..805212dc7 100644
--- a/lib/mixins/movement.dart
+++ b/lib/mixins/movement.dart
@@ -146,8 +146,14 @@ mixin Movement on GameComponent {
 
   /// Move player to Up and Right
   bool moveUpRight(double speedX, double speedY) {
-    bool successRight = moveRight(speedX, notifyOnMove: false);
-    bool successUp = moveUp(speedY, notifyOnMove: false);
+    bool successRight = moveRight(
+      speedX * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
+    bool successUp = moveUp(
+      speedY * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
     if (successRight && successUp) {
       lastDirection = Direction.upRight;
     }
@@ -173,8 +179,14 @@ mixin Movement on GameComponent {
     double speedX,
     double speedY,
   ) {
-    bool successLeft = moveLeft(speedX, notifyOnMove: false);
-    bool successUp = moveUp(speedY, notifyOnMove: false);
+    bool successLeft = moveLeft(
+      speedX * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
+    bool successUp = moveUp(
+      speedY * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
     if (successLeft && successUp) {
       lastDirection = Direction.upLeft;
     }
@@ -198,8 +210,14 @@ mixin Movement on GameComponent {
 
   /// Move player to Down and Left
   bool moveDownLeft(double speedX, double speedY) {
-    bool successLeft = moveLeft(speedX, notifyOnMove: false);
-    bool successDown = moveDown(speedY, notifyOnMove: false);
+    bool successLeft = moveLeft(
+      speedX * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
+    bool successDown = moveDown(
+      speedY * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
 
     if (successLeft && successDown) {
       lastDirection = Direction.downLeft;
@@ -224,8 +242,14 @@ mixin Movement on GameComponent {
 
   /// Move player to Down and Right
   bool moveDownRight(double speedX, double speedY) {
-    bool successRight = moveRight(speedX, notifyOnMove: false);
-    bool successDown = moveDown(speedY, notifyOnMove: false);
+    bool successRight = moveRight(
+      speedX * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
+    bool successDown = moveDown(
+      speedY * REDUCTION_SPEED_DIAGONAL,
+      notifyOnMove: false,
+    );
 
     if (successRight && successDown) {
       lastDirection = Direction.downRight;
@@ -411,32 +435,28 @@ mixin Movement on GameComponent {
         return moveDown(speedY);
       case Direction.upLeft:
         if (enabledDiagonal) {
-          return moveUpLeft(speedX * REDUCTION_SPEED_DIAGONAL,
-              speedY * REDUCTION_SPEED_DIAGONAL);
+          return moveUpLeft(speedX, speedY);
         } else {
           return moveRight(speed);
         }
 
       case Direction.upRight:
         if (enabledDiagonal) {
-          return moveUpRight(speedX * REDUCTION_SPEED_DIAGONAL,
-              speedY * REDUCTION_SPEED_DIAGONAL);
+          return moveUpRight(speedX, speedY);
         } else {
           return moveRight(speed);
         }
 
       case Direction.downLeft:
         if (enabledDiagonal) {
-          return moveDownLeft(speedX * REDUCTION_SPEED_DIAGONAL,
-              speedY * REDUCTION_SPEED_DIAGONAL);
+          return moveDownLeft(speedX, speedY);
         } else {
           return moveLeft(speed);
         }
 
       case Direction.downRight:
         if (enabledDiagonal) {
-          return moveDownRight(speedX * REDUCTION_SPEED_DIAGONAL,
-              speedY * REDUCTION_SPEED_DIAGONAL);
+          return moveDownRight(speedX, speedY);
         } else {
           return moveRight(speed);
         }
diff --git a/lib/mixins/movement_by_joystick.dart b/lib/mixins/movement_by_joystick.dart
index 3abd8055f..715acd56d 100644
--- a/lib/mixins/movement_by_joystick.dart
+++ b/lib/mixins/movement_by_joystick.dart
@@ -4,9 +4,6 @@ import 'package:bonfire/bonfire.dart';
 
 /// Mixin responsible for adding movements through joystick events
 mixin MovementByJoystick on Movement, JoystickListener {
-  // ignore: constant_identifier_names
-  static const REDUCTION_SPEED_DIAGONAL = 0.7;
-
   JoystickMoveDirectional _currentDirectional = JoystickMoveDirectional.IDLE;
   double _currentDirectionalAngle = 0;
 
@@ -41,8 +38,7 @@ mixin MovementByJoystick on Movement, JoystickListener {
     super.update(dt);
     if (_isEnabled()) {
       if (dPadAngles) {
-        final diagonalSpeed = speed * REDUCTION_SPEED_DIAGONAL;
-        _moveDirectional(_currentDirectional, speed, diagonalSpeed);
+        _moveDirectional(_currentDirectional, speed);
       } else {
         if (_currentDirectional != JoystickMoveDirectional.IDLE) {
           _isIdleJoystick = false;
@@ -55,7 +51,6 @@ mixin MovementByJoystick on Movement, JoystickListener {
   void _moveDirectional(
     JoystickMoveDirectional direction,
     double speed,
-    double diagonalSpeed,
   ) {
     switch (direction) {
       case JoystickMoveDirectional.MOVE_UP:
@@ -65,7 +60,7 @@ mixin MovementByJoystick on Movement, JoystickListener {
       case JoystickMoveDirectional.MOVE_UP_LEFT:
         _isIdleJoystick = false;
         if (enabledDiagonalMovements) {
-          moveUpLeft(diagonalSpeed, diagonalSpeed);
+          moveUpLeft(speed, speed);
         } else {
           moveLeft(speed);
         }
@@ -73,7 +68,7 @@ mixin MovementByJoystick on Movement, JoystickListener {
       case JoystickMoveDirectional.MOVE_UP_RIGHT:
         _isIdleJoystick = false;
         if (enabledDiagonalMovements) {
-          moveUpRight(diagonalSpeed, diagonalSpeed);
+          moveUpRight(speed, speed);
         } else {
           moveRight(speed);
         }
@@ -89,7 +84,7 @@ mixin MovementByJoystick on Movement, JoystickListener {
       case JoystickMoveDirectional.MOVE_DOWN_RIGHT:
         _isIdleJoystick = false;
         if (enabledDiagonalMovements) {
-          moveDownRight(diagonalSpeed, diagonalSpeed);
+          moveDownRight(speed, speed);
         } else {
           moveRight(speed);
         }
@@ -97,7 +92,7 @@ mixin MovementByJoystick on Movement, JoystickListener {
       case JoystickMoveDirectional.MOVE_DOWN_LEFT:
         _isIdleJoystick = false;
         if (enabledDiagonalMovements) {
-          moveDownLeft(diagonalSpeed, diagonalSpeed);
+          moveDownLeft(speed, speed);
         } else {
           moveLeft(speed);
         }
