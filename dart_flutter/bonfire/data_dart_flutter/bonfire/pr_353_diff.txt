diff --git a/example/analysis_options.yaml b/example/analysis_options.yaml
index 1411db207..61b6c4de1 100644
--- a/example/analysis_options.yaml
+++ b/example/analysis_options.yaml
@@ -7,7 +7,7 @@
 
 # The following line activates a set of recommended lints for Flutter apps,
 # packages, and plugins designed to encourage good coding practices.
-# include: package:flutter_lints/flutter.yaml
+include: package:flutter_lints/flutter.yaml
 
 linter:
   # The lint rules applied to this project can be customized in the
diff --git a/example/lib/lpc/lpc_game.dart b/example/lib/lpc/lpc_game.dart
index e9869eb32..69adbcf97 100644
--- a/example/lib/lpc/lpc_game.dart
+++ b/example/lib/lpc/lpc_game.dart
@@ -42,7 +42,7 @@ class LPCGame extends StatelessWidget {
       ],
       player: LPCPlayer(
         position: Vector2(140, 140),
-        customStatus: CustomStatus(),
+        customStatus: const CustomStatus(),
       ),
       onDispose: () => FollowerWidget.remove(LPCPlayer.customWidgetKey),
     );
diff --git a/example/lib/lpc/widgets/button_interface.dart b/example/lib/lpc/widgets/button_interface.dart
index 9ec9a2a2b..8a1706c1c 100644
--- a/example/lib/lpc/widgets/button_interface.dart
+++ b/example/lib/lpc/widgets/button_interface.dart
@@ -32,7 +32,7 @@ class ButtonInterface extends StatelessWidget {
       child: Padding(
         padding: const EdgeInsets.all(20),
         child: ElevatedButton(
-          child: Text('Edit Character'),
+          child: const Text('Edit Character'),
           onPressed: () {
             if (game.player != null) {
               (game.player as LPCPlayer).showEditCharacter();
diff --git a/example/lib/lpc/widgets/dialog_custom_character.dart b/example/lib/lpc/widgets/dialog_custom_character.dart
index c16983e29..1cf43a19b 100644
--- a/example/lib/lpc/widgets/dialog_custom_character.dart
+++ b/example/lib/lpc/widgets/dialog_custom_character.dart
@@ -45,8 +45,8 @@ class _DialogCustomCharacterState extends State<DialogCustomCharacter> {
           crossAxisAlignment: CrossAxisAlignment.start,
           mainAxisSize: MainAxisSize.min,
           children: [
-            Text('Body'),
-            SizedBox(
+            const Text('Body'),
+            const SizedBox(
               height: 10,
             ),
             Row(
@@ -81,11 +81,11 @@ class _DialogCustomCharacterState extends State<DialogCustomCharacter> {
                 ),
               ],
             ),
-            SizedBox(
+            const SizedBox(
               height: 20,
             ),
-            Text('Hair'),
-            SizedBox(
+            const Text('Hair'),
+            const SizedBox(
               height: 10,
             ),
             Row(
@@ -126,11 +126,11 @@ class _DialogCustomCharacterState extends State<DialogCustomCharacter> {
                 ),
               ],
             ),
-            SizedBox(
+            const SizedBox(
               height: 20,
             ),
-            Text('Equipments'),
-            SizedBox(
+            const Text('Equipments'),
+            const SizedBox(
               height: 10,
             ),
             Row(
diff --git a/example/lib/main.dart b/example/lib/main.dart
index cdde0c13a..6849b2a2a 100644
--- a/example/lib/main.dart
+++ b/example/lib/main.dart
@@ -25,13 +25,15 @@ void main() async {
   BonfireInjector().put((i) => BarLifeController());
 
   runApp(
-    MaterialApp(
+    const MaterialApp(
       home: Menu(),
     ),
   );
 }
 
 class Menu extends StatelessWidget {
+  const Menu({Key? key}) : super(key: key);
+
   @override
   Widget build(BuildContext context) {
     return Scaffold(
@@ -42,7 +44,7 @@ class Menu extends StatelessWidget {
           children: <Widget>[
             Center(
               child: RichText(
-                text: TextSpan(
+                text: const TextSpan(
                   text: 'Bonfire',
                   style: TextStyle(fontSize: 30, color: Colors.white),
                   children: [
@@ -54,7 +56,7 @@ class Menu extends StatelessWidget {
                 ),
               ),
             ),
-            SizedBox(
+            const SizedBox(
               height: 40,
             ),
             SingleChildScrollView(
@@ -63,15 +65,15 @@ class Menu extends StatelessWidget {
                 spacing: 20,
                 children: [
                   _buildButton(context, 'Simple example', () {
-                    _navTo(context, SimpleExampleGame());
+                    _navTo(context, const SimpleExampleGame());
                   }),
-                  SizedBox(
+                  const SizedBox(
                     height: 10,
                   ),
                   _buildButton(context, 'Manual Map', () {
                     _navTo(context, GameManualMap());
                   }),
-                  SizedBox(
+                  const SizedBox(
                     height: 10,
                   ),
                   _buildButton(context, 'Random Map', () {
@@ -82,24 +84,24 @@ class Menu extends StatelessWidget {
                       ),
                     );
                   }),
-                  SizedBox(
+                  const SizedBox(
                     height: 10,
                   ),
                   _buildButton(context, 'Tiled Map', () {
-                    _navTo(context, GameTiledMap());
+                    _navTo(context, const GameTiledMap());
                   }),
-                  SizedBox(
+                  const SizedBox(
                     height: 10,
                   ),
                   _buildButton(context, 'Top down game', () {
-                    _navTo(context, TopDownGame());
+                    _navTo(context, const TopDownGame());
                   }),
                   if (!kIsWeb) ...[
-                    SizedBox(
+                    const SizedBox(
                       height: 10,
                     ),
                     _buildButton(context, 'Dynamic spriteSheet', () {
-                      _navTo(context, LPCGame());
+                      _navTo(context, const LPCGame());
                     }),
                   ]
                 ],
@@ -108,7 +110,7 @@ class Menu extends StatelessWidget {
           ],
         ),
       ),
-      bottomNavigationBar: Container(
+      bottomNavigationBar: const SizedBox(
         height: 40,
         child: Center(
           child: Text(
@@ -131,8 +133,8 @@ class Menu extends StatelessWidget {
             ),
           ),
         ),
-        child: Text(label),
         onPressed: onTap,
+        child: Text(label),
       ),
     );
   }
diff --git a/example/lib/manual_map/dungeon_map.dart b/example/lib/manual_map/dungeon_map.dart
index cd5fc2d56..b727b42a1 100644
--- a/example/lib/manual_map/dungeon_map.dart
+++ b/example/lib/manual_map/dungeon_map.dart
@@ -9,25 +9,25 @@ import 'package:example/shared/enemy/goblin.dart';
 
 class DungeonMap {
   static double tileSize = 45;
-  static final String wallBottom = 'tile/wall_bottom.png';
-  static final String wall = 'tile/wall.png';
-  static final String wallTop = 'tile/wall_top.png';
-  static final String wallLeft = 'tile/wall_left.png';
-  static final String wallBottomLeft = 'tile/wall_bottom_left.png';
-  static final String wallRight = 'tile/wall_right.png';
-  static final String floor_1 = 'tile/floor_1.png';
-  static final String floor_2 = 'tile/floor_2.png';
-  static final String floor_3 = 'tile/floor_3.png';
-  static final String floor_4 = 'tile/floor_4.png';
+  static const String wallBottom = 'tile/wall_bottom.png';
+  static const String wall = 'tile/wall.png';
+  static const String wallTop = 'tile/wall_top.png';
+  static const String wallLeft = 'tile/wall_left.png';
+  static const String wallBottomLeft = 'tile/wall_bottom_left.png';
+  static const String wallRight = 'tile/wall_right.png';
+  static const String floor_1 = 'tile/floor_1.png';
+  static const String floor_2 = 'tile/floor_2.png';
+  static const String floor_3 = 'tile/floor_3.png';
+  static const String floor_4 = 'tile/floor_4.png';
 
   static WorldMap map() {
     List<TileModel> tileList = [];
     List.generate(35, (indexRow) {
-      List.generate(70, (indexColumm) {
-        if (indexRow == 3 && indexColumm > 2 && indexColumm < 30) {
+      List.generate(70, (indexColumn) {
+        if (indexRow == 3 && indexColumn > 2 && indexColumn < 30) {
           tileList.add(TileModel(
             sprite: TileModelSprite(path: wallBottom),
-            x: indexColumm.toDouble(),
+            x: indexColumn.toDouble(),
             y: indexRow.toDouble(),
             collisions: [
               CollisionArea.rectangle(size: Vector2(tileSize, tileSize))
@@ -37,10 +37,10 @@ class DungeonMap {
           ));
           return;
         }
-        if (indexRow == 4 && indexColumm > 2 && indexColumm < 30) {
+        if (indexRow == 4 && indexColumn > 2 && indexColumn < 30) {
           tileList.add(TileModel(
             sprite: TileModelSprite(path: wall),
-            x: indexColumm.toDouble(),
+            x: indexColumn.toDouble(),
             y: indexRow.toDouble(),
             collisions: [
               CollisionArea.rectangle(size: Vector2(tileSize, tileSize))
@@ -51,10 +51,10 @@ class DungeonMap {
           return;
         }
 
-        if (indexRow == 9 && indexColumm > 2 && indexColumm < 30) {
+        if (indexRow == 9 && indexColumn > 2 && indexColumn < 30) {
           tileList.add(TileModel(
             sprite: TileModelSprite(path: wallTop),
-            x: indexColumm.toDouble(),
+            x: indexColumn.toDouble(),
             y: indexRow.toDouble(),
             collisions: [
               CollisionArea.rectangle(size: Vector2(tileSize, tileSize))
@@ -67,12 +67,12 @@ class DungeonMap {
 
         if (indexRow > 4 &&
             indexRow < 9 &&
-            indexColumm > 2 &&
-            indexColumm < 30) {
+            indexColumn > 2 &&
+            indexColumn < 30) {
           tileList.add(
             TileModel(
               sprite: TileModelSprite(path: randomFloor()),
-              x: indexColumm.toDouble(),
+              x: indexColumn.toDouble(),
               y: indexRow.toDouble(),
               width: tileSize,
               height: tileSize,
@@ -81,10 +81,10 @@ class DungeonMap {
           return;
         }
 
-        if (indexRow > 3 && indexRow < 9 && indexColumm == 2) {
+        if (indexRow > 3 && indexRow < 9 && indexColumn == 2) {
           tileList.add(TileModel(
             sprite: TileModelSprite(path: wallLeft),
-            x: indexColumm.toDouble(),
+            x: indexColumn.toDouble(),
             y: indexRow.toDouble(),
             collisions: [
               CollisionArea.rectangle(size: Vector2(tileSize, tileSize))
@@ -93,10 +93,10 @@ class DungeonMap {
             height: tileSize,
           ));
         }
-        if (indexRow == 9 && indexColumm == 2) {
+        if (indexRow == 9 && indexColumn == 2) {
           tileList.add(TileModel(
             sprite: TileModelSprite(path: wallBottomLeft),
-            x: indexColumm.toDouble(),
+            x: indexColumn.toDouble(),
             y: indexRow.toDouble(),
             collisions: [
               CollisionArea.rectangle(size: Vector2(tileSize, tileSize))
@@ -106,10 +106,10 @@ class DungeonMap {
           ));
         }
 
-        if (indexRow > 3 && indexRow < 9 && indexColumm == 30) {
+        if (indexRow > 3 && indexRow < 9 && indexColumn == 30) {
           tileList.add(TileModel(
             sprite: TileModelSprite(path: wallRight),
-            x: indexColumm.toDouble(),
+            x: indexColumn.toDouble(),
             y: indexRow.toDouble(),
             collisions: [
               CollisionArea.rectangle(size: Vector2(tileSize, tileSize))
diff --git a/example/lib/manual_map/game_manual_map.dart b/example/lib/manual_map/game_manual_map.dart
index 8a7517e93..9879511d7 100644
--- a/example/lib/manual_map/game_manual_map.dart
+++ b/example/lib/manual_map/game_manual_map.dart
@@ -13,6 +13,8 @@ import 'package:flutter/services.dart';
 class GameManualMap extends StatelessWidget implements GameListener {
   final GameController _controller = GameController();
 
+  GameManualMap({Key? key}) : super(key: key);
+
   @override
   Widget build(BuildContext context) {
     return LayoutBuilder(builder: (context, constraints) {
@@ -33,19 +35,19 @@ class GameManualMap extends StatelessWidget implements GameListener {
           ),
           actions: [
             JoystickAction(
-              actionId: PlayerAttackType.AttackMelee,
+              actionId: PlayerAttackType.attackMelee,
               sprite: Sprite.load('joystick_atack.png'),
               align: JoystickActionAlign.BOTTOM_RIGHT,
               size: 80,
-              margin: EdgeInsets.only(bottom: 50, right: 50),
+              margin: const EdgeInsets.only(bottom: 50, right: 50),
             ),
             JoystickAction(
-              actionId: PlayerAttackType.AttackRange,
+              actionId: PlayerAttackType.attackRange,
               sprite: Sprite.load('joystick_atack_range.png'),
               spriteBackgroundDirection: Sprite.load('joystick_background.png'),
               size: 50,
               enableDirection: true,
-              margin: EdgeInsets.only(bottom: 50, right: 160),
+              margin: const EdgeInsets.only(bottom: 50, right: 160),
             )
           ],
         ),
diff --git a/example/lib/random_map/map_generator.dart b/example/lib/random_map/map_generator.dart
index 8dc500472..54b46c30e 100644
--- a/example/lib/random_map/map_generator.dart
+++ b/example/lib/random_map/map_generator.dart
@@ -28,12 +28,12 @@ class MapGenerated {
 }
 
 class MapGenerator {
-  static const double TILE_WATER = 0;
-  static const double TILE_SAND = 1;
-  static const double TILE_GRASS = 2;
+  static const double tileWater = 0;
+  static const double tileSand = 1;
+  static const double tileGrass = 2;
   final double tileSize;
   final Vector2 size;
-  List<GameComponent> _compList = [];
+  final List<GameComponent> _compList = [];
   Vector2 _playerPosition = Vector2.zero();
 
   MapGenerator(this.size, this.tileSize);
@@ -84,7 +84,7 @@ class MapGenerator {
       tileSize: tileSize,
       terrainList: [
         MapTerrain(
-          value: TILE_WATER,
+          value: tileWater,
           collisionOnlyCloseCorners: true,
           collisions: [CollisionArea.rectangle(size: Vector2.all(tileSize))],
           sprites: [
@@ -96,7 +96,7 @@ class MapGenerator {
           ],
         ),
         MapTerrain(
-          value: TILE_SAND,
+          value: tileSand,
           sprites: [
             TileModelSprite(
               path: 'tile_random/tile_types.png',
@@ -106,7 +106,7 @@ class MapGenerator {
           ],
         ),
         MapTerrain(
-          value: TILE_GRASS,
+          value: tileGrass,
           spritesProportion: [0.93, 0.05, 0.02],
           sprites: [
             TileModelSprite(
@@ -126,16 +126,16 @@ class MapGenerator {
           ],
         ),
         MapTerrainCorners(
-          value: TILE_SAND,
-          to: TILE_WATER,
+          value: tileSand,
+          to: tileWater,
           spriteSheet: TerrainSpriteSheet.create(
             path: 'tile_random/earth_to_water.png',
             tileSize: Vector2.all(16),
           ),
         ),
         MapTerrainCorners(
-          value: TILE_SAND,
-          to: TILE_GRASS,
+          value: tileSand,
+          to: tileGrass,
           spriteSheet: TerrainSpriteSheet.create(
             path: 'tile_random/earth_to_grass.png',
             tileSize: Vector2.all(16),
@@ -152,7 +152,7 @@ class MapGenerator {
       for (var y = 0; y < height; y++) {
         if (_playerPosition == Vector2.zero() &&
             x > width / 2 &&
-            matrix[x][y] == TILE_GRASS) {
+            matrix[x][y] == tileGrass) {
           _playerPosition = Vector2(x * tileSize, y * tileSize);
         }
         if (verifyIfAddTree(x, y, matrix)) {
@@ -165,12 +165,15 @@ class MapGenerator {
   bool verifyIfAddTree(int x, int y, List<List<double>> matrix) {
     bool terrainIsGrass =
         ((x % 5 == 0 && y % 3 == 0) || (x % 7 == 0 && y % 5 == 0)) &&
-            matrix[x][y] == TILE_GRASS;
+            matrix[x][y] == tileGrass;
 
     bool baseTreeInGrass = false;
     try {
-      baseTreeInGrass = matrix[x + 3][y + 3] == TILE_GRASS;
-    } catch (e) {}
+      baseTreeInGrass = matrix[x + 3][y + 3] == tileGrass;
+    } catch (e) {
+      // ignore: avoid_print
+      print(e);
+    }
 
     bool randomFactor = Random().nextDouble() > 0.5;
     return terrainIsGrass && baseTreeInGrass && randomFactor;
diff --git a/example/lib/random_map/noise_generator.dart b/example/lib/random_map/noise_generator.dart
index 19d2fdbca..3b02fcd56 100644
--- a/example/lib/random_map/noise_generator.dart
+++ b/example/lib/random_map/noise_generator.dart
@@ -28,20 +28,20 @@ List<List<double>> generateNoise(Map<String, dynamic> data) {
     (_) => List<double>.generate(height, (_) => .0),
   );
 
-  /// Normalises the matrix creating 3 categories: Water,Earth and Grass
+  /// Normalizes the matrix creating 3 categories: Water,Earth and Grass
   for (var x = 0; x < width; x++) {
     for (var y = 0; y < height; y++) {
       double newValue = 0;
       if (original[x][y] > -0.35) {
-        newValue = MapGenerator.TILE_WATER;
+        newValue = MapGenerator.tileWater;
       }
 
       if (original[x][y] > -0.1) {
-        newValue = MapGenerator.TILE_SAND;
+        newValue = MapGenerator.tileSand;
       }
 
       if (original[x][y] > 0.1) {
-        newValue = MapGenerator.TILE_GRASS;
+        newValue = MapGenerator.tileGrass;
       }
       newMatrix[x][y] = newValue;
     }
diff --git a/example/lib/random_map/random_map_game.dart b/example/lib/random_map/random_map_game.dart
index d7362814f..0f95a85ab 100644
--- a/example/lib/random_map/random_map_game.dart
+++ b/example/lib/random_map/random_map_game.dart
@@ -35,14 +35,12 @@ class _RandomMapGameState extends State<RandomMapGame> {
       builder: (context, constraints) {
         DungeonMap.tileSize = max(constraints.maxHeight, constraints.maxWidth) /
             (kIsWeb ? 25 : 22);
-        if (_mapGenerator == null) {
-          _mapGenerator = MapGenerator(widget.size, DungeonMap.tileSize);
-        }
+        _mapGenerator ??= MapGenerator(widget.size, DungeonMap.tileSize);
         return FutureBuilder<MapGenerated>(
           future: _mapGenerator!.buildMap(),
           builder: (context, snapshot) {
             if (!snapshot.hasData) {
-              return Material(
+              return const Material(
                 color: Colors.black,
                 child: Center(
                   child: Text(
@@ -69,7 +67,7 @@ class _RandomMapGameState extends State<RandomMapGame> {
               ),
               map: result.map,
               components: result.components,
-              delayToHideProgress: Duration(milliseconds: 500),
+              delayToHideProgress: const Duration(milliseconds: 500),
             );
           },
         );
diff --git a/example/lib/shared/decoration/barrel_dragable.dart b/example/lib/shared/decoration/barrel_dragable.dart
index 97de5163a..ea9f98b9b 100644
--- a/example/lib/shared/decoration/barrel_dragable.dart
+++ b/example/lib/shared/decoration/barrel_dragable.dart
@@ -38,9 +38,9 @@ class BarrelDraggable extends GameDecoration
 
   @override
   void onMount() {
-    final textsize = _textConfig.measureText(text);
-    xCenter = (width - textsize.x) / 2;
-    yCenter = (height - textsize.y) / 2;
+    final textSize = _textConfig.measureText(text);
+    xCenter = (width - textSize.x) / 2;
+    yCenter = (height - textSize.y) / 2;
     super.onMount();
   }
 
@@ -50,7 +50,7 @@ class BarrelDraggable extends GameDecoration
     _textConfig.render(
       canvas,
       text,
-      Vector2(this.x + xCenter, this.y - yCenter),
+      Vector2(x + xCenter, y - yCenter),
     );
   }
 }
diff --git a/example/lib/shared/decoration/chest.dart b/example/lib/shared/decoration/chest.dart
index 5abdb9f67..996598774 100644
--- a/example/lib/shared/decoration/chest.dart
+++ b/example/lib/shared/decoration/chest.dart
@@ -16,7 +16,7 @@ class Chest extends GameDecoration with TapGesture {
         ) {
     _textConfig = TextPaint(
       style: TextStyle(
-        color: Color(0xFFFFFFFF),
+        color: const Color(0xFFFFFFFF),
         fontSize: width / 2,
       ),
     );
@@ -25,7 +25,7 @@ class Chest extends GameDecoration with TapGesture {
   @override
   void update(double dt) {
     if (gameRef.player != null) {
-      this.seeComponent(
+      seeComponent(
         gameRef.player!,
         observed: (player) {
           if (!_observedPlayer) {
diff --git a/example/lib/shared/decoration/potion_life.dart b/example/lib/shared/decoration/potion_life.dart
index 361d892cb..76324bc56 100644
--- a/example/lib/shared/decoration/potion_life.dart
+++ b/example/lib/shared/decoration/potion_life.dart
@@ -14,15 +14,15 @@ class PotionLife extends GameDecoration with Sensor<Player> {
         );
 
   @override
-  void onContact(GameComponent collision) {
-    if (collision is Player) {
+  void onContact(GameComponent component) {
+    if (component is Player) {
       generateValues(
-        Duration(seconds: 1),
+        const Duration(seconds: 1),
         onChange: (value) {
           if (_lifeDistributed < life) {
             double newLife = life * value - _lifeDistributed;
             _lifeDistributed += newLife;
-            collision.addLife(newLife.roundToDouble());
+            component.addLife(newLife.roundToDouble());
           }
         },
       );
diff --git a/example/lib/shared/enemy/goblin.dart b/example/lib/shared/enemy/goblin.dart
index 9206e694c..a87280f50 100644
--- a/example/lib/shared/enemy/goblin.dart
+++ b/example/lib/shared/enemy/goblin.dart
@@ -60,7 +60,7 @@ class Goblin extends SimpleEnemy
 
   void execAttackRange(double damage) {
     if (gameRef.player != null && gameRef.player?.isDead == true) return;
-    this.simpleAttackRange(
+    simpleAttackRange(
       animationRight: CommonSpriteSheet.fireBallRight,
       animationDestroy: CommonSpriteSheet.explosionAnimation,
       id: 35,
@@ -85,7 +85,7 @@ class Goblin extends SimpleEnemy
 
   void execAttack(double damage) {
     if (gameRef.player != null && gameRef.player?.isDead == true) return;
-    this.simpleAttackMelee(
+    simpleAttackMelee(
       size: Vector2.all(width),
       damage: damage / 2,
       interval: 400,
@@ -96,7 +96,7 @@ class Goblin extends SimpleEnemy
 
   @override
   void removeLife(double life) {
-    this.showDamage(
+    showDamage(
       life,
       config: TextStyle(
         fontSize: width / 3,
diff --git a/example/lib/shared/interface/bar_life_component.dart b/example/lib/shared/interface/bar_life_component.dart
index 339ef803b..67cdc7af2 100644
--- a/example/lib/shared/interface/bar_life_component.dart
+++ b/example/lib/shared/interface/bar_life_component.dart
@@ -18,12 +18,15 @@ class BarLifeInterface extends InterfaceComponent
         );
 
   @override
-  void render(Canvas c) {
-    super.render(c);
+  void render(Canvas canvas) {
+    super.render(canvas);
     try {
-      _drawLife(c);
-      _drawStamina(c);
-    } catch (e) {}
+      _drawLife(canvas);
+      _drawStamina(canvas);
+    } catch (e) {
+      // ignore: avoid_print
+      print(e);
+    }
   }
 
   void _drawLife(Canvas canvas) {
diff --git a/example/lib/shared/interface/bar_life_widget.dart b/example/lib/shared/interface/bar_life_widget.dart
index af1804e43..0103fffcc 100644
--- a/example/lib/shared/interface/bar_life_widget.dart
+++ b/example/lib/shared/interface/bar_life_widget.dart
@@ -30,15 +30,15 @@ class BarLifeWidget extends StatelessWidget {
                   children: [
                     Text(
                       controller.life.toString(),
-                      style: TextStyle(color: Colors.green),
+                      style: const TextStyle(color: Colors.green),
                     ),
-                    Text(
+                    const Text(
                       ' / ',
                       style: TextStyle(color: Colors.green),
                     ),
                     Text(
                       controller.maxLife.toString(),
-                      style: TextStyle(color: Colors.green),
+                      style: const TextStyle(color: Colors.green),
                     ),
                   ],
                 ),
@@ -46,15 +46,15 @@ class BarLifeWidget extends StatelessWidget {
                   children: [
                     Text(
                       controller.stamina.toString(),
-                      style: TextStyle(color: Colors.yellowAccent),
+                      style: const TextStyle(color: Colors.yellowAccent),
                     ),
-                    Text(
+                    const Text(
                       ' / ',
                       style: TextStyle(color: Colors.yellowAccent),
                     ),
                     Text(
                       controller.maxStamina.toString(),
-                      style: TextStyle(color: Colors.yellowAccent),
+                      style: const TextStyle(color: Colors.yellowAccent),
                     ),
                   ],
                 ),
diff --git a/example/lib/shared/interface/knight_interface.dart b/example/lib/shared/interface/knight_interface.dart
index 51f8f2549..17774a3ed 100644
--- a/example/lib/shared/interface/knight_interface.dart
+++ b/example/lib/shared/interface/knight_interface.dart
@@ -59,7 +59,7 @@ class KnightInterface extends GameInterface {
     ));
     add(TextInterfaceComponent(
       text: 'Start scene',
-      textConfig: TextStyle(
+      textConfig: const TextStyle(
         color: Colors.white,
       ),
       id: 5,
@@ -108,8 +108,8 @@ class KnightInterface extends GameInterface {
               child: Column(
                 mainAxisSize: MainAxisSize.min,
                 children: [
-                  Text('AwaitCallbackSceneAction test'),
-                  SizedBox(
+                  const Text('AwaitCallbackSceneAction test'),
+                  const SizedBox(
                     height: 20,
                   ),
                   ElevatedButton(
@@ -117,9 +117,9 @@ class KnightInterface extends GameInterface {
                       Navigator.pop(context);
                       completed();
                     },
-                    child: Text('CONTINUE'),
+                    child: const Text('CONTINUE'),
                   ),
-                  SizedBox(
+                  const SizedBox(
                     height: 20,
                   ),
                   ElevatedButton(
@@ -127,7 +127,7 @@ class KnightInterface extends GameInterface {
                       Navigator.pop(context);
                       gameRef.stopScene();
                     },
-                    child: Text('STOP SCENE'),
+                    child: const Text('STOP SCENE'),
                   ),
                 ],
               ),
@@ -147,7 +147,7 @@ class KnightInterface extends GameInterface {
           CameraSceneAction.position(Vector2(800, 800)),
           CameraSceneAction.target(gameRef.player!),
           CameraSceneAction.target(enemy, zoom: 2),
-          DelaySceneAction(Duration(seconds: 2)),
+          DelaySceneAction(const Duration(seconds: 2)),
           MoveComponentSceneAction(
             component: enemy,
             newPosition: enemy.position.clone()..add(Vector2(-40, -10)),
@@ -195,15 +195,16 @@ class KnightInterface extends GameInterface {
             color: Colors.white,
             borderRadius: BorderRadius.circular(5),
           ),
-          padding: EdgeInsets.all(10),
+          padding: const EdgeInsets.all(10),
           child: ElevatedButton(
             onPressed: () {
+              // ignore: avoid_print
               print('Tapped');
             },
-            child: Text('Tap here'),
+            child: const Text('Tap here'),
           ),
         ),
-        align: Offset(0, -55),
+        align: const Offset(0, -55),
       );
     });
   }
diff --git a/example/lib/shared/npc/wizard/wizard.dart b/example/lib/shared/npc/wizard/wizard.dart
index 97edc63aa..29159d3f2 100644
--- a/example/lib/shared/npc/wizard/wizard.dart
+++ b/example/lib/shared/npc/wizard/wizard.dart
@@ -41,12 +41,12 @@ class Wizard extends SimpleNpc with ObjectCollision, TapGesture {
           [
             Say(
               text: [
-                TextSpan(
+                const TextSpan(
                   text:
                       ' Would you tell me, please ...  which way I ought to go from here? ',
                 )
               ],
-              person: Container(
+              person: SizedBox(
                 width: 100,
                 height: 100,
                 child: PlayerSpriteSheet.idleRight.asWidget(),
@@ -54,11 +54,11 @@ class Wizard extends SimpleNpc with ObjectCollision, TapGesture {
             ),
             Say(
               text: [
-                TextSpan(
+                const TextSpan(
                   text: 'That depends a good deal on where you want to get to.',
                 ),
               ],
-              person: Container(
+              person: SizedBox(
                 width: 100,
                 height: 100,
                 child: WizardSpriteSheet.idle.asWidget(),
@@ -67,11 +67,11 @@ class Wizard extends SimpleNpc with ObjectCollision, TapGesture {
             ),
             Say(
               text: [
-                TextSpan(
+                const TextSpan(
                   text: ' I don\'t much care where. ',
                 ),
               ],
-              person: Container(
+              person: SizedBox(
                 width: 100,
                 height: 100,
                 child: PlayerSpriteSheet.idleRight.asWidget(),
@@ -79,11 +79,11 @@ class Wizard extends SimpleNpc with ObjectCollision, TapGesture {
             ),
             Say(
               text: [
-                TextSpan(
+                const TextSpan(
                   text: 'Then it doesn\'t much matter which way you go.',
                 ),
               ],
-              person: Container(
+              person: SizedBox(
                 width: 100,
                 height: 100,
                 child: WizardSpriteSheet.idle.asWidget(),
diff --git a/example/lib/shared/player/knight.dart b/example/lib/shared/player/knight.dart
index d3482a62d..b35750cb8 100644
--- a/example/lib/shared/player/knight.dart
+++ b/example/lib/shared/player/knight.dart
@@ -9,7 +9,10 @@ import 'package:flutter/services.dart';
 
 import 'knight_controller.dart';
 
-enum PlayerAttackType { AttackMelee, AttackRange }
+enum PlayerAttackType {
+  attackMelee,
+  attackRange,
+}
 
 class Knight extends SimplePlayer
     with Lighting, ObjectCollision, UseStateController<KnightController> {
@@ -60,7 +63,7 @@ class Knight extends SimplePlayer
     if (hasGameRef && gameRef.sceneBuilderStatus.isRunning) {
       return;
     }
-    this.speed = maxSpeed * event.intensity;
+    speed = maxSpeed * event.intensity;
     super.joystickChangeDirectional(event);
   }
 
@@ -89,7 +92,7 @@ class Knight extends SimplePlayer
   }
 
   void execMeleeAttack(double attack) {
-    this.simpleAttackMelee(
+    simpleAttackMelee(
       damage: attack,
       animationRight: CommonSpriteSheet.whiteAttackEffectRight,
       size: Vector2.all(DungeonMap.tileSize),
@@ -97,7 +100,7 @@ class Knight extends SimplePlayer
   }
 
   void execRangeAttack(double angle, double damage) {
-    this.simpleAttackRangeByAngle(
+    simpleAttackRangeByAngle(
       attackFrom: AttackFromEnum.PLAYER_OR_ALLY,
       animation: CommonSpriteSheet.fireBallRight,
       animationDestroy: CommonSpriteSheet.explosionAnimation,
@@ -167,18 +170,18 @@ class Knight extends SimplePlayer
           [
             Say(
               text: [
-                TextSpan(
+                const TextSpan(
                   text: 'Look at this! It seems that',
                 ),
-                TextSpan(
+                const TextSpan(
                   text: ' I\'m not alone ',
                   style: TextStyle(color: Colors.red),
                 ),
-                TextSpan(
+                const TextSpan(
                   text: 'here...',
                 ),
               ],
-              person: Container(
+              person: SizedBox(
                 width: 100,
                 height: 100,
                 child: PlayerSpriteSheet.idleRight.asWidget(),
@@ -186,22 +189,22 @@ class Knight extends SimplePlayer
             ),
             Say(
               text: [
-                TextSpan(
+                const TextSpan(
                   text: 'Lok Tar Ogr!',
                 ),
-                TextSpan(
+                const TextSpan(
                   text: ' Lok Tar Ogr! ',
                   style: TextStyle(color: Colors.green),
                 ),
-                TextSpan(
+                const TextSpan(
                   text: ' Lok Tar Ogr! ',
                 ),
-                TextSpan(
+                const TextSpan(
                   text: 'Lok Tar Ogr!',
                   style: TextStyle(color: Colors.green),
                 ),
               ],
-              person: Container(
+              person: SizedBox(
                 width: 100,
                 height: 100,
                 child: EnemySpriteSheet.idleLeft.asWidget(),
@@ -210,12 +213,15 @@ class Knight extends SimplePlayer
             ),
           ],
           onClose: () {
+            // ignore: avoid_print
             print('close talk');
-            if (!this.isDead) {
+
+            if (!isDead) {
               gameRef.camera.moveToPlayerAnimated(zoom: 1);
             }
           },
           onFinish: () {
+            // ignore: avoid_print
             print('finish talk');
           },
           logicalKeyboardKeysToNext: [
@@ -267,7 +273,7 @@ class Knight extends SimplePlayer
   }
 
   void execShowDamage(double damage) {
-    this.showDamage(
+    showDamage(
       damage,
       config: TextStyle(
         fontSize: width / 3,
diff --git a/example/lib/shared/player/knight_controller.dart b/example/lib/shared/player/knight_controller.dart
index 359253b3c..a76a57f07 100644
--- a/example/lib/shared/player/knight_controller.dart
+++ b/example/lib/shared/player/knight_controller.dart
@@ -51,7 +51,7 @@ class KnightController extends StateController<Knight> {
   void handleJoystickAction(JoystickActionEvent event) {
     if (event.event == ActionEvent.DOWN) {
       if (event.id == LogicalKeyboardKey.space.keyId ||
-          event.id == PlayerAttackType.AttackMelee) {
+          event.id == PlayerAttackType.attackMelee) {
         if (stamina > 15) {
           _decrementStamina(15);
           component?.execMeleeAttack(attack);
@@ -59,7 +59,7 @@ class KnightController extends StateController<Knight> {
       }
     }
 
-    if (event.id == PlayerAttackType.AttackRange) {
+    if (event.id == PlayerAttackType.attackRange) {
       if (event.event == ActionEvent.MOVE) {
         executingRangeAttack = true;
         radAngleRangeAttack = event.radAngle;
diff --git a/example/lib/simple_example/simple_example_game.dart b/example/lib/simple_example/simple_example_game.dart
index 1a1fce9cf..e68cd9686 100644
--- a/example/lib/simple_example/simple_example_game.dart
+++ b/example/lib/simple_example/simple_example_game.dart
@@ -35,7 +35,7 @@ class SimpleExampleGame extends StatelessWidget {
       cameraConfig: CameraConfig(
         moveOnlyMapArea: true,
       ),
-      backgroundColor: Color.fromARGB(255, 10, 53, 89),
+      backgroundColor: const Color.fromARGB(255, 10, 53, 89),
     );
   }
 }
diff --git a/example/lib/tiled_map/game_tiled_map.dart b/example/lib/tiled_map/game_tiled_map.dart
index 8152b8a83..0e69193f2 100644
--- a/example/lib/tiled_map/game_tiled_map.dart
+++ b/example/lib/tiled_map/game_tiled_map.dart
@@ -46,21 +46,21 @@ class GameTiledMap extends StatelessWidget {
             ),
             actions: [
               JoystickAction(
-                actionId: PlayerAttackType.AttackMelee,
+                actionId: PlayerAttackType.attackMelee,
                 sprite: Sprite.load('joystick_atack.png'),
                 align: JoystickActionAlign.BOTTOM_RIGHT,
                 size: 80,
-                margin: EdgeInsets.only(bottom: 50, right: 50),
+                margin: const EdgeInsets.only(bottom: 50, right: 50),
               ),
               JoystickAction(
-                actionId: PlayerAttackType.AttackRange,
+                actionId: PlayerAttackType.attackRange,
                 sprite: Sprite.load('joystick_atack_range.png'),
                 spriteBackgroundDirection: Sprite.load(
                   'joystick_background.png',
                 ),
                 enableDirection: true,
                 size: 50,
-                margin: EdgeInsets.only(bottom: 50, right: 160),
+                margin: const EdgeInsets.only(bottom: 50, right: 160),
               )
             ],
           ),
@@ -84,10 +84,10 @@ class GameTiledMap extends StatelessWidget {
           ),
           lightingColorGame: Colors.black.withOpacity(0.7),
           overlayBuilderMap: {
-            'barLife': (context, game) => BarLifeWidget(),
+            'barLife': (context, game) => const BarLifeWidget(),
             'miniMap': (context, game) => MiniMap(
                   game: game,
-                  margin: EdgeInsets.all(20),
+                  margin: const EdgeInsets.all(20),
                   borderRadius: BorderRadius.circular(10),
                   size: Vector2.all(
                     min(constraints.maxHeight, constraints.maxWidth) / 3,
@@ -95,7 +95,7 @@ class GameTiledMap extends StatelessWidget {
                   border: Border.all(color: Colors.white.withOpacity(0.5)),
                 ),
           },
-          initialActiveOverlays: [
+          initialActiveOverlays: const [
             'barLife',
             'miniMap',
           ],
diff --git a/example/lib/top_down_game/robot_enemy.dart b/example/lib/top_down_game/robot_enemy.dart
index a477b6f2f..018b0508e 100644
--- a/example/lib/top_down_game/robot_enemy.dart
+++ b/example/lib/top_down_game/robot_enemy.dart
@@ -43,7 +43,7 @@ class ZombieEnemy extends RotationEnemy
   @override
   void update(double dt) {
     super.update(dt);
-    this.seeAndMoveToPlayer(
+    seeAndMoveToPlayer(
       closePlayer: (player) {
         simpleAttackMelee(
           damage: 10,
diff --git a/example/lib/top_down_game/top_down_game.dart b/example/lib/top_down_game/top_down_game.dart
index 4a77a80a2..410b8e2af 100644
--- a/example/lib/top_down_game/top_down_game.dart
+++ b/example/lib/top_down_game/top_down_game.dart
@@ -35,7 +35,7 @@ class TopDownGame extends StatelessWidget {
         actions: [
           JoystickAction(
             actionId: 1,
-            margin: EdgeInsets.all(50),
+            margin: const EdgeInsets.all(50),
           ),
         ],
       ),
diff --git a/example/pubspec.lock b/example/pubspec.lock
index bce16a8b5..f53bd141b 100644
--- a/example/pubspec.lock
+++ b/example/pubspec.lock
@@ -42,7 +42,7 @@ packages:
       path: ".."
       relative: true
     source: path
-    version: "2.11.5"
+    version: "2.11.8"
   boolean_selector:
     dependency: transitive
     description:
@@ -125,6 +125,13 @@ packages:
     description: flutter
     source: sdk
     version: "0.0.0"
+  flutter_lints:
+    dependency: "direct dev"
+    description:
+      name: flutter_lints
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.1"
   glob:
     dependency: transitive
     description:
@@ -174,6 +181,13 @@ packages:
       url: "https://pub.dartlang.org"
     source: hosted
     version: "0.6.3"
+  lints:
+    dependency: transitive
+    description:
+      name: lints
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "2.0.1"
   logging:
     dependency: transitive
     description:
diff --git a/example/pubspec.yaml b/example/pubspec.yaml
index 923879b2a..14c9df38e 100644
--- a/example/pubspec.yaml
+++ b/example/pubspec.yaml
@@ -27,7 +27,7 @@ dependencies:
 
 dev_dependencies:
   test: any
-
+  flutter_lints: ^2.0.0
 
 # For information on the generic Dart part of this file, see the
 # following page: https://dart.dev/tools/pub/pubspec
