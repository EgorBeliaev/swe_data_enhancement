diff --git a/CHANGELOG.md b/CHANGELOG.md
index b9ed8b711..33141d210 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,11 @@
 # [NEXT]
+- Render transform improvements.
+- Now the `SimpleDirectionAnimation` do flip component that use it as necessary.
+- Adds param `useCompFlip` in `playOnce` (default `false`). If `true` the animation is flipped equal current state of component.
 - Adds param `backgroundColor` in `BonfireWidget`.
+- create `BarLifeComponent`.
+- Adds `UseBarLife` mixin.
+- method `drawDefaultLifeBar` now is deprecated. Pls use `UseBarLife` mixin.
 
 # [2.10.10]
 - Update Flame to `1.4.0`.
diff --git a/example/lib/shared/enemy/goblin.dart b/example/lib/shared/enemy/goblin.dart
index a96d774d7..9206e694c 100644
--- a/example/lib/shared/enemy/goblin.dart
+++ b/example/lib/shared/enemy/goblin.dart
@@ -12,6 +12,7 @@ class Goblin extends SimpleEnemy
         JoystickListener,
         MovementByJoystick,
         AutomaticRandomMovement,
+        UseBarLife,
         UseStateController<GoblinController> {
   Goblin(Vector2 position)
       : super(
@@ -37,14 +38,9 @@ class Goblin extends SimpleEnemy
         ],
       ),
     );
-  }
 
-  @override
-  void render(Canvas canvas) {
-    super.render(canvas);
-    this.drawDefaultLifeBar(
-      canvas,
-      borderRadius: BorderRadius.circular(5),
+    setupBarLife(
+      borderRadius: BorderRadius.circular(2),
       borderWidth: 2,
     );
   }
diff --git a/example/lib/shared/interface/bar_life_component.dart b/example/lib/shared/interface/bar_life_component.dart
index 6f2dba027..339ef803b 100644
--- a/example/lib/shared/interface/bar_life_component.dart
+++ b/example/lib/shared/interface/bar_life_component.dart
@@ -3,13 +3,13 @@ import 'package:flutter/material.dart';
 
 import 'bar_life_controller.dart';
 
-class BarLifeComponent extends InterfaceComponent
+class BarLifeInterface extends InterfaceComponent
     with UseStateController<BarLifeController> {
   final double padding = 20;
   final double widthBar = 90;
   final double strokeWidth = 12;
 
-  BarLifeComponent()
+  BarLifeInterface()
       : super(
           id: 1,
           position: Vector2(20, 20),
diff --git a/example/lib/shared/interface/bar_life_controller.dart b/example/lib/shared/interface/bar_life_controller.dart
index 846c0010d..59fb0ef05 100644
--- a/example/lib/shared/interface/bar_life_controller.dart
+++ b/example/lib/shared/interface/bar_life_controller.dart
@@ -13,7 +13,7 @@ import 'bar_life_component.dart';
 ///
 /// Rafaelbarbosatec
 /// on 25/02/22
-class BarLifeController extends StateController<BarLifeComponent> {
+class BarLifeController extends StateController<BarLifeInterface> {
   double _maxLife = 100;
   double _maxStamina = 100;
   get maxLife => _maxLife;
@@ -41,5 +41,5 @@ class BarLifeController extends StateController<BarLifeComponent> {
   }
 
   @override
-  void update(double dt, BarLifeComponent component) {}
+  void update(double dt, BarLifeInterface component) {}
 }
diff --git a/example/lib/shared/interface/knight_interface.dart b/example/lib/shared/interface/knight_interface.dart
index fa148d84a..51f8f2549 100644
--- a/example/lib/shared/interface/knight_interface.dart
+++ b/example/lib/shared/interface/knight_interface.dart
@@ -10,7 +10,7 @@ class KnightInterface extends GameInterface {
 
   @override
   void onMount() {
-    add(BarLifeComponent());
+    add(BarLifeInterface());
     add(InterfaceComponent(
       spriteUnselected: Sprite.load('blue_button1.png'),
       spriteSelected: Sprite.load('blue_button2.png'),
diff --git a/example/lib/shared/player/knight.dart b/example/lib/shared/player/knight.dart
index ee8b2a9b2..d3482a62d 100644
--- a/example/lib/shared/player/knight.dart
+++ b/example/lib/shared/player/knight.dart
@@ -129,9 +129,9 @@ class Knight extends SimplePlayer
   }
 
   @override
-  void render(Canvas c) {
-    super.render(c);
-    _drawDirectionAttack(c);
+  void renderBeforeTransformation(Canvas canvas) {
+    _drawDirectionAttack(canvas);
+    super.renderBeforeTransformation(canvas);
   }
 
   @override
diff --git a/example/pubspec.lock b/example/pubspec.lock
index 10e3d4cb1..dfdb62696 100644
--- a/example/pubspec.lock
+++ b/example/pubspec.lock
@@ -42,7 +42,7 @@ packages:
       path: ".."
       relative: true
     source: path
-    version: "2.10.9"
+    version: "2.10.10"
   boolean_selector:
     dependency: transitive
     description:
diff --git a/lib/bonfire.dart b/lib/bonfire.dart
index 8dd70649d..53c2ce5c1 100644
--- a/lib/bonfire.dart
+++ b/lib/bonfire.dart
@@ -32,6 +32,22 @@ export 'package:bonfire/map/base/tile_model.dart';
 export 'package:bonfire/map/base/tile_with_collision.dart';
 export 'package:bonfire/map/matrix_map/matrix_map_generator.dart';
 export 'package:bonfire/map/world_map.dart';
+export 'package:bonfire/mixins/acceleration.dart';
+export 'package:bonfire/mixins/attackable.dart';
+export 'package:bonfire/mixins/automatic_random_movement.dart';
+export 'package:bonfire/mixins/follower.dart';
+export 'package:bonfire/mixins/interval_checker.dart';
+export 'package:bonfire/mixins/move_to_position_along_the_path.dart';
+export 'package:bonfire/mixins/movement.dart';
+export 'package:bonfire/mixins/movement_by_joystick.dart';
+export 'package:bonfire/mixins/pushable.dart';
+export 'package:bonfire/mixins/sensor.dart';
+export 'package:bonfire/mixins/tile_recognizer.dart';
+export 'package:bonfire/mixins/use_assets_loader.dart';
+export 'package:bonfire/mixins/use_sprite.dart';
+export 'package:bonfire/mixins/use_sprite_animation.dart';
+export 'package:bonfire/mixins/vision.dart';
+export 'package:bonfire/mixins/use_barlife.dart';
 export 'package:bonfire/npc/ally/ally.dart';
 export 'package:bonfire/npc/enemy/enemy.dart';
 export 'package:bonfire/npc/npc.dart';
@@ -44,6 +60,7 @@ export 'package:bonfire/player/simple_player.dart';
 export 'package:bonfire/scene_builder/scene_builder.dart';
 export 'package:bonfire/state_manager/state_manager.dart';
 export 'package:bonfire/tiled/map_world_by_tiled.dart';
+export 'package:bonfire/util/barlife_component.dart';
 export 'package:bonfire/util/bonfire_game_ref.dart';
 export 'package:bonfire/util/bonfire_util.dart';
 export 'package:bonfire/util/direction.dart';
@@ -54,21 +71,6 @@ export 'package:bonfire/util/follower_widget.dart';
 export 'package:bonfire/util/functions.dart';
 export 'package:bonfire/util/game_controller.dart';
 export 'package:bonfire/util/interval_tick.dart';
-export 'package:bonfire/mixins/acceleration.dart';
-export 'package:bonfire/mixins/attackable.dart';
-export 'package:bonfire/mixins/automatic_random_movement.dart';
-export 'package:bonfire/mixins/follower.dart';
-export 'package:bonfire/mixins/interval_checker.dart';
-export 'package:bonfire/mixins/move_to_position_along_the_path.dart';
-export 'package:bonfire/mixins/movement.dart';
-export 'package:bonfire/mixins/movement_by_joystick.dart';
-export 'package:bonfire/mixins/pushable.dart';
-export 'package:bonfire/mixins/sensor.dart';
-export 'package:bonfire/mixins/tile_recognizer.dart';
-export 'package:bonfire/mixins/use_assets_loader.dart';
-export 'package:bonfire/mixins/use_sprite.dart';
-export 'package:bonfire/mixins/use_sprite_animation.dart';
-export 'package:bonfire/mixins/vision.dart';
 export 'package:bonfire/util/priority_layer.dart';
 export 'package:bonfire/util/talk/say.dart';
 export 'package:bonfire/util/talk/talk_dialog.dart';
diff --git a/lib/map/base/tile_model.dart b/lib/map/base/tile_model.dart
index f542f7740..5ca9e07b0 100644
--- a/lib/map/base/tile_model.dart
+++ b/lib/map/base/tile_model.dart
@@ -147,8 +147,8 @@ class TileModel {
           color: color,
         );
         tile.angle = angle;
-        tile.isFlipHorizontal = isFlipHorizontal;
-        tile.isFlipVertical = isFlipVertical;
+        tile.isFlipHorizontally = isFlipHorizontal;
+        tile.isFlipVertically = isFlipVertical;
 
         tile.gameRef = gameRef;
         tile.id = id;
@@ -166,8 +166,8 @@ class TileModel {
           color: color,
         );
         tile.angle = angle;
-        tile.isFlipHorizontal = isFlipHorizontal;
-        tile.isFlipVertical = isFlipVertical;
+        tile.isFlipHorizontally = isFlipHorizontal;
+        tile.isFlipVertically = isFlipVertical;
 
         tile.gameRef = gameRef;
         tile.id = id;
@@ -189,8 +189,8 @@ class TileModel {
           properties: properties,
         );
         tile.angle = angle;
-        tile.isFlipHorizontal = isFlipHorizontal;
-        tile.isFlipVertical = isFlipVertical;
+        tile.isFlipHorizontally = isFlipHorizontal;
+        tile.isFlipVertically = isFlipVertical;
 
         tile.gameRef = gameRef;
         tile.id = id;
@@ -210,8 +210,8 @@ class TileModel {
           properties: properties,
         );
         tile.angle = angle;
-        tile.isFlipHorizontal = isFlipHorizontal;
-        tile.isFlipVertical = isFlipVertical;
+        tile.isFlipHorizontally = isFlipHorizontal;
+        tile.isFlipVertically = isFlipVertical;
 
         tile.gameRef = gameRef;
         tile.id = id;
diff --git a/lib/mixins/direction_animation.dart b/lib/mixins/direction_animation.dart
index 967dd797e..6672223b9 100644
--- a/lib/mixins/direction_animation.dart
+++ b/lib/mixins/direction_animation.dart
@@ -16,7 +16,11 @@ mixin DirectionAnimation on Movement {
 
   @override
   void update(double dt) {
-    animation?.update(dt, position, size);
+    if (isVisible) {
+      animation?.update(dt, position, size);
+      isFlipHorizontally = animation?.isFlipHorizontally ?? false;
+      isFlipVertically = animation?.isFlipVertically ?? false;
+    }
     super.update(dt);
   }
 
diff --git a/lib/mixins/follower.dart b/lib/mixins/follower.dart
index 5e296358b..342e08683 100644
--- a/lib/mixins/follower.dart
+++ b/lib/mixins/follower.dart
@@ -51,4 +51,7 @@ mixin Follower on GameComponent {
       followerTarget = parent as GameComponent;
     }
   }
+
+  @override
+  int get priority => followerTarget?.priority ?? super.priority;
 }
diff --git a/lib/mixins/move_to_position_along_the_path.dart b/lib/mixins/move_to_position_along_the_path.dart
index 3dfd505d0..f5f692983 100644
--- a/lib/mixins/move_to_position_along_the_path.dart
+++ b/lib/mixins/move_to_position_along_the_path.dart
@@ -89,9 +89,9 @@ mixin MoveToPositionAlongThePath on Movement {
   }
 
   @override
-  void preRenderBeforeTransformation(Canvas canvas) {
+  void renderBeforeTransformation(Canvas canvas) {
     _drawBarrries(canvas);
-    super.preRenderBeforeTransformation(canvas);
+    super.renderBeforeTransformation(canvas);
   }
 
   void stopMoveAlongThePath() {
diff --git a/lib/mixins/paint_transformer.dart b/lib/mixins/paint_transformer.dart
index bd4e617d5..e87805a4f 100644
--- a/lib/mixins/paint_transformer.dart
+++ b/lib/mixins/paint_transformer.dart
@@ -1,64 +1,89 @@
 import 'package:bonfire/bonfire.dart';
+import 'package:flame/game.dart';
 import 'package:flutter/rendering.dart';
 
 mixin RenderTransformer on PositionComponent {
+  static final Vector2 _initialScale = Vector2.all(1);
   // /// Rotation angle (in radians) of the component. The component will be
   // /// rotated around its anchor point in the clockwise direction if the
   // /// angle is positive, or counterclockwise if the angle is negative.
   @override
   double angle = 0;
 
+  Vector2 _scale = _initialScale;
+
+  @override
+  NotifyingVector2 get scale => NotifyingVector2.copy(_scale);
+
+  @override
+  set scale(Vector2 scale) => _scale = scale;
+
   /// Use to do vertical flip in de render.
-  bool isFlipVertical = false;
+  bool isFlipVertically = false;
 
   /// Use to do horizontal flip in de render.
-  bool isFlipHorizontal = false;
+  bool isFlipHorizontally = false;
+
+  @override
+  void flipHorizontally() {
+    isFlipHorizontally = !isFlipHorizontally;
+    super.flipHorizontally();
+  }
 
-  bool get _needTransform => isFlipHorizontal || isFlipVertical || angle != 0;
+  @override
+  void flipVertically() {
+    isFlipVertically = !isFlipVertically;
+    super.flipVertically();
+  }
 
-  void _applyFlipAndRotation(Canvas canvas) {
-    canvas.translate(center.x, center.y);
-    if (angle != 0) {
-      canvas.rotate(angle);
-    }
-    if (isFlipHorizontal || isFlipVertical) {
-      canvas.scale(isFlipHorizontal ? -1 : 1, isFlipVertical ? -1 : 1);
-    }
-    canvas.translate(-center.x, -center.y);
+  @override
+  void flipHorizontallyAroundCenter() {
+    flipHorizontally();
   }
 
+  @override
+  void flipVerticallyAroundCenter() {
+    flipVertically();
+  }
+
+  bool get _needCenterTranslate =>
+      isFlipHorizontally ||
+      isFlipVertically ||
+      angle != 0 ||
+      scale != _initialScale;
+
   @override
   void renderTree(Canvas canvas) {
-    if (_needTransform) {
-      preRenderBeforeTransformation(canvas);
-      canvas.save();
-      _applyFlipAndRotation(canvas);
-      render(canvas);
-      for (var c in children) {
-        c.renderTree(canvas);
-      }
-
-      // Any debug rendering should be rendered on top of everything
-      if (debugMode) {
-        renderDebugMode(canvas);
-      }
-
-      canvas.restore();
-    } else {
-      preRenderBeforeTransformation(canvas);
-      render(canvas);
-      for (var c in children) {
-        c.renderTree(canvas);
-      }
-
-      // Any debug rendering should be rendered on top of everything
-      if (debugMode) {
-        renderDebugMode(canvas);
-      }
+    _applyTransform(canvas);
+  }
+
+  void _applyTransform(Canvas canvas) {
+    renderBeforeTransformation(canvas);
+    canvas.save();
+    // canvas.translate(position.x, position.y);
+
+    if (_needCenterTranslate) {
+      canvas.translate(center.x, center.y);
+      canvas.rotate(angle);
+      canvas.scale(isFlipHorizontally ? -scale.x : scale.x,
+          isFlipVertically ? -scale.y : scale.y);
+      canvas.translate(-center.x, -center.y);
+    }
+
+    render(canvas);
+    for (var c in children) {
+      c.renderTree(canvas);
     }
+
+    // Any debug rendering should be rendered on top of everything
+    if (debugMode) {
+      renderDebugMode(canvas);
+    }
+
+    canvas.restore();
   }
 
-  void preRenderBeforeTransformation(Canvas canvas) {}
+  void renderBeforeTransformation(Canvas canvas) {}
 
   @override
   void renderDebugMode(Canvas canvas) {
diff --git a/lib/mixins/use_barlife.dart b/lib/mixins/use_barlife.dart
new file mode 100644
index 000000000..839617643
--- /dev/null
+++ b/lib/mixins/use_barlife.dart
@@ -0,0 +1,121 @@
+import 'package:bonfire/bonfire.dart';
+import 'package:flutter/material.dart';
+
+mixin UseBarLife on Attackable {
+  BarLifeComponent? barLife;
+  Vector2? _barLifeSize;
+  Color _backgroundColor = const Color(0xFF000000);
+  Color _borderColor = const Color(0xFFFFFFFF);
+  double _borderWidth = 2;
+  double _margin = 4;
+  List<Color>? _colors;
+  Vector2? _offset;
+  Vector2? _textOffset;
+  BorderRadius _borderRadius = BorderRadius.zero;
+  BarLifePorition _barLifePorition = BarLifePorition.bottom;
+  TextStyle? _textStyle;
+  bool _showLifeText = true;
+  ValueGeneratorComponent? _valueGenerator;
+  BarLifeTextBuilder? _barLifetextBuilder;
+
+  void setupBarLife({
+    Vector2? size,
+    Color? backgroundColor,
+    Color? borderColor,
+    double borderWidth = 2,
+    double margin = 4,
+    List<Color>? colors,
+    BorderRadius? borderRadius,
+    BarLifePorition barLifePorition = BarLifePorition.top,
+    Vector2? offset,
+    Vector2? textOffset,
+    TextStyle? textStyle,
+    bool showLifeText = true,
+    BarLifeTextBuilder? barLifetextBuilder,
+  }) {
+    _barLifeSize = size;
+    _backgroundColor = backgroundColor ?? _backgroundColor;
+    _borderColor = borderColor ?? _borderColor;
+    _borderWidth = borderWidth;
+    _colors = colors;
+    _borderRadius = borderRadius ?? _borderRadius;
+    _barLifePorition = barLifePorition;
+    _margin = margin;
+    _offset = offset;
+    _textStyle = textStyle;
+    _showLifeText = showLifeText;
+    _textOffset = textOffset;
+    _barLifetextBuilder = barLifetextBuilder;
+  }
+
+  @override
+  void onMount() {
+    gameRef.add(
+      barLife = BarLifeComponent(
+        target: this,
+        size: _barLifeSize ?? Vector2(width, 6),
+        backgroundColor: _backgroundColor,
+        borderColor: _borderColor,
+        borderWidth: _borderWidth,
+        colors: _colors,
+        life: life,
+        maxLife: maxLife,
+        borderRadius: _borderRadius,
+        drawPosition: _barLifePorition,
+        margin: _margin,
+        offset: _offset,
+        textStyle: _textStyle,
+        showLifeText: _showLifeText,
+        textOffset: _textOffset,
+        barLifetextBuilder: _barLifetextBuilder,
+      ),
+    );
+    super.onMount();
+  }
+
+  @override
+  void initialLife(double life) {
+    barLife?.updateLife(life);
+    barLife?.updatemaxLife(life);
+    super.initialLife(life);
+  }
+
+  @override
+  void addLife(double life) {
+    super.addLife(life);
+    _animateBar();
+  }
+
+  @override
+  void removeLife(double life) {
+    super.removeLife(life);
+    _animateBar();
+  }
+
+  @override
+  void updateLife(double life, {bool verifyDieOrRevive = true}) {
+    super.updateLife(life, verifyDieOrRevive: verifyDieOrRevive);
+    barLife?.updateLife(super.life);
+  }
+
+  @override
+  void onRemove() {
+    barLife?.removeFromParent();
+    super.onRemove();
+  }
+
+  void _animateBar() {
+    if (hasGameRef) {
+      _valueGenerator?.reset();
+      _valueGenerator?.removeFromParent();
+      _valueGenerator = generateValues(
+        const Duration(milliseconds: 300),
+        begin: barLife?.life ?? 0,
+        end: super.life,
+        onChange: (value) {
+          barLife?.updateLife(value);
+        },
+      )..start();
+    }
+  }
+}
diff --git a/lib/mixins/use_sprite_animation.dart b/lib/mixins/use_sprite_animation.dart
index 2a815472f..c4778ea59 100644
--- a/lib/mixins/use_sprite_animation.dart
+++ b/lib/mixins/use_sprite_animation.dart
@@ -53,8 +53,8 @@ mixin UseSpriteAnimation on GameComponent {
     if (isVisible && _playing) {
       _fastAnimation?.position = position + _fastAnimOffset;
       _fastAnimation?.paint = paint;
-      _fastAnimation?.isFlipHorizontal = isFlipHorizontal;
-      _fastAnimation?.isFlipVertical = isFlipVertical;
+      _fastAnimation?.isFlipHorizontally = isFlipHorizontally;
+      _fastAnimation?.isFlipVertically = isFlipVertically;
       _fastAnimation?.update(dt);
       animation?.update(dt);
     }
diff --git a/lib/tiled/builder/tiled_world_builder.dart b/lib/tiled/builder/tiled_world_builder.dart
index 2fb65ec2e..043cd8e13 100644
--- a/lib/tiled/builder/tiled_world_builder.dart
+++ b/lib/tiled/builder/tiled_world_builder.dart
@@ -210,8 +210,8 @@ class TiledWorldBuilder {
           aboveComponents: above,
         )
           ..angle = data.angle
-          ..isFlipHorizontal = data.isFlipHorizontal
-          ..isFlipVertical = data.isFlipVertical
+          ..isFlipHorizontally = data.isFlipHorizontal
+          ..isFlipVertically = data.isFlipVertical
           ..properties = data.properties,
       );
     } else {
@@ -228,8 +228,8 @@ class TiledWorldBuilder {
             aboveComponents: above,
           )
             ..angle = data.angle
-            ..isFlipHorizontal = data.isFlipHorizontal
-            ..isFlipVertical = data.isFlipVertical
+            ..isFlipHorizontally = data.isFlipHorizontal
+            ..isFlipVertically = data.isFlipVertical
             ..properties = data.properties,
         );
       }
diff --git a/lib/util/barlife_component.dart b/lib/util/barlife_component.dart
new file mode 100644
index 000000000..9c76588d2
--- /dev/null
+++ b/lib/util/barlife_component.dart
@@ -0,0 +1,186 @@
+import 'package:bonfire/bonfire.dart';
+import 'package:flutter/material.dart';
+
+enum BarLifePorition { top, bottom }
+
+typedef BarLifeTextBuilder = String Function(double life, double maxLife);
+
+class BarLifeComponent extends GameComponent with Follower {
+  Paint _barLiveBgPaint = Paint();
+  final Paint _barLivePaint = Paint()..style = PaintingStyle.fill;
+  Paint _barLiveBorderPaint = Paint();
+
+  final BarLifePorition drawPosition;
+  final double margin;
+  final List<Color>? colors;
+  final Color backgroundColor;
+  final BorderRadius borderRadius;
+  final double borderWidth;
+  final Color borderColor;
+  final bool showLifeText;
+  final TextStyle? textStyle;
+  final BarLifeTextBuilder? barLifetextBuilder;
+  double _life = 100;
+  double _maxLife = 100;
+
+  double get life => _life;
+  bool show = true;
+
+  Vector2 _textSize = Vector2.zero();
+  Vector2 _textOffset = Vector2.zero();
+
+  TextPaint _textConfig = TextPaint();
+
+  BarLifeComponent({
+    required Vector2 size,
+    Attackable? target,
+    Vector2? offset,
+    Vector2? textOffset,
+    this.drawPosition = BarLifePorition.top,
+    this.margin = 4,
+    this.colors,
+    this.textStyle,
+    this.showLifeText = true,
+    this.backgroundColor = const Color(0xFF000000),
+    this.borderRadius = BorderRadius.zero,
+    this.borderWidth = 2,
+    this.borderColor = const Color(0xFFFFFFFF),
+    this.barLifetextBuilder,
+    double life = 100,
+    double maxLife = 100,
+  }) {
+    _life = life;
+    _maxLife = maxLife;
+    _textOffset = textOffset ?? _textOffset;
+    _barLiveBorderPaint = _barLiveBorderPaint
+      ..color = borderColor
+      ..strokeWidth = borderWidth
+      ..style = PaintingStyle.stroke;
+
+    _barLiveBgPaint = _barLiveBgPaint
+      ..color = backgroundColor
+      ..style = PaintingStyle.fill;
+
+    this.size = size;
+
+    _textConfig = TextPaint(
+      style: textStyle?.copyWith(fontSize: size.y * 0.8) ??
+          TextStyle(fontSize: size.y * 0.8),
+    );
+
+    _textSize = _textConfig.measureText(_getLifeText());
+
+    setupFollower(
+      target: target,
+      offset: offset,
+    );
+  }
+
+  @override
+  void render(Canvas canvas) {
+    if (followerTarget == null || !show) {
+      return;
+    }
+    double yPosition = (y - height) - margin;
+
+    double xPosition = (followerTarget!.width - width) / 2 + x;
+
+    if (drawPosition == BarLifePorition.bottom) {
+      yPosition = followerTarget!.bottom + margin;
+    }
+
+    yPosition = yPosition;
+
+    double currentBarLife = (_life * width) / _maxLife;
+
+    if (borderWidth > 0) {
+      final RRect borderRect = borderRadius.toRRect(Rect.fromLTWH(
+        xPosition,
+        yPosition,
+        width,
+        height,
+      ));
+
+      canvas.drawRRect(
+        borderRect,
+        _barLiveBorderPaint,
+      );
+    }
+
+    final RRect bgRect = borderRadius.toRRect(Rect.fromLTWH(
+      xPosition,
+      yPosition,
+      width,
+      height,
+    ));
+
+    canvas.drawRRect(
+      bgRect,
+      _barLiveBgPaint,
+    );
+
+    final RRect lifeRect = borderRadius.toRRect(Rect.fromLTWH(
+      xPosition,
+      yPosition,
+      currentBarLife,
+      height,
+    ));
+
+    canvas.drawRRect(
+      lifeRect,
+      _barLivePaint
+        ..color = _getColorLife(
+          currentBarLife,
+          width,
+          colors ??
+              [
+                const Color(0xFFF44336),
+                const Color(0xFFFFEB3B),
+                const Color(0xFF4CAF50),
+              ],
+        ),
+    );
+
+    if (showLifeText) {
+      double xText = _textOffset.x + xPosition + (width - _textSize.x) / 2;
+      double yText = _textOffset.y + yPosition + (height - _textSize.y) / 2;
+      _textConfig.render(
+        canvas,
+        _getLifeText(),
+        Vector2(xText, yText),
+      );
+    }
+
+    super.render(canvas);
+  }
+
+  Color _getColorLife(
+    double currentBarLife,
+    double maxWidth,
+    List<Color> colors,
+  ) {
+    final parts = maxWidth / colors.length;
+    int index = (currentBarLife / parts).ceil() - 1;
+    if (index < 0) {
+      return colors[0];
+    }
+    if (index > colors.length - 1) {
+      return colors.last;
+    }
+    return colors[index];
+  }
+
+  void updateLife(double life) {
+    _life = life;
+    _textSize = _textConfig.measureText(_getLifeText());
+  }
+
+  void updatemaxLife(double life) {
+    _maxLife = life;
+  }
+
+  String _getLifeText() {
+    return barLifetextBuilder?.call(_life, _maxLife) ??
+        '${_life.toInt()}/${_maxLife.toInt()}';
+  }
+}
diff --git a/lib/util/direction_animations/simple_direction_animation.dart b/lib/util/direction_animations/simple_direction_animation.dart
index e059e1eb4..994c644ba 100644
--- a/lib/util/direction_animations/simple_direction_animation.dart
+++ b/lib/util/direction_animations/simple_direction_animation.dart
@@ -31,19 +31,19 @@ class SimpleDirectionAnimation {
   SpriteAnimation? _current;
   SimpleAnimationEnum? _currentType;
   AnimatedObjectOnce? _fastAnimation;
+  Vector2 _fastAnimationOffset = Vector2.zero();
   Vector2 position = Vector2.zero();
   Vector2 size = Vector2.zero();
-  Vector2 _fastAnimationOffset = Vector2.zero();
   final Vector2 _zero = Vector2.zero();
 
   bool runToTheEndFastAnimation = false;
 
-  bool _flipX = false;
-  bool _flipY = false;
-
   bool enabledFlipX;
   bool enabledFlipY;
 
+  bool isFlipHorizontally = false;
+  bool isFlipVertically = false;
+
   BonfireGameInterface? gameRef;
 
   bool eightDirection;
@@ -107,8 +107,8 @@ class SimpleDirectionAnimation {
   /// Method used to play specific default animation
   void play(SimpleAnimationEnum animation) {
     if (_currentType == animation) return;
-    _flipX = false;
-    _flipY = false;
+    isFlipHorizontally = false;
+    isFlipVertically = false;
 
     _currentType = animation;
     if (!runToTheEndFastAnimation) {
@@ -128,7 +128,7 @@ class SimpleDirectionAnimation {
         if (idleDown != null) {
           _current = idleDown;
         } else if (enabledFlipY && idleUp != null) {
-          _flipY = true;
+          isFlipVertically = true;
           _current = idleUp;
         }
         break;
@@ -137,7 +137,7 @@ class SimpleDirectionAnimation {
           _current = idleUpLeft;
         } else if (idleUpRight != null) {
           _current = idleUpRight;
-          _flipX = true;
+          isFlipHorizontally = true;
         } else {
           _idleLeft();
         }
@@ -154,7 +154,7 @@ class SimpleDirectionAnimation {
           _current = idleDownLeft;
         } else if (idleDownRight != null) {
           _current = idleDownRight;
-          _flipX = true;
+          isFlipHorizontally = true;
         } else {
           _idleLeft();
         }
@@ -202,7 +202,7 @@ class SimpleDirectionAnimation {
               if (runDown != null) {
                 _current = runDown;
               } else if (enabledFlipY && runUp != null) {
-                _flipY = true;
+                isFlipVertically = true;
                 _current = runUp;
               }
             }
@@ -210,7 +210,7 @@ class SimpleDirectionAnimation {
             if (runDown != null) {
               _current = runDown;
             } else if (enabledFlipY && runUp != null) {
-              _flipY = true;
+              isFlipVertically = true;
               _current = runUp;
             }
           }
@@ -219,7 +219,7 @@ class SimpleDirectionAnimation {
           if (runDown != null) {
             _current = runDown;
           } else if (enabledFlipY && runUp != null) {
-            _flipY = true;
+            isFlipVertically = true;
             _current = runUp;
           }
         }
@@ -233,7 +233,7 @@ class SimpleDirectionAnimation {
           changeLastAnimation(SimpleAnimationEnum.runUpLeft);
         } else if (runUpRight != null) {
           _current = runUpRight;
-          _flipX = true;
+          isFlipHorizontally = true;
           changeLastAnimation(SimpleAnimationEnum.runUpLeft);
         } else {
           _runLeft();
@@ -253,7 +253,7 @@ class SimpleDirectionAnimation {
           changeLastAnimation(SimpleAnimationEnum.runDownLeft);
         } else if (runDownRight != null) {
           _current = runDownRight;
-          _flipX = true;
+          isFlipHorizontally = true;
           changeLastAnimation(SimpleAnimationEnum.runDownLeft);
         } else {
           _runLeft();
@@ -273,13 +273,13 @@ class SimpleDirectionAnimation {
   }
 
   /// Method used to play specific animation registred in `others`
-  void playOther(String key, {bool flipX = false, bool flipY = false}) {
+  void playOther(String key, {bool? flipX, bool? flipY}) {
     if (others.containsKey(key) == true) {
       if (!runToTheEndFastAnimation) {
         _fastAnimation = null;
       }
-      _flipX = flipX;
-      _flipY = flipY;
+      isFlipHorizontally = flipX ?? (isFlipHorizontally);
+      isFlipVertically = flipY ?? (isFlipVertically);
       _current = others[key];
       _currentType = SimpleAnimationEnum.custom;
     }
@@ -293,11 +293,14 @@ class SimpleDirectionAnimation {
     bool runToTheEnd = false,
     bool flipX = false,
     bool flipY = false,
+    bool useCompFlip = false,
     Vector2? size,
     Vector2? offset,
   }) async {
     _fastAnimationOffset = offset ?? Vector2.zero();
     runToTheEndFastAnimation = runToTheEnd;
+    bool lastFlipX = isFlipHorizontally;
+    bool lastFlipY = isFlipVertically;
     final anim = AnimatedObjectOnce(
       position: position + _fastAnimationOffset,
       size: size ?? this.size,
@@ -306,10 +309,17 @@ class SimpleDirectionAnimation {
       onFinish: () {
         onFinish?.call();
         _fastAnimation = null;
+        if (!useCompFlip) {
+          isFlipHorizontally = lastFlipX;
+          isFlipVertically = lastFlipY;
+        }
       },
     );
-    anim.isFlipVertical = flipY;
-    anim.isFlipHorizontal = flipX;
+    if (!useCompFlip) {
+      isFlipVertically = flipY;
+      isFlipHorizontally = flipX;
+    }
+
     if (gameRef != null) {
       anim.gameRef = gameRef!;
     }
@@ -329,26 +339,12 @@ class SimpleDirectionAnimation {
     if (_fastAnimation != null) {
       _fastAnimation?.render(canvas);
     } else {
-      if (_flipX || _flipY) {
-        canvas.save();
-        Vector2 center = Vector2(
-          position.x + size.x / 2,
-          position.y + size.y / 2,
-        );
-        canvas.translate(center.x, center.y);
-        canvas.scale(_flipX ? -1 : 1, _flipY ? -1 : 1);
-        canvas.translate(-center.x, -center.y);
-      }
       _current?.getSprite().render(
             canvas,
             position: position,
             size: size,
             overridePaint: paint,
           );
-
-      if (_flipX || _flipY) {
-        canvas.restore();
-      }
     }
   }
 
@@ -357,14 +353,14 @@ class SimpleDirectionAnimation {
     Vector2 position,
     Vector2 size,
   ) {
+    this.position = position;
+    this.size = size;
     if (_playing) {
       _fastAnimation?.position = position;
       if (_fastAnimationOffset != _zero) {
         _fastAnimation?.position += _fastAnimationOffset;
       }
       _fastAnimation?.update(dt);
-      this.position = position;
-      this.size = size;
       _current?.update(dt);
     }
   }
@@ -398,7 +394,7 @@ class SimpleDirectionAnimation {
           if (runLeft != null) {
             _current = runLeft;
           } else if (enabledFlipX) {
-            _flipX = true;
+            isFlipHorizontally = true;
             _current = runRight;
           }
         }
@@ -406,7 +402,7 @@ class SimpleDirectionAnimation {
         if (runLeft != null) {
           _current = runLeft;
         } else if (enabledFlipX) {
-          _flipX = true;
+          isFlipHorizontally = true;
           _current = runRight;
         }
       }
@@ -415,7 +411,7 @@ class SimpleDirectionAnimation {
       if (runLeft != null) {
         _current = runLeft;
       } else if (enabledFlipX) {
-        _flipX = true;
+        isFlipHorizontally = true;
         _current = runRight;
       }
     }
@@ -445,7 +441,7 @@ class SimpleDirectionAnimation {
     if (idleLeft != null) {
       _current = idleLeft;
     } else if (enabledFlipX) {
-      _flipX = true;
+      isFlipHorizontally = true;
       _current = idleRight;
     }
   }
diff --git a/lib/util/extensions/attackable_extensions.dart b/lib/util/extensions/attackable_extensions.dart
index f19c93b46..5e1152360 100644
--- a/lib/util/extensions/attackable_extensions.dart
+++ b/lib/util/extensions/attackable_extensions.dart
@@ -7,6 +7,7 @@ Paint _barLiveBorderPaint = Paint();
 
 extension AttackableExtensions on Attackable {
   /// Draw simple life bar
+  @Deprecated('Please use UseBarLife mixin')
   void drawDefaultLifeBar(
     Canvas canvas, {
     Offset align = Offset.zero,
