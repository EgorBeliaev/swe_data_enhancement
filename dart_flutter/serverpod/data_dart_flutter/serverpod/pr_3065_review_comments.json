[
    {
        "title": "fix: Improve request body parsing."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "## Summary of Changes\r\n- **Added** a faster and more efficient solution for byte data handling.\r\n- **Improved** the handling of request size with a correct and optimized approach.\r\n\r\n---\r\n\r\n## Pre-launch Checklist\r\n- [ ] Verify that all unit tests pass successfully.\r\n- [ ] Ensure that request size validation functions as expected.\r\n- [ ] Confirm that performance benchmarks show improvement with the updated implementation.\r\n\r\n---\r\n\r\n## Original Issue\r\nThe original implementation used a `List<int>` (`data`) to accumulate incoming byte segments. The `+=` operator creates a new list every time data is appended. This approach is inefficient for handling large amounts of data, leading to excessive memory allocations and unnecessary copying of existing data.\r\n\r\n---\r\n\r\n## Optimized Solution\r\nThe updated code replaces the list with a `BytesBuilder`, a utility specifically designed for efficient byte accumulation. This ensures a more memory- and performance-efficient implementation.\r\n\r\n---\r\n\r\n### Key Improvements\r\n1. **Efficient Byte Accumulation:**\r\n   - `BytesBuilder` dynamically grows its internal buffer, avoiding the need to create a new object each time data is appended.\r\n   - Reduces memory usage and improves performance significantly.\r\n\r\n2. **Avoiding Redundant Memory Allocation:**\r\n   - Previously, using `+=` created a new list and copied all existing data into it. `BytesBuilder` manages memory internally, preventing these redundant operations.\r\n\r\n3. **Efficient Data Conversion:**\r\n   - The `BytesBuilder.takeBytes()` method retrieves the final byte array without additional copying, enabling more efficient conversion to a UTF-8 string.\r\n\r\n4. **Preserving Size Check Logic:**\r\n   - The logic for checking the request size (`len > serverpod.config.maxRequestSize`) is retained.\r\n   - This ensures oversized requests are detected early and stopped before unnecessary data accumulation.\r\n\r\n---\r\n\r\n### Benefits of the Optimization\r\n- **Improved Performance:** \r\n  - `BytesBuilder` is designed for scenarios requiring dynamic byte accumulation, reducing time complexity and memory overhead.\r\n- **Cleaner Code:**\r\n  - The optimized implementation is easier to read and understand, as `BytesBuilder` is semantically appropriate for this use case.\r\n- **Scalability:** \r\n  - The solution is more suitable for handling larger data streams without performance degradation.\r\n\r\n---\r\n\r\nThis release improves the efficiency, maintainability, and scalability of handling HTTP request body data.\r\n"
    },
    {
        "author": {
            "login": "SandPod"
        },
        "body": "Thank you for the great writeup and implementation \ud83c\udf1f \r\n\r\nThis is a great contribution.\r\n\r\nCould you add a test that validates that the max request size message is propagated to the client? It is enough to validate this on an endpoint basis. A suggestion is to create a test where the `maxRequestSize` is set really low (1), and then make a normal RPC request to the server with some data.\r\n\r\nYou can take inspiration from this test to have both the server and client in the same test: https://github.com/serverpod/serverpod/blob/main/tests/serverpod_test_server/test_integration/logging/override_logging_test.dart\r\n\r\nThen you could configure the server by passing in a configuration to the `IntegrationTestServer.create()` method.\r\n\r\nNo test is needed for the web_server as we are about to update that implementation soon."
    },
    {
        "author": {
            "login": "LeonidVeremchuk"
        },
        "body": ""
    },
    {
        "author": {
            "login": "SandPod"
        },
        "body": "Thank you for the added tests.\n\nI'll implement the last suggested changes here to get these in. \n\nI added the comments to highlight what will be modified."
    },
    {
        "author": {
            "login": "SandPod"
        },
        "body": "LGTM! \ud83d\udc4d \ud83d\ude80 \r\n\r\nThank you \ud83d\ude4f "
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "****CLA Assistant Lite bot**** All contributors have signed the CLA  \u270d\ufe0f \u2705"
    },
    {
        "author": {
            "login": "LeonidVeremchuk"
        },
        "body": "I have read the CLA Document and I hereby sign the CLA"
    },
    {
        "author": {
            "login": "LeonidVeremchuk"
        },
        "body": "# Update Summary\r\n\r\n## Changes and Fixes\r\n\r\n1. **Added a new `ResultRequestTooLarge` class**:\r\n   - Implemented a class to handle errors related to request body size exceeding the maximum limit.\r\n   - Provides detailed information about the maximum allowed size and the actual size of the request.\r\n\r\n2. **Enhanced Error Handling**:\r\n   - Improved handling for `ResultRequestTooLarge` exceptions.\r\n   - Clear and informative error messages are now sent to users when their request size exceeds the allowed limit.\r\n\r\n3. **Optimized `_readBody` Function**:\r\n   - Simplified logic for improved readability and performance.\r\n   - Resolved issues with redundant checks and stream reuse, ensuring more reliable behavior.\r\n\r\n4. **Added Comprehensive Tests**:\r\n   - Created tests to verify the system's behavior when the request size exceeds the configured limit.\r\n   - Tests validate both the returned HTTP status code and the error message sent to the user.\r\n\r\n## Benefits\r\n- Improved system stability.\r\n- Enhanced code readability and maintainability.\r\n- Better user experience with clear feedback on errors.\r\n\r\nIf you have any questions or suggestions, feel free to reach out.\r\n\r\nThank you! \ud83d\ude80\r\n"
    }
]