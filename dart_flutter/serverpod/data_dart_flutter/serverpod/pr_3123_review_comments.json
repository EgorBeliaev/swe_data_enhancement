[
    {
        "title": "fix: Add `moduleAlias` checks for accurate class resolution"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "###  Description:\r\nThis PR reviews all the places where class resolution is used. Added `moduleAlias` checks where needed to ensure correct behavior and left unchanged the places where the existing logic was already sufficient. Below is a breakdown of what was updated and what was not.\r\n\r\n### 1. **Inheritance Resolution**\r\n- **Unchanged**  \r\n  The existing code already works correctly by checking only the `className`. Since we dont allow inheritance across modules, no changes were needed.\r\nhttps://github.com/serverpod/serverpod/blob/0009d80b52417669e80dd0a728fc00dae409bcea/tools/serverpod_cli/lib/src/analyzer/models/entity_dependency_resolver.dart#L47\r\n\r\n\r\n### 2. **Enum Resolution**\r\n- **Modified**  \r\n  We added `moduleAlias` checks because enums can have the same `className` in different modules. Both `className` and `moduleAlias` are now used to uniquely identify enums.\r\n https://github.com/serverpod/serverpod/blob/8ba5561eef83cce6af96587a91f85f199ce3c414/tools/serverpod_cli/lib/src/analyzer/models/entity_dependency_resolver.dart#L96-L97\r\n\r\n\r\n### 3. **Object Relation Resolution**\r\n- **Modified**  \r\n  We added `moduleAlias` checks to ensure object relations are resolved correctly when there are classes with the same `className` in different modules.\r\n https://github.com/serverpod/serverpod/blob/8ba5561eef83cce6af96587a91f85f199ce3c414/tools/serverpod_cli/lib/src/analyzer/models/entity_dependency_resolver.dart#L116-L117\r\n\r\n\r\n### 4. **List Relation Resolution**\r\n- **Unchanged**  \r\n  We dont allow list relations on modules. We already have this check:\r\nhttps://github.com/serverpod/serverpod/blob/e1fae905d1fdba2d72e1920da20100baa23b96a3/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart#L1057-L1065\r\nhttps://github.com/serverpod/serverpod/blob/0009d80b52417669e80dd0a728fc00dae409bcea/tools/serverpod_cli/lib/src/analyzer/models/entity_dependency_resolver.dart#L114\r\n\r\n\r\n### 5. **Extra Class Restrictions**\r\n- **Unchanged**  \r\n  This code only checks if a `className` exists in `extraClasses`. Since no module ambiguity exists here, it didn\u2019t need any changes.\r\nhttps://github.com/serverpod/serverpod/blob/0009d80b52417669e80dd0a728fc00dae409bcea/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart#L172\r\n\r\n\r\n### 6. **Custom Type Check**\r\n- **Unchanged**  \r\n  This function only checks if a type is in `extraClasses` by `className`. The existing logic was already correct, so no changes were made.\r\nhttps://github.com/serverpod/serverpod/blob/0009d80b52417669e80dd0a728fc00dae409bcea/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart#L172\r\n\r\n\r\n### 7. **Type Parsing for Extras**\r\n- **Unchanged**  \r\n  This part determines if a `className` exists in `extraClasses`. No changes were needed because the logic is simple and sufficient.\r\nhttps://github.com/serverpod/serverpod/blob/0009d80b52417669e80dd0a728fc00dae409bcea/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart#L1415\r\n\r\n\r\n### Closes: #3019\r\n\r\n## Pre-launch Checklist\r\n\r\n- [x] I read the [Contribute](https://docs.serverpod.dev/contribute) page and followed the process outlined there for submitting PRs.\r\n- [x] This update contains only one single feature or bug fix and nothing else. (If you are submitting multiple fixes, please make multiple PRs.)\r\n- [x] I read and followed the [Dart Style Guide](https://dart.dev/guides/language/effective-dart/style) and formatted the code with [dart format](https://dart.dev/tools/dart-format).\r\n- [x] I listed at least one issue that this PR fixes in the description above.\r\n- [ ] I updated/added relevant documentation (doc comments with `///`), and made sure that the documentation follows the same style as other Serverpod documentation. I checked spelling and grammar.\r\n- [x] I added new tests to check the change I am making.\r\n- [x] All existing and new tests are passing.\r\n- [x] Any breaking changes are documented below.\r\n\r\nIf you need help, consider asking for advice on the [discussion board](https://github.com/serverpod/serverpod/discussions).\r\n\r\n## Breaking changes\r\n\r\n_If you have done any breaking changes, make sure to outline them here, so that they can be included in the notes for the next release._"
    },
    {
        "author": {
            "login": "SandPod"
        },
        "body": "Implementation and tests are on point \ud83c\udf1f \r\n\r\nSome suggestions for a different test scenario that I think most of our users have encountered. And to ensure that order is integrated into the test since that is what made the bug surface in the first place."
    },
    {
        "author": {
            "login": "SandPod"
        },
        "body": "LGTM! \ud83c\udf89 \r\n\r\nThanks for the fix \ud83d\ude4f "
    }
]