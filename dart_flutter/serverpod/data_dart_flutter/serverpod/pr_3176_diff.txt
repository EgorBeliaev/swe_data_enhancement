diff --git a/packages/serverpod/lib/src/cache/local_cache.dart b/packages/serverpod/lib/src/cache/local_cache.dart
index c1c7e7f7d3..91194243ff 100644
--- a/packages/serverpod/lib/src/cache/local_cache.dart
+++ b/packages/serverpod/lib/src/cache/local_cache.dart
@@ -1,3 +1,5 @@
+import 'dart:async';
+
 import 'package:collection/collection.dart';
 import 'package:serverpod/src/cache/cache_miss_handler.dart';
 import 'package:serverpod_serialization/serverpod_serialization.dart';
@@ -11,6 +13,10 @@ class LocalCache extends Cache {
   final Map<String, _CacheEntry> _entries = <String, _CacheEntry>{};
   final Map<String, Set<String>> _groups = <String, Set<String>>{};
 
+  /// New cache values currently being computed by a [CacheMissHandler]
+  // The future values in here must not be resolved (at which state the value should just be in the cache), but just pending
+  final _inProgressCacheValues = <String, Future<SerializableModel?>>{};
+
   /// Creates a new [LocalCache].
   LocalCache(super.maxEntries, super.serializationManager);
 
@@ -70,7 +76,7 @@ class LocalCache extends Cache {
 
     if (entry == null) return false;
 
-    if ((entry.expirationTime?.compareTo(DateTime.now()) ?? 0) < 0) {
+    if (entry.isExpired) {
       await invalidateKey(key);
       return false;
     }
@@ -81,24 +87,46 @@ class LocalCache extends Cache {
   @override
   Future<T?> get<T extends SerializableModel>(
     String key, [
+    /// Handler to generate a new value in case there is no active value in the cache
+    ///
+    /// In case a value computation from a previous [get] call is already running, the caller will receive the value from
+    /// that call and the `cacheMissHandler` from this call will not be invoked.
     CacheMissHandler<T>? cacheMissHandler,
   ]) async {
     var entry = _entries[key];
 
-    if (entry != null &&
-        (entry.expirationTime?.compareTo(DateTime.now()) ?? 0) < 0) {
-      await invalidateKey(key);
-      return null;
+    if (entry != null) {
+      if (entry.isExpired) {
+        await invalidateKey(key);
+      } else {
+        return serializationManager.decode<T>(entry.serializedObject);
+      }
     }
 
-    if (entry != null) {
-      return serializationManager.decode<T>(entry.serializedObject);
+    var pendingEntry = _inProgressCacheValues[key];
+    if (pendingEntry != null) {
+      return (await pendingEntry) as T;
     }
 
     if (cacheMissHandler == null) return null;
 
-    var value = await cacheMissHandler.valueProvider();
-    if (value == null) return null;
+    T? value;
+    var completer = Completer<T?>();
+    try {
+      _inProgressCacheValues[key] = completer.future;
+
+      value = await cacheMissHandler.valueProvider();
+
+      completer.complete(value);
+
+      if (value == null) return null;
+    } catch (e, stackTrace) {
+      completer.completeError(e, stackTrace);
+
+      rethrow;
+    } finally {
+      unawaited(_inProgressCacheValues.remove(key));
+    }
 
     await put(
       key,
@@ -193,6 +221,11 @@ class _CacheEntry {
     required this.serializedObject,
     this.lifetime,
   }) : creationTime = DateTime.now();
+
+  bool get isExpired {
+    var expirationTime = this.expirationTime;
+    return expirationTime != null && expirationTime.isBefore(DateTime.now());
+  }
 }
 
 class _KeyListKey {
diff --git a/tests/serverpod_test_server/test/local_cache_test.dart b/tests/serverpod_test_server/test/local_cache_test.dart
index 5b9a5f12a7..3f520e89c7 100644
--- a/tests/serverpod_test_server/test/local_cache_test.dart
+++ b/tests/serverpod_test_server/test/local_cache_test.dart
@@ -1,3 +1,5 @@
+import 'dart:async';
+
 import 'package:serverpod/serverpod.dart';
 import 'package:serverpod/src/cache/local_cache.dart';
 import 'package:serverpod_test_client/serverpod_test_client.dart';
@@ -6,55 +8,94 @@ import 'package:test/test.dart';
 const cacheMaxSize = 10;
 
 void main() {
-  var cache = LocalCache(cacheMaxSize, Protocol());
+  late LocalCache cache;
+  setUp(() {
+    cache = LocalCache(cacheMaxSize, Protocol());
+  });
 
   tearDown(() async => await cache.clear());
 
-  test('Put and get object', () async {
+  test(
+      'Given an entry was `put` to the cache, when it is accessed, then it can be read',
+      () async {
+    const key = 'entry';
+    var entry = SimpleData(num: 0);
+
+    await cache.put(key, entry);
+
+    var retrieved = await cache.get<SimpleData>(key);
+    expect(retrieved?.num, equals(0));
+  });
+
+  test(
+      'Given an entry was written to the cache, when the size is checked, then it will be 1',
+      () async {
     var entry = SimpleData(num: 0);
 
     await cache.put('entry', entry);
-    var retrieved = await cache.get<SimpleData>('entry');
-    expect(retrieved!.num, equals(0));
 
-    retrieved = await cache.get<SimpleData>('missing');
+    expect(cache.localSize, equals(1));
+  });
+
+  test(
+      'Given an empty cache, when any item is accessed, then it will return `null`',
+      () async {
+    var retrieved = await cache.get<SimpleData>('missing');
+
     expect(retrieved, isNull);
+  });
 
-    retrieved = await cache.get<SimpleData>('entry');
-    expect(retrieved!.num, equals(0));
+  test(
+      'Given a cache entry with a lifetime, when it is accessed before it has expired, then the cache will return the item',
+      () async {
+    const key = 'entry_lifetime_1';
+    var entry = SimpleData(num: 0);
 
-    expect(cache.localSize, equals(1));
+    await cache.put(
+      key,
+      entry,
+      lifetime: const Duration(milliseconds: 100),
+    );
+
+    var retrieved = await cache.get<SimpleData>(key);
+    expect(retrieved?.num, equals(0));
   });
 
-  test('Put and get object with lifetime', () async {
+  test(
+      'Given a cache entry with a lifetime, when it is accessed after it has expired, then the cache will return `null`',
+      () async {
+    const key = 'entry_lifetime_2';
     var entry = SimpleData(num: 0);
 
-    await cache.put('entry', entry,
-        lifetime: const Duration(milliseconds: 100));
-    var retrieved = await cache.get<SimpleData>('entry');
-    expect(retrieved!.num, equals(0));
+    await cache.put(
+      key,
+      entry,
+      lifetime: const Duration(milliseconds: 100),
+    );
 
     await Future.delayed(const Duration(milliseconds: 110));
-    retrieved = await cache.get<SimpleData>('entry');
-    expect(retrieved, isNull);
 
-    expect(cache.localSize, equals(0));
+    var retrieved = await cache.get<SimpleData>(key);
+    expect(retrieved, isNull);
   });
 
-  test('Put multiple with same key', () async {
+  test(
+      'Given a cache where multiple writes happened for the same key, when that key is accessed, then the latest value will be returned',
+      () async {
+    final key = 'multi_write';
     var entryA = SimpleData(num: 0);
     var entryB = SimpleData(num: 1);
 
-    await cache.put('entry', entryA);
-    await cache.put('entry', entryB);
-
-    var retrieved = await cache.get<SimpleData>('entry');
-    expect(retrieved!.num, equals(1));
+    await cache.put(key, entryA);
+    await cache.put(key, entryB);
 
-    expect(cache.localSize, equals(1));
+    var retrieved = await cache.get<SimpleData>(key);
+    expect(retrieved?.num, equals(1));
   });
 
-  test('Cache overflow', () async {
+  test(
+      'Given a cache where more entries than it should hold are added, when its size is checked, then it will only contain the latest \$CACHE_SIZE items',
+      () async {
     var numEntries = cacheMaxSize * 2;
 
     for (var i = 0; i < numEntries; i++) {
@@ -71,7 +112,9 @@ void main() {
     expect(last!.num, equals(numEntries - 1));
   });
 
-  test('Invalidate keys', () async {
+  test(
+      'Given a cache with various items, when a single key is invalidated, then it will return `null` for that key while retaining all others',
+      () async {
     for (var i = 0; i < cacheMaxSize; i++) {
       var entry = SimpleData(num: i);
       await cache.put('entry:$i', entry);
@@ -86,10 +129,19 @@ void main() {
     retrieved = await cache.get<SimpleData>('entry:$middleId');
     expect(retrieved, isNull);
 
-    expect(cache.localSize, equals(cacheMaxSize - 1));
+    for (var i = 0; i < cacheMaxSize; i++) {
+      if (i == middleId) {
+        continue;
+      }
+
+      retrieved = await cache.get<SimpleData>('entry:$i');
+      expect(retrieved, isNotNull);
+    }
   });
 
-  test('Invalidate group', () async {
+  test(
+      'Given a cache with items in 2 groups, when a single group is invalidated, then it will loose all items associated with that group',
+      () async {
     for (var i = 0; i < cacheMaxSize ~/ 2; i++) {
       var entry = SimpleData(num: i);
       await cache.put('entry:$i', entry, group: 'group:0');
@@ -145,73 +197,102 @@ void main() {
     expect(cache.localSize, equals(0));
   });
 
-  test('get object not in cache then null is returned', () async {
-    var retrieved = await cache.get<SimpleData>('invalidEntry');
-    expect(retrieved, isNull);
+  test(
+      'Given a cache with an expired item, when `get` is invoked with a `cacheMissHandler`, then the `cacheMissHandler` will be invoked and the newly create value returned',
+      () async {
+    final key = 'obj1';
+
+    await cache.put(
+      key,
+      SimpleData(num: 1),
+      lifetime: Duration(milliseconds: 100),
+    );
+
+    await Future.delayed(const Duration(milliseconds: 200));
+
+    var retrieved = await cache.get<SimpleData>(
+      key,
+      CacheMissHandler(
+        () async => SimpleData(num: 2),
+        lifetime: Duration(minutes: 10),
+      ),
+    );
+
+    expect(retrieved?.num, 2);
+  });
+
+  test(
+      'Given an empty cache, when simultaneous `get`s are executed for the same key, then only the `cacheMissHandler` of the first request will be invoked',
+      () async {
+    final key = 'value_to_be_computed';
+
+    final completer = Completer<SimpleData>();
+
+    final retrieved1Future = cache.get<SimpleData>(
+      key,
+      CacheMissHandler(
+        () async => completer.future,
+        lifetime: Duration(minutes: 10),
+      ),
+    );
+
+    final retrieved2Future = cache.get<SimpleData>(
+      key,
+      CacheMissHandler(
+        () async => throw '`cacheMissHandler` should not be called twice',
+        lifetime: Duration(minutes: 10),
+      ),
+    );
+
+    completer.complete(SimpleData(num: 100));
+
+    expect((await retrieved1Future)?.num, 100);
+    expect((await retrieved2Future)?.num, 100);
   });
 
-  group(
-      'get object not in cache when cache miss handler is specified to return object',
-      () {
+  test(
+      'Given an empty cache, when `get` is called with a `cacheMissHandler` returning an object, then that handler will be invoked to generate a new item to be stored in the cache and returned',
+      () async {
     const cacheKey = 'testKey';
-    SimpleData? retrieved;
-    setUp(() async {
-      retrieved = await cache.get(
-        cacheKey,
-        CacheMissHandler(() async => SimpleData(num: 1337)),
-      );
-    });
-    test('then object from cache miss handler is returned', () {
-      expect(retrieved?.num, equals(1337));
-    });
-
-    test('then cache miss handler value is retrievable from the cache',
-        () async {
-      var value = await cache.get<SimpleData>(cacheKey);
-      expect(value?.num, equals(1337));
-    });
-  });
-
-  group(
-      'get object not in cache when cache miss handler is specified to return null',
-      () {
+
+    var retrieved = await cache.get<SimpleData>(
+      cacheKey,
+      CacheMissHandler(() async => SimpleData(num: 1337)),
+    );
+
+    expect(retrieved?.num, equals(1337));
+
+    var value = await cache.get<SimpleData>(cacheKey);
+    expect(value?.num, equals(1337));
+  });
+
+  test(
+      'Given an empty cache, when `get` is called with a `cacheMissHandler` returning null, then that handler will be invoked and `null` will be returned and nothing stored in the cache',
+      () async {
     const cacheKey = 'testKey';
-    SimpleData? retrieved;
-    setUp(() async {
-      retrieved = await cache.get(
-        cacheKey,
-        CacheMissHandler(() async => null),
-      );
-    });
-    test('then null is returned', () {
-      expect(retrieved, isNull);
-    });
-
-    test('then no value is set in cache', () async {
-      var value = await cache.get<SimpleData>(cacheKey);
-      expect(value, isNull);
-    });
-  });
-
-  group('get object already in cache when cache miss handler is specified', () {
+
+    var retrieved = await cache.get<SimpleData>(
+      cacheKey,
+      CacheMissHandler(() async => null),
+    );
+
+    expect(retrieved, isNull);
+
+    var value = await cache.get<SimpleData>(cacheKey);
+    expect(value, isNull);
+  });
+
+  test(
+      'Given a cache containing an item with infinite lifetime, when that item is retrieved, then it will be returned and the `cacheMissHandler` will not be invoked',
+      () async {
     const cacheKey = 'testKey';
-    SimpleData? retrieved;
-    setUp(() async {
-      await cache.put(cacheKey, SimpleData(num: 1));
-      retrieved = await cache.get(
-        cacheKey,
-        CacheMissHandler(() async => SimpleData(num: 1337)),
-      );
-    });
-
-    test('then object already in cache is returned', () {
-      expect(retrieved?.num, equals(1));
-    });
-
-    test('then object already in cache is still retrievable from the cache',
-        () async {
-      var value = await cache.get<SimpleData>(cacheKey);
-      expect(value?.num, equals(1));
-    });
+
+    await cache.put(cacheKey, SimpleData(num: 1));
+    var retrieved = await cache.get<SimpleData>(
+      cacheKey,
+      CacheMissHandler(() async => SimpleData(num: 1337)),
+    );
+
+    expect(retrieved?.num, equals(1));
   });
 }
