diff --git a/packages/serverpod/lib/server.dart b/packages/serverpod/lib/server.dart
index ffc8720cec..6e127f34e8 100644
--- a/packages/serverpod/lib/server.dart
+++ b/packages/serverpod/lib/server.dart
@@ -11,3 +11,4 @@ export 'src/server/server.dart';
 export 'src/server/serverpod.dart' hide ServerpodInternalMethods;
 export 'src/server/session.dart' hide SessionInternalMethods;
 export 'src/server/command_line_args.dart' show ServerpodLoggingMode;
+export 'src/config/security_context_config.dart' show SecurityContextConfig;
diff --git a/packages/serverpod/lib/src/config/security_context_config.dart b/packages/serverpod/lib/src/config/security_context_config.dart
new file mode 100644
index 0000000000..03344729bf
--- /dev/null
+++ b/packages/serverpod/lib/src/config/security_context_config.dart
@@ -0,0 +1,20 @@
+import 'dart:io';
+
+/// Configuration for the security context.
+class SecurityContextConfig {
+  /// Security context for the API server.
+  final SecurityContext? apiServer;
+
+  /// Security context for the web server.
+  final SecurityContext? webServer;
+
+  /// Security context for the insights server.
+  final SecurityContext? insightsServer;
+
+  /// Creates a new [SecurityContextConfig] object.
+  SecurityContextConfig({
+    this.apiServer,
+    this.webServer,
+    this.insightsServer,
+  });
+}
diff --git a/packages/serverpod/lib/src/relic/web_server.dart b/packages/serverpod/lib/src/relic/web_server.dart
index 0b12cf513e..80d4786792 100644
--- a/packages/serverpod/lib/src/relic/web_server.dart
+++ b/packages/serverpod/lib/src/relic/web_server.dart
@@ -20,10 +20,15 @@ class WebServer {
   /// A list of [Route] which defines how to handle path passed to the server.
   final List<Route> routes = <Route>[];
 
+  /// Security context if the web server is running over https.
+  final SecurityContext? _securityContext;
+
   /// Creates a new webserver.
   WebServer({
     required this.serverpod,
-  }) : serverId = serverpod.serverId {
+    SecurityContext? securityContext,
+  })  : serverId = serverpod.serverId,
+        _securityContext = securityContext {
     var config = serverpod.config.webServer;
 
     if (config == null) {
@@ -63,7 +68,18 @@ class WebServer {
     }
 
     try {
-      _httpServer = await HttpServer.bind(InternetAddress.anyIPv6, _port);
+      var context = _securityContext;
+      _httpServer = await switch (context) {
+        SecurityContext() => HttpServer.bindSecure(
+            InternetAddress.anyIPv6,
+            _port,
+            context,
+          ),
+        _ => HttpServer.bind(
+            InternetAddress.anyIPv6,
+            _port,
+          ),
+      };
     } catch (e) {
       stderr.writeln(
         '${DateTime.now().toUtc()} ERROR: Failed to bind socket, Webserver '
diff --git a/packages/serverpod/lib/src/server/server.dart b/packages/serverpod/lib/src/server/server.dart
index b76e0f8780..3fe2d3da3e 100644
--- a/packages/serverpod/lib/src/server/server.dart
+++ b/packages/serverpod/lib/src/server/server.dart
@@ -63,7 +63,7 @@ class Server {
   final String name;
 
   /// Security context if the server is running over https.
-  final SecurityContext? securityContext;
+  final SecurityContext? _securityContext;
 
   /// Responsible for dispatching calls to the correct [Endpoint] methods.
   final EndpointDispatch endpoints;
@@ -107,28 +107,29 @@ class Server {
     required this.authenticationHandler,
     String? name,
     required this.caches,
-    this.securityContext,
+    SecurityContext? securityContext,
     this.whitelistedExternalCalls,
     required this.endpoints,
     required this.httpResponseHeaders,
     required this.httpOptionsResponseHeaders,
   })  : name = name ?? 'Server $serverId',
-        _databasePoolManager = databasePoolManager;
+        _databasePoolManager = databasePoolManager,
+        _securityContext = securityContext;
 
   /// Starts the server.
   /// Returns true if the server was started successfully.
   Future<bool> start() async {
     HttpServer httpServer;
     try {
-      if (securityContext != null) {
-        httpServer = await HttpServer.bindSecure(
-          InternetAddress.anyIPv6,
-          port,
-          securityContext!,
-        );
-      } else {
-        httpServer = await HttpServer.bind(InternetAddress.anyIPv6, port);
-      }
+      var context = _securityContext;
+      httpServer = await switch (context) {
+        SecurityContext() => HttpServer.bindSecure(
+            InternetAddress.anyIPv6,
+            port,
+            context,
+          ),
+        _ => HttpServer.bind(InternetAddress.anyIPv6, port),
+      };
     } catch (e) {
       stderr.writeln(
         '${DateTime.now().toUtc()} ERROR: Failed to bind socket, port $port '
diff --git a/packages/serverpod/lib/src/server/serverpod.dart b/packages/serverpod/lib/src/server/serverpod.dart
index be0a392349..060924deaf 100644
--- a/packages/serverpod/lib/src/server/serverpod.dart
+++ b/packages/serverpod/lib/src/server/serverpod.dart
@@ -280,6 +280,9 @@ class Serverpod {
         'Content-Type, Authorization, Accept, User-Agent, X-Requested-With',
   };
 
+  /// Security context if the insights server is running over https.
+  final SecurityContextConfig? _securityContextConfig;
+
   /// Creates a new Serverpod.
   Serverpod(
     List<String> args,
@@ -290,7 +293,8 @@ class Serverpod {
     this.healthCheckHandler,
     this.httpResponseHeaders = _defaultHttpResponseHeaders,
     this.httpOptionsResponseHeaders = _defaultHttpOptionsResponseHeaders,
-  }) {
+    SecurityContextConfig? securityContextConfig,
+  }) : _securityContextConfig = securityContextConfig {
     stdout.writeln(
       'SERVERPOD version: $serverpodVersion, dart: ${Platform.version}, time: ${DateTime.now().toUtc()}',
     );
@@ -381,6 +385,7 @@ class Serverpod {
       endpoints: endpoints,
       httpResponseHeaders: httpResponseHeaders,
       httpOptionsResponseHeaders: httpOptionsResponseHeaders,
+      securityContext: _securityContextConfig?.apiServer,
     );
     endpoints.initializeEndpoints(server);
 
@@ -402,7 +407,10 @@ class Serverpod {
     }
 
     if (Features.enableWebServer()) {
-      _webServer = WebServer(serverpod: this);
+      _webServer = WebServer(
+        serverpod: this,
+        securityContext: _securityContextConfig?.webServer,
+      );
     }
 
     stdout.writeln('SERVERPOD initialized, time: ${DateTime.now().toUtc()}');
@@ -673,6 +681,7 @@ class Serverpod {
       endpoints: endpoints,
       httpResponseHeaders: httpResponseHeaders,
       httpOptionsResponseHeaders: httpOptionsResponseHeaders,
+      securityContext: _securityContextConfig?.insightsServer,
     );
     endpoints.initializeEndpoints(_serviceServer!);
 
diff --git a/tests/serverpod_test_server/lib/test_util/test_serverpod.dart b/tests/serverpod_test_server/lib/test_util/test_serverpod.dart
index 682332df41..78cadc154f 100644
--- a/tests/serverpod_test_server/lib/test_util/test_serverpod.dart
+++ b/tests/serverpod_test_server/lib/test_util/test_serverpod.dart
@@ -22,6 +22,7 @@ class IntegrationTestServer extends TestServerpod {
   static Serverpod create({
     ServerpodConfig? config,
     AuthenticationHandler? authenticationHandler,
+    SecurityContextConfig? securityContextConfig,
   }) {
     return Serverpod(
       _integrationTestFlags,
@@ -30,6 +31,7 @@ class IntegrationTestServer extends TestServerpod {
       config: config,
       authenticationHandler:
           authenticationHandler ?? auth.authenticationHandler,
+      securityContextConfig: securityContextConfig,
     );
   }
 }
diff --git a/tests/serverpod_test_server/test_integration/security_context_test.dart b/tests/serverpod_test_server/test_integration/security_context_test.dart
new file mode 100644
index 0000000000..cc6db7b7a3
--- /dev/null
+++ b/tests/serverpod_test_server/test_integration/security_context_test.dart
@@ -0,0 +1,258 @@
+import 'dart:io';
+
+import 'package:serverpod/serverpod.dart';
+import 'package:serverpod_test_server/src/web/routes/root.dart';
+
+import 'package:serverpod_test_server/test_util/test_serverpod.dart';
+import 'package:test/test.dart';
+
+import 'ssl/ssl_cert.dart';
+
+void main() {
+  group('Given an api server', () {
+    group('with a security context', () {
+      late SecurityContext securityContext;
+      late Serverpod serverpod;
+
+      setUpAll(() async {
+        securityContext = _createSecurityContext();
+        serverpod = IntegrationTestServer.create(
+          securityContextConfig: SecurityContextConfig(
+            apiServer: securityContext,
+          ),
+        );
+
+        await serverpod.start();
+      });
+
+      tearDownAll(() async {
+        await serverpod.shutdown(exitProcess: false);
+      });
+
+      test('then server can be accessed over https', () async {
+        HttpClientRequest request =
+            await HttpClient(context: securityContext).getUrl(
+          Uri.https('localhost:${serverpod.server.port}'),
+        );
+        var response = await request.close();
+
+        expect(response.statusCode, 200);
+      });
+
+      test('then server cannot be accessed over http', () async {
+        HttpClientRequest request = await HttpClient().getUrl(
+          Uri.http('localhost:${serverpod.server.port}'),
+        );
+
+        expect(
+          () async => await request.close(),
+          //Since the server simply drops HTTP connections instead of negotiating SSL,
+          //HttpException is the correct error and not HandshakeException.
+          throwsA(isA<HttpException>()),
+        );
+      });
+    });
+
+    group('without a security context', () {
+      late Serverpod serverpod;
+
+      setUpAll(() async {
+        serverpod = IntegrationTestServer.create();
+
+        await serverpod.start();
+      });
+
+      tearDownAll(() async {
+        await serverpod.shutdown(exitProcess: false);
+      });
+
+      test('then server can be accessed over http', () async {
+        HttpClientRequest request = await HttpClient().getUrl(
+          Uri.http('localhost:${serverpod.server.port}'),
+        );
+
+        var response = await request.close();
+
+        expect(response.statusCode, 200);
+      });
+
+      test('then server cannot be accessed over https', () async {
+        var client = HttpClient();
+
+        expect(
+          () async => await await client.getUrl(
+            Uri.https('localhost:${serverpod.server.port}'),
+          ),
+          throwsA(isA<HandshakeException>()),
+        );
+      });
+    });
+  });
+
+  group('Given a insights server', () {
+    group('with a security context', () {
+      late SecurityContext securityContext;
+      late Serverpod serverpod;
+
+      setUpAll(() async {
+        securityContext = _createSecurityContext();
+        serverpod = IntegrationTestServer.create(
+          securityContextConfig: SecurityContextConfig(
+            insightsServer: securityContext,
+          ),
+        );
+
+        await serverpod.start();
+      });
+
+      tearDownAll(() async {
+        await serverpod.shutdown(exitProcess: false);
+      });
+
+      test('then server can be accessed over https', () async {
+        HttpClientRequest request =
+            await HttpClient(context: securityContext).getUrl(
+          Uri.https('localhost:${serverpod.serviceServer.httpServer.port}'),
+        );
+        var response = await request.close();
+
+        expect(response.statusCode, 200);
+      });
+
+      test('then server cannot be accessed over http', () async {
+        HttpClientRequest request = await HttpClient().getUrl(
+          Uri.http('localhost:${serverpod.serviceServer.httpServer.port}'),
+        );
+
+        expect(
+          () async => await request.close(),
+          //Since the server simply drops HTTP connections instead of negotiating SSL,
+          //HttpException is the correct error and not HandshakeException.
+          throwsA(isA<HttpException>()),
+        );
+      });
+    });
+
+    group('without a security context', () {
+      late Serverpod serverpod;
+
+      setUpAll(() async {
+        serverpod = IntegrationTestServer.create();
+
+        await serverpod.start();
+      });
+
+      tearDownAll(() async {
+        await serverpod.shutdown(exitProcess: false);
+      });
+
+      test('then server can be accessed over http', () async {
+        HttpClientRequest request = await HttpClient().getUrl(
+          Uri.http('localhost:${serverpod.serviceServer.httpServer.port}'),
+        );
+
+        var response = await request.close();
+
+        expect(response.statusCode, 200);
+      });
+
+      test('then server cannot be accessed over https', () async {
+        expect(
+          () async => await HttpClient().getUrl(
+            Uri.https('localhost:${serverpod.serviceServer.httpServer.port}'),
+          ),
+          throwsA(isA<HandshakeException>()),
+        );
+      });
+    });
+  });
+
+  group('Given a web server', () {
+    group('with a security context', () {
+      late SecurityContext securityContext;
+      late Serverpod serverpod;
+
+      setUpAll(() async {
+        securityContext = _createSecurityContext();
+        serverpod = IntegrationTestServer.create(
+          securityContextConfig: SecurityContextConfig(
+            webServer: securityContext,
+          ),
+        );
+        serverpod.webServer.addRoute(RouteRoot(), '/');
+        await serverpod.start();
+      });
+
+      tearDownAll(() async {
+        await serverpod.shutdown(exitProcess: false);
+      });
+
+      test('then server can be accessed over https', () async {
+        HttpClientRequest request =
+            await HttpClient(context: securityContext).getUrl(
+          Uri.https('localhost:${serverpod.webServer.httpServer.port}'),
+        );
+        var response = await request.close();
+
+        expect(response.statusCode, 200);
+      });
+
+      test('then server cannot be accessed over http', () async {
+        HttpClientRequest request = await HttpClient().getUrl(
+          Uri.http('localhost:${serverpod.webServer.httpServer.port}'),
+        );
+
+        expect(
+          () async => await request.close(),
+          //Since the server simply drops HTTP connections instead of negotiating SSL,
+          //HttpException is the correct error and not HandshakeException.
+          throwsA(isA<HttpException>()),
+        );
+      });
+    });
+
+    group('without a security context', () {
+      late SecurityContext securityContext;
+      late Serverpod serverpod;
+
+      setUpAll(() async {
+        securityContext = _createSecurityContext();
+        serverpod = IntegrationTestServer.create();
+
+        serverpod.webServer.addRoute(RouteRoot(), '/');
+        await serverpod.start();
+      });
+
+      tearDownAll(() async {
+        await serverpod.shutdown(exitProcess: false);
+      });
+
+      test('then server can be accessed over http', () async {
+        HttpClientRequest request = await HttpClient().getUrl(
+          Uri.http('localhost:${serverpod.webServer.httpServer.port}'),
+        );
+
+        var response = await request.close();
+
+        expect(response.statusCode, 200);
+      });
+
+      test('then server cannot be accessed over https', () async {
+        expect(
+          () async => await HttpClient(context: securityContext).getUrl(
+            Uri.https('localhost:${serverpod.webServer.httpServer.port}'),
+          ),
+          throwsA(isA<HandshakeException>()),
+        );
+      });
+    });
+  });
+}
+
+SecurityContext _createSecurityContext() {
+  SecurityContext context = SecurityContext(withTrustedRoots: false);
+  context.setTrustedCertificatesBytes(Certificate.certChainBytes);
+  context.useCertificateChainBytes(Certificate.certChainBytes);
+  context.usePrivateKeyBytes(Certificate.certKeyBytes, password: 'dartdart');
+  return context;
+}
diff --git a/tests/serverpod_test_server/test_integration/ssl/ssl_cert.dart b/tests/serverpod_test_server/test_integration/ssl/ssl_cert.dart
new file mode 100644
index 0000000000..5cbdbfadf8
--- /dev/null
+++ b/tests/serverpod_test_server/test_integration/ssl/ssl_cert.dart
@@ -0,0 +1,97 @@
+import 'dart:convert';
+
+abstract final class Certificate {
+  static final List<int> certChainBytes = utf8.encode('''
+-----BEGIN CERTIFICATE-----
+MIIDZDCCAkygAwIBAgIBATANBgkqhkiG9w0BAQsFADAgMR4wHAYDVQQDDBVpbnRl
+cm1lZGlhdGVhdXRob3JpdHkwHhcNMTUxMDI3MTAyNjM1WhcNMjUxMDI0MTAyNjM1
+WjAUMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
+ggEKAoIBAQCkg/Qr8RQeLTOSgCkyiEX2ztgkgscX8hKGHEHdvlkmVK3JVEIIwkvu
+/Y9LtHZUia3nPAgqEEbexzTENZjSCcC0V6I2XW/e5tIE3rO0KLZyhtZhN/2SfJ6p
+KbOh0HLr1VtkKJGp1tzUmHW/aZI32pK60ZJ/N917NLPCJpCaL8+wHo3+w3oNqln6
+oJsfgxy9SUM8Bsc9WMYKMUdqLO1QKs1A5YwqZuO7Mwj+4LY2QDixC7Ua7V9YAPo2
+1SBeLvMCHbYxSPCuxcZ/kDkgax/DF9u7aZnGhMImkwBka0OQFvpfjKtTIuoobTpe
+PAG7MQYXk4RjnjdyEX/9XAQzvNo1CDObAgMBAAGjgbQwgbEwPAYDVR0RBDUwM4IJ
+bG9jYWxob3N0ggkxMjcuMC4wLjGCAzo6MYcEfwAAAYcQAAAAAAAAAAAAAAAAAAAA
+ATAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBSvhJo6taTggJQBukEvMo/PDk8tKTAf
+BgNVHSMEGDAWgBS98L4T5RaIToE3DkBRsoeWPil0eDAOBgNVHQ8BAf8EBAMCA6gw
+EwYDVR0lBAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQELBQADggEBAHLOt0mL2S4A
+B7vN7KsfQeGlVgZUVlEjem6kqBh4fIzl4CsQuOO8oJ0FlO1z5JAIo98hZinymJx1
+phBVpyGIKakT/etMH0op5evLe9dD36VA3IM/FEv5ibk35iGnPokiJXIAcdHd1zam
+YaTHRAnZET5S03+7BgRTKoRuszhbvuFz/vKXaIAnVNOF4Gf2NUJ/Ax7ssJtRkN+5
+UVxe8TZVxzgiRv1uF6NTr+J8PDepkHCbJ6zEQNudcFKAuC56DN1vUe06gRDrNbVq
+2JHEh4pRfMpdsPCrS5YHBjVq/XHtFHgwDR6g0WTwSUJvDeM4OPQY5f61FB0JbFza
+PkLkXmoIod8=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIDLjCCAhagAwIBAgIBAjANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1yb290
+YXV0aG9yaXR5MB4XDTE1MTAyNzEwMjYzNVoXDTI1MTAyNDEwMjYzNVowIDEeMBwG
+A1UEAwwVaW50ZXJtZWRpYXRlYXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOC
+AQ8AMIIBCgKCAQEA6GndRFiXk+2q+Ig7ZOWKKGta+is8137qyXz+eVFs5sA0ajMN
+ZBAMWS0TIXw/Yks+y6fEcV/tfv91k1eUN4YXPcoxTdDF97d2hO9wxumeYOMnQeDy
+VZVDKQBZ+jFMeI+VkNpMEdmsLErpZDGob/1dC8tLEuR6RuRR8X6IDGMPOCMw1jLK
+V1bQjPtzqKadTscfjLuKxuLgspJdTrzsu6hdcl1mm8K6CjTY2HNXWxs1yYmwfuQ2
+Z4/8sOMNqFqLjN+ChD7pksTMq7IosqGiJzi2bpd5f44ek/k822Y0ATncJHk4h1Z+
+kZBnW6kgcLna1gDri9heRwSZ+M8T8nlHgIMZIQIDAQABo3sweTASBgNVHRMBAf8E
+CDAGAQH/AgEAMB0GA1UdDgQWBBS98L4T5RaIToE3DkBRsoeWPil0eDAfBgNVHSME
+GDAWgBRxD5DQHTmtpDFKDOiMf5FAi6vfbzAOBgNVHQ8BAf8EBAMCAgQwEwYDVR0l
+BAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQELBQADggEBAD+4KpUeV5mUPw5IG/7w
+eOXnUpeS96XFGuS1JuFo/TbgntPWSPyo+rD4GrPIkUXyoHaMCDd2UBEjyGbBIKlB
+NZA3RJOAEp7DTkLNK4RFn/OEcLwG0J5brL7kaLRO4vwvItVIdZ2XIqzypRQTc0MG
+MmF08zycnSlaN01ryM67AsMhwdHqVa+uXQPo8R8sdFGnZ33yywTYD73FeImXilQ2
+rDnFUVqmrW1fjl0Fi4rV5XI0EQiPrzKvRtmF8ZqjGATPOsRd64cwQX6V+P5hNeIR
+9pba6td7AbNGausHfacRYMyoGJWWWkFPd+7jWOCPqW7Fk1tmBgdB8GzXa3inWIRM
+RUE=
+-----END CERTIFICATE-----
+-----BEGIN CERTIFICATE-----
+MIIC+zCCAeOgAwIBAgIBATANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1yb290
+YXV0aG9yaXR5MB4XDTE1MTAyNzEwMjYzNFoXDTI1MTAyNDEwMjYzNFowGDEWMBQG
+A1UEAwwNcm9vdGF1dGhvcml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
+ggEBAMl+dcraUM/E7E6zl7+7hK9oUJYXJLnfiMtP/TRFVbH4+2aEN8vXzPbzKdR3
+FfaHczXQTwnTCaYA4u4uSDvSOsFFEfxEwYORsdKmQEM8nGpVX2NVvKsMcGIhh8kh
+ZwJfkMIOcAxmGIHGdMhF8VghonJ8uGiuqktxdfpARq0g3fqIjDHsF9/LpfshUfk9
+wsRyTF0yr90U/dsfnE+u8l7GvVl8j2Zegp0sagAGtLaNv7tP17AibqEGg2yDBrBN
+9r9ihe4CqMjx+Q2kQ2S9Gz2V2ReO/n6vm2VQxsPRB/lV/9jh7cUcS0/9mggLYrDy
+cq1v7rLLQrWuxMz1E3gOhyCYJ38CAwEAAaNQME4wHQYDVR0OBBYEFHEPkNAdOa2k
+MUoM6Ix/kUCLq99vMB8GA1UdIwQYMBaAFHEPkNAdOa2kMUoM6Ix/kUCLq99vMAwG
+A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBABrhjnWC6b+z9Kw73C/niOwo
+9sPdufjS6tb0sCwDjt3mjvE4NdNWt+/+ZOugW6dqtvqhtqZM1q0u9pJkNwIrqgFD
+ZHcfNaf31G6Z2YE+Io7woTVw6fFobg/EFo+a/qwbvWL26McmiRL5yiSBjVjpX4a5
+kdZ+aPQUCBaLrTWwlCDqzSVIULWUQvveRWbToMFKPNID58NtEpymAx3Pgir7YjV9
+UnlU2l5vZrh1PTCqZxvC/IdRESUfW80LdHaeyizRUP+6vKxGgSz2MRuYINjbd6GO
+hGiCpWlwziW2xLV1l2qSRLko2kIafLZP18N0ThM9zKbU5ps9NgFOf//wqSGtLaE=
+-----END CERTIFICATE-----
+''');
+
+  static final List<int> certKeyBytes = utf8.encode('''
+-----BEGIN ENCRYPTED PRIVATE KEY-----
+MIIE4zAcBgoqhkiG9w0BDAEBMA4ECBMCjlg8JYZ4AgIIAASCBMFd9cBoZ5xcTock
+AVQcg/HzYJtMceKn1gtMDdC7mmXuyN0shoxhG4BpQInHkFARL+nenesXFxEm4X5e
+L603Pcgw72/ratxVpTW7hPMjiLTEBqza0GjQm7Sarbdy+Vzdp/6XFrAcPfFl1juY
+oyYzbozPsvFHz3Re44y1KmI4HAzU/qkjJUbNTTiPPVI2cDP6iYN2XXxBb1wwp8jR
+iqdZqFG7lU/wvPEbD7BVPpmJBHWNG681zb4ea5Zn4hW8UaxpiIBiaH0/IWc2SVZd
+RliAFo3NEsGxCcsnBo/n00oudGbOJxdOp7FbH5hJpeqX2WhCyJRxIeHOWmeuMAet
+03HFriiEmJ99m2nEJN1x0A3QUUM7ji6vZAb4qb1dyq7LlX4M2aaqixRnaTcQkapf
+DOxX35DEBXSKrDpyWp6Rx4wNpUyi1TKyhaVnYgD3Gn0VfC/2w86gSFlrf9PMYGM0
+PvFxTDzTyjOuPBRa728gZOGXgDOL7qvdInU/opVew7kFeRQHXxHzFCLK5dD+Vrig
+5fS3m0++f55ODkxqHXB8gbXbd3GMmsW6MrGpU7VsCNtbVPdSMW0FalovEB0M+2lj
+1VfuvL+0F5huTe+BgZAt6xgET/CIcZXdNMRPVhraqUjqWtI9Rdk4STPCpU1rDkjG
+YDl/fo4W2T6qQWFUpiC9IvVVGkVxaqfZZ4Qu+V5xPUi6vk95QiTNkN1t+m+sCCgS
+Llkea8Um0aHMy33Lj3NsfL0LMrnpniqcAks8BvcgIZwk1VRqcj7BQVCygJSYrmAR
+DBhMpjWlXuSggnyVPuduZDtnTN+8lCHLOKL3a3bDb6ySaKX49Km6GutDLfpDtEA0
+3mQvmEG4XVm7zy+AlN72qFbtSLDRi/D/uQh2q/ZrFQLOBQBQB56TvEbKouLimUDM
+ascQA3aUyhOE7e+d02NOFIFTozwc/C//CIFeA+ZEwxyfha/3Bor6Jez7PC/eHNxZ
+w7YMXzPW9NhcCcerhYGebuCJxLwzqJ+IGdukjKsGV2ytWDoB2xZiJNu096j4RKcq
+YSJoen0R7IH8N4eDujXR8m9kAl724Uqs1OoAs4VNICvzTutbsgVZ6Z+NMOcfnPw9
+jZkFhot16w8znD+OmhBR7/bzOLpaeUhk7EhNq5M6U0NNWx3WwkDlvU/jx+6/EQe3
+iLEHptH2HYBF1xscaKGbtKNtuQsfdzgWpOX0qK2YbK3yCKvL/xIm1DQmDZDKkWdW
+VNh8oGV1H96CivWlvxhAgXKz9F/83CjMw8YXRk7RJvWR4vtNvXFAvGkFIYCN9Jv9
+p+1ukaYoxSLGBik907I6gWSHqumJiCprUyAX/bVfZfNiYh4hzeA3lhwxZSax3JG4
+7QFPvyepOmF/3AAzS/Pusx6jOZnuCMCkfQi6Wpem1o3s4x+fP7kz00Xuj01ErucM
+S10ixfIh84kXBN3dTRDtDdeCyoMsBKO0W5jDBBlWL02YfdF6Opo1Q4cPh2DYgXMh
+XEszNZSK5LB0y+f3A6Kdx/hkZzHVvMONA70OyrkoZzGyWENhcB0c7ntTJyPPD2qM
+s0HRA2VwF/0ypU3OKERM1Ua5NSkTgvnnVTlV9GO90Tkn5v4fxdl8NzIuJLyGguTP
+Xc0tRM34Lg==
+-----END ENCRYPTED PRIVATE KEY-----
+''');
+}
