diff --git a/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart b/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart
index 4057002267..f81a9f9c5e 100644
--- a/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart
+++ b/tools/serverpod_cli/lib/src/analyzer/models/validation/restrictions.dart
@@ -324,24 +324,6 @@ class Restrictions {
           )
         ];
       }
-
-      // This is temporary until [PartAllocator] and [PartOfAllocator] can
-      // automatically allocate the imports from the sub-classes relative to
-      // the parent imports.
-      // https://github.com/serverpod/serverpod/issues/2893
-      var sealedTopNode = currentModel.sealedTopNode;
-
-      if (sealedTopNode != null) {
-        if (currentModel.subDirParts.join() !=
-            sealedTopNode.subDirParts.join()) {
-          return [
-            SourceSpanSeverityException(
-              'All models in a sealed library must be in the same subdirectory. The class "${currentModel.className}" needs to be located in the same subdirectory as "${sealedTopNode.className}".',
-              span,
-            )
-          ];
-        }
-      }
     }
 
     return [];
diff --git a/tools/serverpod_cli/lib/src/generator/dart/client_code_generator.dart b/tools/serverpod_cli/lib/src/generator/dart/client_code_generator.dart
index bdb00f2d18..fd3204a6b6 100644
--- a/tools/serverpod_cli/lib/src/generator/dart/client_code_generator.dart
+++ b/tools/serverpod_cli/lib/src/generator/dart/client_code_generator.dart
@@ -1,12 +1,10 @@
-import 'package:code_builder/code_builder.dart';
 import 'package:path/path.dart' as p;
 
 import 'package:serverpod_cli/analyzer.dart';
 import 'package:serverpod_cli/src/generator/code_generator.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/library_generator.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/model_library_generator.dart';
-import 'package:serverpod_cli/src/generator/dart/library_generators/util/custom_allocators.dart';
-import 'package:serverpod_cli/src/generator/dart/library_generators/util/model_filter_util.dart';
+import 'package:serverpod_cli/src/generator/dart/library_generators/util/model_generators_util.dart';
 
 /// A [CodeGenerator] that generates the client side dart code of a
 /// serverpod project.
@@ -23,44 +21,17 @@ class DartClientCodeGenerator extends CodeGenerator {
       config: config,
     );
 
-    var modelAllocatorContext =
-        <({SerializableModelDefinition model, Allocator? allocator})>[];
-
     var clientClasses = models.where((element) => !element.serverOnly).toList();
 
-    var sealedHierarchies = ModelFilterUtil.getSealedHierarchies(clientClasses);
-
-    var modelsWithoutSealedHierarchies =
-        ModelFilterUtil.getClassesWithoutSealedHierarchies(clientClasses);
-
-    for (var sealedHierarchy in sealedHierarchies) {
-      var partOfAllocator = PartOfAllocator([]);
-      var partAllocator = PartAllocator(partOfAllocator);
-
-      for (var model in sealedHierarchy) {
-        modelAllocatorContext.add((
-          model: model,
-          allocator: model.isSealedTopNode ? partAllocator : partOfAllocator
-        ));
-      }
-    }
-
-    for (var model in modelsWithoutSealedHierarchies) {
-      modelAllocatorContext.add((
-        model: model,
-        allocator: null,
-      ));
-    }
+    var modelAllocatorContext =
+        ModelAllocatorContext.build(clientClasses, config);
 
     return {
-      for (var entry in modelAllocatorContext)
-        p.joinAll([
-          ...config.generatedDartClientModelPathParts,
-          ...entry.model.subDirParts,
-          '${entry.model.fileName}.dart'
-        ]): clientSideGenerator
-            .generateModelLibrary(entry.model)
-            .generateCode(allocator: entry.allocator),
+      for (var entry in modelAllocatorContext.entries)
+        entry.model.getFullFilePath(config, serverCode: false):
+            clientSideGenerator
+                .generateModelLibrary(entry.model)
+                .generateCode(allocator: entry.allocator),
     };
   }
 
diff --git a/tools/serverpod_cli/lib/src/generator/dart/library_generators/model_library_generator.dart b/tools/serverpod_cli/lib/src/generator/dart/library_generators/model_library_generator.dart
index c5be43fcb8..83661b5874 100644
--- a/tools/serverpod_cli/lib/src/generator/dart/library_generators/model_library_generator.dart
+++ b/tools/serverpod_cli/lib/src/generator/dart/library_generators/model_library_generator.dart
@@ -1,4 +1,5 @@
 import 'package:code_builder/code_builder.dart';
+import 'package:path/path.dart' as p;
 import 'package:recase/recase.dart';
 
 import 'package:serverpod_cli/analyzer.dart';
@@ -6,6 +7,7 @@ import 'package:serverpod_cli/src/analyzer/models/definitions.dart';
 import 'package:serverpod_cli/src/analyzer/models/utils/duration_utils.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/class_generators/repository_classes.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/util/class_generators_util.dart';
+import 'package:serverpod_cli/src/generator/dart/library_generators/util/model_generators_util.dart';
 import 'package:serverpod_cli/src/generator/keywords.dart';
 import 'package:serverpod_cli/src/generator/shared.dart';
 import 'package:serverpod_cli/src/generator/types.dart';
@@ -58,15 +60,20 @@ class SerializableModelLibraryGenerator {
       (libraryBuilder) {
         if (classDefinition.isSealedTopNode) {
           for (var child in classDefinition.descendantClasses) {
-            libraryBuilder.directives
-                .add(Directive.part('${child.fileName}.dart'));
+            var childPath = p.relative(
+              child.filePath,
+              from: p.dirname(classDefinition.filePath),
+            );
+            libraryBuilder.directives.add(Directive.part(childPath));
           }
         }
 
         if (!classDefinition.isSealedTopNode && sealedTopNode != null) {
-          libraryBuilder.directives.add(
-            Directive.partOf('${sealedTopNode.fileName}.dart'),
+          var topNodePath = p.relative(
+            sealedTopNode.filePath,
+            from: p.dirname(classDefinition.filePath),
           );
+          libraryBuilder.directives.add(Directive.partOf(topNodePath));
         }
 
         libraryBuilder.body.addAll([
diff --git a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/class_generators_util.dart b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/class_generators_util.dart
index c73948553f..e0af5050bf 100644
--- a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/class_generators_util.dart
+++ b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/class_generators_util.dart
@@ -1,4 +1,5 @@
 import 'package:code_builder/code_builder.dart';
+
 import 'package:serverpod_cli/src/analyzer/models/definitions.dart';
 import 'package:serverpod_cli/src/config/config.dart';
 import 'package:serverpod_cli/src/generator/shared.dart';
diff --git a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/custom_allocators.dart b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/custom_allocators.dart
index b9b37af355..c1cd14aceb 100644
--- a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/custom_allocators.dart
+++ b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/custom_allocators.dart
@@ -1,12 +1,46 @@
 import 'package:code_builder/code_builder.dart';
+import 'package:path/path.dart' as p;
+
+class ImportCollector {
+  final Map<String, int> _imports = {};
+  var _nextKey = 1;
+  final String basePath;
+
+  ImportCollector(this.basePath);
+
+  String _normalizePath(String topNodePath, String currentPath) {
+    if (topNodePath.startsWith('package:') || topNodePath.startsWith('dart:')) {
+      return topNodePath;
+    }
+
+    var absolutePath = p.join(p.dirname(currentPath), topNodePath);
+    return p.relative(
+      absolutePath,
+      from: p.dirname(basePath),
+    );
+  }
+
+  int getOrCreateAlias(String topNodePath, String currentPath) {
+    var normalizedPath = _normalizePath(topNodePath, currentPath);
+
+    return _imports.putIfAbsent(normalizedPath, () => _nextKey++);
+  }
+
+  Iterable<MapEntry<String, int>> get imports => _imports.entries;
+}
 
 class PartOfAllocator implements Allocator {
   static final _doNotPrefix = ['dart:core'];
 
-  final _imports = <String, int>{};
-  var _keys = 1;
+  final String _currentPath;
+  final ImportCollector _importCollector;
 
-  PartOfAllocator(List<String>? doNotPrefix) {
+  PartOfAllocator({
+    List<String>? doNotPrefix,
+    required String currentPath,
+    required ImportCollector importCollector,
+  })  : _currentPath = currentPath,
+        _importCollector = importCollector {
     _doNotPrefix.addAll(doNotPrefix ?? []);
   }
 
@@ -19,31 +53,27 @@ class PartOfAllocator implements Allocator {
       return symbol!;
     }
 
-    return '_i${_imports.putIfAbsent(url, _nextKey)}.$symbol';
+    var alias = _importCollector.getOrCreateAlias(url, _currentPath);
+    return '_i$alias.$symbol';
   }
 
-  int _nextKey() => _keys++;
-
   @override
   Iterable<Directive> get imports => [];
 }
 
 class PartAllocator implements Allocator {
-  PartOfAllocator _partOfAllocator;
+  final PartOfAllocator _partOfAllocator;
 
-  PartAllocator._(this._partOfAllocator);
-
-  factory PartAllocator(PartOfAllocator partOfAllocator) {
-    return PartAllocator._(partOfAllocator);
-  }
+  PartAllocator({
+    required PartOfAllocator partOfAllocator,
+  }) : _partOfAllocator = partOfAllocator;
 
   @override
-  String allocate(Reference reference) {
-    return _partOfAllocator.allocate(reference);
-  }
+  String allocate(Reference reference) => _partOfAllocator.allocate(reference);
 
   @override
-  Iterable<Directive> get imports => _partOfAllocator._imports.keys.map(
-        (u) => Directive.import(u, as: '_i${_partOfAllocator._imports[u]}'),
+  Iterable<Directive> get imports =>
+      _partOfAllocator._importCollector.imports.map(
+        (u) => Directive.import(u.key, as: '_i${u.value}'),
       );
 }
diff --git a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/model_filter_util.dart b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/model_filter_util.dart
deleted file mode 100644
index 698da64ed5..0000000000
--- a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/model_filter_util.dart
+++ /dev/null
@@ -1,40 +0,0 @@
-import 'package:serverpod_cli/src/analyzer/models/definitions.dart';
-
-/// Utility class for filtering models.
-abstract final class ModelFilterUtil {
-  /// Returns all sealed top node classes.
-  static Iterable<ClassDefinition> _getSealedTopNodeClasses(
-    List<SerializableModelDefinition> models,
-  ) {
-    return models
-        .whereType<ClassDefinition>()
-        .where((element) => element.isSealedTopNode);
-  }
-
-  /// Returns a list of sealed hierarchies.
-  /// Each hierarchy is represented by a list of classes.
-  static Iterable<Iterable<ClassDefinition>> getSealedHierarchies(
-    List<SerializableModelDefinition> models,
-  ) {
-    var sealedClasses = _getSealedTopNodeClasses(models);
-
-    return sealedClasses.map(
-      (element) {
-        return [...element.descendantClasses, element];
-      },
-    );
-  }
-
-  /// Returns all classes that are not part of a sealed hierarchy.
-  static Iterable<SerializableModelDefinition>
-      getClassesWithoutSealedHierarchies(
-    List<SerializableModelDefinition> models,
-  ) {
-    var sealedHierarchyClasses =
-        getSealedHierarchies(models).expand((e) => e).toSet();
-
-    return models.where(
-      (e) => e is! ClassDefinition || !sealedHierarchyClasses.contains(e),
-    );
-  }
-}
diff --git a/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/model_generators_util.dart b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/model_generators_util.dart
new file mode 100644
index 0000000000..91655e72bf
--- /dev/null
+++ b/tools/serverpod_cli/lib/src/generator/dart/library_generators/util/model_generators_util.dart
@@ -0,0 +1,134 @@
+import 'package:code_builder/code_builder.dart';
+import 'package:path/path.dart' as p;
+
+import 'package:serverpod_cli/src/analyzer/models/definitions.dart';
+import 'package:serverpod_cli/src/config/config.dart';
+import 'package:serverpod_cli/src/generator/dart/library_generators/util/custom_allocators.dart';
+
+/// Represents a single entry in the [ModelAllocatorContext],
+/// containing a model and its corresponding allocator.
+/// On classes that are not part of a sealed hierarchy
+/// the allocator should be null.
+class ModelAllocatorEntry {
+  final SerializableModelDefinition model;
+  final Allocator? allocator;
+
+  ModelAllocatorEntry({
+    required this.model,
+    required this.allocator,
+  });
+}
+
+/// Manages the relationship between models and their allocators.
+/// Includes a factory constructor for creating a context from
+/// a list of `SerializableModelDefinition` and `GeneratorConfig`.
+class ModelAllocatorContext {
+  ModelAllocatorContext(this._entries);
+
+  final List<ModelAllocatorEntry> _entries;
+
+  List<ModelAllocatorEntry> get entries => List.unmodifiable(_entries);
+
+  /// Factory constructor to build a [ModelAllocatorContext]
+  /// from a list of models and a configuration.
+  factory ModelAllocatorContext.build(
+    List<SerializableModelDefinition> models,
+    GeneratorConfig config,
+  ) {
+    var entries = <ModelAllocatorEntry>[];
+
+    var sealedHierarchies = _getSealedHierarchies(models);
+
+    for (var sealedHierarchy in sealedHierarchies) {
+      var topNode = sealedHierarchy.first.sealedTopNode;
+
+      if (topNode != null) {
+        var importCollector = ImportCollector(
+          topNode.getFullFilePath(config, serverCode: false),
+        );
+
+        for (var model in sealedHierarchy) {
+          var currentPath = model.getFullFilePath(config, serverCode: false);
+
+          var partOfAllocator = PartOfAllocator(
+            currentPath: currentPath,
+            importCollector: importCollector,
+          );
+
+          entries.add(
+            ModelAllocatorEntry(
+              model: model,
+              allocator: model.isSealedTopNode
+                  ? PartAllocator(partOfAllocator: partOfAllocator)
+                  : partOfAllocator,
+            ),
+          );
+        }
+      }
+    }
+
+    var modelsWithoutSealedHierarchies = _getNonSealedClasses(models);
+
+    for (var model in modelsWithoutSealedHierarchies) {
+      entries.add(
+        ModelAllocatorEntry(model: model, allocator: null),
+      );
+    }
+
+    return ModelAllocatorContext(entries);
+  }
+
+  /// Returns all classes from `models` are not part of a sealed hierarchy.
+  static Iterable<SerializableModelDefinition> _getNonSealedClasses(
+    List<SerializableModelDefinition> models,
+  ) {
+    return models.where(
+      (e) => e is! ClassDefinition || e.sealedTopNode == null,
+    );
+  }
+
+  /// Returns all sealed top node classes.
+  static Iterable<ClassDefinition> _getSealedTopNodeClasses(
+    List<SerializableModelDefinition> models,
+  ) {
+    return models
+        .whereType<ClassDefinition>()
+        .where((element) => element.isSealedTopNode);
+  }
+
+  /// Returns a list of sealed hierarchies.
+  /// Each hierarchy is represented by a list of classes.
+  static Iterable<Iterable<ClassDefinition>> _getSealedHierarchies(
+    List<SerializableModelDefinition> models,
+  ) {
+    var sealedClasses = _getSealedTopNodeClasses(models);
+
+    return sealedClasses.map(
+      (element) {
+        return [...element.descendantClasses, element];
+      },
+    );
+  }
+}
+
+/// An extension on `SerializableModelDefinition` to compute the file path
+/// where the model will be located.
+extension SerializableModelPath on SerializableModelDefinition {
+  /// Returns a String with the file path.
+  /// Consisting of `subDirParts` + `filename.dart`
+  String get filePath => p.joinAll([
+        ...subDirParts,
+        '$fileName.dart',
+      ]);
+
+  /// Returns a String with the full server or client path followed by
+  /// `filename.dart`.
+  String getFullFilePath(GeneratorConfig config, {required bool serverCode}) {
+    return p.joinAll([
+      ...serverCode
+          ? config.generatedServeModelPathParts
+          : config.generatedDartClientModelPathParts,
+      filePath,
+    ]);
+  }
+}
diff --git a/tools/serverpod_cli/lib/src/generator/dart/server_code_generator.dart b/tools/serverpod_cli/lib/src/generator/dart/server_code_generator.dart
index 031fdd7ca1..4b61a39199 100644
--- a/tools/serverpod_cli/lib/src/generator/dart/server_code_generator.dart
+++ b/tools/serverpod_cli/lib/src/generator/dart/server_code_generator.dart
@@ -1,4 +1,3 @@
-import 'package:code_builder/code_builder.dart';
 import 'package:path/path.dart' as p;
 
 import 'package:serverpod_cli/analyzer.dart';
@@ -6,8 +5,7 @@ import 'package:serverpod_cli/src/generator/code_generator.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/library_generator.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/model_library_generator.dart';
 import 'package:serverpod_cli/src/generator/dart/library_generators/server_test_tools_generator.dart';
-import 'package:serverpod_cli/src/generator/dart/library_generators/util/custom_allocators.dart';
-import 'package:serverpod_cli/src/generator/dart/library_generators/util/model_filter_util.dart';
+import 'package:serverpod_cli/src/generator/dart/library_generators/util/model_generators_util.dart';
 
 /// A [CodeGenerator] that generates the server side dart code of a
 /// serverpod project.
@@ -24,43 +22,14 @@ class DartServerCodeGenerator extends CodeGenerator {
       config: config,
     );
 
-    var modelAllocatorContext =
-        <({SerializableModelDefinition model, Allocator? allocator})>[];
-
-    var sealedHierarchies = ModelFilterUtil.getSealedHierarchies(models);
-
-    var modelsWithoutSealedHierarchies =
-        ModelFilterUtil.getClassesWithoutSealedHierarchies(models);
-
-    for (var sealedHierarchy in sealedHierarchies) {
-      var partOfAllocator = PartOfAllocator([]);
-      var partAllocator = PartAllocator(partOfAllocator);
-
-      for (var protocolFile in sealedHierarchy) {
-        modelAllocatorContext.add((
-          model: protocolFile,
-          allocator:
-              protocolFile.isSealedTopNode ? partAllocator : partOfAllocator
-        ));
-      }
-    }
-
-    for (var protocolFile in modelsWithoutSealedHierarchies) {
-      modelAllocatorContext.add((
-        model: protocolFile,
-        allocator: null,
-      ));
-    }
+    var modelAllocatorContext = ModelAllocatorContext.build(models, config);
 
     return {
-      for (var entry in modelAllocatorContext)
-        p.joinAll([
-          ...config.generatedServeModelPathParts,
-          ...entry.model.subDirParts,
-          '${entry.model.fileName}.dart'
-        ]): serverSideGenerator
-            .generateModelLibrary(entry.model)
-            .generateCode(allocator: entry.allocator),
+      for (var entry in modelAllocatorContext.entries)
+        entry.model.getFullFilePath(config, serverCode: true):
+            serverSideGenerator
+                .generateModelLibrary(entry.model)
+                .generateCode(allocator: entry.allocator),
     };
   }
 
diff --git a/tools/serverpod_cli/lib/src/test_util/compilation_unit_helpers.dart b/tools/serverpod_cli/lib/src/test_util/compilation_unit_helpers.dart
index 52da97b597..eca80505e4 100644
--- a/tools/serverpod_cli/lib/src/test_util/compilation_unit_helpers.dart
+++ b/tools/serverpod_cli/lib/src/test_util/compilation_unit_helpers.dart
@@ -1,3 +1,4 @@
+import 'dart:io';
 import 'package:analyzer/dart/ast/ast.dart';
 
 abstract class CompilationUnitHelpers {
@@ -123,16 +124,31 @@ abstract class CompilationUnitHelpers {
     return tryFindExportDirective(unit, uri: uri) != null;
   }
 
+  /// This is a temporary workaround for this bug: https://github.com/dart-lang/sdk/issues/59629
+  /// In which `directive.uri.stringValue` returns the path on windows without separators.
+  /// Meaning on:
+  /// linux: `sub_dir/filename.dart` and `../filename.dart`
+  /// windows: `subdirfilename.dart` and `..filename.dart`
+  static String applyWindowsBugfix(String input) {
+    if (Platform.isWindows) {
+      return input.replaceAll('/', '');
+    }
+    return input;
+  }
+
   /// Returns [List<PartDirective>] if the [unit] contains a part directive with the
   /// given [uri], otherwise returns `null`.
   static PartDirective? tryFindPartDirective(
     CompilationUnit unit, {
     required String uri,
   }) {
-    return unit.directives
-        .whereType<PartDirective>()
-        .where((directive) => directive.uri.stringValue == uri)
-        .firstOrNull;
+    return unit.directives.whereType<PartDirective>().where((directive) {
+      String directiveUri = directive.uri.stringValue!;
+
+      uri = applyWindowsBugfix(uri);
+
+      return directiveUri == uri;
+    }).firstOrNull;
   }
 
   /// Returns `true` if the [unit] contains a part directive with the given
@@ -150,11 +166,13 @@ abstract class CompilationUnitHelpers {
     CompilationUnit unit, {
     required String uri,
   }) {
-    var directives = unit.directives
-        .whereType<PartOfDirective>()
-        .where((directive) => directive.uri?.stringValue == uri);
+    return unit.directives.whereType<PartOfDirective>().where((directive) {
+      String directiveUri = directive.uri!.stringValue!;
 
-    return directives.isNotEmpty ? directives.first : null;
+      uri = applyWindowsBugfix(uri);
+
+      return directiveUri == uri;
+    }).firstOrNull;
   }
 
   /// Returns `true` if the [unit] contains a part of directive with the given
diff --git a/tools/serverpod_cli/test/analyzer/models/stateful_analyzer/model_validation/inheritance_test.dart b/tools/serverpod_cli/test/analyzer/models/stateful_analyzer/model_validation/inheritance_test.dart
index 924e23a435..f2baec9173 100644
--- a/tools/serverpod_cli/test/analyzer/models/stateful_analyzer/model_validation/inheritance_test.dart
+++ b/tools/serverpod_cli/test/analyzer/models/stateful_analyzer/model_validation/inheritance_test.dart
@@ -459,43 +459,4 @@ void main() {
       'The "sealed" property is mutually exclusive with the "table" property.',
     );
   });
-
-  test(
-      'Given a sealed hierarchy, when a file is not in the same subdirectory, then an error is collected that sealed classes must be in the same subdirectory',
-      () {
-    var modelSources = [
-      ModelSourceBuilder().withFileName('example2').withYaml(
-        '''
-          class: Example
-          sealed: true
-          fields:
-            name: String
-          ''',
-      ).build(),
-      ModelSourceBuilder().withFileName('example3').withYaml(
-        '''
-          class: ExampleChildClass
-          extends: Example
-          fields:
-            age: int
-          ''',
-      ).withProtocolRootPathParts(['sub_dir']).build(),
-    ];
-
-    var collector = CodeGenerationCollector();
-    StatefulAnalyzer(config, modelSources, onErrorsCollector(collector))
-        .validateAll();
-
-    expect(
-      collector.errors,
-      isNotEmpty,
-      reason: 'Expected an error but none was generated.',
-    );
-
-    var error = collector.errors.first;
-    expect(
-      error.message,
-      'All models in a sealed library must be in the same subdirectory. The class "ExampleChildClass" needs to be located in the same subdirectory as "Example".',
-    );
-  });
 }
diff --git a/tools/serverpod_cli/test/generator/dart/server_code_generator/sealed_class_test.dart b/tools/serverpod_cli/test/generator/dart/server_code_generator/sealed_class_test.dart
index 9fac763d63..7af31d255e 100644
--- a/tools/serverpod_cli/test/generator/dart/server_code_generator/sealed_class_test.dart
+++ b/tools/serverpod_cli/test/generator/dart/server_code_generator/sealed_class_test.dart
@@ -1,9 +1,11 @@
+import 'dart:io';
+
 import 'package:analyzer/dart/analysis/utilities.dart';
 import 'package:analyzer/dart/ast/ast.dart';
-import 'package:path/path.dart' as path;
-import 'package:serverpod_cli/src/analyzer/models/definitions.dart';
+import 'package:path/path.dart' as p;
 import 'package:test/test.dart';
 
+import 'package:serverpod_cli/src/analyzer/models/definitions.dart';
 import 'package:serverpod_cli/src/generator/dart/server_code_generator.dart';
 import 'package:serverpod_cli/src/test_util/builders/class_definition_builder.dart';
 import 'package:serverpod_cli/src/test_util/builders/generator_config_builder.dart';
@@ -14,8 +16,14 @@ final config = GeneratorConfigBuilder().withName(projectName).build();
 const generator = DartServerCodeGenerator();
 
 void main() {
-  String getExpectedFilePath(String fileName) =>
-      path.join('lib', 'src', 'generated', '$fileName.dart');
+  String getExpectedFilePath(String fileName, {List<String>? subDirParts}) =>
+      p.joinAll([
+        'lib',
+        'src',
+        'generated',
+        ...?subDirParts,
+        '$fileName.dart',
+      ]);
 
   var serverpodImportPath = 'package:serverpod/serverpod.dart';
 
@@ -706,4 +714,325 @@ void main() {
       });
     });
   });
+
+  group(
+      'Given a hierarchy: sealed > normal > normal, when the sealed top node is in another directory',
+      () {
+    var grandparent = ClassDefinitionBuilder()
+        .withClassName('ExampleGrandparent')
+        .withSubDirParts(['sub_dir'])
+        .withFileName('example_grandparent')
+        .withSimpleField('name', 'String')
+        .withIsSealed(true) // <= sealed
+        .build();
+    var parent = ClassDefinitionBuilder()
+        .withClassName('ExampleParent')
+        .withFileName('example_parent')
+        .withSimpleField('name', 'String')
+        .withExtendsClass(grandparent)
+        .build();
+    var child = ClassDefinitionBuilder()
+        .withClassName('ExampleChild')
+        .withFileName('example_child')
+        .withSimpleField('age', 'int', nullable: true)
+        .withExtendsClass(parent)
+        .build();
+
+    grandparent.childClasses.add(ResolvedInheritanceDefinition(parent));
+    parent.childClasses.add(ResolvedInheritanceDefinition(child));
+
+    var models = [
+      grandparent,
+      parent,
+      child,
+    ];
+
+    var codeMap = generator.generateSerializableModelsCode(
+      models: models,
+      config: config,
+    );
+
+    var grandparentPath = getExpectedFilePath(
+      grandparent.fileName,
+      subDirParts: ['sub_dir'],
+    );
+    var parentPath = getExpectedFilePath(parent.fileName);
+    var childPath = getExpectedFilePath(child.fileName);
+
+    var grandparentCompilationUnit =
+        parseString(content: codeMap[grandparentPath]!).unit;
+    var parentCompilationUnit = parseString(content: codeMap[parentPath]!).unit;
+    var childCompilationUnit = parseString(content: codeMap[childPath]!).unit;
+
+    group('then ${grandparent.className}', () {
+      test('has a part directive with ${parent.className} uri', () {
+        var partDirective = CompilationUnitHelpers.tryFindPartDirective(
+          grandparentCompilationUnit,
+          uri: '../${parent.fileName}.dart',
+        );
+
+        expect(
+          partDirective,
+          isNotNull,
+        );
+      });
+
+      test('has a part directive with ${child.className} uri', () {
+        var partDirective = CompilationUnitHelpers.tryFindPartDirective(
+          grandparentCompilationUnit,
+          uri: '../${child.fileName}.dart',
+        );
+        expect(
+          partDirective,
+          isNotNull,
+        );
+      });
+    });
+
+    group('then ${parent.className}', () {
+      test('has a part-of directive with ${grandparent.className} uri', () {
+        var partOfDirective = CompilationUnitHelpers.tryFindPartOfDirective(
+          parentCompilationUnit,
+          uri: 'sub_dir/${grandparent.fileName}.dart',
+        );
+        expect(
+          partOfDirective,
+          isNotNull,
+        );
+      });
+    });
+
+    group('then ${child.className}', () {
+      test('has a part-of directive with ${grandparent.className} uri', () {
+        var partOfDirective = CompilationUnitHelpers.tryFindPartOfDirective(
+          childCompilationUnit,
+          uri: 'sub_dir/${grandparent.fileName}.dart',
+        );
+        expect(
+          partOfDirective,
+          isNotNull,
+        );
+      });
+    });
+  });
+
+  group(
+      'Given a hierarchy: sealed > normal > normal when the middle node is in another directory',
+      () {
+    var grandparent = ClassDefinitionBuilder()
+        .withClassName('ExampleGrandparent')
+        .withFileName('example_grandparent')
+        .withSimpleField('name', 'String')
+        .withIsSealed(true) // <= sealed
+        .build();
+    var parent = ClassDefinitionBuilder()
+        .withClassName('ExampleParent')
+        .withFileName('example_parent')
+        .withSubDirParts(['sub_dir'])
+        .withSimpleField('name', 'String')
+        .withExtendsClass(grandparent)
+        .build();
+    var child = ClassDefinitionBuilder()
+        .withClassName('ExampleChild')
+        .withFileName('example_child')
+        .withSimpleField('age', 'int', nullable: true)
+        .withExtendsClass(parent)
+        .build();
+
+    grandparent.childClasses.add(ResolvedInheritanceDefinition(parent));
+    parent.childClasses.add(ResolvedInheritanceDefinition(child));
+
+    var models = [
+      grandparent,
+      parent,
+      child,
+    ];
+
+    var codeMap = generator.generateSerializableModelsCode(
+      models: models,
+      config: config,
+    );
+
+    var grandparentPath = getExpectedFilePath(grandparent.fileName);
+    var parentPath = getExpectedFilePath(
+      parent.fileName,
+      subDirParts: ['sub_dir'],
+    );
+    var childPath = getExpectedFilePath(child.fileName);
+
+    var grandparentCompilationUnit =
+        parseString(content: codeMap[grandparentPath]!).unit;
+    var parentCompilationUnit = parseString(content: codeMap[parentPath]!).unit;
+    var childCompilationUnit = parseString(content: codeMap[childPath]!).unit;
+
+    group('then ${grandparent.className}', () {
+      test('has a part directive with ${parent.className} uri', () {
+        var partDirective = CompilationUnitHelpers.tryFindPartDirective(
+          grandparentCompilationUnit,
+          uri: 'sub_dir/${parent.fileName}.dart',
+        );
+        expect(
+          partDirective,
+          isNotNull,
+        );
+      });
+
+      test('has a part directive with ${child.className} uri', () {
+        var partDirective = CompilationUnitHelpers.tryFindPartDirective(
+          grandparentCompilationUnit,
+          uri: '${child.fileName}.dart',
+        );
+        expect(
+          partDirective,
+          isNotNull,
+        );
+      });
+    });
+
+    group('then ${parent.className}', () {
+      test('has a part-of directive with ${grandparent.className} uri', () {
+        var partOfDirective = CompilationUnitHelpers.tryFindPartOfDirective(
+          parentCompilationUnit,
+          uri: '../${grandparent.fileName}.dart',
+        );
+        expect(
+          partOfDirective,
+          isNotNull,
+        );
+      });
+    });
+
+    group('then ${child.className}', () {
+      test('has a part-of directive with ${grandparent.className} uri', () {
+        var partOfDirective = CompilationUnitHelpers.tryFindPartOfDirective(
+          childCompilationUnit,
+          uri: '${grandparent.fileName}.dart',
+        );
+        expect(
+          partOfDirective,
+          isNotNull,
+        );
+      });
+    });
+  });
+
+  group(
+      'Given a hierarchy: sealed > normal > normal when the bottom node is in another directory',
+      () {
+    var grandparent = ClassDefinitionBuilder()
+        .withClassName('ExampleGrandparent')
+        .withFileName('example_grandparent')
+        .withSimpleField('name', 'String')
+        .withIsSealed(true) // <= sealed
+        .build();
+    var parent = ClassDefinitionBuilder()
+        .withClassName('ExampleParent')
+        .withFileName('example_parent')
+        .withSimpleField('name', 'String')
+        .withExtendsClass(grandparent)
+        .build();
+    var child = ClassDefinitionBuilder()
+        .withClassName('ExampleChild')
+        .withFileName('example_child')
+        .withSubDirParts(['sub_dir'])
+        .withSimpleField('age', 'int', nullable: true)
+        .withExtendsClass(parent)
+        .build();
+
+    grandparent.childClasses.add(ResolvedInheritanceDefinition(parent));
+    parent.childClasses.add(ResolvedInheritanceDefinition(child));
+
+    var models = [
+      grandparent,
+      parent,
+      child,
+    ];
+
+    var codeMap = generator.generateSerializableModelsCode(
+      models: models,
+      config: config,
+    );
+
+    var grandparentPath = getExpectedFilePath(grandparent.fileName);
+    var parentPath = getExpectedFilePath(parent.fileName);
+    var childPath = getExpectedFilePath(
+      child.fileName,
+      subDirParts: ['sub_dir'],
+    );
+
+    var grandparentCompilationUnit =
+        parseString(content: codeMap[grandparentPath]!).unit;
+    var parentCompilationUnit = parseString(content: codeMap[parentPath]!).unit;
+    var childCompilationUnit = parseString(content: codeMap[childPath]!).unit;
+
+    group('then ${grandparent.className}', () {
+      test('has a part directive with ${parent.className} uri', () {
+        var partDirective = CompilationUnitHelpers.tryFindPartDirective(
+          grandparentCompilationUnit,
+          uri: '${parent.fileName}.dart',
+        );
+        expect(
+          partDirective,
+          isNotNull,
+        );
+      });
+
+      test('has a part directive with ${child.className} uri', () {
+        var partDirective = CompilationUnitHelpers.tryFindPartDirective(
+          grandparentCompilationUnit,
+          uri: 'sub_dir/${child.fileName}.dart',
+        );
+        expect(
+          partDirective,
+          isNotNull,
+        );
+      });
+    });
+
+    group('then ${parent.className}', () {
+      test('has a part-of directive with ${grandparent.className} uri', () {
+        var partOfDirective = CompilationUnitHelpers.tryFindPartOfDirective(
+          parentCompilationUnit,
+          uri: '${grandparent.fileName}.dart',
+        );
+        expect(
+          partOfDirective,
+          isNotNull,
+        );
+      });
+    });
+
+    group('then ${child.className}', () {
+      test('has a part-of directive with ${grandparent.className} uri', () {
+        var partOfDirective = CompilationUnitHelpers.tryFindPartOfDirective(
+          childCompilationUnit,
+          uri: '../${grandparent.fileName}.dart',
+        );
+        expect(
+          partOfDirective,
+          isNotNull,
+        );
+      });
+    });
+  });
+
+  test(
+      'CompilationUnit.directives[i].uri.stringValue returns relative path without separators on Windows.',
+      () {
+    var content = Platform.isWindows
+        ? "part 'sub_dir\\example_child.dart';"
+        : "part 'sub_dir/example_child.dart';";
+
+    var unit = parseString(content: content).unit;
+
+    var directive = unit.directives.whereType<PartDirective>().first;
+
+    var directiveStringValue = directive.uri.stringValue;
+
+    var expectedPath = Platform.isWindows
+        ? 'sub_direxample_child.dart'
+        : 'sub_dir/example_child.dart';
+
+    expect(directiveStringValue == expectedPath, isTrue);
+  });
 }
