diff --git a/packages/serverpod/lib/src/database/adapters/postgres/database_connection.dart b/packages/serverpod/lib/src/database/adapters/postgres/database_connection.dart
index a72de9f852..0562573c5a 100644
--- a/packages/serverpod/lib/src/database/adapters/postgres/database_connection.dart
+++ b/packages/serverpod/lib/src/database/adapters/postgres/database_connection.dart
@@ -11,6 +11,7 @@ import 'package:serverpod/src/database/concepts/table_relation.dart';
 import 'package:serverpod/src/database/concepts/transaction.dart';
 import 'package:serverpod/src/database/exceptions.dart';
 import 'package:serverpod/src/database/sql_query_builder.dart';
+import 'package:uuid/uuid.dart';
 
 import '../../../generated/protocol.dart';
 import '../../../server/session.dart';
@@ -307,7 +308,11 @@ class DatabaseConnection {
         .withLimit(limit)
         .build();
 
-    var result = await _query(session, query, transaction: transaction);
+    var result = await _query(
+      session,
+      query,
+      context: _resolveQueryContext(transaction),
+    );
 
     if (result.length != 1) return 0;
 
@@ -328,8 +333,8 @@ class DatabaseConnection {
       session,
       query,
       timeoutInSeconds: timeoutInSeconds,
-      transaction: transaction,
       simpleQueryMode: true,
+      context: _resolveQueryContext(transaction),
     );
 
     return PostgresDatabaseResult(result);
@@ -347,21 +352,21 @@ class DatabaseConnection {
       session,
       query,
       timeoutInSeconds: timeoutInSeconds,
-      transaction: transaction,
       parameters: parameters,
+      context: _resolveQueryContext(transaction),
     );
 
     return PostgresDatabaseResult(result);
   }
 
-  Future<pg.Result> _query(
+  static Future<pg.Result> _query(
     Session session,
     String query, {
     int? timeoutInSeconds,
-    required Transaction? transaction,
     bool ignoreRows = false,
     bool simpleQueryMode = false,
     QueryParameters? parameters,
+    required pg.Session context,
   }) async {
     assert(
       simpleQueryMode == false ||
@@ -369,15 +374,11 @@ class DatabaseConnection {
       'simpleQueryMode does not support parameters',
     );
 
-    var postgresTransaction = _castToPostgresTransaction(transaction);
     var timeout =
         timeoutInSeconds != null ? Duration(seconds: timeoutInSeconds) : null;
 
     var startTime = DateTime.now();
     try {
-      var context =
-          postgresTransaction?.executionContext ?? _postgresConnection;
-
       var result = await context.execute(
         parameters is QueryParametersNamed ? pg.Sql.named(query) : query,
         timeout: timeout,
@@ -441,9 +442,9 @@ class DatabaseConnection {
       session,
       query,
       timeoutInSeconds: timeoutInSeconds,
-      transaction: transaction,
       ignoreRows: true,
       parameters: parameters,
+      context: _resolveQueryContext(transaction),
     );
 
     return result.affectedRows;
@@ -460,9 +461,9 @@ class DatabaseConnection {
       session,
       query,
       timeoutInSeconds: timeoutInSeconds,
-      transaction: transaction,
       ignoreRows: true,
       simpleQueryMode: true,
+      context: _resolveQueryContext(transaction),
     );
 
     return result.affectedRows;
@@ -479,12 +480,17 @@ class DatabaseConnection {
       session,
       query,
       timeoutInSeconds: timeoutInSeconds,
-      transaction: transaction,
+      context: _resolveQueryContext(transaction),
     );
 
     return result.map((row) => row.toColumnMap());
   }
 
+  pg.Session _resolveQueryContext(Transaction? transaction) {
+    var postgresTransaction = _castToPostgresTransaction(transaction);
+    return postgresTransaction?.executionContext ?? _postgresConnection;
+  }
+
   Future<List<T>> _deserializedMappedQuery<T extends TableRow>(
     Session session,
     String query, {
@@ -519,7 +525,7 @@ class DatabaseConnection {
         .toList();
   }
 
-  void _logQuery(
+  static void _logQuery(
     Session session,
     String query,
     DateTime startTime, {
@@ -545,6 +551,7 @@ class DatabaseConnection {
   Future<R> transaction<R>(
     TransactionFunction<R> transactionFunction, {
     required TransactionSettings settings,
+    required Session session,
   }) {
     var pgTransactionSettings = pg.TransactionSettings(
       isolationLevel: switch (settings.isolationLevel) {
@@ -558,7 +565,10 @@ class DatabaseConnection {
 
     return _postgresConnection.runTx<R>(
       (ctx) {
-        var transaction = _PostgresTransaction(ctx);
+        var transaction = _PostgresTransaction(
+          ctx,
+          session,
+        );
         return transactionFunction(transaction);
       },
       settings: pgTransactionSettings,
@@ -764,16 +774,56 @@ _PostgresTransaction? _castToPostgresTransaction(
   return transaction;
 }
 
+class _PostgresSavepoint implements Savepoint {
+  @override
+  final String id;
+  final _PostgresTransaction _transaction;
+
+  _PostgresSavepoint(this.id, this._transaction);
+
+  @override
+  Future<void> release() async {
+    await _transaction._query('RELEASE SAVEPOINT $id;');
+  }
+
+  @override
+  Future<void> rollback() async {
+    await _transaction._query('ROLLBACK TO SAVEPOINT $id;');
+  }
+}
+
 /// Postgres specific implementation of transactions.
 class _PostgresTransaction implements Transaction {
   final pg.TxSession executionContext;
+  final Session _session;
 
-  _PostgresTransaction(this.executionContext);
+  _PostgresTransaction(
+    this.executionContext,
+    this._session,
+  );
 
   @override
   Future<void> cancel() async {
     await executionContext.rollback();
   }
+
+  Future<void> _query(String query, {QueryParameters? parameters}) async {
+    await DatabaseConnection._query(
+      _session,
+      query,
+      parameters: parameters,
+      context: executionContext,
+    );
+  }
+
+  @override
+  Future<Savepoint> createSavepoint() async {
+    var postgresCompatibleRandomString =
+        const Uuid().v4().replaceAll(RegExp(r'-'), '_');
+    var savepointId = 'savepoint_$postgresCompatibleRandomString';
+    await _query('SAVEPOINT $savepointId;');
+    return _PostgresSavepoint(savepointId, this);
+  }
 }
 
 /// Extracts all the primary keys from the result set that are referenced by
diff --git a/packages/serverpod/lib/src/database/concepts/transaction.dart b/packages/serverpod/lib/src/database/concepts/transaction.dart
index ab27f9338e..ccb32ae20a 100644
--- a/packages/serverpod/lib/src/database/concepts/transaction.dart
+++ b/packages/serverpod/lib/src/database/concepts/transaction.dart
@@ -1,12 +1,28 @@
 /// A function performing a transaction, passed to the transaction method.
 typedef TransactionFunction<R> = Future<R> Function(Transaction transaction);
 
+/// A savepoint in a transaction.
+abstract interface class Savepoint {
+  /// The id of the savepoint.
+  String get id;
+
+  /// Releases the savepoint and any savepoints created after this savepoint.
+  Future<void> release();
+
+  /// Rolls back the transaction to the state of the savepoint.
+  Future<void> rollback();
+}
+
 /// Holds the state of a running database transaction.
 abstract interface class Transaction {
   /// Cancels the transaction.
   /// Subsequent calls to the database will have no effect and might throw an
   /// exception depending on driver.
   Future<void> cancel();
+
+  /// Creates a savepoint in the transaction that can be used to rollback to a
+  /// previous state.
+  Future<Savepoint> createSavepoint();
 }
 
 /// Isolation levels for transactions.
diff --git a/packages/serverpod/lib/src/database/database.dart b/packages/serverpod/lib/src/database/database.dart
index 5e56fbb4f1..fd16d7aaee 100644
--- a/packages/serverpod/lib/src/database/database.dart
+++ b/packages/serverpod/lib/src/database/database.dart
@@ -323,6 +323,7 @@ class Database {
     return await _databaseConnection.transaction(
       transactionFunction,
       settings: settings ?? const TransactionSettings(),
+      session: _session,
     );
   }
 
diff --git a/packages/serverpod/pubspec.yaml b/packages/serverpod/pubspec.yaml
index a5f07d5a09..6571556fc1 100644
--- a/packages/serverpod/pubspec.yaml
+++ b/packages/serverpod/pubspec.yaml
@@ -36,6 +36,7 @@ dependencies:
   yaml: ^3.1.1
   serverpod_shared: 2.2.0
   serverpod_serialization: 2.2.0
+  uuid: ^4.1.0
 
 dev_dependencies:
   test: ^1.24.2
@@ -47,4 +48,4 @@ dependency_overrides:
   serverpod_serialization:
     path: ../serverpod_serialization
   serverpod_lints:
-    path: ../serverpod_lints
\ No newline at end of file
+    path: ../serverpod_lints
diff --git a/packages/serverpod_test/lib/src/test_database_proxy.dart b/packages/serverpod_test/lib/src/test_database_proxy.dart
index f8a8b1ece8..943135df5a 100644
--- a/packages/serverpod_test/lib/src/test_database_proxy.dart
+++ b/packages/serverpod_test/lib/src/test_database_proxy.dart
@@ -185,7 +185,7 @@ class TestDatabaseProxy implements Database {
     }
 
     try {
-      await _transactionManager.addSavePoint(lock: true);
+      await _transactionManager.addSavepoint(lock: true);
     } on ConcurrentTransactionsException {
       throw InvalidConfigurationException(
         'Concurrent calls to transaction are not supported when database rollbacks are enabled. '
@@ -195,10 +195,10 @@ class TestDatabaseProxy implements Database {
 
     try {
       var result = await transactionFunction(localTransaction);
-      await _transactionManager.releasePreviousSavePoint(unlock: true);
+      await _transactionManager.releasePreviousSavepoint(unlock: true);
       return result;
     } catch (e) {
-      await _transactionManager.rollbackToPreviousSavePoint(unlock: true);
+      await _transactionManager.rollbackToPreviousSavepoint(unlock: true);
       rethrow;
     }
   }
@@ -331,7 +331,7 @@ class TestDatabaseProxy implements Database {
 
     return _databaseOperationLock.synchronized(() async {
       try {
-        await _transactionManager.addSavePoint(
+        await _transactionManager.addSavepoint(
           lock: true,
           isPartOfTransaction: isPartOfUserTransaction,
         );
@@ -346,10 +346,10 @@ class TestDatabaseProxy implements Database {
 
       try {
         var result = await databaseOperation();
-        await _transactionManager.releasePreviousSavePoint(unlock: true);
+        await _transactionManager.releasePreviousSavepoint(unlock: true);
         return result;
       } on DatabaseException catch (_) {
-        await _transactionManager.rollbackToPreviousSavePoint(unlock: true);
+        await _transactionManager.rollbackToPreviousSavepoint(unlock: true);
         rethrow;
       }
     });
diff --git a/packages/serverpod_test/lib/src/transaction_manager.dart b/packages/serverpod_test/lib/src/transaction_manager.dart
index 16c0be9142..b43fba02f7 100644
--- a/packages/serverpod_test/lib/src/transaction_manager.dart
+++ b/packages/serverpod_test/lib/src/transaction_manager.dart
@@ -9,7 +9,7 @@ class ConcurrentTransactionsException implements Exception {}
 
 /// Creates a transaction and manages savepoints for a given [Session].
 class TransactionManager {
-  final List<String> _savePointIds = [];
+  final List<Savepoint> _savepoints = [];
 
   /// The current transaction.
   Transaction? currentTransaction;
@@ -73,11 +73,12 @@ class TransactionManager {
   }
 
   /// Creates a savepoint in the current transaction.
-  Future<void> addSavePoint({
+  Future<void> addSavepoint({
     bool lock = false,
     bool isPartOfTransaction = false,
   }) async {
-    if (currentTransaction == null) {
+    var localTransaction = currentTransaction;
+    if (localTransaction == null) {
       throw StateError('No ongoing transaction.');
     }
 
@@ -87,41 +88,24 @@ class TransactionManager {
       _isTransactionStackLocked = true;
     }
 
-    var savePointId = _getNextSavePointId();
-    _savePointIds.add(savePointId);
-
-    await serverpodSession.db.unsafeExecuteWithoutDatabaseExceptionGuard(
-      'SAVEPOINT $savePointId;',
-      transaction: currentTransaction,
-    );
-  }
-
-  /// Generates and returns the next savepoint id.
-  String _getNextSavePointId() {
-    var postgresCompatibleRandomString =
-        const Uuid().v4obj().toString().replaceAll(RegExp(r'-'), '_');
-    var savePointId = 'savepoint_$postgresCompatibleRandomString';
+    var savepoint = await localTransaction.createSavepoint();
 
-    return savePointId;
+    _savepoints.add(savepoint);
   }
 
-  /// Rolls back the database to the previous save point in the current transaction.
-  Future<void> rollbackToPreviousSavePoint({bool unlock = false}) async {
-    var savePointId = await _popPreviousSavePointId(unlock: unlock);
-
-    await serverpodSession.db.unsafeExecuteWithoutDatabaseExceptionGuard(
-      'ROLLBACK TO SAVEPOINT $savePointId;',
-      transaction: currentTransaction,
-    );
+  /// Rolls back the database to the previous savepoint in the current transaction.
+  Future<void> rollbackToPreviousSavepoint({bool unlock = false}) async {
+    var savepoint = await _popPreviousSavepoint(unlock: unlock);
+    await savepoint.rollback();
   }
 
-  /// Removes the previous save point in the current transaction.
-  Future<String> _popPreviousSavePointId({bool unlock = false}) async {
+  /// Removes the previous savepoint in the current transaction.
+  Future<Savepoint> _popPreviousSavepoint({bool unlock = false}) async {
     if (currentTransaction == null) {
       throw StateError('No ongoing transaction.');
     }
 
-    if (_savePointIds.isEmpty) {
+    if (_savepoints.isEmpty) {
       throw StateError('No previous savepoint to rollback to.');
     }
 
@@ -129,16 +113,13 @@ class TransactionManager {
       _isTransactionStackLocked = false;
     }
 
-    return _savePointIds.removeLast();
+    return _savepoints.removeLast();
   }
 
-  /// Releases the previous save point in the current transaction.
-  Future<void> releasePreviousSavePoint({bool unlock = true}) async {
-    var savePointId = await _popPreviousSavePointId(unlock: unlock);
+  /// Releases the previous savepoint in the current transaction.
+  Future<void> releasePreviousSavepoint({bool unlock = true}) async {
+    var savepoint = await _popPreviousSavepoint(unlock: unlock);
 
-    await serverpodSession.db.unsafeExecuteWithoutDatabaseExceptionGuard(
-      'RELEASE SAVEPOINT $savePointId;',
-      transaction: currentTransaction,
-    );
+    await savepoint.release();
   }
 }
diff --git a/packages/serverpod_test/lib/src/with_serverpod.dart b/packages/serverpod_test/lib/src/with_serverpod.dart
index 0f5111c8a6..16564eda35 100644
--- a/packages/serverpod_test/lib/src/with_serverpod.dart
+++ b/packages/serverpod_test/lib/src/with_serverpod.dart
@@ -141,7 +141,7 @@ void Function(TestClosure<T>)
             var localTransactionManager = getTransactionManager();
 
             await localTransactionManager.createTransaction();
-            await localTransactionManager.addSavePoint();
+            await localTransactionManager.addSavepoint();
           }
         });
 
@@ -153,8 +153,8 @@ void Function(TestClosure<T>)
           if (rollbackDatabase == RollbackDatabase.afterEach) {
             var localTransactionManager = getTransactionManager();
 
-            await localTransactionManager.rollbackToPreviousSavePoint();
-            await localTransactionManager.addSavePoint();
+            await localTransactionManager.rollbackToPreviousSavepoint();
+            await localTransactionManager.addSavepoint();
           }
 
           await GlobalStreamManager.closeAllStreams();
diff --git a/templates/pubspecs/packages/serverpod/pubspec.yaml b/templates/pubspecs/packages/serverpod/pubspec.yaml
index d31ef773e2..b98956c84c 100644
--- a/templates/pubspecs/packages/serverpod/pubspec.yaml
+++ b/templates/pubspecs/packages/serverpod/pubspec.yaml
@@ -35,6 +35,7 @@ dependencies:
   yaml: ^3.1.1
   serverpod_shared: SERVERPOD_VERSION
   serverpod_serialization: SERVERPOD_VERSION
+  uuid: ^4.1.0
 
 dev_dependencies:
   test: ^1.24.2
@@ -46,4 +47,4 @@ dependency_overrides:
   serverpod_serialization:
     path: ../serverpod_serialization
   serverpod_lints:
-    path: ../serverpod_lints
\ No newline at end of file
+    path: ../serverpod_lints
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/count_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/count_test.dart
index 158282d8f2..a3ddc62947 100644
--- a/tests/serverpod_test_server/test_integration/database_operations/transactions/count_test.dart
+++ b/tests/serverpod_test_server/test_integration/database_operations/transactions/count_test.dart
@@ -6,6 +6,11 @@ import 'package:test/test.dart';
 class MockTransaction implements Transaction {
   @override
   Future<void> cancel() async {}
+
+  @override
+  Future<Savepoint> createSavepoint() {
+    throw UnimplementedError();
+  }
 }
 
 void main() async {
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/delete_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/delete_test.dart
index de1006f4bb..5d4e4c50ff 100644
--- a/tests/serverpod_test_server/test_integration/database_operations/transactions/delete_test.dart
+++ b/tests/serverpod_test_server/test_integration/database_operations/transactions/delete_test.dart
@@ -6,6 +6,11 @@ import 'package:test/test.dart';
 class MockTransaction implements Transaction {
   @override
   Future<void> cancel() async {}
+
+  @override
+  Future<Savepoint> createSavepoint() {
+    throw UnimplementedError();
+  }
 }
 
 void main() async {
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/find_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/find_test.dart
index e1cf930ade..fdae2aeddb 100644
--- a/tests/serverpod_test_server/test_integration/database_operations/transactions/find_test.dart
+++ b/tests/serverpod_test_server/test_integration/database_operations/transactions/find_test.dart
@@ -6,6 +6,11 @@ import 'package:test/test.dart';
 class MockTransaction implements Transaction {
   @override
   Future<void> cancel() async {}
+
+  @override
+  Future<Savepoint> createSavepoint() {
+    throw UnimplementedError();
+  }
 }
 
 void main() async {
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/insert_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/insert_test.dart
index 0ab1f36aa8..d7432391f6 100644
--- a/tests/serverpod_test_server/test_integration/database_operations/transactions/insert_test.dart
+++ b/tests/serverpod_test_server/test_integration/database_operations/transactions/insert_test.dart
@@ -6,6 +6,11 @@ import 'package:test/test.dart';
 class MockTransaction implements Transaction {
   @override
   Future<void> cancel() async {}
+
+  @override
+  Future<Savepoint> createSavepoint() {
+    throw UnimplementedError();
+  }
 }
 
 void main() async {
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/savepoint_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/savepoint_test.dart
new file mode 100644
index 0000000000..c7247d9bc9
--- /dev/null
+++ b/tests/serverpod_test_server/test_integration/database_operations/transactions/savepoint_test.dart
@@ -0,0 +1,192 @@
+import 'package:serverpod/serverpod.dart';
+import 'package:serverpod_test_server/src/generated/protocol.dart';
+import 'package:serverpod_test_server/test_util/test_serverpod.dart';
+import 'package:test/test.dart';
+
+void main() async {
+  var session = await IntegrationTestServer().session();
+
+  tearDown(() async {
+    await SimpleData.db.deleteWhere(session, where: (_) => Constant.bool(true));
+  });
+
+  test(
+      'Given a transaction with data inserted after savepoint '
+      'when rolling back to savepoint '
+      'then no data is persisted in the database', () async {
+    await session.db.transaction<void>(
+      (transaction) async {
+        var savepoint = await transaction.createSavepoint();
+        await SimpleData.db
+            .insertRow(session, SimpleData(num: 1), transaction: transaction);
+        await savepoint.rollback();
+      },
+    );
+
+    var fetchedData = await SimpleData.db.find(session);
+
+    expect(fetchedData, isEmpty);
+  });
+
+  test(
+      'Given a transaction with data inserted after savepoint '
+      'when rolling back multiple times to same savepoint '
+      'then no data is persisted in the database', () async {
+    await session.db.transaction<void>(
+      (transaction) async {
+        var savepoint = await transaction.createSavepoint();
+        await SimpleData.db.insertRow(
+          session,
+          SimpleData(num: 1),
+          transaction: transaction,
+        );
+        await savepoint.rollback();
+        await savepoint.rollback();
+      },
+    );
+
+    var fetchedData = await SimpleData.db.find(session);
+
+    expect(fetchedData, isEmpty);
+  });
+
+  test(
+      'Given a transaction with data inserted after savepoint '
+      'when adding new savepoint with data and rolling back to it after '
+      'rolling back to the first savepoint '
+      'then no data is persisted in the database', () async {
+    await session.db.transaction<void>(
+      (transaction) async {
+        var firstSavepoint = await transaction.createSavepoint();
+        await SimpleData.db.insertRow(
+          session,
+          SimpleData(num: 1),
+          transaction: transaction,
+        );
+        await firstSavepoint.rollback();
+
+        var secondSavepoint = await transaction.createSavepoint();
+        await SimpleData.db.insertRow(
+          session,
+          SimpleData(num: 2),
+          transaction: transaction,
+        );
+        await secondSavepoint.rollback();
+      },
+    );
+
+    var fetchedData = await SimpleData.db.find(session);
+
+    expect(fetchedData, isEmpty);
+  });
+
+  test(
+      'Given a transaction with data inserted after savepoint '
+      'when releasing savepoint '
+      'then data is persisted in the database', () async {
+    await session.db.transaction<void>(
+      (transaction) async {
+        var savepoint = await transaction.createSavepoint();
+        await SimpleData.db.insertRow(
+          session,
+          SimpleData(num: 1),
+          transaction: transaction,
+        );
+        await savepoint.release();
+      },
+    );
+
+    var fetchedData = await SimpleData.db.find(session);
+
+    expect(fetchedData, hasLength(1));
+    expect(fetchedData.first.num, 1);
+  });
+
+  group(
+      'Given a transaction with data inserted after savepoint '
+      'when rolling back to savepoint after it has been released ', () {
+    late Future<void> transactionFuture;
+    setUp(() async {
+      transactionFuture = session.db.transaction<void>(
+        (transaction) async {
+          var savepoint = await transaction.createSavepoint();
+          await SimpleData.db.insertRow(
+            session,
+            SimpleData(num: 1),
+            transaction: transaction,
+          );
+          await savepoint.release();
+          await savepoint.rollback();
+        },
+      );
+    });
+
+    test('then database exception is thrown', () async {
+      await expectLater(transactionFuture, throwsA(isA<DatabaseException>()));
+    });
+
+    test('then no data is persisted in the database', () async {
+      await transactionFuture.catchError((e) => null);
+
+      var fetchedData = await SimpleData.db.find(session);
+
+      expect(fetchedData, isEmpty);
+    });
+  });
+
+  group(
+      'Given a transaction with two savepoints with data insertion in between '
+      'when rolling back to first second savepoint after first has been released ',
+      () {
+    late Future<void> transactionFuture;
+    setUp(() async {
+      transactionFuture = session.db.transaction<void>(
+        (transaction) async {
+          var savepoint = await transaction.createSavepoint();
+          await SimpleData.db
+              .insertRow(session, SimpleData(num: 1), transaction: transaction);
+          var savepoint2 = await transaction.createSavepoint();
+          await SimpleData.db
+              .insertRow(session, SimpleData(num: 2), transaction: transaction);
+          await savepoint.release();
+          await savepoint2.rollback();
+        },
+      );
+    });
+
+    test('then database exception is thrown', () async {
+      await expectLater(transactionFuture, throwsA(isA<DatabaseException>()));
+    });
+
+    test('then no data is persisted in the database', () async {
+      await transactionFuture.catchError((e) => null);
+
+      var fetchedData = await SimpleData.db.find(session);
+
+      expect(fetchedData, isEmpty);
+    });
+  });
+
+  test(
+      'Given a transaction with data inserted before and after savepoint '
+      'when rolling back to savepoint '
+      'then data inserted before savepoint is persisted in the database',
+      () async {
+    var data1 = SimpleData(num: 1);
+    var data2 = SimpleData(num: 2);
+
+    await session.db.transaction<void>(
+      (transaction) async {
+        await SimpleData.db.insertRow(session, data1, transaction: transaction);
+        var savepoint = await transaction.createSavepoint();
+        await SimpleData.db.insertRow(session, data2, transaction: transaction);
+        await savepoint.rollback();
+      },
+    );
+
+    var fetchedData = await SimpleData.db.find(session);
+
+    expect(fetchedData, hasLength(1));
+    expect(fetchedData.first.num, 1);
+  });
+}
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/transaction_rollback_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/transaction_rollback_test.dart
deleted file mode 100644
index 84db7d8c2e..0000000000
--- a/tests/serverpod_test_server/test_integration/database_operations/transactions/transaction_rollback_test.dart
+++ /dev/null
@@ -1,49 +0,0 @@
-import 'package:serverpod/serverpod.dart';
-import 'package:serverpod_test_server/src/generated/protocol.dart';
-import 'package:serverpod_test_server/test_util/test_serverpod.dart';
-import 'package:test/test.dart';
-
-class MockTransaction implements Transaction {
-  @override
-  Future<void> cancel() async {}
-}
-
-void main() async {
-  var session = await IntegrationTestServer().session();
-
-  test(
-      'Given a transaction when rolling back to savepoint and then saving row then committed rows are found in database.',
-      () async {
-    var data = UniqueData(number: 1, email: 'test@serverpod.dev');
-    var data2 = UniqueData(number: 2, email: 'test2@serverpod.dev');
-    var data3 = UniqueData(number: 3, email: 'test3@serverpod.dev');
-    await session.db.transaction<void>(
-      (transaction) async {
-        await UniqueData.db.insertRow(session, data, transaction: transaction);
-
-        await session.db.unsafeExecute(
-          'SAVEPOINT savepoint1;',
-          transaction: transaction,
-        );
-        await UniqueData.db.insertRow(session, data2, transaction: transaction);
-        await session.db.unsafeExecute(
-          'ROLLBACK TO SAVEPOINT savepoint1;',
-          transaction: transaction,
-        );
-
-        await UniqueData.db.insertRow(session, data3, transaction: transaction);
-      },
-    );
-
-    var fetchedData = await UniqueData.db.find(session);
-
-    expect(fetchedData, isNotEmpty);
-    expect(fetchedData, hasLength(2));
-    expect(fetchedData.elementAtOrNull(0)?.number, data.number);
-    expect(fetchedData.elementAtOrNull(1)?.number, data3.number);
-  });
-
-  tearDown(() async {
-    await UniqueData.db.deleteWhere(session, where: (t) => Constant.bool(true));
-  });
-}
diff --git a/tests/serverpod_test_server/test_integration/database_operations/transactions/update_test.dart b/tests/serverpod_test_server/test_integration/database_operations/transactions/update_test.dart
index eaee740d9a..f12d4b8343 100644
--- a/tests/serverpod_test_server/test_integration/database_operations/transactions/update_test.dart
+++ b/tests/serverpod_test_server/test_integration/database_operations/transactions/update_test.dart
@@ -6,6 +6,11 @@ import 'package:test/test.dart';
 class MockTransaction implements Transaction {
   @override
   Future<void> cancel() async {}
+
+  @override
+  Future<Savepoint> createSavepoint() {
+    throw UnimplementedError();
+  }
 }
 
 void main() async {
