This pull request introduces a new database exception type, `DatabaseQueryException`, to encapsulate relevant information about exceptions during database queries. The `DatabaseQueryException` class has been designed to provide minimal but essential information to users, with the `code` field being a nullable String due to varying database codes. This PR supersedes an earlier PR (https://github.com/serverpod/serverpod/pull/2546).

### Key Changes:
1. **New Database Exception Type:**
   - Add `DatabaseQueryException` for handling database query exceptions with relevant user information.
   - The `code` field remains a nullable String to accommodate different database types.

2. **Abstract Interface Updates:**
   - Introduce new abstract interfaces for future extensibility in a backward-compatible manner.
   - Implement these interfaces within the Postgres adapter to lay the groundwork for future adapter support.

3. **Legacy Tests and Refactor:**
   - Convert legacy tests to improve type precision.
   - Refactor to simplify `if` statements in database query exception handling.

4. **Backward Compatibility:**
   - Ensure no breaking changes; the new subtypes aim not to interfere with existing exception handling logic.

### Actionable Steps for Programmer:
- Review and implement the `DatabaseQueryException` along with its fields, ensuring relevant details are captured.
- Apply the new abstract interfaces to the Postgres adapter, allowing for future expandability to other adapters.
- Update legacy tests to reflect precision in type checking and ensure all new tests are passing.
- Refactor code to streamline `if` statements for catching database query exceptions.
- Ensure documentation is updated and aligns with existing Serverpod documentation standards.
- Confirm that the changes preserve backward compatibility and do not introduce breaking changes.

No breaking changes are introduced, but ensure to verify compatibility with existing logic and systems.