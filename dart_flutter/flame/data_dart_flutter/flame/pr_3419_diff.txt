diff --git a/doc/flame/other/other.md b/doc/flame/other/other.md
index d6671778f0a..c77a37efed1 100644
--- a/doc/flame/other/other.md
+++ b/doc/flame/other/other.md
@@ -7,7 +7,7 @@
 
 ```{toctree}
 :hidden:
-    
+
 Debugging    <debug.md>
 Utils        <util.md>
 Widgets      <widgets.md>
diff --git a/doc/flame/other/util.md b/doc/flame/other/util.md
index e9f730d9ae1..6a626f5773d 100644
--- a/doc/flame/other/util.md
+++ b/doc/flame/other/util.md
@@ -5,6 +5,13 @@ On this page you can find documentation for some utility classes and methods.
 
 ## Device Class
 
+```{warning}
+Many methods in this class only work on mobile platforms (Android and iOS).
+
+Using these methods on other platforms will not have any effect and you will
+get a warning printed on your console when running in debug mode.
+```
+
 This class can be accessed from `Flame.device` and it has some methods that can be used to control
 the state of the device, for instance you can change the screen orientation and set whether the
 application should be fullscreen or not.
diff --git a/packages/flame/lib/src/device.dart b/packages/flame/lib/src/device.dart
index 8be513ecd86..62e89796945 100644
--- a/packages/flame/lib/src/device.dart
+++ b/packages/flame/lib/src/device.dart
@@ -1,5 +1,7 @@
 import 'dart:async';
+import 'dart:io';
 
+import 'package:flutter/foundation.dart';
 import 'package:flutter/services.dart';
 
 /// Provides methods for controlling the device (e.g. setting the screen to
@@ -7,11 +9,32 @@ import 'package:flutter/services.dart';
 ///
 /// To use this class, access it via Flame.device.
 class Device {
+  void _warnIfDesktop(String source) {
+    assert(() {
+      if (!kIsWeb &&
+          (Platform.isMacOS || Platform.isWindows || Platform.isLinux)) {
+        // ignore: avoid_print
+        print(
+          'Warning: $source is not supported on desktop platforms. '
+          'It will be a no-op.',
+        );
+      }
+      return true;
+    }());
+  }
+
   /// Sets the app to be full-screen (no buttons, bar or notifications on top).
   Future<void> fullScreen() {
+    _warnIfDesktop('fullScreen');
     return SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
   }
 
+  /// Restore the UI mode to the default ([SystemUiMode.edgeToEdge).
+  Future<void> restoreFullscreen() {
+    _warnIfDesktop('restoreFullscreen');
+    return SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
+  }
+
   /// Sets the preferred orientation (landscape or portrait) for the app.
   ///
   /// When it opens, it will automatically change orientation to the preferred
