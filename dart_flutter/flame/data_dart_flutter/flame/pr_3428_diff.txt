diff --git a/packages/flame/lib/src/components/core/component.dart b/packages/flame/lib/src/components/core/component.dart
index 5f410ac7d46..4fb0a4623b8 100644
--- a/packages/flame/lib/src/components/core/component.dart
+++ b/packages/flame/lib/src/components/core/component.dart
@@ -614,7 +614,7 @@ class Component {
         _clearRemovingBit();
       }
       game.enqueueMove(child, this);
-    } else if (isMounted && !isRemoving && !child.isMounted) {
+    } else if (isMounted && !child.isMounted) {
       child._parent = this;
       game.enqueueAdd(child, this);
     } else {
@@ -829,6 +829,12 @@ class Component {
     } else {
       if (parent.isMounted && !isLoading) {
         _startLoading();
+      } else if (parent.isRemoved) {
+        // This case happens when the child is added to a parent that is being
+        // removed in the same tick.
+        _parent = parent;
+        parent.children.add(this);
+        return LifecycleEventStatus.done;
       }
       return LifecycleEventStatus.block;
     }
diff --git a/packages/flame/test/components/component_test.dart b/packages/flame/test/components/component_test.dart
index 3cc4f69e4c9..aede46b867b 100644
--- a/packages/flame/test/components/component_test.dart
+++ b/packages/flame/test/components/component_test.dart
@@ -646,7 +646,13 @@ void main() {
 
         // Timeout is added because processLifecycleEvents of ComponentTreeRoot
         // gets blocked in such cases.
-        expect(game.ready().timeout(const Duration(seconds: 2)), completes);
+
+        // Expect the ready future to complete
+        await expectLater(
+          game.ready().timeout(const Duration(seconds: 2)),
+          completes,
+        );
+        expect(game.hasLifecycleEvents, isFalse);
 
         // Adding the parent again should eventually mount the child as well.
         await game.add(parent);
