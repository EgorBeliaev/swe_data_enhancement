diff --git a/.github/.cspell/gamedev_dictionary.txt b/.github/.cspell/gamedev_dictionary.txt
index a50a60423b4..b4c19718bed 100644
--- a/.github/.cspell/gamedev_dictionary.txt
+++ b/.github/.cspell/gamedev_dictionary.txt
@@ -22,6 +22,9 @@ fullscreen # mode in which a program or app occupies the entire screen with no b
 goldens # test files used as reference for Golden Tests
 hitbox # the collision box around objects for the purposes of collision detection
 hitboxes # plural of hitbox
+IDAT # PNG data chunk
+IHDR # PNG header chunk
+IEND # PNG end chunk
 ints # short for integers
 impellerc # Flutter's impeller compiler
 jank # stutter or inconsistent gap or timing
@@ -65,6 +68,7 @@ struct # a type of data model in programming that aggregates fields
 SVGs # plural of SVG
 tileset # image with a collection of tiles. in games, tiles are small square sprites laid out in a grid to form the game map
 tilesets # plural of tileset
+truecolor # truecolor rendering
 tweening # the process of tween
 unawaited # un-awaited, a future that is not associated with an "await" expression
 viewports # plural of viewport
diff --git a/packages/flame/lib/src/widgets/sprite_button.dart b/packages/flame/lib/src/widgets/sprite_button.dart
index 87fa902d88a..9f6c3da3bbf 100644
--- a/packages/flame/lib/src/widgets/sprite_button.dart
+++ b/packages/flame/lib/src/widgets/sprite_button.dart
@@ -1,6 +1,7 @@
 import 'dart:async';
 
 import 'package:flame/cache.dart';
+import 'package:flame/flame.dart';
 import 'package:flame/src/extensions/size.dart';
 import 'package:flame/src/extensions/vector2.dart';
 import 'package:flame/src/sprite.dart';
@@ -100,20 +101,34 @@ class SpriteButton extends StatelessWidget {
     this.errorBuilder,
     this.loadingBuilder,
     super.key,
-  }) : _buttonsFuture = Future.wait([
-          Sprite.load(
-            path,
-            srcSize: srcSize,
-            srcPosition: srcPosition,
-            images: images,
-          ),
-          Sprite.load(
-            pressedPath,
-            srcSize: pressedSrcSize,
-            srcPosition: pressedSrcPosition,
-            images: images,
-          ),
-        ]);
+  }) : _buttonsFuture = (images ?? Flame.images).containsKey(path) &&
+                (images ?? Flame.images).containsKey(pressedPath)
+            ? [
+                Sprite(
+                  (images ?? Flame.images).fromCache(path),
+                  srcPosition: srcPosition,
+                  srcSize: srcSize,
+                ),
+                Sprite(
+                  (images ?? Flame.images).fromCache(pressedPath),
+                  srcPosition: pressedSrcPosition,
+                  srcSize: pressedSrcSize,
+                ),
+              ]
+            : Future.wait([
+                Sprite.load(
+                  path,
+                  srcPosition: srcPosition,
+                  srcSize: srcSize,
+                  images: images,
+                ),
+                Sprite.load(
+                  pressedPath,
+                  srcPosition: pressedSrcPosition,
+                  srcSize: pressedSrcSize,
+                  images: images,
+                ),
+              ]);
 
   @override
   Widget build(BuildContext context) {
diff --git a/packages/flame/test/widgets/sprite_button_test.dart b/packages/flame/test/widgets/sprite_button_test.dart
index ae1b1c83dff..25878b606d4 100644
--- a/packages/flame/test/widgets/sprite_button_test.dart
+++ b/packages/flame/test/widgets/sprite_button_test.dart
@@ -1,12 +1,17 @@
+import 'package:flame/cache.dart';
 import 'package:flame/flame.dart';
 import 'package:flame/widgets.dart';
 import 'package:flame_test/flame_test.dart';
-import 'package:flutter/material.dart';
+import 'package:flutter/widgets.dart';
 import 'package:flutter_test/flutter_test.dart';
+import 'package:mocktail/mocktail.dart';
 
 import 'loading_widget.dart';
 
+class _MockImages extends Mock implements Images {}
+
 Future<void> main() async {
+  TestWidgetsFlutterBinding.ensureInitialized();
   final image = await generateImage();
 
   group('SpriteButton', () {
@@ -38,8 +43,14 @@ Future<void> main() async {
       (tester) async {
         const imagePath1 = 'test_path_1';
         const imagePath2 = 'test_path_2';
-        Flame.images.add(imagePath1, image);
-        Flame.images.add(imagePath2, image);
+
+        final mockImageCache = _MockImages();
+
+        when(() => mockImageCache.load(any())).thenAnswer(
+          (_) => generateImage(),
+        );
+
+        when(() => mockImageCache.containsKey(any())).thenAnswer((_) => false);
 
         await tester.pumpWidget(
           SpriteButton.asset(
@@ -50,23 +61,62 @@ Future<void> main() async {
             height: 100,
             label: const SizedBox(),
             loadingBuilder: (_) => const LoadingWidget(),
+            images: mockImageCache,
           ),
         );
 
         final futureBuilderFinder = find.byType(FutureBuilder<List<Sprite>>);
-        final nineTileBoxWidgetFinder = find.byType(InternalSpriteButton);
+        final internalButtonFinder = find.byType(InternalSpriteButton);
         final loadingWidgetFinder = find.byType(LoadingWidget);
 
         expect(futureBuilderFinder, findsOneWidget);
         expect(loadingWidgetFinder, findsOneWidget);
-        expect(nineTileBoxWidgetFinder, findsNothing);
+        expect(internalButtonFinder, findsNothing);
 
         /// loading to be removed
         await tester.pump();
 
         expect(futureBuilderFinder, findsOneWidget);
         expect(loadingWidgetFinder, findsNothing);
-        expect(nineTileBoxWidgetFinder, findsOneWidget);
+        expect(internalButtonFinder, findsOneWidget);
+      },
+    );
+
+    testWidgets(
+      'has no FutureBuilder or LoadingWidget when passed already '
+      'loaded asset paths',
+      (tester) async {
+        const imagePath1 = 'test_path_1';
+        const imagePath2 = 'test_path_2';
+        Flame.images.add(imagePath1, image);
+        Flame.images.add(imagePath2, image);
+
+        await tester.pumpWidget(
+          SpriteButton.asset(
+            path: imagePath1,
+            pressedPath: imagePath2,
+            onPressed: () {},
+            width: 100,
+            height: 100,
+            label: const SizedBox(),
+            loadingBuilder: (_) => const LoadingWidget(),
+          ),
+        );
+
+        final futureBuilderFinder = find.byType(FutureBuilder<List<Sprite>>);
+        final internalButtonFinder = find.byType(InternalSpriteButton);
+        final loadingWidgetFinder = find.byType(LoadingWidget);
+
+        expect(futureBuilderFinder, findsNothing);
+        expect(loadingWidgetFinder, findsNothing);
+        expect(internalButtonFinder, findsOneWidget);
+
+        /// loading to be removed
+        await tester.pump();
+
+        expect(futureBuilderFinder, findsNothing);
+        expect(loadingWidgetFinder, findsNothing);
+        expect(internalButtonFinder, findsOneWidget);
       },
     );
   });
diff --git a/packages/flame_test/lib/src/mock_image.dart b/packages/flame_test/lib/src/mock_image.dart
index a3affabd65c..dd6b956625f 100644
--- a/packages/flame_test/lib/src/mock_image.dart
+++ b/packages/flame_test/lib/src/mock_image.dart
@@ -1,3 +1,4 @@
+import 'dart:typed_data';
 import 'dart:ui';
 
 Future<Image> generateImage([int width = 1, int height = 1]) {
@@ -20,3 +21,26 @@ Future<Image> generateImage([int width = 1, int height = 1]) {
   );
   return image;
 }
+
+ByteData generatePNGByteData() => ByteData.sublistView(
+      Uint8List.fromList([
+        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG file signature
+        0x00, 0x00, 0x00, 0x0D, // IHDR chunk length
+        0x49, 0x48, 0x44, 0x52, // IHDR chunk type
+        0x00, 0x00, 0x00, 0x01, // Width: 1
+        0x00, 0x00, 0x00, 0x01, // Height: 1
+        0x08, // Bit depth: 8
+        0x02, // Color type: Truecolor
+        0x00, // Compression method: Deflate
+        0x00, // Filter method: Adaptive
+        0x00, // Interlace method: No interlace
+        0x90, 0x77, 0x53, 0xDE, // CRC
+        0x00, 0x00, 0x00, 0x0A, // IDAT chunk length
+        0x49, 0x44, 0x41, 0x54, // IDAT chunk type
+        0x08, 0xD7, 0x63, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xE2, 0x21,
+        0xBC, 0x33, // IDAT data and CRC
+        0x00, 0x00, 0x00, 0x00, // IEND chunk length
+        0x49, 0x45, 0x4E, 0x44, // IEND chunk type
+        0xAE, 0x42, 0x60, 0x82, // CRC
+      ]),
+    );
