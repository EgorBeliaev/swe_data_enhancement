diff --git a/.github/.cspell/flame_dictionary.txt b/.github/.cspell/flame_dictionary.txt
index 81814197d92..d8a47f00a83 100644
--- a/.github/.cspell/flame_dictionary.txt
+++ b/.github/.cspell/flame_dictionary.txt
@@ -27,3 +27,4 @@ vantablack # brand name for a famous super-black ink known as the darkest ever m
 Weasley # Ron Weasley, a character from the book Harry Potter
 Wyrmsun # An open-source real-time strategy game https://www.indiedb.com/games/wyrmsun
 yarnspinner # A tool for building branching narrative and dialogue in games # https://yarnspinner.dev/
+terminui # A terminal UI library for Flutter
diff --git a/packages/flame_console/example/lib/main.dart b/packages/flame_console/example/lib/main.dart
index bfcf5bbe2b0..e4ff1d238ab 100644
--- a/packages/flame_console/example/lib/main.dart
+++ b/packages/flame_console/example/lib/main.dart
@@ -30,7 +30,7 @@ class _MyGameAppState extends State<MyGameApp> {
       body: GameWidget(
         game: _game,
         overlayBuilderMap: {
-          'console': (BuildContext context, MyGame game) => ConsoleView(
+          'console': (BuildContext context, MyGame game) => FlameConsoleView(
                 game: game,
                 onClose: () {
                   _game.overlays.remove('console');
diff --git a/packages/flame_console/lib/src/commands/commands.dart b/packages/flame_console/lib/src/commands/commands.dart
index 82fbaa0ff3b..5731a0f4cee 100644
--- a/packages/flame_console/lib/src/commands/commands.dart
+++ b/packages/flame_console/lib/src/commands/commands.dart
@@ -4,16 +4,14 @@ import 'package:flame/game.dart';
 import 'package:flame_console/src/commands/commands.dart';
 import 'package:flame_console/src/commands/pause_command.dart';
 import 'package:flame_console/src/commands/resume_command.dart';
+import 'package:terminui/terminui.dart';
 
 export 'debug_command.dart';
 export 'ls_command.dart';
 export 'remove_command.dart';
 
-abstract class ConsoleCommand<G extends FlameGame> {
-  ArgParser get parser;
-  String get description;
-  String get name;
-
+abstract class FlameConsoleCommand<T extends FlameGame>
+    extends TerminuiCommand<T> {
   List<Component> listAllChildren(Component component) {
     return [
       for (final child in component.children) ...[
@@ -50,23 +48,10 @@ abstract class ConsoleCommand<G extends FlameGame> {
       }
     }
   }
-
-  (String?, String) run(G game, List<String> args) {
-    final results = parser.parse(args);
-    return execute(game, results);
-  }
-
-  (String?, String) execute(G game, ArgResults results);
-
-  int? optionalIntResult(String key, ArgResults results) {
-    if (results[key] != null) {
-      return int.tryParse(results[key] as String);
-    }
-    return null;
-  }
 }
 
-abstract class QueryCommand<G extends FlameGame> extends ConsoleCommand<G> {
+abstract class QueryCommand<G extends FlameGame>
+    extends FlameConsoleCommand<G> {
   (String?, String) processChildren(List<Component> children);
 
   @override
@@ -100,8 +85,8 @@ abstract class QueryCommand<G extends FlameGame> extends ConsoleCommand<G> {
     );
 }
 
-class ConsoleCommands {
-  static List<ConsoleCommand> commands = [
+class FlameConsoleCommands {
+  static List<FlameConsoleCommand> commands = [
     LsConsoleCommand(),
     RemoveConsoleCommand(),
     DebugConsoleCommand(),
diff --git a/packages/flame_console/lib/src/commands/pause_command.dart b/packages/flame_console/lib/src/commands/pause_command.dart
index 0bea75b8e56..4184a7f3d4b 100644
--- a/packages/flame_console/lib/src/commands/pause_command.dart
+++ b/packages/flame_console/lib/src/commands/pause_command.dart
@@ -2,7 +2,7 @@ import 'package:args/args.dart';
 import 'package:flame/game.dart';
 import 'package:flame_console/flame_console.dart';
 
-class PauseConsoleCommand<G extends FlameGame> extends ConsoleCommand<G> {
+class PauseConsoleCommand<G extends FlameGame> extends FlameConsoleCommand<G> {
   @override
   (String?, String) execute(G game, ArgResults results) {
     if (game.paused) {
diff --git a/packages/flame_console/lib/src/commands/resume_command.dart b/packages/flame_console/lib/src/commands/resume_command.dart
index 25db4595b39..fb87cd72a19 100644
--- a/packages/flame_console/lib/src/commands/resume_command.dart
+++ b/packages/flame_console/lib/src/commands/resume_command.dart
@@ -2,7 +2,7 @@ import 'package:args/args.dart';
 import 'package:flame/game.dart';
 import 'package:flame_console/flame_console.dart';
 
-class ResumeConsoleCommand<G extends FlameGame> extends ConsoleCommand<G> {
+class ResumeConsoleCommand<G extends FlameGame> extends FlameConsoleCommand<G> {
   @override
   (String?, String) execute(G game, ArgResults results) {
     if (!game.paused) {
diff --git a/packages/flame_console/lib/src/controller.dart b/packages/flame_console/lib/src/controller.dart
deleted file mode 100644
index a29d51ef799..00000000000
--- a/packages/flame_console/lib/src/controller.dart
+++ /dev/null
@@ -1,172 +0,0 @@
-import 'package:flame/game.dart';
-import 'package:flame_console/flame_console.dart';
-import 'package:flutter/material.dart';
-import 'package:flutter/services.dart';
-
-class ConsoleState {
-  const ConsoleState({
-    this.showHistory = false,
-    this.commandHistoryIndex = 0,
-    this.commandHistory = const [],
-    this.history = const [],
-    this.cmd = '',
-  });
-
-  final bool showHistory;
-  final int commandHistoryIndex;
-  final List<String> commandHistory;
-  final List<String> history;
-  final String cmd;
-
-  ConsoleState copyWith({
-    bool? showHistory,
-    int? commandHistoryIndex,
-    List<String>? commandHistory,
-    List<String>? history,
-    String? cmd,
-  }) {
-    return ConsoleState(
-      showHistory: showHistory ?? this.showHistory,
-      commandHistoryIndex: commandHistoryIndex ?? this.commandHistoryIndex,
-      commandHistory: commandHistory ?? this.commandHistory,
-      history: history ?? this.history,
-      cmd: cmd ?? this.cmd,
-    );
-  }
-}
-
-class ConsoleController<G extends FlameGame> {
-  ConsoleController({
-    required this.repository,
-    required this.game,
-    required this.scrollController,
-    required this.onClose,
-    required this.commands,
-    ConsoleState state = const ConsoleState(),
-  }) : state = ValueNotifier(state);
-
-  final ValueNotifier<ConsoleState> state;
-  final ConsoleRepository repository;
-  final G game;
-  final VoidCallback onClose;
-  final ScrollController scrollController;
-  final Map<String, ConsoleCommand<G>> commands;
-
-  Future<void> init() async {
-    final history = await repository.listCommandHistory();
-    state.value = state.value.copyWith(history: history);
-  }
-
-  void handleKeyEvent(KeyEvent event) {
-    if (event is KeyUpEvent) {
-      return;
-    }
-    final char = event.character;
-
-    if (event.logicalKey == LogicalKeyboardKey.escape &&
-        !state.value.showHistory) {
-      onClose();
-    } else if (event.logicalKey == LogicalKeyboardKey.arrowUp &&
-        !state.value.showHistory) {
-      final newState = state.value.copyWith(
-        showHistory: true,
-        commandHistoryIndex: state.value.commandHistory.length - 1,
-      );
-      state.value = newState;
-    } else if (event.logicalKey == LogicalKeyboardKey.enter &&
-        state.value.showHistory) {
-      final newState = state.value.copyWith(
-        cmd: state.value.commandHistory[state.value.commandHistoryIndex],
-        showHistory: false,
-      );
-      state.value = newState;
-    } else if ((event.logicalKey == LogicalKeyboardKey.arrowUp ||
-            event.logicalKey == LogicalKeyboardKey.arrowDown) &&
-        state.value.showHistory) {
-      final newState = state.value.copyWith(
-        commandHistoryIndex: event.logicalKey == LogicalKeyboardKey.arrowUp
-            ? (state.value.commandHistoryIndex - 1)
-                .clamp(0, state.value.commandHistory.length - 1)
-            : (state.value.commandHistoryIndex + 1)
-                .clamp(0, state.value.commandHistory.length - 1),
-      );
-      state.value = newState;
-    } else if (event.logicalKey == LogicalKeyboardKey.escape &&
-        state.value.showHistory) {
-      state.value = state.value.copyWith(
-        showHistory: false,
-      );
-    } else if (event.logicalKey == LogicalKeyboardKey.enter &&
-        !state.value.showHistory) {
-      final split = state.value.cmd.split(' ');
-
-      if (split.isEmpty) {
-        return;
-      }
-
-      if (split.first == 'clear') {
-        state.value = state.value.copyWith(
-          history: [],
-          cmd: '',
-        );
-        return;
-      }
-
-      if (split.first == 'help') {
-        final output = commands.entries.fold('', (previous, entry) {
-          final help = '${entry.key} - ${entry.value.description}\n\n'
-              '${entry.value.parser.usage}\n\n';
-
-          return '$previous\n$help';
-        });
-
-        state.value = state.value.copyWith(
-          history: [...state.value.history, output],
-        );
-        return;
-      }
-
-      final originalCommand = state.value.cmd;
-      state.value = state.value.copyWith(
-        history: [...state.value.history, state.value.cmd],
-        cmd: '',
-      );
-
-      final command = commands[split.first];
-
-      if (command == null) {
-        state.value = state.value.copyWith(
-          history: [...state.value.history, 'Command not found'],
-        );
-      } else {
-        repository.addToCommandHistory(originalCommand);
-        state.value = state.value.copyWith(
-          commandHistory: [...state.value.commandHistory, originalCommand],
-        );
-        final result = command.run(game, split.skip(1).toList());
-
-        if (result.$1 != null) {
-          state.value = state.value.copyWith(
-            history: [...state.value.history, ...result.$1!.split('\n')],
-          );
-        } else if (result.$2.isNotEmpty) {
-          state.value = state.value.copyWith(
-            history: [...state.value.history, ...result.$2.split('\n')],
-          );
-        }
-      }
-
-      WidgetsBinding.instance.addPostFrameCallback((_) {
-        scrollController.jumpTo(scrollController.position.maxScrollExtent);
-      });
-    } else if (event.logicalKey == LogicalKeyboardKey.backspace) {
-      state.value = state.value.copyWith(
-        cmd: state.value.cmd.substring(0, state.value.cmd.length - 1),
-      );
-    } else if (char != null) {
-      state.value = state.value.copyWith(
-        cmd: state.value.cmd + char,
-      );
-    }
-  }
-}
diff --git a/packages/flame_console/lib/src/flame_console.dart b/packages/flame_console/lib/src/flame_console.dart
index b07822b44a2..7ac05acec88 100644
--- a/packages/flame_console/lib/src/flame_console.dart
+++ b/packages/flame_console/lib/src/flame_console.dart
@@ -1,3 +1,2 @@
 export 'commands/commands.dart';
-export 'repository/repository.dart';
 export 'view/view.dart';
diff --git a/packages/flame_console/lib/src/repository/console_repository.dart b/packages/flame_console/lib/src/repository/console_repository.dart
deleted file mode 100644
index a8f87d896ea..00000000000
--- a/packages/flame_console/lib/src/repository/console_repository.dart
+++ /dev/null
@@ -1,7 +0,0 @@
-/// A repository to persist and read history of commands.
-abstract class ConsoleRepository {
-  const ConsoleRepository();
-
-  Future<void> addToCommandHistory(String command);
-  Future<List<String>> listCommandHistory();
-}
diff --git a/packages/flame_console/lib/src/repository/memory_console_repository.dart b/packages/flame_console/lib/src/repository/memory_console_repository.dart
deleted file mode 100644
index c2e59e5e9cc..00000000000
--- a/packages/flame_console/lib/src/repository/memory_console_repository.dart
+++ /dev/null
@@ -1,21 +0,0 @@
-import 'package:flame_console/flame_console.dart';
-
-/// An implementation of a [ConsoleRepository] that stores the command history
-/// in memory.
-class MemoryConsoleRepository extends ConsoleRepository {
-  MemoryConsoleRepository({
-    List<String>? commands,
-  }) : _commands = commands ?? <String>[];
-
-  final List<String> _commands;
-
-  @override
-  Future<void> addToCommandHistory(String command) async {
-    _commands.add(command);
-  }
-
-  @override
-  Future<List<String>> listCommandHistory() async {
-    return _commands;
-  }
-}
diff --git a/packages/flame_console/lib/src/repository/repository.dart b/packages/flame_console/lib/src/repository/repository.dart
deleted file mode 100644
index 1d5fc5033cb..00000000000
--- a/packages/flame_console/lib/src/repository/repository.dart
+++ /dev/null
@@ -1,2 +0,0 @@
-export 'console_repository.dart';
-export 'memory_console_repository.dart';
diff --git a/packages/flame_console/lib/src/view/console_view.dart b/packages/flame_console/lib/src/view/console_view.dart
index 2d153e90fdd..09c9a8ff065 100644
--- a/packages/flame_console/lib/src/view/console_view.dart
+++ b/packages/flame_console/lib/src/view/console_view.dart
@@ -1,23 +1,9 @@
 import 'package:flame/components.dart';
 import 'package:flame/game.dart';
 import 'package:flame_console/flame_console.dart';
-import 'package:flame_console/src/controller.dart';
-import 'package:flame_console/src/view/container_builder.dart';
-import 'package:flame_console/src/view/cursor_builder.dart';
-import 'package:flame_console/src/view/history_builder.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter/services.dart';
-
-typedef HistoryBuilder = Widget Function(
-  BuildContext context,
-  ScrollController scrollController,
-  Widget child,
-);
-
-typedef ContainerBuilder = Widget Function(
-  BuildContext context,
-  Widget child,
-);
+import 'package:terminui/terminui.dart';
 
 /// A Console like view that can be used to interact with a game.
 ///
@@ -38,8 +24,8 @@ typedef ContainerBuilder = Widget Function(
 ///     ),
 ///   },
 /// )
-class ConsoleView<G extends FlameGame> extends StatefulWidget {
-  const ConsoleView({
+class FlameConsoleView<G extends FlameGame> extends StatefulWidget {
+  const FlameConsoleView({
     required this.game,
     required this.onClose,
     this.customCommands,
@@ -49,15 +35,13 @@ class ConsoleView<G extends FlameGame> extends StatefulWidget {
     this.cursorColor,
     this.historyBuilder,
     this.textStyle,
-    @visibleForTesting this.controller,
     super.key,
   });
 
   final G game;
-  final List<ConsoleCommand<G>>? customCommands;
+  final List<FlameConsoleCommand<G>>? customCommands;
   final VoidCallback onClose;
-  final ConsoleRepository? repository;
-  final ConsoleController? controller;
+  final TerminuiRepository? repository;
 
   final ContainerBuilder? containerBuilder;
   final WidgetBuilder? cursorBuilder;
@@ -67,7 +51,7 @@ class ConsoleView<G extends FlameGame> extends StatefulWidget {
   final TextStyle? textStyle;
 
   @override
-  State<ConsoleView> createState() => _ConsoleViewState();
+  State<FlameConsoleView> createState() => _ConsoleViewState();
 }
 
 class _ConsoleKeyboardHandler extends Component with KeyboardHandler {
@@ -82,28 +66,16 @@ class _ConsoleKeyboardHandler extends Component with KeyboardHandler {
   }
 }
 
-class _ConsoleViewState extends State<ConsoleView> {
-  late final List<ConsoleCommand> _commandList = [
-    ...ConsoleCommands.commands,
+class _ConsoleViewState extends State<FlameConsoleView> {
+  late final List<FlameConsoleCommand> _commandList = [
+    ...FlameConsoleCommands.commands,
     if (widget.customCommands != null) ...widget.customCommands!,
   ];
 
-  late final repository = widget.repository ?? MemoryConsoleRepository();
+  late final repository = widget.repository ?? MemoryTerminuiRepository();
 
-  late final Map<String, ConsoleCommand> _commandsMap = {
-    for (final command in _commandList) command.name: command,
-  };
+  late final _keyboardEventEmitter = KeyboardEventEmitter();
 
-  late final _controller = widget.controller ??
-      ConsoleController(
-        repository: repository,
-        game: widget.game,
-        scrollController: _scrollController,
-        onClose: widget.onClose,
-        commands: _commandsMap,
-      );
-
-  late final _scrollController = ScrollController();
   late final KeyboardHandler _keyboardHandler;
 
   @override
@@ -112,126 +84,31 @@ class _ConsoleViewState extends State<ConsoleView> {
 
     widget.game.add(
       _keyboardHandler = _ConsoleKeyboardHandler(
-        _controller.handleKeyEvent,
+        _keyboardEventEmitter.emit,
       ),
     );
-
-    _controller.init();
   }
 
   @override
   void dispose() {
     _keyboardHandler.removeFromParent();
-    _scrollController.dispose();
+    _keyboardEventEmitter.dispose();
 
     super.dispose();
   }
 
   @override
   Widget build(BuildContext context) {
-    final cursorColor = widget.cursorColor ?? Colors.white;
-
-    final textStyle = widget.textStyle ??
-        Theme.of(context).textTheme.bodySmall?.copyWith(
-              color: Colors.white,
-            );
-
-    final historyBuilder = widget.historyBuilder ?? defaultHistoryBuilder;
-    final containerBuilder = widget.containerBuilder ?? defaultContainerBuilder;
-    final cursorBuilder = widget.cursorBuilder ?? defaultCursorBuilder;
-
-    return ValueListenableBuilder(
-      valueListenable: _controller.state,
-      builder: (context, state, _) {
-        return SizedBox(
-          height: 400,
-          width: double.infinity,
-          child: Stack(
-            children: [
-              Positioned(
-                top: 0,
-                left: 0,
-                right: 0,
-                bottom: 48,
-                child: containerBuilder(
-                  context,
-                  historyBuilder(
-                    context,
-                    _scrollController,
-                    Column(
-                      crossAxisAlignment: CrossAxisAlignment.start,
-                      children: [
-                        for (final line in state.history)
-                          Padding(
-                            padding: const EdgeInsets.only(top: 8.0),
-                            child: Text(line, style: textStyle),
-                          ),
-                      ],
-                    ),
-                  ),
-                ),
-              ),
-              if (state.showHistory)
-                Positioned(
-                  bottom: 48,
-                  left: 0,
-                  right: 0,
-                  child: containerBuilder(
-                    context,
-                    SizedBox(
-                      height: 168,
-                      child: Column(
-                        verticalDirection: VerticalDirection.up,
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        children: [
-                          if (state.commandHistory.isEmpty)
-                            Padding(
-                              padding: const EdgeInsets.only(top: 8.0),
-                              child: Text('No history', style: textStyle),
-                            ),
-                          for (var i = state.commandHistoryIndex;
-                              i >= 0 && i >= state.commandHistoryIndex - 5;
-                              i--)
-                            Padding(
-                              padding: const EdgeInsets.only(top: 8.0),
-                              child: ColoredBox(
-                                color: i == state.commandHistoryIndex
-                                    ? cursorColor.withValues(alpha: .5)
-                                    : Colors.transparent,
-                                child: Text(
-                                  state.commandHistory[i],
-                                  style: textStyle?.copyWith(
-                                    color: i == state.commandHistoryIndex
-                                        ? cursorColor
-                                        : textStyle.color,
-                                  ),
-                                ),
-                              ),
-                            ),
-                        ],
-                      ),
-                    ),
-                  ),
-                ),
-              Positioned(
-                left: 0,
-                right: 0,
-                bottom: 0,
-                child: containerBuilder(
-                  context,
-                  Row(
-                    children: [
-                      Text(state.cmd, style: textStyle),
-                      SizedBox(width: (textStyle?.fontSize ?? 12) / 4),
-                      cursorBuilder(context),
-                    ],
-                  ),
-                ),
-              ),
-            ],
-          ),
-        );
-      },
+    return TerminuiView(
+      onClose: widget.onClose,
+      commands: _commandList,
+      subject: widget.game,
+      keyboardEventEmitter: _keyboardEventEmitter,
+      containerBuilder: widget.containerBuilder,
+      cursorBuilder: widget.cursorBuilder,
+      cursorColor: widget.cursorColor,
+      historyBuilder: widget.historyBuilder,
+      textStyle: widget.textStyle,
     );
   }
 }
diff --git a/packages/flame_console/lib/src/view/cursor_builder.dart b/packages/flame_console/lib/src/view/cursor_builder.dart
deleted file mode 100644
index b7bb8f49680..00000000000
--- a/packages/flame_console/lib/src/view/cursor_builder.dart
+++ /dev/null
@@ -1,11 +0,0 @@
-import 'package:flutter/material.dart';
-
-Widget defaultCursorBuilder(BuildContext context) {
-  return const ColoredBox(
-    color: Colors.white,
-    child: SizedBox(
-      width: 8,
-      height: 20,
-    ),
-  );
-}
diff --git a/packages/flame_console/lib/src/view/history_builder.dart b/packages/flame_console/lib/src/view/history_builder.dart
deleted file mode 100644
index d6f31e69c04..00000000000
--- a/packages/flame_console/lib/src/view/history_builder.dart
+++ /dev/null
@@ -1,12 +0,0 @@
-import 'package:flutter/material.dart';
-
-Widget defaultHistoryBuilder(
-  BuildContext context,
-  ScrollController scrollController,
-  Widget child,
-) {
-  return SingleChildScrollView(
-    controller: scrollController,
-    child: child,
-  );
-}
diff --git a/packages/flame_console/pubspec.yaml b/packages/flame_console/pubspec.yaml
index 72f5858b298..2a0abe68207 100644
--- a/packages/flame_console/pubspec.yaml
+++ b/packages/flame_console/pubspec.yaml
@@ -12,6 +12,7 @@ dependencies:
   flame: ^1.22.0
   flutter:
     sdk: flutter
+  terminui: ^0.1.0
 
 dev_dependencies:
   flame_lint: ^1.2.1
diff --git a/packages/flame_console/test/src/commands_test.dart b/packages/flame_console/test/src/commands_test.dart
index 73b92aa08b2..27cfc9e4b1c 100644
--- a/packages/flame_console/test/src/commands_test.dart
+++ b/packages/flame_console/test/src/commands_test.dart
@@ -6,7 +6,7 @@ import 'package:flame_console/flame_console.dart';
 import 'package:flame_test/flame_test.dart';
 import 'package:flutter_test/flutter_test.dart';
 
-class _NoopCommand extends ConsoleCommand {
+class _NoopCommand extends FlameConsoleCommand {
   @override
   String get description => '';
 
