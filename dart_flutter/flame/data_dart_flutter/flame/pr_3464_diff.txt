diff --git a/examples/lib/stories/camera_and_viewport/follow_component_example.dart b/examples/lib/stories/camera_and_viewport/follow_component_example.dart
index c27cce904ea..3696f7124de 100644
--- a/examples/lib/stories/camera_and_viewport/follow_component_example.dart
+++ b/examples/lib/stories/camera_and_viewport/follow_component_example.dart
@@ -101,6 +101,9 @@ class MovableEmber extends Ember<FollowComponentExample>
 
   @override
   bool onKeyEvent(KeyEvent event, Set<LogicalKeyboardKey> keysPressed) {
+    if (event is KeyRepeatEvent) {
+      return super.onKeyEvent(event, keysPressed);
+    }
     final isKeyDown = event is KeyDownEvent;
 
     final bool handled;
diff --git a/packages/flame/lib/src/components/spawn_component.dart b/packages/flame/lib/src/components/spawn_component.dart
index 4efad91a04a..c81f105388d 100644
--- a/packages/flame/lib/src/components/spawn_component.dart
+++ b/packages/flame/lib/src/components/spawn_component.dart
@@ -51,8 +51,8 @@ class SpawnComponent extends Component {
   /// spawns and [maxPeriod] will be the maximum amount of time before it
   /// spawns.
   SpawnComponent.periodRange({
-    required double minPeriod,
-    required double maxPeriod,
+    required double this.minPeriod,
+    required double this.maxPeriod,
     PositionComponent Function(int amount)? factory,
     List<PositionComponent> Function(int amount)? multiFactory,
     this.area,
@@ -181,8 +181,6 @@ class SpawnComponent extends Component {
       }
     }
 
-    updatePeriod();
-
     final timerComponent = TimerComponent(
       period: _period,
       repeat: true,
diff --git a/packages/flame/test/components/spawn_component_test.dart b/packages/flame/test/components/spawn_component_test.dart
index 3d3631f524b..ed706759901 100644
--- a/packages/flame/test/components/spawn_component_test.dart
+++ b/packages/flame/test/components/spawn_component_test.dart
@@ -290,5 +290,29 @@ void main() {
         );
       },
     );
+
+    testWithFlameGame('Spawns components within irregular period',
+        (game) async {
+      final random = Random(0);
+      // The first two periods will be ~4.3 and ~3.85
+      final spawn = SpawnComponent.periodRange(
+        factory: (_) => PositionComponent(),
+        minPeriod: 1.0,
+        maxPeriod: 5.0,
+        random: random,
+      );
+      final world = game.world;
+      await world.ensureAdd(spawn);
+      expect(world.children.length, 1);
+      game.update(0.3);
+      game.update(0);
+      expect(world.children.length, 1);
+      game.update(4.31);
+      game.update(0);
+      expect(world.children.length, 2);
+      game.update(3.86);
+      game.update(0);
+      expect(world.children.length, 3);
+    });
   });
 }
