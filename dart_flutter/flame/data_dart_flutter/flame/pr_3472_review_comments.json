[
    {
        "title": "perf: Switch from forEach to regular for-loops for about 30% improvement in raw update performance"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "<!-- Exclude from commit message -->\r\n<!--\r\nThe title of your PR on the line above should start with a [Conventional Commit] prefix\r\n(`fix:`, `feat:`, `docs:`, `test:`, `chore:`, `refactor:`, `perf:`, `build:`, `ci:`,\r\n`style:`, `revert:`). This title will later become an entry in the [CHANGELOG], so please\r\nmake sure that it summarizes the PR adequately.\r\n\r\nDon't remove the \"exclude from commit message\" comments below. They are used to prevent\r\nthe PR description template from being included in the git log.\r\nOnly change the \"Replace this text\" parts.\r\n-->\r\n\r\n# Description\r\n<!--\r\nProvide a description of what this PR is doing.\r\nIf you're modifying existing behavior, describe the existing behavior, how this PR is changing it,\r\nand what motivated the change. If this is a breaking change, specify explicitly which APIs were\r\nchanged.\r\n-->\r\n<!-- End of exclude from commit message -->\r\nReplaces uses of `.forEach()` with regular `for` loops. This has significant impact on performance in hot paths such as `Component.updateTree()` and `Component.renderTree()`.\r\n\r\n![Updating Components](https://github.com/user-attachments/assets/e183ce4c-5b37-45d9-ad81-a0a35719e0dd)\r\n\r\nIn the graph above, you see 50 runs of `benchmark/update_components_benchmark.dart`. The forEach results are blue, the for-loop results are green. I could see this effect after just replacing the `forEach` calls in `component.dart`. Data [here](https://docs.google.com/spreadsheets/d/e/2PACX-1vRk_yGmLN6o0oqSUWDBh7ODx7B8EIToeahZcZBS3VKHX8AbEnmrgmEqDt98cZLoBjIKQX3MlOc0XwsP/pubhtml).\r\n\r\n> Aside for posterity: `for i in {1..50}; do flutter test benchmark/main.dart --no-pub -r silent 2>/dev/null >> benchmarks_for_loop.txt; done`, then get the data from the text file. \r\n\r\nI went ahead and replaced additional `forEach` calls elsewhere in the engine codebase, but there was no additional effect on the benchmark. Still, I kept those changes in. I only replaced `forEach` in places that seemed relatively hot (e.g. `ComponentSet.reorder()`). There are more `forEach` calls in the codebase but those seem fine to me as they aren't likely to be called too often.\r\n\r\nIt should be noted that I needed to update the benchmark to add children to the components. Every `_BenchmarkComponent` now has 10 children. This feels a bit more realistic use of the framework than having a flat array of components with no children. By changing the benchmark code in this way, I made it a bit slower, so I'm not sure if the effect will be seen in the CI/CD.\r\n\r\nI also tried whether the change will have effect on my game's benchmark (which is a lot more involved and uses `flutter driver` to test the whole game in AOT mode). For the game, the effect is negligible but that was kind of expected since my game spends a significant amount of its CPU time on AI, raycasting, smoke simulation and drawVertices, none of which really depend on the speed of the engine `update()` mechanism.\r\n\r\n\r\n<!-- Exclude from commit message -->\r\n## Checklist\r\n<!--\r\nBefore you create this PR confirm that it meets all requirements listed below by checking the\r\nrelevant checkboxes with `[x]`. If some checkbox is not applicable, mark it as `[-]`.\r\n-->\r\n\r\n- [x] I have followed the [Contributor Guide] when preparing my PR.\r\n- [ ] I have updated/added tests for ALL new/updated/fixed functionality.\r\n- [ ] I have updated/added relevant documentation in `docs` and added dartdoc comments with `///`.\r\n- [ ] I have updated/added relevant examples in `examples` or `docs`.\r\n\r\n\r\n## Breaking Change?\r\n<!--\r\nWould your PR require Flame users to update their apps following your change?\r\n\r\nIf yes, then the title of the PR should include \"!\" (for example, `feat!:`, `fix!:`). See\r\n[Conventional Commit] for details. Also, for a breaking PR uncomment and fill in the \"Migration\r\ninstructions\" section below.\r\n-->\r\n\r\n- [ ] Yes, this PR is a breaking change.\r\n- [x] No, this PR is not a breaking change.\r\n\r\n<!--\r\n### Migration instructions\r\n\r\nIf the PR is breaking, uncomment this header and add instructions for how to migrate from the\r\ncurrently released version in-between the two following tags:\r\n-->\r\n<!-- End of exclude from commit message -->\r\n<!-- Exclude from commit message -->\r\n\r\n## Related Issues\r\n<!--\r\nIndicate which issues this PR resolves, if any. For example:\r\n\r\nCloses #1234\r\n!-->\r\n\r\n<!-- Links -->\r\n[Contributor Guide]: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md\r\n[Conventional Commit]: https://conventionalcommits.org\r\n[CHANGELOG]: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md\r\n<!-- End of exclude from commit message -->\r\n"
    },
    {
        "author": {
            "login": "erickzanardo"
        },
        "body": "One small nit, but LGTM already, Thanks for this!"
    },
    {
        "author": {
            "login": "spydon"
        },
        "body": "Lgtm! I thought we had already done this... I think there is a DCM rule that we can enable that checks for these.\n\nI hope one day the compiler will be able to make `forEach` et. al as efficient as normal loops."
    },
    {
        "author": {
            "login": "spydon"
        },
        "body": ""
    },
    {
        "author": {
            "login": "erickzanardo"
        },
        "body": ""
    },
    {
        "author": {
            "login": "filiph"
        },
        "body": "Ok, it looks like the benchmark GitHub action failed with `Error: + Failed to create or update comment on GitHub.: Resource not accessible by integration - https://docs.github.com/rest/issues/comments#create-an-issue-comment`.\r\n\r\nHere are the results from [the job run](https://github.com/flame-engine/flame/actions/runs/13157463986/job/36717798533):\r\n\r\n```\r\nParsed benchmark: Render Components Benchmark -> 1165.881118881119\r\nParsed benchmark: Updating Components Benchmark -> 254720.125\r\n```"
    },
    {
        "author": {
            "login": "spydon"
        },
        "body": "> Ok, it looks like the benchmark GitHub action failed with `Error: + Failed to create or update comment on GitHub.: Resource not accessible by integration - https://docs.github.com/rest/issues/comments#create-an-issue-comment`.\n\nIt can only run for members of the organization unfortunately."
    },
    {
        "author": {
            "login": "erickzanardo"
        },
        "body": "> Lgtm! I thought we had already done this... I think there is a DCM rule that we can enable that checks for these.\r\n> \r\n> I hope one day the compiler will be able to make `forEach` et. al as efficient as normal loops.\r\n\r\nI don't think we need DCM for this, I am pretty sure I saw a lint rule for that already somewhere...I will take a look for it"
    },
    {
        "author": {
            "login": "filiph"
        },
        "body": "Thanks for the quick turnaround!\r\n\r\nFWIW, I don't think enabling a lint and then converting each and every `forEach` call into a for loop is something you'd want. The effect is only felt in very hot paths. In this PR, the only real performance upside came from the two lines in `Component`. Elsewhere, the effect is negligible. (Unless you're doing something like resizing your game every frame.) And it's kind of nice to be able to express things in a one-liner.\r\n"
    }
]