diff --git a/packages/flame_markdown/example/assets/fire_and_ice.md b/packages/flame_markdown/example/assets/fire_and_ice.md
index dfb58e92dc2..2b1cc03163b 100644
--- a/packages/flame_markdown/example/assets/fire_and_ice.md
+++ b/packages/flame_markdown/example/assets/fire_and_ice.md
@@ -1,9 +1,9 @@
-# Fire and Ice
+# Fire & Ice
 
 Some say the world will end in **fire**,
 
 Some say in *ice*.
 
-From what I've tasted of desire
+From what I've tasted of >desire<,
 
 I hold with those who favor **fire**.
diff --git a/packages/flame_markdown/lib/flame_markdown.dart b/packages/flame_markdown/lib/flame_markdown.dart
index 426853faf37..3996b4dc497 100644
--- a/packages/flame_markdown/lib/flame_markdown.dart
+++ b/packages/flame_markdown/lib/flame_markdown.dart
@@ -26,7 +26,13 @@ class FlameMarkdown {
   }
 
   static List<Node> _parse(String markdown, {Document? document}) {
-    return (document ?? Document()).parse(markdown);
+    return (document ?? _defaultDocument()).parse(markdown);
+  }
+
+  static Document _defaultDocument() {
+    return Document(
+      encodeHtml: false,
+    );
   }
 
   static TextNode _convertNode(Node node) {
diff --git a/packages/flame_markdown/test/flame_markdown_test.dart b/packages/flame_markdown/test/flame_markdown_test.dart
index 656bb5fdd82..c2cc352961a 100644
--- a/packages/flame_markdown/test/flame_markdown_test.dart
+++ b/packages/flame_markdown/test/flame_markdown_test.dart
@@ -68,7 +68,7 @@ void main() {
       final doc = FlameMarkdown.toDocument(markdown);
 
       _expectDocument(doc, [
-        (node) => _expectHeader(node, 1, 'Fire and Ice'),
+        (node) => _expectHeader(node, 1, 'Fire & Ice'),
         (node) => _expectParagraph(node, (p) {
               _expectGroup(p, [
                 (node) => _expectPlain(node, 'Some say the world will end in '),
@@ -86,7 +86,7 @@ void main() {
             ),
         (node) => _expectSimpleParagraph(
               node,
-              "From what I've tasted of desire",
+              "From what I've tasted of >desire<,",
             ),
         (node) => _expectParagraph(node, (p) {
               _expectGroup(p, [
