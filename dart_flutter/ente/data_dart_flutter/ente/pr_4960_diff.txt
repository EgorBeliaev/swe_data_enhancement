diff --git a/web/apps/photos/src/components/PhotoViewer/ImageEditorOverlay.tsx b/web/apps/photos/src/components/PhotoViewer/ImageEditorOverlay.tsx
index d89eb14f3c4..1699245d332 100644
--- a/web/apps/photos/src/components/PhotoViewer/ImageEditorOverlay.tsx
+++ b/web/apps/photos/src/components/PhotoViewer/ImageEditorOverlay.tsx
@@ -1029,13 +1029,13 @@ const FreehandCropRegion = forwardRef(
     },
 );
 
-const CropOverlayRegionTemplate = styled("div")(({ theme }) => ({
+const CropOverlayRegionTemplate = styled("div")({
     position: "absolute",
-    backgroundColor: theme.vars.palette.fixed.croppedAreaOverlay,
+    backgroundColor: "rgba(0 0 0 / 0.5)",
     pointerEvents: "none",
-}));
+});
 
-const PRESET_ASPECT_RATIOS = [
+const presetAspectRatios = [
     {
         width: 16,
         height: 9,
@@ -1241,7 +1241,7 @@ const TransformMenu: React.FC<CommonMenuProps> = ({
                 />
             </RowButtonGroup>
             <RowButtonGroup sx={{ mb: "1rem" }}>
-                {PRESET_ASPECT_RATIOS.map((ratio, index) => (
+                {presetAspectRatios.map((ratio, index) => (
                     <Fragment key={index}>
                         <RowButton
                             disabled={canvasLoading}
@@ -1252,14 +1252,14 @@ const TransformMenu: React.FC<CommonMenuProps> = ({
                                 ratio.height,
                             )}
                         />
-                        {index !== PRESET_ASPECT_RATIOS.length - 1 && (
+                        {index !== presetAspectRatios.length - 1 && (
                             <RowButtonDivider />
                         )}
                     </Fragment>
                 ))}
             </RowButtonGroup>
             <RowButtonGroup sx={{ mb: "1rem" }}>
-                {PRESET_ASPECT_RATIOS.map((ratio, index) => (
+                {presetAspectRatios.map((ratio, index) => (
                     <Fragment key={index}>
                         <RowButton
                             key={index}
@@ -1271,7 +1271,7 @@ const TransformMenu: React.FC<CommonMenuProps> = ({
                                 ratio.width,
                             )}
                         />
-                        {index !== PRESET_ASPECT_RATIOS.length - 1 && (
+                        {index !== presetAspectRatios.length - 1 && (
                             <RowButtonDivider />
                         )}
                     </Fragment>
diff --git a/web/packages/base/components/loaders.tsx b/web/packages/base/components/loaders.tsx
index 49c4429c875..ef657bd0fc7 100644
--- a/web/packages/base/components/loaders.tsx
+++ b/web/packages/base/components/loaders.tsx
@@ -44,12 +44,13 @@ export const LoadingOverlay: React.FC = () => (
  */
 export const TranslucentLoadingOverlay: React.FC = () => (
     <Backdrop
-        // Specifying open here causes us to lose animations. This is fine since
-        // the use of this is limited to a few interstitial overlays, and if
-        // refactoring consider replacing this entirely with a more localized
-        // activity indicator.
+        // Specifying open here causes us to lose animations. This is not
+        // optimal, but fine for now since this the use of this is limited to a
+        // few interstitial overlays, and if refactoring consider replacing this
+        // entirely with a more localized activity indicator.
         open={true}
         sx={{
+            backgroundColor: "var(--mui-palette-backdrop-muted)",
             backdropFilter: "blur(30px) opacity(95%)",
             // TODO: Why is this zIndex override required? + use a constant.
             zIndex: 9000,
diff --git a/web/packages/base/components/utils/mui-theme.d.ts b/web/packages/base/components/utils/mui-theme.d.ts
index 17a2df19cba..ae287473359 100644
--- a/web/packages/base/components/utils/mui-theme.d.ts
+++ b/web/packages/base/components/utils/mui-theme.d.ts
@@ -145,20 +145,6 @@ declare module "@mui/material/styles" {
              * The color of a switch when it is enabled.
              */
             switchOn: string;
-            /**
-             * The transparent overlay on top of the region that will be cropped
-             * during image editing.
-             */
-            croppedAreaOverlay: string;
-            /**
-             * Color of overlaid icons on top of thumbnails. e.g. color of the
-             * "archived" indicator shown on top of albums.
-             */
-            overlayIndicatorMuted: string;
-            /**
-             * Color of the total space in the usage bar on the storage card.
-             */
-            storageCardUsageFill: string;
         };
         /**
          * MUI as of v6 does not allow customizing shadows easily. This is due
diff --git a/web/packages/base/components/utils/theme.ts b/web/packages/base/components/utils/theme.ts
index 33420cee2f3..7c8017f22cd 100644
--- a/web/packages/base/components/utils/theme.ts
+++ b/web/packages/base/components/utils/theme.ts
@@ -159,9 +159,6 @@ const _colors = {
             E: "#ddd",
         },
         switchOn: "#2eca45",
-        croppedAreaOverlay: "rgba(0 0 0 / 0.5)",
-        overlayIndicatorMuted: "rgba(255 255 255 / 0.48)",
-        storageCardUsageFill: "rgba(255 255 255 / 0.2)",
     },
     light: {
         // Keep these solid.
@@ -550,28 +547,12 @@ const components: Components = {
         },
     },
 
-    MuiBackdrop: {
+    MuiDrawer: {
         styleOverrides: {
             root: {
-                backgroundColor: "var(--mui-palette-backdrop-muted)",
-                // [Note: Backdrop variant blur]
-                //
-                // What we wish for is this. But as of MUI v6.4, the TypeScript
-                // definition for Backdrop does not contain a variant, causing
-                // tsc to show an error when we try to specify a variant.
-                //
-                // Since the styling is trivial and used only infrequently, for
-                // now we copy paste it. If it gets needed more often, we can
-                // also make it into a palette var.
-                //
-                // variants: [
-                //     {
-                //         props: { variant: "blur" },
-                //         style: {
-                //             backdropFilter: "blur(30px) opacity(95%)",
-                //         },
-                //     },
-                // ],
+                ".MuiBackdrop-root": {
+                    backgroundColor: "var(--mui-palette-backdrop-muted)",
+                },
             },
         },
     },
@@ -586,6 +567,9 @@ const components: Components = {
         },
         styleOverrides: {
             root: {
+                ".MuiBackdrop-root": {
+                    backgroundColor: "var(--mui-palette-backdrop-muted)",
+                },
                 // Reset the MUI default paddings to 16px everywhere.
                 //
                 // This is not a great choice either, usually most dialogs, for
diff --git a/web/packages/new/photos/components/PlanSelector.tsx b/web/packages/new/photos/components/PlanSelector.tsx
index b0aae3585a0..311f64bc845 100644
--- a/web/packages/new/photos/components/PlanSelector.tsx
+++ b/web/packages/new/photos/components/PlanSelector.tsx
@@ -85,6 +85,17 @@ export const PlanSelector: React.FC<PlanSelectorProps> = ({
                         [theme.breakpoints.down(360)]: { p: 0 },
                     }),
                 },
+                // [Note: Backdrop variant blur]
+                //
+                // What we wish for is creating a variant of Backdrop that
+                // instead of specifying the backdrop filter each time. But as
+                // of MUI v6.4, the TypeScript definition for Backdrop does not
+                // contain a variant, causing tsc to show an error when we try
+                // to specify a variant.
+                //
+                // Since the styling is trivial and used only infrequently, for
+                // now we copy paste it. If it gets needed more often, we can
+                // also make it into a palette var.
                 backdrop: {
                     sx: { backdropFilter: "blur(30px) opacity(95%)" },
                 },
diff --git a/web/packages/new/photos/components/gallery/BarImpl.tsx b/web/packages/new/photos/components/gallery/BarImpl.tsx
index 2e4dd671594..2e315e9aec4 100644
--- a/web/packages/new/photos/components/gallery/BarImpl.tsx
+++ b/web/packages/new/photos/components/gallery/BarImpl.tsx
@@ -515,7 +515,7 @@ const CollectionBarCard: React.FC<CollectionBarCardProps> = ({
             onClick={() => onSelectCollectionID(collectionSummary.id)}
         >
             <CardText>{collectionSummary.name}</CardText>
-            <CollectionBarCardIcon type={collectionSummary.type} />
+            <CollectionBarCardIcon attributes={collectionSummary.attributes} />
         </ItemCard>
         {activeCollectionID === collectionSummary.id && <ActiveIndicator />}
     </div>
@@ -532,22 +532,28 @@ const CardText: React.FC<React.PropsWithChildren> = ({ children }) => (
 );
 
 interface CollectionBarCardIconProps {
-    type: CollectionSummaryType;
+    attributes: CollectionSummaryType[];
 }
 
 const CollectionBarCardIcon: React.FC<CollectionBarCardIconProps> = ({
-    type,
+    attributes,
 }) => (
+    // Under current scenarios, there are no cases where more than 3 of these
+    // will be true simultaneously even in the rarest of cases (a pinned and
+    // shared album that is also archived), and there is enough space for 3.
     <CollectionBarCardIcon_>
-        {type == "favorites" && <FavoriteRoundedIcon />}
-        {type == "archived" && (
-            <ArchiveIcon sx={{ color: "fixed.overlayIndicatorMuted" }} />
+        {attributes.includes("favorites") && <FavoriteRoundedIcon />}
+        {attributes.includes("pinned") && (
+            // Need && to override the 20px set in the container.
+            <PushPinIcon sx={{ "&&": { fontSize: "18px" } }} />
+        )}
+        {(attributes.includes("outgoingShare") ||
+            attributes.includes("incomingShareViewer") ||
+            attributes.includes("incomingShareCollaborator")) && <PeopleIcon />}
+        {attributes.includes("sharedOnlyViaLink") && <LinkIcon />}
+        {attributes.includes("archived") && (
+            <ArchiveIcon sx={{ opacity: 0.48 }} />
         )}
-        {type == "outgoingShare" && <PeopleIcon />}
-        {(type == "incomingShareViewer" ||
-            type == "incomingShareCollaborator") && <PeopleIcon />}
-        {type == "sharedOnlyViaLink" && <LinkIcon />}
-        {type == "pinned" && <PushPinIcon />}
     </CollectionBarCardIcon_>
 );
 
@@ -556,6 +562,7 @@ const CollectionBarCardIcon_ = styled(Overlay)`
     display: flex;
     justify-content: flex-start;
     align-items: flex-end;
+    gap: 4px;
     & > .MuiSvgIcon-root {
         font-size: 20px;
     }
diff --git a/web/packages/new/photos/components/gallery/reducer.ts b/web/packages/new/photos/components/gallery/reducer.ts
index 0f76028e8b2..72c6d31b4fd 100644
--- a/web/packages/new/photos/components/gallery/reducer.ts
+++ b/web/packages/new/photos/components/gallery/reducer.ts
@@ -1117,6 +1117,7 @@ const deriveCollectionSummaries = (
             ...pseudoCollectionOptionsForFiles([]),
             id: DUMMY_UNCATEGORIZED_COLLECTION,
             type: "uncategorized",
+            attributes: ["uncategorized"],
             name: t("section_uncategorized"),
         });
     }
@@ -1126,6 +1127,7 @@ const deriveCollectionSummaries = (
         ...pseudoCollectionOptionsForFiles(allSectionFiles),
         id: ALL_SECTION,
         type: "all",
+        attributes: ["all"],
         name: t("section_all"),
     });
     collectionSummaries.set(TRASH_SECTION, {
@@ -1133,6 +1135,7 @@ const deriveCollectionSummaries = (
         id: TRASH_SECTION,
         name: t("section_trash"),
         type: "trash",
+        attributes: ["trash"],
         coverFile: undefined,
     });
     const archivedFiles = uniqueFilesByID(
@@ -1143,6 +1146,7 @@ const deriveCollectionSummaries = (
         id: ARCHIVE_SECTION,
         name: t("section_archive"),
         type: "archive",
+        attributes: ["archive"],
         coverFile: undefined,
     });
 
@@ -1179,6 +1183,7 @@ const deriveHiddenCollectionSummaries = (
         id: HIDDEN_ITEMS_SECTION,
         name: t("hidden_items"),
         type: "hiddenItems",
+        attributes: ["hiddenItems"],
     });
 
     return hiddenCollectionSummaries;
@@ -1232,6 +1237,46 @@ const createCollectionSummaries = (
             }
         }
 
+        // This block of code duplicates the above. Such duplication is needed
+        // until type is completely replaced by attributes.
+        const attributes: CollectionSummaryType[] = [];
+        if (isIncomingShare(collection, user)) {
+            if (isIncomingCollabShare(collection, user)) {
+                attributes.push("incomingShareCollaborator");
+            } else {
+                attributes.push("incomingShareViewer");
+            }
+        }
+        if (isOutgoingShare(collection, user)) {
+            attributes.push("outgoingShare");
+        }
+        if (isSharedOnlyViaLink(collection)) {
+            attributes.push("sharedOnlyViaLink");
+        }
+        if (isArchivedCollection(collection)) {
+            attributes.push("archived");
+        }
+        if (isDefaultHiddenCollection(collection)) {
+            attributes.push("defaultHidden");
+        }
+        if (isPinnedCollection(collection)) {
+            attributes.push("pinned");
+        }
+        switch (collection.type) {
+            case CollectionType.folder:
+                attributes.push("folder");
+                break;
+            case CollectionType.favorites:
+                attributes.push("favorites");
+                break;
+            case CollectionType.album:
+                attributes.push("album");
+                break;
+            case CollectionType.uncategorized:
+                attributes.push("uncategorized");
+                break;
+        }
+
         let name: string;
         if (type == "uncategorized") {
             name = t("section_uncategorized");
@@ -1245,6 +1290,7 @@ const createCollectionSummaries = (
         collectionSummaries.set(collection.id, {
             id: collection.id,
             type,
+            attributes,
             name,
             latestFile: collectionFiles?.[0],
             coverFile: coverFiles.get(collection.id),
diff --git a/web/packages/new/photos/services/collection/ui.ts b/web/packages/new/photos/services/collection/ui.ts
index e4e4498d7fa..6b9340def69 100644
--- a/web/packages/new/photos/services/collection/ui.ts
+++ b/web/packages/new/photos/services/collection/ui.ts
@@ -37,8 +37,16 @@ export interface CollectionSummary {
     id: number;
     /**
      * The "UI" type for the collection or pseudo-collection.
+     *
+     * For newer code consider using {@link attributes} instead.
      */
     type: CollectionSummaryType;
+    /**
+     * Various UI related attributes for the collection or pseudo-collection.
+     *
+     * This is meant to replace {@link type} gradually.
+     */
+    attributes: CollectionSummaryType[];
     /**
      * The name of the collection or pseudo-collection.
      */
