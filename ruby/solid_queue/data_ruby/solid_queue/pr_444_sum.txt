The PR aims to optimize the polling mechanism for the Worker and Dispatcher by separating their logic from `Poller#start_loop`. Here's a concise instruction set for the changes:

1. **Update Worker Polling:**
   - Modify `Worker#poll` to return a large delay value (e.g., `10.minutes`) when the Worker is at full capacity, transitioning from polling to a wake-on-event mode.
   - Return the `polling_interval` when the Worker is below capacity, maintaining the poll timing until jobs are ready for execution.

2. **Update Dispatcher Polling:**
   - Alter `Dispatcher#poll` to return the `polling_interval` when `due` `ScheduledExecutions` are less than `batch_size`, maintaining existing poll timing.
   - Return 0 and eliminate sleep between loops when `due` `ScheduledExecutions` are greater than or equal to `batch_size`, polling continuously to process all `due` jobs and check for shutdown requests.

3. **Refactor `Poller#start_loop`:**
   - Remove Dispatcher-specific logic that was based on the number of rows processed by `#poll`.
   - Ensure the loop is "dumb" and solely responsible for looping and checking for shutdowns.

The PR addresses the overhead by refining the polling logic to reduce unnecessary no-op execution claims in `Worker#poll` and optimizing `Dispatcher#poll` for improved dispatch timing, particularly considering priority queues.