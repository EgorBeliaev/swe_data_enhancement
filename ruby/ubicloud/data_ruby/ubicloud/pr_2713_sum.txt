This PR modifies the VM allocation process by using VCpus instead of Cores for host selection. It addresses two specific use cases: hosts with a threads_per_cores ratio of 1 and the introduction of the Burstable family with variable CPU-Core relationships. Key highlights for implementation:

1. **VCpu Allocation**: Alter the VM allocation logic to compute the number of cores based on the candidate host's architecture during allocation. Update core counts on the VM or VmHostSlice accordingly to ensure accurate resource tracking.

2. **Slice Management**: Implement logic where VMs within a slice do not control core counts; instead, track core usage through the VmHostSlice. Ensure correct handling when vcpus==1 for Burstable sizes in `cloud_hypervisor_cpu_topology`.

3. **Slice Restrictions**: Update slice allocation rules to permit projects with the `use_slice_for_allocation` flag to create Standard VMs on all hosts. Use slices for VM creation if `accept_slices` is enabled on a host; otherwise, apply traditional allocation methods.

4. **Testing and Debugging**:
   - Ensure that individual specs can run with `FORCE_AUTOLOAD=1 CLOVER_FREEZE=1` and debug using `RUBYOPT=-d`.
   - Address the issue with the VmHostCpuAllocation class not being called under `CLOVER_FREEZE=1` due to thawed_mock.rb static method behavior. Allow mocking for `VmHostCpuAllocation` and update tests that utilize `new` operator mocking.

These changes are critical for enabling flexible VM resource allocation in preparation for upcoming architectural updates.