diff --git a/lib/langchain/assistants/assistant.rb b/lib/langchain/assistants/assistant.rb
index 94e550a20..676c6dd6a 100644
--- a/lib/langchain/assistants/assistant.rb
+++ b/lib/langchain/assistants/assistant.rb
@@ -51,9 +51,8 @@ def initialize(
       raise ArgumentError, "Thread must be an instance of Langchain::Thread" unless @thread.is_a?(Langchain::Thread)
 
       # The first message in the thread should be the system instructions
-      # TODO: What if the user added old messages and the system instructions are already in there? Should this overwrite the existing instructions?
-      initialize_instructions
       # For Google Gemini, and Anthropic system instructions are added to the `system:` param in the `chat` method
+      initialize_instructions
     end
 
     # Add a user message to the thread
@@ -287,7 +286,7 @@ def determine_tool_role
 
     def initialize_instructions
       if llm.is_a?(Langchain::LLM::OpenAI) || llm.is_a?(Langchain::LLM::MistralAI)
-        add_message(role: "system", content: instructions) if instructions
+        self.instructions = @instructions if @instructions
       end
     end
 
diff --git a/spec/langchain/assistants/assistant_spec.rb b/spec/langchain/assistants/assistant_spec.rb
index dc4863f24..0e13bb072 100644
--- a/spec/langchain/assistants/assistant_spec.rb
+++ b/spec/langchain/assistants/assistant_spec.rb
@@ -38,6 +38,18 @@
         subject = described_class.new(llm: llm, instructions: instructions)
         expect(subject.thread).to be_a(Langchain::Thread)
       end
+
+      it "the system message always comes first" do
+        thread = Langchain::Thread.new
+        system_message = Langchain::Messages::OpenAIMessage.new(role: "system", content: "System message")
+        user_message = Langchain::Messages::OpenAIMessage.new(role: "user", content: "foo")
+        thread.add_message(system_message)
+        thread.add_message(user_message)
+        assistant = described_class.new(llm: llm, thread: thread, instructions: instructions)
+        expect(assistant.messages.first.role).to eq("system")
+        # Replaces the previous system message
+        expect(assistant.messages.first.content).to eq("You are an expert assistant")
+      end
     end
 
     describe "#add_message" do
@@ -378,6 +390,18 @@
         subject = described_class.new(llm: llm, instructions: instructions)
         expect(subject.thread).to be_a(Langchain::Thread)
       end
+
+      it "the system message always comes first" do
+        thread = Langchain::Thread.new
+        system_message = Langchain::Messages::OpenAIMessage.new(role: "system", content: "System message")
+        user_message = Langchain::Messages::OpenAIMessage.new(role: "user", content: "foo")
+        thread.add_message(system_message)
+        thread.add_message(user_message)
+        assistant = described_class.new(llm: llm, thread: thread, instructions: instructions)
+        expect(assistant.messages.first.role).to eq("system")
+        # Replaces the previous system message
+        expect(assistant.messages.first.content).to eq("You are an expert assistant")
+      end
     end
 
     describe "#add_message" do
