diff --git a/lib/langchain/assistant/messages/mistral_ai_message.rb b/lib/langchain/assistant/messages/mistral_ai_message.rb
index 40b23bf34..2c081d948 100644
--- a/lib/langchain/assistant/messages/mistral_ai_message.rb
+++ b/lib/langchain/assistant/messages/mistral_ai_message.rb
@@ -45,30 +45,14 @@ def llm?
         #
         # @return [Hash] The message as an MistralAI API-compatible hash
         def to_hash
-          {}.tap do |h|
-            h[:role] = role
-
-            if tool_calls.any?
-              h[:tool_calls] = tool_calls
-            else
-              h[:tool_call_id] = tool_call_id if tool_call_id
-
-              h[:content] = []
-
-              if content && !content.empty?
-                h[:content] << {
-                  type: "text",
-                  text: content
-                }
-              end
-
-              if image_url
-                h[:content] << {
-                  type: "image_url",
-                  image_url: image_url
-                }
-              end
-            end
+          if assistant?
+            assistant_hash
+          elsif system?
+            system_hash
+          elsif tool?
+            tool_hash
+          elsif user?
+            user_hash
           end
         end
 
@@ -92,6 +76,67 @@ def system?
         def tool?
           role == "tool"
         end
+
+        # Convert the message to an MistralAI API-compatible hash
+        # @return [Hash] The message as an MistralAI API-compatible hash, with the role as "assistant"
+        def assistant_hash
+          {
+            role: "assistant",
+            content: content,
+            tool_calls: tool_calls,
+            prefix: false
+          }
+        end
+
+        # Convert the message to an MistralAI API-compatible hash
+        # @return [Hash] The message as an MistralAI API-compatible hash, with the role as "system"
+        def system_hash
+          {
+            role: "system",
+            content: build_content_array
+          }
+        end
+
+        # Convert the message to an MistralAI API-compatible hash
+        # @return [Hash] The message as an MistralAI API-compatible hash, with the role as "tool"
+        def tool_hash
+          {
+            role: "tool",
+            content: content,
+            tool_call_id: tool_call_id
+          }
+        end
+
+        # Convert the message to an MistralAI API-compatible hash
+        # @return [Hash] The message as an MistralAI API-compatible hash, with the role as "user"
+        def user_hash
+          {
+            role: "user",
+            content: build_content_array
+          }
+        end
+
+        # Builds the content value for the message hash
+        # @return [Array<Hash>] An array of content hashes, with keys :type and :text or :image_url.
+        def build_content_array
+          content_details = []
+
+          if content && !content.empty?
+            content_details << {
+              type: "text",
+              text: content
+            }
+          end
+
+          if image_url
+            content_details << {
+              type: "image_url",
+              image_url: image_url
+            }
+          end
+
+          content_details
+        end
       end
     end
   end
diff --git a/spec/langchain/assistant/assistant_spec.rb b/spec/langchain/assistant/assistant_spec.rb
index 5c0e5fdfc..2ac652093 100644
--- a/spec/langchain/assistant/assistant_spec.rb
+++ b/spec/langchain/assistant/assistant_spec.rb
@@ -641,14 +641,14 @@
               messages: [
                 {role: "system", content: [{type: "text", text: instructions}]},
                 {role: "user", content: [{type: "text", text: "Please calculate 2+2"}]},
-                {role: "assistant", tool_calls: [
+                {role: "assistant", prefix: false, content: "", tool_calls: [
                   {
                     "function" => {"arguments" => "{\"input\":\"2+2\"}", "name" => "langchain_tool_calculator__execute"},
                     "id" => "call_9TewGANaaIjzY31UCpAAGLeV",
                     "type" => "function"
                   }
                 ]},
-                {content: [{type: "text", text: "4.0"}], role: "tool", tool_call_id: "call_9TewGANaaIjzY31UCpAAGLeV"}
+                {content: "4.0", role: "tool", tool_call_id: "call_9TewGANaaIjzY31UCpAAGLeV"}
               ],
               tools: calculator.class.function_schemas.to_openai_format,
               tool_choice: "auto"
diff --git a/spec/langchain/assistant/messages/mistral_ai_message_spec.rb b/spec/langchain/assistant/messages/mistral_ai_message_spec.rb
index 2d2ae0d30..9f4af8333 100644
--- a/spec/langchain/assistant/messages/mistral_ai_message_spec.rb
+++ b/spec/langchain/assistant/messages/mistral_ai_message_spec.rb
@@ -10,7 +10,7 @@
       let(:message) { described_class.new(role: "user", content: "Hello, world!", tool_calls: [], tool_call_id: nil) }
 
       it "returns a hash with the role and content key" do
-        expect(message.to_hash).to eq({role: "user", content: [{type: "text", text: "Hello, world!"}]})
+        expect(message.to_hash).to eq({role: "user", content: [{text: "Hello, world!", type: "text"}]})
       end
     end
 
@@ -18,7 +18,7 @@
       let(:message) { described_class.new(role: "tool", content: "Hello, world!", tool_calls: [], tool_call_id: "123") }
 
       it "returns a hash with the tool_call_id key" do
-        expect(message.to_hash).to eq({role: "tool", content: [{type: "text", text: "Hello, world!"}], tool_call_id: "123"})
+        expect(message.to_hash).to eq({role: "tool", content: "Hello, world!", tool_call_id: "123"})
       end
     end
 
@@ -32,7 +32,7 @@
       let(:message) { described_class.new(role: "assistant", tool_calls: [tool_call], tool_call_id: nil) }
 
       it "returns a hash with the tool_calls key" do
-        expect(message.to_hash).to eq({role: "assistant", tool_calls: [tool_call]})
+        expect(message.to_hash).to eq({role: "assistant", tool_calls: [tool_call], content: "", prefix: false})
       end
     end
 
@@ -43,8 +43,8 @@
         expect(message.to_hash).to eq({
           role: "user",
           content: [
-            {type: "text", text: "Please describe this image"},
-            {type: "image_url", image_url: "https://example.com/image.jpg"}
+            {text: "Please describe this image", type: "text"},
+            {image_url: "https://example.com/image.jpg", type: "image_url"}
           ]
         })
       end
