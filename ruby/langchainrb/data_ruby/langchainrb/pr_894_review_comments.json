[
    {
        "title": "Feat Support image URLs in tool outputs for Langchain::Assistant"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "# Tool Response Standardization\r\n\r\n## Overview\r\n\r\nThis PR introduces a standardized way to handle tool responses in the Langchain library, making it easier to manage both content and image responses while maintaining backward compatibility.\r\n\r\n## Key Changes\r\n\r\n### 1. New Classes and Modules\r\n\r\n#### `ToolResponse` Class\r\n- Encapsulates both content and image responses\r\n- Provides a standardized interface for tool outputs\r\n- Includes helper methods for string conversion and comparison\r\n\r\n```ruby\r\nclass ToolResponse\r\n  attr_reader :content, :image_url\r\n\r\n  def initialize(content: nil, image_url: nil)\r\n    raise ArgumentError, \"Either content or image_url must be provided\" if content.nil? && image_url.nil?\r\n    @content = content\r\n    @image_url = image_url\r\n  end\r\nend\r\n```\r\n\r\n#### `ToolHelpers` Module\r\n- Provides a convenient method for creating tool responses\r\n- Simplifies the implementation in individual tools\r\n\r\n```ruby\r\nmodule ToolHelpers\r\n  def tool_response(content: nil, image_url: nil)\r\n    Langchain::ToolResponse.new(content: content, image_url: image_url)\r\n  end\r\nend\r\n```\r\n\r\n### 2. Tool Updates\r\n\r\nAll tools have been updated to:\r\n- Include the `ToolHelpers` module\r\n- Return `ToolResponse` objects instead of raw values\r\n- Handle both success and error cases consistently\r\n\r\nExample from the Calculator tool:\r\n```ruby\r\ndef execute(input:)\r\n  result = Eqn::Calculator.calc(input)\r\n  tool_response(content: result)\r\nrescue Eqn::ParseError\r\n  tool_response(content: \"\\\"#{input}\\\" is an invalid mathematical expression\")\r\nend\r\n```\r\n\r\n### 3. Assistant Integration\r\n\r\nThe `Assistant` class now handles both new and legacy response formats:\r\n\r\n```ruby\r\ndef run_tool(tool_call)\r\n  # ... tool execution code ...\r\n  \r\n  output = tool_instance.send(method_name, **tool_arguments)\r\n\r\n  if output.is_a?(ToolResponse)\r\n    add_message(\r\n      role: @llm_adapter.tool_role,\r\n      content: output.content,\r\n      image_url: output.image_url,\r\n      tool_call_id: tool_call_id\r\n    )\r\n  else\r\n    submit_tool_output(tool_call_id: tool_call_id, output: output)\r\n  end\r\nend\r\n```\r\n\r\n### 4. Test Coverage\r\n\r\n- Added comprehensive tests for `ToolResponse`\r\n- Updated all tool tests to verify `ToolResponse` usage\r\n- Added assistant tests for both response formats\r\n\r\n## Future Improvements\r\n\r\nIn a future PR, we plan to:\r\n1. Move response formatting logic to LLM adapters\r\n2. Allow each adapter to handle `ToolResponse` objects differently\r\n3. Make the code more modular and easier to extend\r\n\r\n## Breaking Changes\r\n\r\nNone. The assistant maintains backward compatibility by supporting both:\r\n- New `ToolResponse` objects\r\n- Legacy raw value returns\r\n\r\n## Migration Guide\r\n\r\nTo update your custom tools to use the new format:\r\n\r\n1. Include the `ToolHelpers` module:\r\n```ruby\r\ninclude Langchain::ToolHelpers\r\n```\r\n\r\n2. Use `tool_response` in your methods:\r\n```ruby\r\ndef your_method\r\n  result = # your computation\r\n  tool_response(content: result)\r\nend\r\n```"
    },
    {
        "author": {
            "login": "andreibondarev"
        },
        "body": ""
    },
    {
        "author": {
            "login": "andreibondarev"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Eth3rnit3"
        },
        "body": ""
    },
    {
        "author": {
            "login": "Eth3rnit3"
        },
        "body": ""
    },
    {
        "author": {
            "login": "andreibondarev"
        },
        "body": "@Eth3rnit3 Thank you for your PR. Your thoughts on the below... ?\r\n\r\nWhat if we modified [this](https://github.com/patterns-ai-core/langchainrb/blob/b16ba869d1f52d16db1edd20841ab17eca058be0/lib/langchain/assistant.rb#L374) to:\r\n```ruby\r\ncontent, image_url = tool_instance.send(method_name, **tool_arguments)\r\n\r\n# Rename the method parameter from output: to content:\r\nsubmit_tool_output(tool_call_id: tool_call_id, content: content, image_url: image_url)\r\n```\r\n\r\nSomething else to think about is that we might want to support the base64 encoded image re-presentation in the future, something like:\r\n```\r\n        {\r\n          \"type\": \"image\",\r\n          \"source\": {\r\n            \"type\": \"base64\",\r\n            \"media_type\": \"image/jpeg\",\r\n            \"data\": \"/9j/4AAQSkZJRg...\",\r\n          }\r\n        }\r\n```\r\n"
    },
    {
        "author": {
            "login": "Eth3rnit3"
        },
        "body": "Yes you're right @andreibondarev it's better this way, it's more implicit and avoids parsing what is output from the tool.\r\n\r\n- Works with Anthropic\r\n- Works with Mistral\r\n\r\nHere's the error message for OpenAPI, which doesn't support`:image_url` in a message with the `role: \"tool\"`\r\n```\r\nOpenAI HTTP Error (spotted in ruby-openai 7.3.1): {\"error\"=>{\"message\"=>\"Invalid 'messages[3]'. Image URLs are only allowed for messages with role 'user', but this message with role 'tool' contains an image URL.\", \"type\"=>\"invalid_request_error\", \"param\"=>\"messages[3]\", \"code\"=>\"invalid_value\"}}\r\n```"
    }
]