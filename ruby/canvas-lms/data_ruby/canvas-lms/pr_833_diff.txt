diff --git a/app/controllers/quizzes/quiz_submission_users_controller.rb b/app/controllers/quizzes/quiz_submission_users_controller.rb
index eb26dadfccdf1..712ee8d63651d 100644
--- a/app/controllers/quizzes/quiz_submission_users_controller.rb
+++ b/app/controllers/quizzes/quiz_submission_users_controller.rb
@@ -115,7 +115,7 @@ def index_users
     # @API Send a message to unsubmitted or submitted users for the quiz
     # @beta
     #
-    # @param conversations [QuizUserConversation] - Body and recipients to send the message to.
+    # @argument conversations [QuizUserConversation] - Body and recipients to send the message to.
     #
     # @model QuizUserConversation
     #
diff --git a/app/controllers/sis_api_controller.rb b/app/controllers/sis_api_controller.rb
index 809e8aa01c172..d9cfde281c42b 100644
--- a/app/controllers/sis_api_controller.rb
+++ b/app/controllers/sis_api_controller.rb
@@ -132,12 +132,12 @@ def published_course_ids
   end
 
   def published_assignments
-    Assignment.published
-      .where(post_to_sis: true)
-      .where(context_type: 'Course', context_id: published_course_ids)
-      .preload(:assignment_group) # preload assignment group
-      .preload(:active_assignment_overrides) # preload *active* overrides
-      .preload(context: { active_course_sections: [:nonxlist_course] }) # preload courses and *active* sections
+    Assignment.published.
+      where(post_to_sis: true).
+      where(context_type: 'Course', context_id: published_course_ids).
+      preload(:assignment_group).
+      preload(:active_assignment_overrides).
+      preload(context: { active_course_sections: [:nonxlist_course] })
   end
 
   def paginated_assignments
diff --git a/app/controllers/user_observees_controller.rb b/app/controllers/user_observees_controller.rb
index 457024d75a85c..fc5ced40f274a 100644
--- a/app/controllers/user_observees_controller.rb
+++ b/app/controllers/user_observees_controller.rb
@@ -220,12 +220,12 @@ def common_accounts_for(*users)
     shards = users.map(&:associated_shards).reduce(:&)
     Shard.with_each_shard(shards) do
       user_ids = users.map(&:id)
-      Account.where(id: UserAccountAssociation
-        .joins(:account).where(accounts: {parent_account_id: nil})
-        .where(user_id: user_ids)
-        .group(:account_id)
-        .having("count(*) = #{user_ids.length}") # user => account is unique for user_account_associations
-        .select(:account_id)
+      Account.where(id: UserAccountAssociation.
+        joins(:account).where(accounts: {parent_account_id: nil}).
+        where(user_id: user_ids).
+        group(:account_id).
+        having("count(*) = #{user_ids.length}"). # user => account is unique for user_account_associations
+        select(:account_id)
       )
     end
   end
