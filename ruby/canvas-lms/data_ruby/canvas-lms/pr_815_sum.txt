### Problem:
The pull request (PR) addresses the integration of the VeriCite plugin into the Assignments, Gradebook, and SpeedGrader features of the repository. Multiple rounds of feedback necessitated several adjustments to the integration, particularly focusing on code styling, packaging, and bug fixes.

### Instructions for the Programmer:
1. **VeriCite Plugin Integration:**
   - Incorporate the VeriCite plugin into `/plugins`.
   - Enable options for "inline" or "upload" assignment types in settings.

2. **Database Schema Update:**
   - Add a boolean column `vericite_enabled` to the `assignments` table.
   ```sql
   ALTER TABLE assignments ADD COLUMN vericite_enabled BOOLEAN;
   ```

3. **Code Style and Packaging:**
   - Follow Ruby style conventions, specifically correcting camel case variables in methods like `submission.check_verivite_status`.
   - Package the VeriCite gem separately and refer to it via the Gemfile. Update `Gemfile.d/app.rb` accordingly.

4. **Handling Feedback:**
   - Squash multiple commits into a single commit to streamline the internal build and review process.
   - Apply changes based on review feedback, which includes the addition of a `lookup_api` parameter to control whether the `vericite_data` function queries the VeriCite API or relies solely on the Canvas DB.

5. **Testing and QA:**
   - Resolve issues related to unit and selenium tests that were failing, ensuring compatibility and functionality.
   - Address all QA feedback, focusing on flags not being set and other identified bugs.

6. **Gem Updates:**
   - Update the `vericite_api` gem from version `1.1.0` to `1.2.0` in `Gemfile.d/app.rb`.
   - Modify the gem's dependency on `json` in the `vericite_api` gemspec to `(>= 1.4.6)` or consider adding `<3` to address compatibility warnings with Ruby 2.4 and later versions.

### Summary:
The PR focuses on integrating and verifying the functionality of the VeriCite plugin while aligning with existing infrastructure and coding standards. Key attention areas include database schema changes, gem packaging, code style adherence, comprehensive testing, and addressing feedback from code reviews and QA processes.