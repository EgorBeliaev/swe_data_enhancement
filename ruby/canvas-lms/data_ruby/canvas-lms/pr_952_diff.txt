diff --git a/app/controllers/rubrics_api_controller.rb b/app/controllers/rubrics_api_controller.rb
index 3dc7d384d1e73..b91e67e6d068a 100644
--- a/app/controllers/rubrics_api_controller.rb
+++ b/app/controllers/rubrics_api_controller.rb
@@ -147,7 +147,7 @@ class RubricsApiController < ApplicationController
 
   def index
     return unless authorized_action(@context, @current_user, :manage_rubrics)
-    rubrics = Api.paginate(@context.rubrics.active, self, api_v1_course_assignments_url(@context))
+    rubrics = Api.paginate(@context.rubrics.active, self, rubric_pagination_url)
     render json: rubrics_json(rubrics, @current_user, session) unless performed?
   end
 
diff --git a/lib/api/v1/rubric.rb b/lib/api/v1/rubric.rb
index 9094926d4b7d1..f407d31243850 100644
--- a/lib/api/v1/rubric.rb
+++ b/lib/api/v1/rubric.rb
@@ -46,4 +46,12 @@ def rubric_json(rubric, user, session, opts = {})
     hash['assessments'] = rubric_assessments_json(opts[:assessments], user, session, opts) if opts[:assessments].present?
     hash
   end
-end
\ No newline at end of file
+
+  def rubric_pagination_url
+    if @context.is_a? Course
+      api_v1_course_rubrics_url(@context)
+    else
+      api_v1_account_rubrics_url(@context)
+    end
+  end
+end
diff --git a/spec/apis/v1/rubrics_api_spec.rb b/spec/apis/v1/rubrics_api_spec.rb
index eb389cbc635aa..91704a4afb2ed 100644
--- a/spec/apis/v1/rubrics_api_spec.rb
+++ b/spec/apis/v1/rubrics_api_spec.rb
@@ -84,156 +84,297 @@ def rubric_data_hash(opts={})
     hash
   end
 
-  def rubrics_api_call
+  def rubrics_api_call(context, params={}, type='course')
     api_call(
-      :get, "/api/v1/courses/#{@course.id}/rubrics",
-      controller: 'rubrics_api',
-      action: 'index',
-      course_id: @course.id.to_s,
-      format: 'json'
+      :get, "/api/v1/#{type}s/#{context.id}/rubrics", {
+        controller: 'rubrics_api',
+        action: 'index',
+        format: 'json',
+        "#{type}_id": context.id.to_s
+      }.merge(params)
     )
   end
 
-  def rubric_api_call(params={})
+  def rubric_api_call(context, params={}, type='course')
     api_call(
-      :get, "/api/v1/courses/#{@course.id}/rubrics/#{@rubric.id}",
-      controller: 'rubrics_api',
-      action: 'show',
-      course_id: @course.id.to_s,
-      id: @rubric.id.to_s,
-      format: 'json',
-      include: params[:include],
-      style: params[:style]
+      :get, "/api/v1/#{type}s/#{context.id}/rubrics/#{@rubric.id}", {
+        controller: 'rubrics_api',
+        action: 'show',
+        id: @rubric.id.to_s,
+        format: 'json',
+        "#{type}_id": context.id.to_s
+      }.merge(params)
     )
   end
 
-  def raw_rubric_call(params={})
-    raw_api_call(:get, "/api/v1/courses/#{@course.id}/rubrics/#{@rubric.id}",
-      { controller: 'rubrics_api',
+  def raw_rubric_call(context, params={}, type='course')
+    raw_api_call(
+      :get, "/api/v1/#{type}s/#{context.id}/rubrics/#{@rubric.id}", {
+        controller: 'rubrics_api',
         action: 'show',
         format: 'json',
-        course_id: @course.id.to_s,
         id: @rubric.id.to_s,
-        include: params[:include],
-        style: params[:style]
-      }
+        "#{type}_id": context.id.to_s
+      }.merge(params)
     )
   end
 
-  describe "index action" do
-    before :once do
-      course_with_teacher active_all: true
-      create_rubric(@course)
-    end
+  def paginate_call(context, type)
+    @user = account_admin_user
+    7.times { create_rubric(context) }
+    json = rubrics_api_call(context, {:per_page => '3'}, type)
+
+    expect(json.length).to eq 3
+    links = response.headers['Link'].split(",")
+    expect(links.all?{ |l| l =~ /api\/v1\/#{type}s\/#{context.id}\/rubrics/ }).to be_truthy
+    expect(links.find{ |l| l.match(/rel="next"/)}).to match /page=2/
+    expect(links.find{ |l| l.match(/rel="first"/)}).to match /page=1/
+    expect(links.find{ |l| l.match(/rel="last"/)}).to match /page=3/
+
+    # get the last page
+    json = rubrics_api_call(context, {:per_page => '3', :page => '3'}, type)
+
+    expect(json.length).to eq 2
+    links = response.headers['Link'].split(",")
+    expect(links.all?{ |l| l =~ /api\/v1\/#{type}s\/#{context.id}\/rubrics/ }).to be_truthy
+    expect(links.find{ |l| l.match(/rel="prev"/)}).to match /page=2/
+    expect(links.find{ |l| l.match(/rel="first"/)}).to match /page=1/
+    expect(links.find{ |l| l.match(/rel="last"/)}).to match /page=3/
+  end
 
-    it "returns an array of all rubrics in an account" do
-      create_rubric(@account)
-      response = rubrics_api_call
-      expect(response[0].keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
-      expect(response.length).to eq 1
-    end
+  describe "in a course" do
+    describe "index action" do
+      before :once do
+        course_with_teacher active_all: true
+        create_rubric(@course)
+      end
 
-    it "returns an array of all rubrics in a course" do
-      create_rubric(@course)
-      response = rubrics_api_call
-      expect(response[0].keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
-      expect(response.length).to eq 2
-    end
+      it "returns an array of all rubrics in a course" do
+        create_rubric(@course)
+        response = rubrics_api_call(@course)
+        expect(response[0].keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
+        expect(response.length).to eq 2
+      end
 
-    it "requires the user to have permission to manage rubrics" do
-      @user = @student
-      raw_rubric_call
+      it "requires the user to have permission to manage rubrics" do
+        @user = @student
+        raw_rubric_call(@course)
 
-      assert_status(401)
+        assert_status(401)
+      end
+
+      it "should paginate" do
+        paginate_call(@course, 'course')
+      end
     end
 
-  end
+    describe "show action" do
+      before :once do
+        course_with_teacher active_all: true
+        create_rubric(@course)
+      end
 
-  describe "show action" do
-    before :once do
-      course_with_teacher active_all: true
-      create_rubric(@course)
-    end
+      it "returns a rubric" do
+        response = rubric_api_call(@course)
+        expect(response.keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
+      end
 
-    it "returns a rubric" do
-      response = rubric_api_call
-      expect(response.keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
-    end
+      it "requires the user to have permission to manage rubrics" do
+        @user = @student
+        raw_rubric_call(@course)
+
+        assert_status(401)
+      end
 
-    it "requires the user to have permission to manage rubrics" do
-      @user = @student
-      raw_rubric_call
 
-      assert_status(401)
-    end
+      context "include parameter" do
+        before :once do
+          course_with_student(user: @user, active_all: true)
+          course_with_teacher active_all: true
+          create_rubric(@course)
+          ['grading', 'peer_review'].each.with_index do |type, index|
+            create_rubric_assessment({type: type, comments: "comment #{index}"})
+          end
+        end
 
+        it "does not return rubric assessments by default" do
+          response = rubric_api_call(@course)
+          expect(response).not_to have_key "assessments"
+        end
 
-    context "include parameter" do
-      before :once do
-        course_with_student(user: @user, active_all: true)
-        course_with_teacher active_all: true
-        create_rubric(@course)
-        ['grading', 'peer_review'].each.with_index do |type, index|
-          create_rubric_assessment({type: type, comments: "comment #{index}"})
+        it "returns rubric assessments when passed 'assessments'" do
+          response = rubric_api_call(@course, {include: "assessments"})
+          expect(response).to have_key "assessments"
+          expect(response["assessments"].length).to eq 2
+        end
+
+        it "returns any rubric assessments used for grading when passed 'graded_assessments'" do
+          response = rubric_api_call(@course, {include: "graded_assessments"})
+          expect(response["assessments"][0]["assessment_type"]).to eq "grading"
+          expect(response["assessments"].length).to eq 1
+        end
+
+        it "returns any peer review assessments when passed 'peer_assessments'" do
+          response = rubric_api_call(@course, {include: "peer_assessments"})
+          expect(response["assessments"][0]["assessment_type"]).to eq "peer_review"
+          expect(response["assessments"].length).to eq 1
         end
+
+        it "returns an error if passed an invalid argument" do
+          raw_rubric_call(@course, {include: "cheez"})
+
+          expect(response).not_to be_success
+          json = JSON.parse response.body
+          expect(json["errors"]["include"].first["message"]).to eq "invalid assessment type requested. Must be one of the following: assessments, graded_assessments, peer_assessments"
+        end
+
+        context "style argument" do
+          it "returns all data when passed 'full'" do
+            response = rubric_api_call(@course, {include: "assessments", style: "full"})
+            expect(response["assessments"][0]).to have_key 'data'
+          end
+
+          it "returns only comments when passed 'comments_only'" do
+            response = rubric_api_call(@course, {include: "assessments", style: "comments_only"})
+            expect(response["assessments"][0]).to have_key 'comments'
+          end
+
+          it "returns an error if passed an invalid argument" do
+            raw_rubric_call(@course, {include: "assessments", style: "BigMcLargeHuge"})
+
+            expect(response).not_to be_success
+            json = JSON.parse response.body
+            expect(json["errors"]["style"].first["message"]).to eq "invalid style requested. Must be one of the following: full, comments_only"
+          end
+
+          it "returns an error if passed a style parameter without assessments" do
+            raw_rubric_call(@course, {style: "full"})
+
+            expect(response).not_to be_success
+            json = JSON.parse response.body
+            expect(json["errors"]["style"].first["message"]).to eq "invalid parameters. Style parameter passed without requesting assessments"
+          end
+        end
+      end
+    end
+  end
+
+  describe "in an account" do
+    describe "index action" do
+      before :once do
+        @user = account_admin_user
+        create_rubric(@account)
       end
 
-      it "does not returns rubric assessments by default" do
-        response = rubric_api_call
-        expect(response).not_to have_key "assessmensdts"
+      it "requires the user to have permission to manage rubrics" do
+        @user = @student
+        raw_rubric_call(@account, {}, 'account')
+
+        assert_status(401)
       end
 
-      it "returns rubric assessments when passed 'assessessments'" do
-        response = rubric_api_call({include: "assessments"})
-        expect(response).to have_key "assessments"
-        expect(response["assessments"].length).to eq 2
+      it "should paginate" do
+        paginate_call(@account, 'account')
       end
 
-      it "returns any rubric assessments used for grading when passed 'graded_assessessments'" do
-        response = rubric_api_call({include: "graded_assessments"})
-        expect(response["assessments"][0]["assessment_type"]).to eq "grading"
-        expect(response["assessments"].length).to eq 1
+      it "returns an array of all rubrics in an account" do
+        create_rubric(@account)
+        response = rubrics_api_call(@account, {}, 'account')
+        expect(response[0].keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
+        expect(response.length).to eq 2
+      end
+    end
+
+    describe "show action" do
+      before :once do
+        @user = account_admin_user
+        create_rubric(@account)
       end
 
-      it "returns any peer review assessments when passed 'peer_assessessments'" do
-        response = rubric_api_call({include: "peer_assessments"})
-        expect(response["assessments"][0]["assessment_type"]).to eq "peer_review"
-        expect(response["assessments"].length).to eq 1
+      it "returns a rubric" do
+        response = rubric_api_call(@account, {}, 'account')
+        expect(response.keys.sort).to eq ALLOWED_RUBRIC_FIELDS.sort
       end
 
-      it "returns an error if passed an invalid argument" do
-        raw_rubric_call({include: "cheez"})
+      it "requires the user to have permission to manage rubrics" do
+        @user = @student
+        raw_rubric_call(@account, {}, 'account')
 
-        expect(response).not_to be_success
-        json = JSON.parse response.body
-        expect(json["errors"]["include"].first["message"]).to eq "invalid assessment type requested. Must be one of the following: assessments, graded_assessments, peer_assessments"
+        assert_status(401)
       end
 
-      context "style argument" do
-        it "returns all data when passed 'full'" do
-          response = rubric_api_call({include: "assessments", style: "full"})
-          expect(response["assessments"][0]).to have_key 'data'
+      context "include parameter" do
+        before :once do
+          course_with_student(user: @user, active_all: true)
+          course_with_teacher active_all: true
+          create_rubric(@account)
+          ['grading', 'peer_review'].each.with_index do |type, index|
+            create_rubric_assessment({type: type, comments: "comment #{index}"})
+          end
+          @user = account_admin_user
+        end
+
+        it "does not return rubric assessments by default" do
+          response = rubric_api_call(@account, {}, 'account')
+          expect(response).not_to have_key "assessments"
+        end
+
+        it "returns rubric assessments when passed 'assessments'" do
+          response = rubric_api_call(@account, {include: "assessments"}, 'account')
+          expect(response).to have_key "assessments"
+          expect(response["assessments"].length).to eq 2
         end
 
-        it "returns only comments when passed 'comments_only'" do
-          response = rubric_api_call({include: "assessments", style: "comments_only"})
-          expect(response["assessments"][0]).to have_key 'comments'
+        it "returns any rubric assessments used for grading when passed 'graded_assessments'" do
+          response = rubric_api_call(@account, {include: "graded_assessments"}, 'account')
+          expect(response["assessments"][0]["assessment_type"]).to eq "grading"
+          expect(response["assessments"].length).to eq 1
+        end
+
+        it "returns any peer review assessments when passed 'peer_assessments'" do
+          response = rubric_api_call(@account, {include: "peer_assessments"}, 'account')
+          expect(response["assessments"][0]["assessment_type"]).to eq "peer_review"
+          expect(response["assessments"].length).to eq 1
         end
 
         it "returns an error if passed an invalid argument" do
-          raw_rubric_call({include: "assessments", style: "BigMcLargeHuge"})
+          raw_rubric_call(@account, {include: "cheez"}, 'account')
 
           expect(response).not_to be_success
           json = JSON.parse response.body
-          expect(json["errors"]["style"].first["message"]).to eq "invalid style requested. Must be one of the following: full, comments_only"
+          expect(json["errors"]["include"].first["message"]).to eq "invalid assessment type requested. Must be one of the following: assessments, graded_assessments, peer_assessments"
         end
 
-        it "returns an error if passed a style parameter without assessments" do
-          raw_rubric_call({style: "full"})
+        context "style argument" do
+          before :once do
+            @user = account_admin_user
+          end
 
-          expect(response).not_to be_success
-          json = JSON.parse response.body
-          expect(json["errors"]["style"].first["message"]).to eq "invalid parameters. Style parameter passed without requesting assessments"
+          it "returns all data when passed 'full'" do
+            response = rubric_api_call(@account, {include: "assessments", style: "full"}, 'account')
+            expect(response["assessments"][0]).to have_key 'data'
+          end
+
+          it "returns only comments when passed 'comments_only'" do
+            response = rubric_api_call(@account, {include: "assessments", style: "comments_only"}, 'account')
+            expect(response["assessments"][0]).to have_key 'comments'
+          end
+
+          it "returns an error if passed an invalid argument" do
+            raw_rubric_call(@account, {include: "assessments", style: "BigMcLargeHuge"}, 'account')
+
+            expect(response).not_to be_success
+            json = JSON.parse response.body
+            expect(json["errors"]["style"].first["message"]).to eq "invalid style requested. Must be one of the following: full, comments_only"
+          end
+
+          it "returns an error if passed a style parameter without assessments" do
+            raw_rubric_call(@account, {style: "full"}, 'account')
+
+            expect(response).not_to be_success
+            json = JSON.parse response.body
+            expect(json["errors"]["style"].first["message"]).to eq "invalid parameters. Style parameter passed without requesting assessments"
+          end
         end
       end
     end
