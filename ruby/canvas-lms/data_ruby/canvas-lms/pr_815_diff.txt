diff --git a/Gemfile.d/app.rb b/Gemfile.d/app.rb
index 64278c44a7aba..5b9963d16034c 100644
--- a/Gemfile.d/app.rb
+++ b/Gemfile.d/app.rb
@@ -143,5 +143,6 @@
 gem 'paginated_collection', path: 'gems/paginated_collection'
 gem 'stringify_ids', path: 'gems/stringify_ids'
 gem 'twitter', path: 'gems/twitter'
+gem 'vericite_api', '1.1.0'
 gem 'utf8_cleaner', path: 'gems/utf8_cleaner'
 gem 'workflow', path: 'gems/workflow'
diff --git a/app/coffeescripts/SubmissionDetailsDialog.coffee b/app/coffeescripts/SubmissionDetailsDialog.coffee
index 2898aa2c456b2..52052d83a43ae 100644
--- a/app/coffeescripts/SubmissionDetailsDialog.coffee
+++ b/app/coffeescripts/SubmissionDetailsDialog.coffee
@@ -14,7 +14,7 @@ define [
   'jquery.instructure_misc_plugins'
   'vendor/jquery.scrollTo'
   'vendor/jquery.ba-tinypubsub'
-], ($, submissionDetailsDialog, I18n, GradebookHelpers, {extractDataFor}, OutlierScoreHelper) ->
+], ($, submissionDetailsDialog, I18n, GradebookHelpers, {extractDataForTurnitin}, OutlierScoreHelper) ->
 
   class SubmissionDetailsDialog
     constructor: (@assignment, @student, @options) ->
@@ -89,9 +89,9 @@ define [
           comment.url = "#{@options.context_url}/users/#{comment.author_id}"
           urlPrefix = "#{location.protocol}//#{location.host}"
           comment.image_url = "#{urlPrefix}/images/users/#{comment.author_id}"
-        submission.turnitin = extractDataFor(submission, "submission_#{submission.id}", @options.context_url)
+        submission.turnitin = extractDataForTurnitin(submission, "submission_#{submission.id}", @options.context_url)
         for attachment in submission.attachments || []
-          attachment.turnitin = extractDataFor(submission, "attachment_#{attachment.id}", @options.context_url)
+          attachment.turnitin = extractDataForTurnitin(submission, "attachment_#{attachment.id}", @options.context_url)
       @submission.grade = "EX" if @submission.excused
       @dialog.html(submissionDetailsDialog(@submission))
       @dialog.find('select').trigger('change')
diff --git a/app/coffeescripts/gradebook2/GradebookTranslations.coffee b/app/coffeescripts/gradebook2/GradebookTranslations.coffee
index aa13fb363c7a0..3ea7998961a81 100644
--- a/app/coffeescripts/gradebook2/GradebookTranslations.coffee
+++ b/app/coffeescripts/gradebook2/GradebookTranslations.coffee
@@ -13,7 +13,7 @@ define ['i18n!gradebook2'], (I18n) ->
     submission_tooltip_media_comment: I18n.t("Media Comment Submission")
     submission_tooltip_media_recording: I18n.t("Media Recording Submission")
     submission_tooltip_online_quiz: I18n.t("Quiz Submission")
-    submission_tooltip_turnitin: I18n.t('Has Turnitin score')
+    submission_tooltip_turnitin: I18n.t('Has similarity score')
     submission_tooltip_not_in_any_grading_period: I18n.t("This submission is not in any grading period"),
     submission_tooltip_in_another_grading_period: I18n.t("This submission is in another grading period"),
     submission_tooltip_in_closed_grading_period: I18n.t("This submission is in a closed grading period"),
diff --git a/app/coffeescripts/gradebook2/SubmissionCell.coffee b/app/coffeescripts/gradebook2/SubmissionCell.coffee
index 83ec7a4d576ed..fb146d06b9946 100644
--- a/app/coffeescripts/gradebook2/SubmissionCell.coffee
+++ b/app/coffeescripts/gradebook2/SubmissionCell.coffee
@@ -8,7 +8,7 @@ define [
   'compiled/util/round'
   'jquery.ajaxJSON'
   'jquery.instructure_misc_helpers' # raw
-], ($, _, GRADEBOOK_TRANSLATIONS, OutlierScoreHelper, htmlEscape, {extractData}, round) ->
+], ($, _, GRADEBOOK_TRANSLATIONS, OutlierScoreHelper, htmlEscape, {extractDataTurnitin}, round) ->
 
   class SubmissionCell
 
@@ -117,7 +117,7 @@ define [
       innerContents = null if opts.submission.workflow_state == 'pending_review' && !isNaN(innerContents)
       innerContents ?= if submission_type then SubmissionCell.submissionIcon(submission_type) else '-'
 
-      if turnitin = extractData(opts.submission)
+      if turnitin = extractDataTurnitin(opts.submission)
         specialClasses.push('turnitin')
         innerContents += "<span class='gradebook-cell-turnitin #{htmlEscape turnitin.state}-score' />"
 
diff --git a/app/coffeescripts/gradebook2/Turnitin.coffee b/app/coffeescripts/gradebook2/Turnitin.coffee
index a9b47e2900e77..ce170a536a9fc 100644
--- a/app/coffeescripts/gradebook2/Turnitin.coffee
+++ b/app/coffeescripts/gradebook2/Turnitin.coffee
@@ -4,19 +4,22 @@ define [
 ], (I18n, {max, invert}) ->
 
   Turnitin =
-    extractData: (submission) ->
-      return unless submission?.turnitin_data
+    extractDataTurnitin: (submission) ->
+      plagData = submission?.turnitin_data
+      if !plagData?
+        plagData = submission?.vericite_data
+      return unless plagData?
       data = items: []
-  
+
       if submission.attachments and submission.submission_type is 'online_upload'
         for attachment in submission.attachments
           attachment = attachment.attachment ? attachment
-          if turnitin = submission.turnitin_data?['attachment_' + attachment.id]
+          if turnitin = plagData?['attachment_' + attachment.id]
             data.items.push turnitin
       else if submission.submission_type is "online_text_entry"
-        if turnitin = submission.turnitin_data?['submission_' + submission.id]
+        if turnitin = plagData?['submission_' + submission.id]
           data.items.push turnitin
-  
+
       return unless data.items.length
 
       stateList = ['no', 'none', 'acceptable', 'warning', 'problem', 'failure']
@@ -25,12 +28,16 @@ define [
       data.state = stateList[max(states)]
       data
 
-    extractDataFor: (submission, key, urlPrefix) ->
-      data = submission.turnitin_data
+    extractDataForTurnitin: (submission, key, urlPrefix) ->
+      data = submission?.turnitin_data
+      type = "turnitin"
+      if !data? || data.provider == 'vericite'
+        data = submission?.vericite_data
+        type = "vericite"
       return {} unless data and data[key] and data[key].similarity_score?
       data = data[key]
       data.state = "#{data.state || 'no'}_score"
       data.score = "#{data.similarity_score}%"
-      data.reportUrl = "#{urlPrefix}/assignments/#{submission.assignment_id}/submissions/#{submission.user_id}/turnitin/#{key}"
-      data.tooltip = I18n.t('tooltip.score', 'Turnitin Similarity Score - See detailed report')
+      data.reportUrl = "#{urlPrefix}/assignments/#{submission.assignment_id}/submissions/#{submission.user_id}/#{type}/#{key}"
+      data.tooltip = I18n.t('tooltip.score', 'Similarity Score - See detailed report')
       data
diff --git a/app/coffeescripts/models/Assignment.coffee b/app/coffeescripts/models/Assignment.coffee
index f90a20a3ead51..b130d4d712fd5 100644
--- a/app/coffeescripts/models/Assignment.coffee
+++ b/app/coffeescripts/models/Assignment.coffee
@@ -4,13 +4,14 @@ define [
   'Backbone'
   'compiled/backbone-ext/DefaultUrlMixin'
   'compiled/models/TurnitinSettings'
+  'compiled/models/VeriCiteSettings'
   'compiled/models/DateGroup'
   'compiled/collections/AssignmentOverrideCollection'
   'compiled/collections/DateGroupCollection'
   'i18n!assignments'
   'compiled/util/GradingPeriods'
   'timezone'
-], ($, _, {Model}, DefaultUrlMixin, TurnitinSettings, DateGroup, AssignmentOverrideCollection, DateGroupCollection, I18n, GradingPeriods, tz) ->
+], ($, _, {Model}, DefaultUrlMixin, TurnitinSettings, VeriCiteSettings, DateGroup, AssignmentOverrideCollection, DateGroupCollection, I18n, GradingPeriods, tz) ->
 
   class Assignment extends Model
     @mixin DefaultUrlMixin
@@ -29,6 +30,9 @@ define [
       if (turnitin_settings = @get('turnitin_settings'))?
         @set 'turnitin_settings', new TurnitinSettings(turnitin_settings),
           silent: true
+      if (vericite_settings = @get('vericite_settings'))?
+        @set 'vericite_settings', new VeriCiteSettings(vericite_settings),
+          silent: true
       if (all_dates = @get('all_dates'))?
         @set 'all_dates', new DateGroupCollection(all_dates)
       if (@postToSISEnabled())
@@ -194,6 +198,9 @@ define [
     turnitinAvailable: =>
       typeof @get('turnitin_enabled') != 'undefined'
 
+    vericiteAvailable: =>
+      typeof @get('vericite_enabled') != 'undefined'
+
     gradeGroupStudentsIndividually: (setting) =>
       return @get('grade_group_students_individually') unless arguments.length > 0
       @set 'grade_group_students_individually', setting
@@ -207,6 +214,15 @@ define [
       else
         @set( 'turnitin_enabled', setting )
 
+    vericiteEnabled: (setting) =>
+      if arguments.length == 0
+        if @get( 'vericite_enabled' ) == undefined
+          false
+        else
+          !!@get( 'vericite_enabled' )
+      else
+        @set( 'vericite_enabled', setting )
+
     groupCategoryId: (id) =>
       return @get( 'group_category_id' ) unless arguments.length > 0
       @set 'group_category_id', id
@@ -327,7 +343,7 @@ define [
         'acceptsOnlineTextEntries', 'acceptsOnlineURL', 'allowedExtensions',
         'restrictFileExtensions', 'isOnlineSubmission', 'isNotGraded',
         'isExternalTool', 'externalToolUrl', 'externalToolNewTab',
-        'turnitinAvailable','turnitinEnabled', 'hasDueDateInClosedGradingPeriod',
+        'turnitinAvailable','turnitinEnabled', 'vericiteAvailable','vericiteEnabled', 'hasDueDateInClosedGradingPeriod',
         'gradeGroupStudentsIndividually', 'groupCategoryId', 'frozen',
         'frozenAttributes', 'freezeOnCopy', 'canFreeze', 'isSimple',
         'gradingStandardId', 'isLetterGraded', 'isGpaScaled', 'assignmentGroupId', 'iconType',
@@ -374,6 +390,8 @@ define [
         data.assignment_overrides = new AssignmentOverrideCollection overrides
       if (turnitin_settings = data.turnitin_settings)?
         data.turnitin_settings = new TurnitinSettings turnitin_settings
+      if (vericite_settings = data.vericite_settings)?
+        data.vericite_settings = new VeriCiteSettings vericite_settings
       data
 
     # Update the Assignment model instance to not parse results from the
diff --git a/app/coffeescripts/models/VeriCiteSettings.coffee b/app/coffeescripts/models/VeriCiteSettings.coffee
new file mode 100644
index 0000000000000..5ba34e7fa47dd
--- /dev/null
+++ b/app/coffeescripts/models/VeriCiteSettings.coffee
@@ -0,0 +1,23 @@
+define ['underscore'], (_) ->
+  class VeriCiteSettings
+
+    constructor: (options = {}) ->
+      @originalityReportVisibility = options.originality_report_visibility || 'immediate'
+      @excludeQuoted = @normalizeBoolean(options.exclude_quoted)
+      @excludeSelfPlag = @normalizeBoolean(options.exclude_self_plag)
+      @storeInIndex = @normalizeBoolean(options.store_in_index)
+
+    toJSON: =>
+      originality_report_visibility: @originalityReportVisibility
+      exclude_quoted: @excludeQuoted
+      exclude_self_plag: @excludeSelfPlag
+      store_in_index: @storeInIndex
+
+    present: =>
+      json = {}
+      for own key,value of this
+        json[key] = value
+      json
+
+    normalizeBoolean: (value) =>
+      _.contains(["1", true, "true", 1], value)
diff --git a/app/coffeescripts/views/assignments/EditView.coffee b/app/coffeescripts/views/assignments/EditView.coffee
index 7effa51eb7e1d..e78b5f648730d 100644
--- a/app/coffeescripts/views/assignments/EditView.coffee
+++ b/app/coffeescripts/views/assignments/EditView.coffee
@@ -8,6 +8,7 @@ define [
   'jst/assignments/EditView'
   'compiled/userSettings'
   'compiled/models/TurnitinSettings'
+  'compiled/models/VeriCiteSettings'
   'compiled/views/assignments/TurnitinSettingsDialog'
   'compiled/fn/preventDefault'
   'compiled/views/calendar/MissingDateDialogView'
@@ -20,7 +21,7 @@ define [
   'jquery.toJSON'
   'compiled/jquery.rails_flash_notifications'
 ], (INST, I18n, ValidatedFormView, _, $, RichContentEditor, template,
-userSettings, TurnitinSettings, TurnitinSettingsDialog, preventDefault, MissingDateDialog,
+userSettings, TurnitinSettings, VeriCiteSettings, TurnitinSettingsDialog, preventDefault, MissingDateDialog,
 AssignmentGroupSelector, GroupCategorySelector, toggleAccessibly, RCEKeyboardShortcuts,
 ConditionalRelease) ->
 
@@ -42,6 +43,7 @@ ConditionalRelease) ->
     RESTRICT_FILE_UPLOADS_OPTIONS = '#restrict_file_extensions_container'
     ALLOWED_EXTENSIONS = '#allowed_extensions_container'
     TURNITIN_ENABLED = '#assignment_turnitin_enabled'
+    VERICITE_ENABLED = '#assignment_vericite_enabled'
     ADVANCED_TURNITIN_SETTINGS = '#advanced_turnitin_settings_link'
     GRADING_TYPE_SELECTOR = '#grading_type_selector'
     GRADED_ASSIGNMENT_FIELDS = '#graded_assignment_fields'
@@ -73,6 +75,7 @@ ConditionalRelease) ->
       els["#{RESTRICT_FILE_UPLOADS_OPTIONS}"] = '$restrictFileUploadsOptions'
       els["#{ALLOWED_EXTENSIONS}"] = '$allowedExtensions'
       els["#{TURNITIN_ENABLED}"] = '$turnitinEnabled'
+      els["#{VERICITE_ENABLED}"] = '$vericiteEnabled'
       els["#{ADVANCED_TURNITIN_SETTINGS}"] = '$advancedTurnitinSettings'
       els["#{GRADING_TYPE_SELECTOR}"] = '$gradingTypeSelector'
       els["#{GRADED_ASSIGNMENT_FIELDS}"] = '$gradedAssignmentFields'
@@ -98,6 +101,7 @@ ConditionalRelease) ->
       events["change #{RESTRICT_FILE_UPLOADS}"] = 'handleRestrictFileUploadsChange'
       events["click #{ADVANCED_TURNITIN_SETTINGS}"] = 'showTurnitinDialog'
       events["change #{TURNITIN_ENABLED}"] = 'toggleAdvancedTurnitinSettings'
+      events["change #{VERICITE_ENABLED}"] = 'toggleAdvancedTurnitinSettings'
       events["change #{ALLOW_FILE_UPLOADS}"] = 'toggleRestrictFileUploads'
       events["click #{EXTERNAL_TOOLS_URL}_find"] = 'showExternalToolsDialog'
       events["change #assignment_points_possible"] = 'handlePointsChange'
@@ -133,7 +137,7 @@ ConditionalRelease) ->
       ["assignment_group_id","grading_type","submission_type","submission_types",
        "points_possible","allowed_extensions","peer_reviews","peer_review_count",
        "automatic_peer_reviews","group_category_id","grade_group_students_individually",
-       "turnitin_enabled"]
+       "turnitin_enabled", "vericite_enabled"]
 
     handlePointsChange:(ev) =>
       ev.preventDefault()
@@ -201,9 +205,17 @@ ConditionalRelease) ->
 
     showTurnitinDialog: (ev) =>
       ev.preventDefault()
-      turnitinDialog = new TurnitinSettingsDialog(model: @assignment.get('turnitin_settings'))
+      type = "turnitin"
+      model = @assignment.get('turnitin_settings')
+      if @$vericiteEnabled.prop('checked')
+        type = "vericite"
+        model = @assignment.get('vericite_settings')
+      turnitinDialog = new TurnitinSettingsDialog(model, type)
       turnitinDialog.render().on 'settings:change', (settings) =>
-        @assignment.set 'turnitin_settings', new TurnitinSettings(settings)
+        if @$vericiteEnabled.prop('checked')
+          @assignment.set 'vericite_settings', new VeriCiteSettings(settings)
+        else
+          @assignment.set 'turnitin_settings', new TurnitinSettings(settings)
         turnitinDialog.off()
         turnitinDialog.remove()
 
@@ -224,7 +236,7 @@ ConditionalRelease) ->
 
     toggleAdvancedTurnitinSettings: (ev) =>
       ev.preventDefault()
-      @$advancedTurnitinSettings.toggleAccessibly @$turnitinEnabled.prop('checked')
+      @$advancedTurnitinSettings.toggleAccessibly (@$turnitinEnabled.prop('checked') || @$vericiteEnabled.prop('checked'))
 
     handleRestrictFileUploadsChange: =>
       @$allowedExtensions.toggleAccessibly @$restrictFileUploads.prop('checked')
diff --git a/app/coffeescripts/views/assignments/TurnitinSettingsDialog.coffee b/app/coffeescripts/views/assignments/TurnitinSettingsDialog.coffee
index 9d8b7d93f4506..d1f903ae67257 100644
--- a/app/coffeescripts/views/assignments/TurnitinSettingsDialog.coffee
+++ b/app/coffeescripts/views/assignments/TurnitinSettingsDialog.coffee
@@ -1,11 +1,12 @@
 define [
   'jst/assignments/TurnitinSettingsDialog'
+  'jst/assignments/VeriCiteSettingsDialog'
   'Backbone'
   'jquery'
   'underscore'
   'str/htmlEscape'
   'compiled/jquery/fixDialogButtons'
-], (turnitinSettingsDialog, { View }, $, _, htmlEscape) ->
+], (turnitinSettingsDialog, vericiteSettingsDialog, { View }, $, _, htmlEscape) ->
 
   class TurnitinSettingsDialog extends View
 
@@ -15,6 +16,10 @@ define [
     EXCLUDE_SMALL_MATCHES = '#exclude_small_matches'
     EXCLUDE_SMALL_MATCHES_TYPE = '[name="exclude_small_matches_type"]'
 
+    constructor: (model, type) ->
+      super(model: model)
+      @type = type
+
     events: do ->
       events = {}
       events.submit = 'handleSubmit'
@@ -45,7 +50,10 @@ define [
         """
 
     renderEl: =>
-      html = turnitinSettingsDialog(@toJSON())
+      if @type == "vericite"
+        html = vericiteSettingsDialog(@toJSON())
+      else
+        html = turnitinSettingsDialog(@toJSON())
       @$el.html(html)
       @$el.dialog({width: 'auto', modal: true}).fixDialogButtons()
 
diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index 55d9c26fff5cf..c43ff40250b06 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -1593,6 +1593,8 @@ def feature_enabled?(feature)
         !!WebConference.config
       elsif feature == :crocodoc
         !!Canvas::Crocodoc.config
+      elsif feature == :vericite
+        Canvas::Plugin.find(:vericite).try(:enabled?)
       elsif feature == :lockdown_browser
         Canvas::Plugin.all_for_tag(:lockdown_browser).any? { |p| p.settings[:enabled] }
       else
diff --git a/app/controllers/assignments_api_controller.rb b/app/controllers/assignments_api_controller.rb
index 67cc355f9e581..2c579f3ed18f3 100644
--- a/app/controllers/assignments_api_controller.rb
+++ b/app/controllers/assignments_api_controller.rb
@@ -312,6 +312,11 @@
 #           "example": true,
 #           "type": "boolean"
 #         },
+#         "vericite_enabled": {
+#           "description": "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available",
+#           "example": true,
+#           "type": "boolean"
+#         },
 #         "turnitin_settings": {
 #           "description": "Settings to pass along to turnitin to control what kinds of matches should be considered. originality_report_visibility can be 'immediate', 'after_grading', 'after_due_date', or 'never' exclude_small_matches_type can be null, 'percent', 'words' exclude_small_matches_value: - if type is null, this will be null also - if type is 'percent', this will be a number between 0 and 100 representing match size to exclude as a percentage of the document size. - if type is 'words', this will be number > 0 representing how many words a match must contain for it to be considered NOTE: This flag will not appear unless your account has the Turnitin plugin available",
 #           "$ref": "TurnitinSettings"
@@ -753,6 +758,12 @@ def show
   #   Toggles Turnitin submissions for the assignment.
   #   Will be ignored if Turnitin is not available for the course.
   #
+  # @argument assignment[vericite_enabled] [Boolean]
+  #   Only applies when the VeriCite plugin is enabled for a course and
+  #   the submission_types array includes "online_upload".
+  #   Toggles VeriCite submissions for the assignment.
+  #   Will be ignored if VeriCite is not available for the course.
+  #
   # @argument assignment[turnitin_settings]
   #   Settings to send along to turnitin. See Assignment object definition for
   #   format.
@@ -894,6 +905,12 @@ def create
   #   Toggles Turnitin submissions for the assignment.
   #   Will be ignored if Turnitin is not available for the course.
   #
+  # @argument assignment[vericite_enabled] [Boolean]
+  #   Only applies when the VeriCite plugin is enabled for a course and
+  #   the submission_types array includes "online_upload".
+  #   Toggles VeriCite submissions for the assignment.
+  #   Will be ignored if VeriCite is not available for the course.
+  #
   # @argument assignment[turnitin_settings]
   #   Settings to send along to turnitin. See Assignment object definition for
   #   format.
diff --git a/app/controllers/submissions_controller.rb b/app/controllers/submissions_controller.rb
index 89196205d983b..6b651380a9420 100644
--- a/app/controllers/submissions_controller.rb
+++ b/app/controllers/submissions_controller.rb
@@ -462,16 +462,42 @@ def submit_google_doc(document_id)
   protected :submit_google_doc
 
   def turnitin_report
+    plagiarism_report('turnitin')
+  end
+
+  def resubmit_to_turnitin
+    resubmit_to_plagiarism('turnitin')
+  end
+
+  def vericite_report
+    plagiarism_report('vericite')
+  end
+
+  def resubmit_to_vericite
+    resubmit_to_plagiarism('vericite')
+  end
+
+  def plagiarism_report(type)
     return render(:nothing => true, :status => 400) unless params_are_integers?(:assignment_id, :submission_id)
 
     @assignment = @context.assignments.active.find(params[:assignment_id])
     @submission = @assignment.submissions.where(user_id: params[:submission_id]).first
     @asset_string = params[:asset_string]
     if authorized_action(@submission, @current_user, :read)
-      if (report_url = @submission.turnitin_data[@asset_string] && @submission.turnitin_data[@asset_string][:report_url])
+      plag_data = @submission.turnitin_data
+      if type == 'vericite'
+        plag_data = @submission.vericite_data
+      end
+      if (report_url = plag_data[@asset_string] && plag_data[@asset_string][:report_url])
         url = polymorphic_url([:retrieve, @context, :external_tools], url:report_url, display:'borderless')
       else
-        url = @submission.turnitin_report_url(@asset_string, @current_user) rescue nil
+        if type == 'vericite'
+          # VeriCite URL
+          url = @submission.vericite_report_url(@asset_string, @current_user, session) rescue nil
+        else
+          # Turnitin URL
+          url = @submission.turnitin_report_url(@asset_string, @current_user) rescue nil
+        end
       end
       if url
         redirect_to url
@@ -481,23 +507,34 @@ def turnitin_report
       end
     end
   end
+  private :plagiarism_report
 
-  def resubmit_to_turnitin
+  def resubmit_to_plagiarism(type)
     return render(:nothing => true, :status => 400) unless params_are_integers?(:assignment_id, :submission_id)
 
     if authorized_action(@context, @current_user, [:manage_grades, :view_all_grades])
       @assignment = @context.assignments.active.find(params[:assignment_id])
       @submission = @assignment.submissions.where(user_id: params[:submission_id]).first
-      @submission.resubmit_to_turnitin
+
+      if type == 'vericite'
+        # VeriCite
+        @submission.resubmit_to_vericite
+        message = t("Successfully resubmitted to VeriCite.")
+      else
+        # turnitin
+        @submission.resubmit_to_turnitin
+        message = t("Successfully resubmitted to turnitin.")
+      end
       respond_to do |format|
         format.html {
-          flash[:notice] = t('resubmitted_to_turnitin', "Successfully resubmitted to turnitin.")
+          flash[:notice] = message
           redirect_to named_context_url(@context, :context_assignment_submission_url, @assignment.id, @submission.user_id)
         }
         format.json { render :nothing => true, :status => :no_content }
       end
     end
   end
+  private :resubmit_to_plagiarism
 
   def update
     @assignment = @context.assignments.active.find(params[:assignment_id])
diff --git a/app/helpers/assignments_helper.rb b/app/helpers/assignments_helper.rb
index edb4c9da298c1..ab1fb6b5556b1 100644
--- a/app/helpers/assignments_helper.rb
+++ b/app/helpers/assignments_helper.rb
@@ -80,4 +80,9 @@ def turnitin_active?
     @assignment.turnitin_enabled? && @context.turnitin_enabled? &&
     !@assignment.submission_types.include?("none")
   end
+
+  def vericite_active?
+    @assignment.vericite_enabled? && @context.vericite_enabled? &&
+    !@assignment.submission_types.include?("none")
+  end
 end
diff --git a/app/models/assignment.rb b/app/models/assignment.rb
index 6b6fe4657187e..a750ed4383e51 100644
--- a/app/models/assignment.rb
+++ b/app/models/assignment.rb
@@ -21,6 +21,7 @@
 require 'canvas/draft_state_validations'
 require 'bigdecimal'
 require_dependency 'turnitin'
+require_dependency 'vericite'
 
 class Assignment < ActiveRecord::Base
   include Workflow
@@ -39,7 +40,7 @@ class Assignment < ActiveRecord::Base
     :group_category, :group_category_id, :peer_review_count, :anonymous_peer_reviews,
     :peer_reviews_due_at, :peer_reviews_assign_at, :grading_standard_id,
     :peer_reviews, :automatic_peer_reviews, :grade_group_students_individually,
-    :notify_of_update, :time_zone_edited, :turnitin_enabled,
+    :notify_of_update, :time_zone_edited, :turnitin_enabled, :vericite_enabled,
     :turnitin_settings, :context, :position, :allowed_extensions,
     :external_tool_tag_attributes, :freeze_on_copy,
     :only_visible_to_overrides, :post_to_sis, :integration_id, :integration_data, :moderated_grading,
@@ -184,6 +185,7 @@ def moderation_setting_ok?
     group_category_id
     grade_group_students_individually
     turnitin_enabled
+    vericite_enabled
     turnitin_settings
     allowed_extensions
     muted
@@ -376,14 +378,19 @@ def create_in_turnitin
     return self.turnitin_settings[:current]
   end
 
-  def turnitin_settings
-    if super.empty?
-      settings = Turnitin::Client.default_assignment_turnitin_settings
-      default_originality = course.turnitin_originality if course
-      settings[:originality_report_visibility] = default_originality if default_originality
+  def turnitin_settings settings=nil
+    if super().empty?
+      # turnitin settings are overloaded for all plagiarism services as requested, so
+      # alternative services can send in their own default settings, otherwise,
+      # default to Turnitin settings
+      if settings.nil?
+        settings = Turnitin::Client.default_assignment_turnitin_settings
+        default_originality = course.turnitin_originality if course
+        settings[:originality_report_visibility] = default_originality if default_originality
+      end
       settings
     else
-      super
+      super()
     end
   end
 
@@ -397,6 +404,41 @@ def turnitin_settings=(settings)
     write_attribute :turnitin_settings, settings
   end
 
+  def create_in_vericite
+    return false unless Canvas::Plugin.find(:vericite).try(:enabled?)
+    return true if self.turnitin_settings[:current] && self.turnitin_settings[:vericite]
+    vericite = VeriCite::Client.new()
+    res = vericite.createOrUpdateAssignment(self, self.turnitin_settings)
+
+    # make sure the defaults get serialized
+    self.turnitin_settings = turnitin_settings
+
+    if res[:assignment_id]
+      self.turnitin_settings[:created] = true
+      self.turnitin_settings[:current] = true
+      self.turnitin_settings[:vericite] = true
+      self.turnitin_settings.delete(:error)
+    else
+      self.turnitin_settings[:error] = res
+    end
+    self.save
+    return self.turnitin_settings[:current]
+  end
+
+  def vericite_settings
+    self.turnitin_settings(VeriCite::Client.default_assignment_vericite_settings)
+  end
+
+  def vericite_settings=(settings)
+    settings = VeriCite::Client.normalize_assignment_vericite_settings(settings)
+    unless settings.blank?
+      [:created, :error].each do |key|
+        settings[key] = self.turnitin_settings[key] if self.turnitin_settings[key]
+      end
+    end
+    write_attribute :turnitin_settings, settings
+  end
+
   def self.all_day_interpretation(opts={})
     if opts[:due_at]
       if opts[:due_at] == opts[:due_at_was]
@@ -1490,6 +1532,13 @@ def representatives(user, includes: [:inactive])
                                else
                                  []
                                end
+    users_with_vericite_data = if vericite_enabled?
+                                 submissions
+                                 .reject { |s| s.turnitin_data.blank? }
+                                 .map(&:user)
+                               else
+                                 []
+                               end
     # this only includes users with a submission who are unexcused
     users_who_arent_excused = submissions.reject(&:excused?).map(&:user)
 
@@ -1508,7 +1557,7 @@ def representatives(user, includes: [:inactive])
       candidate_students = visible_group_students if candidate_students.empty?
       candidate_students.sort_by! { |s| enrollment_priority[enrollment_state[s.id]] }
 
-      representative   = (candidate_students & users_with_turnitin_data).first
+      representative   = (candidate_students & (users_with_turnitin_data || users_with_vericite_data)).first
       representative ||= (candidate_students & users_with_submissions).first
       representative ||= candidate_students.first
       others = visible_group_students - [representative]
diff --git a/app/models/attachment.rb b/app/models/attachment.rb
index 7f7f7c319713e..9cb9f2a258379 100644
--- a/app/models/attachment.rb
+++ b/app/models/attachment.rb
@@ -346,6 +346,11 @@ def turnitinable?
     TURNITINABLE_MIME_TYPES.include?(content_type)
   end
 
+  def vericiteable?
+    # accept any file format
+    true
+  end
+
   def flag_as_recently_created
     @recently_created = true
   end
diff --git a/app/models/course.rb b/app/models/course.rb
index eddb2474af676..98abb34b39a02 100644
--- a/app/models/course.rb
+++ b/app/models/course.rb
@@ -1988,6 +1988,22 @@ def turnitin_enabled?
     !!self.turnitin_settings
   end
 
+  def vericite_enabled?
+    Canvas::Plugin.find(:vericite).try(:enabled?)
+  end
+  
+  def vericite_pledge
+    if vericite_enabled?
+      Canvas::Plugin.find(:vericite).settings[:pledge]
+    end
+  end
+  
+  def vericite_comments
+    if vericite_enabled?
+      Canvas::Plugin.find(:vericite).settings[:comments]
+    end
+  end
+
   def self.migrate_content_links(html, from_context, to_context, supported_types=nil, user_to_check_for_permission=nil)
     return html unless html.present? && to_context
 
diff --git a/app/models/importers/assignment_importer.rb b/app/models/importers/assignment_importer.rb
index 8163ac9882d1f..89952955f3f05 100644
--- a/app/models/importers/assignment_importer.rb
+++ b/app/models/importers/assignment_importer.rb
@@ -167,7 +167,7 @@ def self.import_from_migration(hash, context, migration, item=nil, quiz=nil)
         item.group_category ||= context.group_categories.active.where(:name => t("Project Groups")).first_or_create
       end
 
-      [:turnitin_enabled, :peer_reviews,
+      [:turnitin_enabled, :vericite_enabled, :peer_reviews,
        :automatic_peer_reviews, :anonymous_peer_reviews,
        :grade_group_students_individually, :allowed_extensions,
        :position, :peer_review_count, :muted, :moderated_grading,
diff --git a/app/models/submission.rb b/app/models/submission.rb
index 0d485fc7ce120..8fe6cbb18ea8f 100644
--- a/app/models/submission.rb
+++ b/app/models/submission.rb
@@ -142,6 +142,7 @@ def needs_grading_changed?
   before_save :update_if_pending
   before_save :validate_single_submission, :infer_values
   before_save :prep_for_submitting_to_turnitin
+  before_save :prep_for_submitting_to_vericite
   before_save :check_url_changed
   before_save :check_reset_graded_anonymously
   before_create :cache_due_date
@@ -153,6 +154,7 @@ def needs_grading_changed?
   after_save :queue_websnap
   after_save :update_final_score
   after_save :submit_to_turnitin_later
+  after_save :submit_to_vericite_later
   after_save :update_admins_if_just_submitted
   after_save :check_for_media_object
   after_save :update_quiz_submission
@@ -199,7 +201,7 @@ def update_needs_grading_count
   after_save :grade_change_audit
 
   def new_version_needed?
-    turnitin_data_changed? || (changes.keys - [
+    turnitin_data_changed? || vericite_data_changed? || (changes.keys - [
       "updated_at",
       "processed",
       "process_attempts",
@@ -270,20 +272,39 @@ def new_version_needed?
     end
     can :read and can :comment
 
-    given do |user, session|
-      turnitin_data &&
-        user_can_read_grade?(user, session) &&
-        (assignment.context.grants_right?(user, session, :manage_grades) ||
-          case assignment.turnitin_settings[:originality_report_visibility]
-          when 'immediate' then true
-          when 'after_grading' then current_submission_graded?
-          when 'after_due_date'
-            then assignment.due_at && assignment.due_at < Time.now.utc
-          when 'never' then false
-          end
-        )
-    end
+    given { |user, session|
+      can_view_plagiarism_report('turnitin', user, session)
+    }
+
     can :view_turnitin_report
+
+    given { |user, session|
+      can_view_plagiarism_report('vericite', user, session)
+    }
+    can :view_vericite_report
+  end
+
+  def can_view_plagiarism_report(type, user, session)
+    if(type == "vericite")
+      plagData = self.vericite_data_hash
+      @submit_to_vericite = false
+      settings = assignment.vericite_settings
+    else
+      plagData = self.turnitin_data
+      @submit_to_turnitin = false
+      settings = assignment.turnitin_settings
+    end
+    return plagData &&
+    user_can_read_grade?(user, session) &&
+    (assignment.context.grants_right?(user, session, :manage_grades) ||
+      case settings[:originality_report_visibility]
+       when 'immediate' then true
+       when 'after_grading' then current_submission_graded?
+       when 'after_due_date'
+         then assignment.due_at && assignment.due_at < Time.now.utc
+       when 'never' then false
+      end
+    )
   end
 
   def user_can_read_grade?(user, session=nil)
@@ -396,23 +417,13 @@ def turnitin_report_url(asset_string, user)
   end
 
   def prep_for_submitting_to_turnitin
-    last_attempt = self.turnitin_data && self.turnitin_data[:last_processed_attempt]
-    @submit_to_turnitin = false
-    if self.turnitinable? && (!last_attempt || last_attempt < self.attempt) && (@group_broadcast_submission || !self.group)
-      if self.turnitin_data[:last_processed_attempt] != self.attempt
-        self.turnitin_data[:last_processed_attempt] = self.attempt
-      end
-      @submit_to_turnitin = true
-    end
+    prep_for_submitting_to_plagiarism('turnitin')
   end
 
   TURNITIN_JOB_OPTS = { :n_strand => 'turnitin', :priority => Delayed::LOW_PRIORITY, :max_attempts => 2 }
 
   def submit_to_turnitin_later
-    if self.turnitinable? && @submit_to_turnitin
-      delay = Setting.get('turnitin_submission_delay_seconds', 60.to_s).to_i
-      send_later_enqueue_args(:submit_to_turnitin, { :run_at => delay.seconds.from_now }.merge(TURNITIN_JOB_OPTS))
-    end
+    submit_to_plagiarism_later('turnitin')
   end
 
   TURNITIN_RETRY = 5
@@ -519,6 +530,328 @@ def turnitinable_by_lti?
     turnitin_data.select{|_, v| v.is_a?(Hash) && v.key?(:outcome_response)}.any?
   end
 
+  # VeriCite
+
+  # this function will check if the score needs to be updated and update/save the new score if so,
+  # otherwise, it just returns the vericite_data_hash
+  def vericite_data(lookup_data = false)
+    self.vericite_data_hash ||= {}
+    # check to see if the score is stale, if so, fetch it again
+    update_scores = false
+    # since there could be multiple versions, let's not waste calls for old versions and use the old score
+    if Canvas::Plugin.find(:vericite).try(:enabled?) && !self.readonly? && lookup_data && self.versions.current && self.versions.current.number == self.version_number
+      self.vericite_data_hash.keys.each do |asset_string|
+        data = self.vericite_data_hash[asset_string]
+        next unless data && data.is_a?(Hash) && data[:object_id]
+        update_scores = update_scores || vericite_recheck_score(data)
+      end
+      # we have found at least one score that is stale, call VeriCite and save the results
+      if update_scores
+        check_vericite_status
+      end
+    end
+    if !self.vericite_data_hash.empty?
+      # only set vericite provider flag if the hash isn't empty
+      self.vericite_data_hash[:provider] = :vericite
+    end
+    self.vericite_data_hash
+  end
+
+  def vericite_data_hash
+    # use the same backend structure to store "content review" data
+    self.turnitin_data
+  end
+
+  # this function looks at a vericite data object and determines whether the score needs to be rechecked (i.e. cache for 20 mins)
+  def vericite_recheck_score(data)
+    update_scores = false
+    # only recheck scores if an old score exists
+    if !data[:similarity_score_time].blank?
+      now = Time.now.to_i
+      score_age = Time.now.to_i - data[:similarity_score_time]
+      score_cache_time = 1200 # by default cache scores for 20 mins
+      # change the cache based on how long it has been since the paper was submitted
+      # if !data[:submit_time].blank? && (now - data[:submit_time]) > 86400
+      # # it has been more than 24 hours since this was submitted, increase cache time
+      #   score_cache_time = 86400
+      # end
+      # only cache the score for 20 minutes or 24 hours based on when the paper was submitted
+      if(score_age > score_cache_time)
+        #check if we just recently requested this score
+        last_checked = 1000 # default to a high number so that if it is not set, it won't effect the outcome
+        if !data[:similarity_score_check_time].blank?
+          last_checked = now - data[:similarity_score_check_time]
+        end
+        # only update if we didn't just ask VeriCite for the scores 20 seconds again (this is in the case of an error, we don't want to keep asking immediately)
+        if last_checked > 20
+          update_scores = true
+        end
+      end
+    end
+    update_scores
+  end
+
+   VERICITE_STATUS_RETRY = 16 #this caps the retries off at 36 hours (checking once every 4 hours)
+
+  def check_vericite_status(attempt=1)
+    self.vericite_data_hash ||= {}
+    vericite = nil
+    needs_retry = false
+    # check all assets in the vericite_data (self.vericite_assets is only the
+    # current assets) so that we get the status for assets of previous versions
+    # of the submission as well
+
+    # flag to make sure that all scores are just updates and not new
+    recheck_score_all = true
+    self.vericite_data_hash.keys.each do |asset_string|
+      data = self.vericite_data_hash[asset_string]
+      next unless data && data.is_a?(Hash) && data[:object_id]
+      # check to see if the score is stale, if so, delete it and fetch again
+      recheck_score = vericite_recheck_score(data)
+      # keep track whether all scores are updates or if any are new
+      recheck_score_all = recheck_score_all && recheck_score
+      # look up scores if:
+      if recheck_score || data[:similarity_score].blank?
+        if attempt < VERICITE_STATUS_RETRY
+          # keep track of when we asked for this score, so if it fails, we don't keep trying immediately again (i.e. wain 20 sec before trying again)
+          data[:similarity_score_check_time] = Time.now.to_i
+          vericite ||= VeriCite::Client.new()
+          res = vericite.generateReport(self, asset_string)
+          if res[:similarity_score]
+            # keep track of when we updated the score so that we can ask VC again once it is stale (i.e. cache for 20 mins)
+            data[:similarity_score_time] = Time.now.to_i
+            data[:similarity_score] = res[:similarity_score].to_i
+            data[:state] = VeriCite.state_from_similarity_score data[:similarity_score]
+            data[:status] = 'scored'
+            # since we have a score, we know this report shouldn't have any errors, clear them out
+            data = clear_vericite_errors(data)
+          else
+            needs_retry ||= true
+          end
+        elsif !recheck_score # if we already have a score, continue to use it and do not set an error
+          data[:status] = 'error'
+          data[:public_error_message] = I18n.t('vericite.no_score_after_retries', 'VeriCite has not returned a score after %{max_tries} attempts to retrieve one.', max_tries: VERICITE_RETRY)
+        end
+      else
+        data[:status] = 'scored'
+      end
+      self.vericite_data_hash[asset_string] = data
+    end
+
+    if !self.vericite_data_hash.empty?
+      # only set vericite provider flag if the hash isn't empty
+      self.vericite_data_hash[:provider] = :vericite
+    end
+    retry_mins = 2 ** attempt
+    if retry_mins > 240
+      #cap the retry max wait to 4 hours
+      retry_mins = 240;
+    end
+    send_at(retry_mins.minutes.from_now, :check_vericite_status, attempt + 1) if needs_retry
+    self.vericite_data_changed!
+    # if all we did was recheck scores, do not version this save (i.e. increase the attempt number)
+    if recheck_score_all
+      self.with_versioning( false ) do |t|
+        t.save!
+      end
+    else
+      self.save
+    end
+  end
+
+  def vericite_report_url(asset_string, user, session)
+    if self.vericite_data_hash && self.vericite_data_hash[asset_string] && self.vericite_data_hash[asset_string][:similarity_score]
+      vericite = VeriCite::Client.new()
+      if self.grants_right?(user, :grade)
+        vericite.submissionReportUrl(self, user, asset_string)
+      elsif can_view_plagiarism_report('vericite', user, session)
+        vericite.submissionStudentReportUrl(self, user, asset_string)
+      end
+    else
+      nil
+    end
+  end
+
+  def prep_for_submitting_to_vericite
+    prep_for_submitting_to_plagiarism('vericite')
+  end
+
+  VERICITE_JOB_OPTS = { :n_strand => 'vericite', :priority => Delayed::LOW_PRIORITY, :max_attempts => 2 }
+
+  def submit_to_vericite_later
+    submit_to_plagiarism_later('vericite')
+  end
+
+  VERICITE_RETRY = 5
+  def submit_to_vericite(attempt=0)
+    return unless vericiteable? && Canvas::Plugin.find(:vericite).try(:enabled?)
+    vericite = VeriCite::Client.new()
+    reset_vericite_assets
+
+    # Make sure the assignment exists and user is enrolled
+    assignment_created = self.assignment.create_in_vericite
+    #vericite_enrollment = vericite.enrollStudent(self.context, self.user)
+    if assignment_created
+      delete_vericite_errors
+    else
+      assignment_error = assignment.vericite_settings[:error]
+      self.vericite_data_hash[:assignment_error] = assignment_error if assignment_error.present?
+      #self.vericite_data_hash[:student_error] = vericite_enrollment.error_hash if vericite_enrollment.error?
+      self.vericite_data_changed!
+      if !self.vericite_data_hash.empty?
+        # only set vericite provider flag if the hash isn't empty
+        self.vericite_data_hash[:provider] = :vericite
+      end
+      self.save
+    end
+    # even if the assignment didn't save, VeriCite will still allow this file to be submitted
+    # Submit the file(s)
+    submission_response = vericite.submitPaper(self)
+    # VeriCite will not resubmit a file if it already has a similarity_score (i.e. success)
+    update = false
+    submission_response.each do |res_asset_string, response|
+      update = true
+      self.vericite_data_hash[res_asset_string].merge!(response)
+      # keep track of when we first submitted
+      self.vericite_data_hash[res_asset_string][:submit_time] = Time.now.to_i if self.vericite_data_hash[res_asset_string][:submit_time].blank?
+      self.vericite_data_changed!
+      if !response[:object_id] && !(attempt < VERICITE_RETRY)
+        self.vericite_data_hash[res_asset_string][:status] = 'error'
+      elsif response[:object_id]
+        # success, make sure any error messages are cleared
+        self.vericite_data_hash[res_asset_string] = clear_vericite_errors(self.vericite_data_hash[res_asset_string])
+      end
+    end
+    # only save if there were newly submitted attachments
+    if update
+      send_later_enqueue_args(:check_vericite_status, { :run_at => 5.minutes.from_now }.merge(VERICITE_JOB_OPTS))
+      if !self.vericite_data_hash.empty?
+        # only set vericite provider flag if the hash isn't empty
+        self.vericite_data_hash[:provider] = :vericite
+      end
+      self.save
+
+      # Schedule retry if there were failures
+      submit_status = submission_response.present? && submission_response.values.all?{ |v| v[:object_id] }
+      unless submit_status
+        send_later_enqueue_args(:submit_to_vericite, { :run_at => 5.minutes.from_now }.merge(VERICITE_JOB_OPTS), attempt + 1) if attempt < VERICITE_RETRY
+        return false
+      end
+    end
+
+    true
+  end
+
+  def vericite_assets
+    if self.submission_type == 'online_upload'
+      self.attachments.select{ |a| a.vericiteable? }
+    elsif self.submission_type == 'online_text_entry'
+      [self]
+    else
+      []
+    end
+  end
+
+  def delete_vericite_errors
+    self.vericite_data_hash.delete(:status)
+    self.vericite_data_hash.delete(:assignment_error)
+    self.vericite_data_hash.delete(:student_error)
+  end
+  private :delete_vericite_errors
+
+  def reset_vericite_assets
+    self.vericite_data_hash ||= {}
+    delete_vericite_errors
+    vericite_assets.each do |a|
+      asset_data = self.vericite_data_hash[a.asset_string] || {}
+      asset_data[:status] = 'pending'
+      asset_data = clear_vericite_errors(asset_data)
+      self.vericite_data_hash[a.asset_string] = asset_data
+      self.vericite_data_changed!
+    end
+  end
+
+  def clear_vericite_errors(asset_data)
+    [:error_code, :error_message, :public_error_message].each do |key|
+      asset_data.delete(key)
+    end
+    asset_data
+  end
+
+
+  def resubmit_to_vericite
+    reset_vericite_assets
+    if !self.vericite_data_hash.empty?
+      # only set vericite provider flag if the hash isn't empty
+      self.vericite_data_hash[:provider] = :vericite
+    end
+    self.save
+
+    @submit_to_vericite = true
+    submit_to_vericite_later
+  end
+
+  def vericiteable?
+    %w(online_upload online_text_entry).include?(submission_type) &&
+      assignment.vericite_enabled?
+  end
+
+  def vericite_data_changed!
+    @vericite_data_changed = true
+  end
+
+  def vericite_data_changed?
+    @vericite_data_changed
+  end
+
+  # End VeriCite
+
+  # Plagiarism functions:
+
+  def prep_for_submitting_to_plagiarism(type)
+    if(type == "vericite")
+      plagData = self.vericite_data_hash
+      @submit_to_vericite = false
+      canSubmit = self.vericiteable?
+    else
+      plagData = self.turnitin_data
+      @submit_to_turnitin = false
+      canSubmit = self.turnitinable?
+    end
+    last_attempt = plagData && plagData[:last_processed_attempt]
+    if canSubmit && (!last_attempt || last_attempt < self.attempt) && (@group_broadcast_submission || !self.group)
+      if plagData[:last_processed_attempt] != self.attempt
+        plagData[:last_processed_attempt] = self.attempt
+      end
+      if(type == "vericite")
+        @submit_to_vericite = true
+      else
+        @submit_to_turnitin = true
+      end
+    end
+  end
+
+  def submit_to_plagiarism_later(type)
+    if(type == "vericite")
+      submitPlag = @submit_to_vericite
+      canSubmit = self.vericiteable?
+      delayName = 'vericite_submission_delay_seconds'
+      delayFunction = :submit_to_vericite
+      delayOpts = VERICITE_JOB_OPTS
+    else
+      submitPlag = @submit_to_turnitin
+      canSubmit = self.turnitinable?
+      delayName = 'turnitin_submission_delay_seconds'
+      delayFunction = :submit_to_turnitin
+      delayOpts = TURNITIN_JOB_OPTS
+    end
+    if canSubmit && submitPlag
+      delay = Setting.get(delayName, 60.to_s).to_i
+      send_later_enqueue_args(delayFunction, { :run_at => delay.seconds.from_now }.merge(delayOpts))
+    end
+  end
+  # End Plagiarism functions
+
   def external_tool_url
     URI.encode(url) if self.submission_type == 'basic_lti_launch'
   end
@@ -700,6 +1033,10 @@ def submission_history
       last_submitted_at = nil
       self.versions.sort_by(&:created_at).reverse_each do |version|
         model = version.model
+        # since vericite_data is a function, make sure you are cloning the most recent vericite_data_hash
+        if self.vericiteable?
+          model.turnitin_data = self.vericite_data(true)
+        end
         if model.submitted_at && last_submitted_at.to_i != model.submitted_at.to_i
           res << model
           last_submitted_at = model.submitted_at
diff --git a/app/presenters/grade_summary_assignment_presenter.rb b/app/presenters/grade_summary_assignment_presenter.rb
index 7fffd6358da87..af5e3a49125b1 100644
--- a/app/presenters/grade_summary_assignment_presenter.rb
+++ b/app/presenters/grade_summary_assignment_presenter.rb
@@ -113,10 +113,23 @@ def display_score
   end
 
   def turnitin
+    plagiarism('turnitin')
+  end
+
+  def vericite
+    plagiarism('vericite')
+  end
+
+  def plagiarism(type)
+    if type == 'vericite'
+      plagData = submission.vericite_data(true)
+    else
+      plagData = submission.turnitin_data
+    end
     t = if is_text_entry?
-          submission.turnitin_data[submission.asset_string]
+          plagData[submission.asset_string]
         elsif is_online_upload? && file
-          submission.turnitin_data[file.asset_string]
+          plagData[file.asset_string]
         end
     t.try(:[], :state) ? t : nil
   end
@@ -138,7 +151,12 @@ def graph
   end
 
   def file
-    @file ||= submission.attachments.detect{|a| submission.turnitin_data && submission.turnitin_data[a.asset_string] }
+    @file ||= submission.attachments.detect{|a| is_plagiarism_attachment?(a) }
+  end
+
+  def is_plagiarism_attachment?(a)
+    (submission.turnitin_data && submission.turnitin_data[a.asset_string]) ||
+    (submission.vericite_data(true) && submission.vericite_data(true)[a.asset_string])
   end
 
   def comments
diff --git a/app/presenters/grade_summary_presenter.rb b/app/presenters/grade_summary_presenter.rb
index 9820c1a985f5c..16338348e3333 100644
--- a/app/presenters/grade_summary_presenter.rb
+++ b/app/presenters/grade_summary_presenter.rb
@@ -59,6 +59,10 @@ def editable?
   def turnitin_enabled?
     @context.turnitin_enabled? && assignments.any?(&:turnitin_enabled)
   end
+  
+  def vericite_enabled?
+    @context.vericite_enabled? && assignments.any?(&:vericite_enabled)
+  end
 
   def observed_students
     @observed_students ||= ObserverEnrollment.observed_students(@context, @current_user)
diff --git a/app/stylesheets/pages/_turnitin.scss b/app/stylesheets/pages/_turnitin.scss
index b65b7945fdc23..3e9826ed987d1 100644
--- a/app/stylesheets/pages/_turnitin.scss
+++ b/app/stylesheets/pages/_turnitin.scss
@@ -86,6 +86,11 @@ $turnitin_gray: #808080;
   }
 }
 
+.turnitin_score_container {
+  position: relative;
+  margin-left: 10px;
+}
+
 .turnitin_resubmit_container {
   text-align: right;
 }
diff --git a/app/stylesheets/pages/assignments/_assignments.scss b/app/stylesheets/pages/assignments/_assignments.scss
index d3577fb097e74..99aa68df6c6bd 100644
--- a/app/stylesheets/pages/assignments/_assignments.scss
+++ b/app/stylesheets/pages/assignments/_assignments.scss
@@ -52,7 +52,7 @@
 #assignment_turnitin_settings {
   min-width: 400px;
   label {
-    width: 100%;
+    width: 95%;
   }
   .js-exclude-small-matches-options {
     margin-left: 21px;
diff --git a/app/stylesheets/pages/gradebook2/_gradebook2.scss b/app/stylesheets/pages/gradebook2/_gradebook2.scss
index 3c0fd9a0d7deb..abdb23ff91239 100644
--- a/app/stylesheets/pages/gradebook2/_gradebook2.scss
+++ b/app/stylesheets/pages/gradebook2/_gradebook2.scss
@@ -758,4 +758,3 @@ $gradebook_checkbox_size: 16px;
     opacity: 0.8;
   }
 }
-
diff --git a/app/views/assignments/_submit_assignment.html.erb b/app/views/assignments/_submit_assignment.html.erb
index 0c58dcdac0f6c..a5c4bd7f0518e 100644
--- a/app/views/assignments/_submit_assignment.html.erb
+++ b/app/views/assignments/_submit_assignment.html.erb
@@ -90,6 +90,9 @@
       <% if @assignment.turnitin_enabled? %>
         <%= render :partial => "turnitin" %>
       <% end %>
+      <% if @assignment.vericite_enabled? %>
+        <%= render :partial => "vericite" %>
+      <% end %>
       <tr>
         <td colspan="2" class='button-container'>
           <button type="button" class='cancel_button btn'><%= t '#buttons.cancel', "Cancel" %></button>
@@ -130,6 +133,9 @@
       <% if @assignment.turnitin_enabled? %>
         <%= render :partial => "turnitin" %>
       <% end %>
+      <% if @assignment.vericite_enabled? %>
+        <%= render :partial => "vericite" %>
+      <% end %>
       <tr>
         <td class='button-container'>
           <button type="button" class='cancel_button btn'><%= t '#buttons.cancel', "Cancel" %></button>
@@ -166,6 +172,9 @@
       <% if @assignment.turnitin_enabled? %>
         <%= render :partial => "turnitin" %>
       <% end %>
+      <% if @assignment.vericite_enabled? %>
+        <%= render :partial => "vericite" %>
+      <% end %>
       <tr>
         <td colspan="2" class='button-container'>
           <button type="button" class='cancel_button btn'><%= t '#buttons.cancel', "Cancel" %></button>
@@ -253,6 +262,9 @@
               <% if @assignment.turnitin_enabled? %>
                 <%= render :partial => "turnitin" %>
               <% end %>
+              <% if @assignment.vericite_enabled? %>
+                <%= render :partial => "vericite" %>
+              <% end %>
               <tr>
                 <td colspan="2" class='button-container'>
                   <button type="button" class='cancel_button btn'><%= t '#buttons.cancel', "Cancel" %></button>
@@ -384,6 +396,9 @@
           <% if @assignment.turnitin_enabled? %>
             <%= render :partial => "turnitin" %>
           <% end %>
+          <% if @assignment.vericite_enabled? %>
+            <%= render :partial => "vericite" %>
+          <% end %>
           <tr>
             <td colspan="2" class='button-container'>
               <button type="button" class="cancel_button btn"><%= t '#buttons.cancel', "Cancel" %></button>
diff --git a/app/views/assignments/_vericite.html.erb b/app/views/assignments/_vericite.html.erb
new file mode 100644
index 0000000000000..2400a7249433f
--- /dev/null
+++ b/app/views/assignments/_vericite.html.erb
@@ -0,0 +1,17 @@
+<%- if @context.vericite_comments.present? %>
+  <tr>
+    <td colspan="2" class='vericite-comments'>
+      <%= @context.vericite_comments %>
+    </td>
+  </tr>
+<%- end %>
+<%- if !@context.vericite_pledge.empty? %>
+  <tr>
+    <td colspan="2">
+      <label class='checkbox'>
+        <input type="checkbox" class='vericite_pledge' name="vericite_pledge" value="1"/>
+        <%= @context.vericite_pledge %>
+      </label>
+    </td>
+  </tr>
+<%- end %>
diff --git a/app/views/assignments/show.html.erb b/app/views/assignments/show.html.erb
index 28c38919979fc..26440a1b3123d 100644
--- a/app/views/assignments/show.html.erb
+++ b/app/views/assignments/show.html.erb
@@ -102,6 +102,7 @@
       </li>
       <% if @assignment.expects_submission? || @assignment.expects_external_submission? %>
         <% turnitin_text = turnitin_active? ? ' ' + t(:turnitin_enabled_short, '(Turnitin enabled)') : '' %>
+        <% vericite_text = vericite_active? ? ' ' + t(:vericite_enabled_short, '(VeriCite enabled)') : '' %>
         <li>
           <span class='title'><%= t :submitting, 'Submitting' %></span>
           <span class='value'><%= @assignment.readable_submission_types + turnitin_text %></span>
@@ -162,6 +163,14 @@
             </div>
           </div>
         <% end %>
+        <% if vericite_active? %>
+          <div class="control-group">
+            <div class="control-label"><%= t :vericite, 'VeriCite' %></div>
+            <div class="controls">
+              <span class="value"><%= t :vericite_enabled, 'VeriCite has been enabled for this assignment.' %></span>
+            </div>
+          </div>
+        <% end %>
       </fieldset>
     </form>
 
diff --git a/app/views/gradebooks/grade_summary.html.erb b/app/views/gradebooks/grade_summary.html.erb
index 09b4bfc2a1645..a2dd8d178face 100644
--- a/app/views/gradebooks/grade_summary.html.erb
+++ b/app/views/gradebooks/grade_summary.html.erb
@@ -331,6 +331,31 @@
             </span>
           </a>
         <% end %>
+        <% if @presenter.vericite_enabled? %>
+          <%
+            vericite = nil
+            url = '#'
+            if submission && submission.can_view_plagiarism_report('vericite', @current_user, session)
+              vericite = assignment_presenter.vericite
+              if assignment_presenter.is_text_entry?
+                url = context_url(@context, :context_assignment_submission_vericite_report_url, assignment.id, @presenter.student_id, submission.asset_string)
+              elsif assignment_presenter.is_online_upload? && assignment_presenter.file
+                asset_string = assignment_presenter.file.asset_string
+                url = context_url(@context, :context_assignment_submission_vericite_report_url, assignment.id, @presenter.student_id, asset_string)
+              end
+            end
+          %>
+
+          <span class="turnitin_score_container" style="<%= 'visibility: hidden;' if !vericite %>">
+            <span class="vericite_score_container_caret <%= vericite && vericite[:state] %>_score"></span>
+            <a title="<%= t('titles.vericite_score', "VeriCite similarity score -- more information") %>" href="<%= url %>" target="_blank" class="tooltip not_external turnitin_similarity_score <%= vericite && vericite[:state] %>_score">
+              <%= vericite && vericite[:similarity_score] %>%
+              <span class="tooltip_wrap right">
+                <span class="tooltip_text"><%= t(:see_vericite_results, "See VeriCite results") %></span>
+              </span>
+            </a>
+          </span>
+        <% end %>
       </td>
       <% end %>
     </tr>
diff --git a/app/views/gradebooks/speed_grader.html.erb b/app/views/gradebooks/speed_grader.html.erb
index e0db5cdf81ba2..c2afe2333fa01 100644
--- a/app/views/gradebooks/speed_grader.html.erb
+++ b/app/views/gradebooks/speed_grader.html.erb
@@ -356,6 +356,8 @@
 <a style="display:none;" id="assignment_submission_url" href="<%= context_url(@context, :context_assignment_submission_url, @assignment.id, "{{submission_id}}") %>"></a>
 <a style="display:none;" id="assignment_submission_turnitin_report_url" href="<%= context_url(@context, :context_assignment_submission_turnitin_report_url, @assignment.id, "{{ user_id }}", "{{ asset_string }}") %>"></a>
 <a style="display:none;" id="assignment_submission_resubmit_to_turnitin_url" href="<%= context_url(@context, :context_assignment_submission_resubmit_to_turnitin_url, @assignment.id, "{{ user_id }}") %>"></a>
+<a style="display:none;" id="assignment_submission_vericite_report_url" href="<%= context_url(@context, :context_assignment_submission_vericite_report_url, @assignment.id, "{{ user_id }}", "{{ asset_string }}") %>"></a>
+<a style="display:none;" id="assignment_submission_resubmit_to_vericite_url" href="<%= context_url(@context, :context_assignment_submission_resubmit_to_vericite_url, @assignment.id, "{{ user_id }}") %>"></a>
 <form id="settings_form" style="display:none; width:400px;" title="<%= t('titles.speedgrader_options', "SpeedGrader Options") %>">
   <p>
     <label for="eg_sort_by"><%= t('labels.sort_by', "Sort student list") %></label>
diff --git a/app/views/jst/_submission_detail.handlebars b/app/views/jst/_submission_detail.handlebars
index bf63796fc044d..aaaee94d5efbd 100644
--- a/app/views/jst/_submission_detail.handlebars
+++ b/app/views/jst/_submission_detail.handlebars
@@ -24,6 +24,11 @@
           <span class="turnitin_score_container">{{> turnitinScore}}</span>
         {{/with}}
       {{/if}}
+      {{#if vericite.reportUrl}}
+        {{#with vericite}}
+          <span class="turnitin_score_container">{{> vericiteScore}}</span>
+        {{/with}}
+      {{/if}}
     {{/ifEqual}}
   {{else}}
     {{#t "no_submission"}}No submission{{/t}}
diff --git a/app/views/jst/_vericiteInfo.handlebars b/app/views/jst/_vericiteInfo.handlebars
new file mode 100644
index 0000000000000..ca8c8ea2b3a99
--- /dev/null
+++ b/app/views/jst/_vericiteInfo.handlebars
@@ -0,0 +1,8 @@
+<div class="turnitin_info vericite_{{assetString}}" style="display: none;">
+  <div>{{message}}</div>
+  {{#if showResubmit}}
+  <div class="vericite_resubmit_container">
+    <a href="#" class="btn btn-small vericite_resubmit_button">{{#t "buttons.resubmit_to_vericite"}}Resubmit to VeriCite{{/t}}</a>
+  </div>
+  {{/if}}
+</div>
diff --git a/app/views/jst/_vericiteScore.handlebars b/app/views/jst/_vericiteScore.handlebars
new file mode 100644
index 0000000000000..c4123713d1a3e
--- /dev/null
+++ b/app/views/jst/_vericiteScore.handlebars
@@ -0,0 +1,8 @@
+<span class="vericite_score_container_caret {{state}}"></span>
+<a class="turnitin_similarity_score {{state}}" href="{{reportUrl}}" title="{{tooltip}}" target="_blank">
+  {{#if icon}}
+    <img src="{{icon}}"></img>
+  {{else}}
+    {{score}}
+  {{/if}}
+</a>
diff --git a/app/views/jst/assignments/VeriCiteSettingsDialog.handlebars b/app/views/jst/assignments/VeriCiteSettingsDialog.handlebars
new file mode 100644
index 0000000000000..f4fddc9725e2e
--- /dev/null
+++ b/app/views/jst/assignments/VeriCiteSettingsDialog.handlebars
@@ -0,0 +1,69 @@
+<form id="assignment_turnitin_settings">
+  <div class="control-group">
+    <div class="controls">
+      <label for="settings_originality_report_visibility"
+      class="control-label">
+        {{#t "vericite_settings.originality_report_visibility"}}
+          Students Can See the Originality Report
+        {{/t}}
+      </label>
+      <br/>
+      <select id="settings_originality_report_visibility" style="min-width: 18em;"
+        name="originality_report_visibility">
+        <option value="immediate"
+        {{selectedIf originalityReportVisibility "immediate"}} >
+          {{#t "vericite_settings.originality_report_visible_immediately"}}
+            Immediately
+          {{/t}}
+        </option>
+        <option value="after_grading"
+        {{selectedIf originalityReportVisibility "after_grading"}} >
+          {{#t "vericite_settings.originality_report_visible_after_grading"}}
+            After the assignment is graded
+          {{/t}}
+        </option>
+        <option value="after_due_date"
+        {{selectedIf originalityReportVisibility "after_due_date"}} >
+          {{#t "vericite_settings.originality_report_visible_after_due_date"}}
+            After the Due Date
+          {{/t}}
+        </option>
+        <option value="never"
+        {{selectedIf originalityReportVisibility "never"}} >
+          {{#t "vericite_settings.originality_report_never"}}
+            Never
+          {{/t}}
+        </option>
+      </select>
+    </div>
+  </div>
+
+  <fieldset>
+    <div class="control-group">
+      <div class="controls">
+        <label class="checkbox" for="exclude_quoted">
+          {{checkbox "exclude_quoted" checked=excludeQuoted}}
+          Exclude Quoted Material
+        </label>
+        <label class="checkbox" for="exclude_self_plag">
+          {{checkbox "exclude_self_plag" checked=excludeSelfPlag}}
+          Exclude Self Plagiarism
+        </label>
+        <label class="checkbox" for="store_in_index">
+          {{checkbox "store_in_index" checked=storeInIndex}}
+          Store submissions in Institutional Index
+        </label>
+      </div>
+    </div>
+  </fieldset>
+
+
+  <div class="button-container">
+    <button type="submit" class="btn btn-primary">
+      {{#t "buttons.update_settings"}}
+        Update Settings
+      {{/t}}
+    </button>
+  </div>
+
+</form>
diff --git a/app/views/jst/assignments/_submission_types_form.handlebars b/app/views/jst/assignments/_submission_types_form.handlebars
index 1481c47c27a5a..28266deb4da1c 100644
--- a/app/views/jst/assignments/_submission_types_form.handlebars
+++ b/app/views/jst/assignments/_submission_types_form.handlebars
@@ -137,6 +137,25 @@
             </a>
           </div>
         </div>
+        {{!-- VeriCite (online assignments only) --}}
+        <div style="{{hiddenUnless vericiteAvailable}}">
+          <label for="assignment_vericite_enabled" class="checkbox">
+            {{checkbox "vericiteEnabled"
+              id="assignment_vericite_enabled"
+              name="vericite_enabled"
+              aria-controls="advanced_turnitin_settings_link"
+              disabled=submissionTypesFrozen}}
+            {{#t "label.vericite_enabled"}}Enable VeriCite Submissions{{/t}}
+          </label>
+          <div class="nested">
+            <a href="#"
+              id="advanced_turnitin_settings_link"
+              aria-expanded="{{vericiteEnabled}}"
+              style="{{hiddenUnless vericiteEnabled}}">
+              {{#t "advanced_vericite_settings"}}Advanced VeriCite Settings{{/t}}
+            </a>
+          </div>
+        </div>
       </div>
 
       {{!-- External tool submissions --}}
diff --git a/app/views/plugins/_vericite_settings.html.erb b/app/views/plugins/_vericite_settings.html.erb
new file mode 100644
index 0000000000000..c91599b19becf
--- /dev/null
+++ b/app/views/plugins/_vericite_settings.html.erb
@@ -0,0 +1,89 @@
+<%= fields_for :settings, OpenObject.new(settings) do |f| %>
+<div class="ic-notification">
+  <div class="ic-notification__icon" role="presentation">
+    <i class="icon-info"></i>
+    <span class="screenreader-only">
+      <%= accessible_message_icon_text("information") %>
+    </span>
+  </div>
+  <div class="ic-notification__content">
+    <div class="ic-notification__message">
+      <h4 class="ic-notification__title">
+        <%= t('plagiarism_compatibility', 'Plagiarism plugins compatibility notice:') %>
+      </h4>
+      <span class="notification_message">
+        Plagiarism plugins are mutually exclusive and do not work with other enabled plagiarism plugins. Please make sure only one plugin is enabled at a time.
+      <span>
+    </div>
+  </div>
+</div>
+  <table  class="formtable">
+    <tr>
+      <td colspan="2">
+        Get your credentials from <a href="http://www.vericite.com" target="_blank">VeriCite</a>
+      </td>
+    </tr>
+    <tr>
+      <td><%= f.blabel :account_id, :en => "VeriCite Account ID" %></td>
+      <td>
+        <%= f.text_field :account_id %>
+      </td>
+    </tr>
+
+    <tr>
+      <td><%= f.blabel :shared_secret, :en => "VeriCite Shared Secret" %></td>
+      <td>
+        <%= f.text_field :shared_secret %>
+      </td>
+    </tr>
+
+    <tr>
+      <td><%= f.blabel :host, :en => "VeriCite Host" %></td>
+      <td>
+        <%= f.text_field :host %>
+      </td>
+    </tr>
+
+    <tr>
+      <td><%= f.blabel :comments, :en => "Submission Comments" %></td>
+      <td>
+        <%= f.text_area :comments, :rows => '4' %>
+        <br/>
+        <%= mt :default_comments_settings, "*Text entered here will be displayed to students when submitting for an assignment.*" %>
+      </td>
+    </tr>
+
+    <tr>
+      <td><%= f.blabel :pledge, :en => "VeriCite Pledge" %></td>
+      <td>
+        <%= f.text_area :pledge, :rows => '4' %>
+        <br/>
+        <%= mt :pledge_description, "*Text entered here will be displayed to students when submitting for an assignment. The student will be required to check the box for the pledge before submitting. If left blank, no pledge is shown or required to submit.*" %>
+      </td>
+    </tr>
+    <tr>
+      <td><%= f.blabel :show_preliminary_score, :en => "Show Preliminary Score" %></td>
+      <td><%= f.check_box :show_preliminary_score %></td>
+    </tr>
+    <tr>
+      <td><%= mt :default_assignment_settings, "**Default Assignment Settings**" %>:</td>
+      <td></td>
+    </tr>
+    <tr>
+      <td><%= f.blabel :type, :en => "Students Can See the Originality Report" %></td>
+      <td><%= f.select :release_to_students, {"Immediately"=>'immediate', "After the assignment is graded"=>'after_grading', "After the Due Date"=>'after_due_date', "Never"=>'never'} %>
+    </tr>
+    <tr>
+      <td><%= f.blabel :exclude_quotes, :en => "Exclude Quotes" %></td>
+      <td><%= f.check_box :exclude_quotes %></td>
+    </tr>
+    <tr>
+      <td><%= f.blabel :exclude_self_plag, :en => "Exclude Self Plagiarism" %></td>
+      <td><%= f.check_box :exclude_self_plag %></td>
+    </tr>
+    <tr>
+      <td><%= f.blabel :store_in_index, :en => "Store in Index" %></td>
+      <td><%= f.check_box :store_in_index %></td>
+    </tr>
+  </table>
+<% end %>
diff --git a/app/views/submissions/show.html.erb b/app/views/submissions/show.html.erb
index 63848617fb35b..1b175f80b7009 100644
--- a/app/views/submissions/show.html.erb
+++ b/app/views/submissions/show.html.erb
@@ -65,13 +65,26 @@
         <br/>
 
         <% if can_do(@submission, @current_user, :view_turnitin_report) %>
-          <% if (turnitin_score = @submission.turnitin_data[@submission.asset_string]) && turnitin_score[:similarity_score] %>
+          <% if (turnitin_score = @submission.turnitin_data[@submission.asset_string]) && @submission.turnitin_data[:provider] == nil && turnitin_score[:similarity_score] %>
             <span class="turnitin_score_container">
               <span class="turnitin_score_container_caret <%= turnitin_score[:state] %>_score"></span>
               <a href="<%= context_url(@context, :context_assignment_submission_turnitin_report_url, @submission.assignment_id, @submission.user_id, @submission.asset_string) %>" target="_blank" class="not_external turnitin_similarity_score <%= turnitin_score[:state] %>_score"><%= turnitin_score[:similarity_score] %>%</a>
             </span>
           <% end %>
         <% end %>
+        <% if @submission.can_view_plagiarism_report('vericite', @current_user, session) %>
+          <% if (vericite_score = @submission.vericite_data(true)[@submission.asset_string]) && @submission.turnitin_data[:provider] == :vericite && vericite_score[:similarity_score] %>
+            <span class="turnitin_score_container">
+              <span class="vericite_score_container_caret <%= vericite_score[:state] %>_score"></span>
+              <a href="<%= context_url(@context, :context_assignment_submission_vericite_report_url, @submission.assignment_id, @submission.user_id, @submission.asset_string) %>" target="_blank" title="VeriCite similarity score -- more information" class="tooltip not_external turnitin_similarity_score <%= vericite_score[:state] %>_score">
+                <%= vericite_score[:similarity_score] %>%
+                <span class="tooltip_wrap right">
+                  <span class="tooltip_text"><%= t(:see_vericite_results, "See VeriCite results") %></span>
+                </span>
+              </a>
+            </span>
+          <% end %>
+        <% end %>
       <% end %>
       <% if @rubric_association && (
            @submission.user_can_read_grade?(@current_user, session) ||
diff --git a/app/views/submissions/show_preview.html.erb b/app/views/submissions/show_preview.html.erb
index 173b492b92aa8..2d8513b9cc9e9 100644
--- a/app/views/submissions/show_preview.html.erb
+++ b/app/views/submissions/show_preview.html.erb
@@ -103,12 +103,23 @@
         </div>
 
         <div class="file-upload-submission-turnitin">
-          <% if can_do(@submission, @current_user, :view_turnitin_report) && (turnitin_score = @submission.turnitin_data[attachment.asset_string]) && turnitin_score[:similarity_score] %>
+          <% if can_do(@submission, @current_user, :view_turnitin_report) && (turnitin_score = @submission.turnitin_data[attachment.asset_string]) && @submission.turnitin_data[:provider] == nil && turnitin_score[:similarity_score] %>
               <span class="turnitin_score_container">
                 <span class="turnitin_score_container_caret <%= turnitin_score[:state] %>_score"></span>
                 <a href="<%= context_url(@context, :context_assignment_submission_turnitin_report_url, @submission.assignment_id, @submission.user_id, attachment.asset_string) %>" target="_blank" class="not_external turnitin_similarity_score <%= turnitin_score[:state] %>_score"><%= turnitin_score[:similarity_score] %>%</a>
               </span>
           <% end %>
+          <% if @submission.can_view_plagiarism_report('vericite', @current_user, session) && (vericite_score = @submission.vericite_data(true)[attachment.asset_string]) && @submission.turnitin_data[:provider] == :vericite && vericite_score[:similarity_score] %>
+            <span class="turnitin_score_container">
+              <span class="vericite_score_container_caret <%= vericite_score[:state] %>_score"></span>
+              <a href="<%= context_url(@context, :context_assignment_submission_vericite_report_url, @submission.assignment_id, @submission.user_id, attachment.asset_string) %>" target="_blank" title="VeriCite similarity score -- more information" class="tooltip not_external turnitin_similarity_score <%= vericite_score[:state] %>_score">
+                <%= vericite_score[:similarity_score] %>%
+                <span class="tooltip_wrap right">
+                  <span class="tooltip_text"><%= t(:see_vericite_results, "See VeriCite results") %></span>
+                </span>
+              </a>
+            </span>
+          <% end %>
         </div>
 
         <div class="file-upload-submission-attachment">
diff --git a/config/routes.rb b/config/routes.rb
index 11b95427ac890..41302c3944e08 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -240,6 +240,8 @@
       resources :submissions do
         post 'turnitin/resubmit' => 'submissions#resubmit_to_turnitin', as: :resubmit_to_turnitin
         get 'turnitin/:asset_string' => 'submissions#turnitin_report', as: :turnitin_report
+        post 'vericite/resubmit' => 'submissions#resubmit_to_vericite', as: :resubmit_to_vericite
+        get 'vericite/:asset_string' => 'submissions#vericite_report', as: :vericite_report
       end
       get :rubric
       resource :rubric_association, path: :rubric do
@@ -525,6 +527,7 @@
     get 'statistics/over_time/:attribute' => 'accounts#statistics_graph', as: :statistics_graph
     get 'statistics/over_time/:attribute.:format' => 'accounts#statistics_graph', as: :formatted_statistics_graph
     get :turnitin_confirmation
+    get :vericite_confirmation
     resources :permissions, controller: :role_overrides, only: [:index, :create] do
       collection do
         post :add_role
diff --git a/db/migrate/20160824211046_add_vericite_enabled_to_assignments.rb b/db/migrate/20160824211046_add_vericite_enabled_to_assignments.rb
new file mode 100644
index 0000000000000..7896ed52eddee
--- /dev/null
+++ b/db/migrate/20160824211046_add_vericite_enabled_to_assignments.rb
@@ -0,0 +1,7 @@
+class AddVericiteEnabledToAssignments < ActiveRecord::Migration
+  tag :predeploy
+
+  def change
+    add_column :assignments, :vericite_enabled, :boolean
+  end
+end
diff --git a/frontend_build/bundles.js b/frontend_build/bundles.js
index e3bae601d3c59..aebdc565136a4 100644
--- a/frontend_build/bundles.js
+++ b/frontend_build/bundles.js
@@ -69,6 +69,7 @@ entries['instructure-common'] = [
   'compiled/models/Pseudonym',
   'compiled/models/Section',
   'compiled/models/TurnitinSettings',
+  'compiled/models/VeriCiteSettings',
   'compiled/models/User',
   'compiled/PandaPub',
   'compiled/registration/incompleteRegistrationWarning',
diff --git a/gulpfile.js b/gulpfile.js
index 27f96bf23241f..1278c2d132978 100644
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -39,7 +39,7 @@ const STUFF_TO_REV = [
 ]
 
 
-gulp.task('rev', () => {
+gulp.task('rev', function(){
   var stuffToRev = STUFF_TO_REV;
   if(process.env.SKIP_JS_REV){
     // just get fonts and images
@@ -55,7 +55,7 @@ gulp.task('rev', () => {
   .pipe(gulp.dest(DIST))
 })
 
-gulp.task('watch', () => {
+gulp.task('watch', function(){
   gulp.watch(STUFF_TO_REV, ['rev'])
 })
 
diff --git a/lib/api/v1/assignment.rb b/lib/api/v1/assignment.rb
index 8791af6b67f76..8d57e5671e4e0 100644
--- a/lib/api/v1/assignment.rb
+++ b/lib/api/v1/assignment.rb
@@ -107,6 +107,11 @@ def assignment_json(assignment, user, session, opts = {})
       hash['turnitin_settings'] = turnitin_settings_json(assignment)
     end
 
+    if assignment.context && assignment.context.vericite_enabled?
+      hash['vericite_enabled'] = assignment.vericite_enabled
+      hash['vericite_settings'] = vericite_settings_json(assignment)
+    end
+
     if PluginSetting.settings_for_plugin(:assignment_freezer)
       hash['freeze_on_copy'] = assignment.freeze_on_copy?
       hash['frozen'] = assignment.frozen_for_user?(user)
@@ -285,6 +290,15 @@ def turnitin_settings_json(assignment)
     settings.slice(*API_ALLOWED_TURNITIN_SETTINGS)
   end
 
+  def vericite_settings_json(assignment)
+    settings = assignment.vericite_settings.with_indifferent_access
+    [:exclude_quoted, :exclude_self_plag, :store_in_index].each do |key|
+      settings[key] = value_to_boolean(settings[key])
+    end
+
+    settings.slice(*API_ALLOWED_VERICITE_SETTINGS)
+  end
+
   API_ALLOWED_ASSIGNMENT_INPUT_FIELDS = %w(
     name
     description
@@ -308,6 +322,8 @@ def turnitin_settings_json(assignment)
     grade_group_students_individually
     turnitin_enabled
     turnitin_settings
+    vericite_enabled
+    vericite_settings
     grading_standard_id
     freeze_on_copy
     notify_of_update
@@ -328,6 +344,13 @@ def turnitin_settings_json(assignment)
     submit_papers_to
   )
 
+  API_ALLOWED_VERICITE_SETTINGS = %w(
+    originality_report_visibility
+    exclude_quoted
+    exclude_self_plag
+    store_in_index
+  )
+  
   def update_api_assignment(assignment, assignment_params, user, context = assignment.context)
     return nil unless assignment_params.is_a?(Hash)
 
@@ -482,6 +505,11 @@ def update_from_params(assignment, assignment_params, user, context = assignment
       update_params.delete("turnitin_settings")
     end
 
+    if !assignment.context.try(:vericite_enabled?)
+      update_params.delete("vericite_enabled")
+      update_params.delete("vericite_settings")
+    end
+
     # use Assignment#turnitin_settings= to normalize, but then assign back to
     # hash so that it is written with update_params
     if update_params.has_key?("turnitin_settings")
@@ -495,6 +523,13 @@ def update_from_params(assignment, assignment_params, user, context = assignment
       assignment.turnitin_settings = turnitin_settings
     end
 
+    # use Assignment#vericite_settings= to normalize, but then assign back to
+    # hash so that it is written with update_params
+    if update_params.has_key?("vericite_settings")
+      vericite_settings = update_params.delete("vericite_settings").slice(*API_ALLOWED_VERICITE_SETTINGS)
+      assignment.vericite_settings = vericite_settings
+    end
+
     # TODO: allow rubric creation
 
     if update_params.has_key?("description")
diff --git a/lib/api/v1/submission.rb b/lib/api/v1/submission.rb
index e30b7d45d7c26..6471e709e00b6 100644
--- a/lib/api/v1/submission.rb
+++ b/lib/api/v1/submission.rb
@@ -136,6 +136,11 @@ def submission_attempt_json(attempt, assignment, user, session, context = nil)
       turnitin_hash.delete(:last_processed_attempt)
       hash['turnitin_data'] = turnitin_hash
     end
+    if attempt.vericite_data(false).present? && attempt.can_view_plagiarism_report('vericite', @current_user, session)
+      vericite_hash = attempt.vericite_data(false).dup
+      vericite_hash.delete(:last_processed_attempt)
+      hash['vericite_data'] = vericite_hash
+    end
 
     if other_fields.include?('attachments')
       attachments = attempt.versioned_attachments.dup
diff --git a/lib/canvas/plugins/default_plugins.rb b/lib/canvas/plugins/default_plugins.rb
index 1c7a48f48a31c..bb82b30dec0d6 100644
--- a/lib/canvas/plugins/default_plugins.rb
+++ b/lib/canvas/plugins/default_plugins.rb
@@ -362,6 +362,26 @@
   :settings_partial => 'plugins/panda_pub_settings',
   :validator => 'PandaPubValidator'
 })
+Canvas::Plugin.register('vericite', nil, {
+  :name => lambda{ t :name, 'VeriCite' },
+  :description => lambda{ t :description, 'Plagiarism detection service.' },
+  :author => 'VeriCite',
+  :author_website => 'http://www.vericite.com',
+  :version => '1.0.0',
+  :settings => {
+    :account_id => nil,
+    :shared_secret => nil,
+    :host => 'api.vericite.com',
+    :comments => nil,
+    :pledge => nil,
+    :release_to_students => 'immediate',
+    :exclude_quotes => true,
+    :exclude_self_plag => true,
+    :store_in_index => true,
+    :show_preliminary_score => false,
+  },
+  :settings_partial => 'plugins/vericite_settings'
+})
 Canvas::Plugins::TicketingSystem.register!
 Canvas::Plugin.register('live_events', nil, {
   :name => lambda{ t :name, 'Live Events' },
diff --git a/lib/cc/assignment_resources.rb b/lib/cc/assignment_resources.rb
index 7625c082c5f8b..8708f35355c20 100644
--- a/lib/cc/assignment_resources.rb
+++ b/lib/cc/assignment_resources.rb
@@ -199,7 +199,7 @@ def self.create_canvas_assignment(node, assignment, manifest = nil)
       node.has_group_category assignment.has_group_category?
       node.group_category assignment.group_category.try :name if assignment.group_category
       atts = [:points_possible, :grading_type,
-              :all_day, :submission_types, :position, :turnitin_enabled, :peer_review_count,
+              :all_day, :submission_types, :position, :turnitin_enabled, :vericite_enabled, :peer_review_count,
               :peer_reviews, :automatic_peer_reviews, :moderated_grading,
               :anonymous_peer_reviews, :grade_group_students_individually, :freeze_on_copy, :muted,
               :omit_from_final_grade, :intra_group_peer_reviews]
diff --git a/lib/cc/importer/standard/assignment_converter.rb b/lib/cc/importer/standard/assignment_converter.rb
index 5b19aa98917c8..0e7e2de62b9fb 100644
--- a/lib/cc/importer/standard/assignment_converter.rb
+++ b/lib/cc/importer/standard/assignment_converter.rb
@@ -107,7 +107,7 @@ def parse_canvas_assignment_data(meta_doc, html_doc=nil, assignment = {})
         val = get_node_val(meta_doc, string_type)
         assignment[string_type] = val unless val.nil?
       end
-      ["turnitin_enabled", "peer_reviews",
+      ["turnitin_enabled", "vericite_enabled", "peer_reviews",
        "automatic_peer_reviews", "anonymous_peer_reviews", "freeze_on_copy",
        "grade_group_students_individually", "external_tool_new_tab", "moderated_grading",
        "rubric_use_for_grading", "rubric_hide_score_total", "muted", "has_group_category",
diff --git a/lib/cc/xsd/cccv1p0.xsd b/lib/cc/xsd/cccv1p0.xsd
index 727f6b2cbe890..2cef0cf67216a 100644
--- a/lib/cc/xsd/cccv1p0.xsd
+++ b/lib/cc/xsd/cccv1p0.xsd
@@ -104,6 +104,7 @@
       <xs:element name="position" type="xs:integer" minOccurs="0"/>
       <xs:element name="turnitin_enabled" type="xs:boolean" minOccurs="0"/>
       <xs:element name="turnitin_settings" type="xs:string" minOccurs="0"/>
+      <xs:element name="vericite_enabled" type="xs:boolean" minOccurs="0"/>
       <xs:element name="peer_review_count" type="xs:integer" minOccurs="0"/>
       <xs:element name="peer_reviews_assigned" type="xs:boolean" minOccurs="0"/>
       <xs:element name="peer_reviews" type="xs:boolean" minOccurs="0"/>
diff --git a/lib/vericite.rb b/lib/vericite.rb
new file mode 100644
index 0000000000000..fd421ba2c5869
--- /dev/null
+++ b/lib/vericite.rb
@@ -0,0 +1,391 @@
+#
+# Copyright (C) 2011 - 2014 Instructure, Inc.
+#
+# This file is part of Canvas.
+#
+# Canvas is free software: you can redistribute it and/or modify it under
+# the terms of the GNU Affero General Public License as published by the Free
+# Software Foundation, version 3 of the License.
+#
+# Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
+# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+# A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
+# details.
+#
+# You should have received a copy of the GNU Affero General Public License along
+# with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+
+require 'vericite_client'
+require 'digest/sha1'
+require 'date'
+
+module VeriCite
+  def self.state_from_similarity_score(similarity_score)
+    return 'none' if similarity_score == 0
+    return 'acceptable' if similarity_score < 25
+    return 'warning' if similarity_score < 50
+    return 'problem' if similarity_score < 75
+    'failure'
+  end
+
+  class Client
+    attr_accessor :account_id, :shared_secret, :host, :testing, :show_preliminary_score
+
+    def initialize(testing=false)
+      @host = Canvas::Plugin.find(:vericite).settings[:host] || "api.vericite.com"
+      account_id = Canvas::Plugin.find(:vericite).settings[:account_id]
+      shared_secret = Canvas::Plugin.find(:vericite).settings[:shared_secret]
+      show_preliminary_score = Canvas::Plugin.find(:vericite).settings[:show_preliminary_score] || false
+      raise "Account ID required" unless account_id
+      raise "Shared secret required" unless shared_secret
+
+      @account_id = account_id
+      @shared_secret = shared_secret
+      @show_preliminary_score = show_preliminary_score
+      @testing = testing
+    end
+
+    def id(obj)
+      if @testing
+        "test_#{obj.asset_string}"
+      else
+        "#{account_id}_#{obj.asset_string}"
+      end
+    end
+
+    def email(item)
+      # emails @example.com are, guaranteed by RFCs, to be like /dev/null :)
+      email = if item.is_a?(User)
+                item.email
+              end
+      email ||= "#{item.asset_string}@null.instructure.example.com"
+    end
+
+    def self.default_assignment_vericite_settings
+      {
+        :originality_report_visibility => Canvas::Plugin.find(:vericite).settings[:release_to_students] || 'immediate',
+        :exclude_quoted =>  Canvas::Plugin.find(:vericite).settings[:exclude_quotes],
+        :exclude_self_plag => Canvas::Plugin.find(:vericite).settings[:exclude_self_plag],
+        :store_in_index => Canvas::Plugin.find(:vericite).settings[:store_in_index],
+        :vericite => true
+      }
+    end
+
+    def self.normalize_assignment_vericite_settings(settings)
+      unless settings.nil?
+        valid_keys = VeriCite::Client.default_assignment_vericite_settings.keys
+        valid_keys << :created
+        settings = settings.slice(*valid_keys)
+
+        settings[:originality_report_visibility] = 'immediate' unless ['immediate', 'after_grading', 'after_due_date', 'never'].include?(settings[:originality_report_visibility])
+
+        [:exclude_quoted, :exclude_self_plag, :store_in_index].each do |key|
+          bool = Canvas::Plugin.value_to_boolean(settings[key])
+          settings[key] = bool ? '1' : '0'
+        end
+      end
+      settings
+    end
+
+    def createOrUpdateAssignment(assignment, settings)
+      course = assignment.context
+      today = course.time_zone.today
+      settings = VeriCite::Client.normalize_assignment_vericite_settings(settings)
+
+      response = sendRequest(:create_assignment, settings.merge!({
+        :user => course,
+        :course => course,
+        :assignment => assignment,
+        :utp => '2',
+        :dtstart => "#{today.strftime} 00:00:00",
+        :dtdue => "#{today.strftime} 00:00:00",
+        :dtpost => "#{today.strftime} 00:00:00",
+        :late_accept_flag => '1',
+        :post => true
+      }))
+
+      is_response_success?(response) ? { assignment_id: response[:assignment_id] } : response_error_hash(response)
+    end
+
+    # if asset_string is passed in, only submit that attachment
+    def submitPaper(submission, asset_string=nil)
+      student = submission.user
+      assignment = submission.assignment
+      course = assignment.context
+      opts = {
+        :post => true,
+        :utp => '1',
+        :user => student,
+        :course => course,
+        :assignment => assignment,
+        :tem => email(course),
+        :role => submission.grants_right?(student, :grade) ? "Instructor" : "Learner"
+      }
+      responses = {}
+      if submission.submission_type == 'online_upload'
+        attachments = submission.attachments.select{ |a| a.vericiteable? && (asset_string.nil? || a.asset_string == asset_string) }
+        attachments.each do |a|
+          # do not resubmit if the score already exists
+          if submission.vericite_data_hash[a.asset_string][:similarity_score].blank?
+            paper_id = a.id
+            paper_title = File.basename(a.display_name, ".*")
+            paper_ext = a.extension
+            paper_type = a.content_type
+            if paper_ext == nil
+              paper_ext = ""
+            end
+            paper_size = 100 # File.size(
+            responses[a.asset_string] = sendRequest(:submit_paper, { :pid => paper_id, :ptl => paper_title, :pext => paper_ext, :ptype => paper_type, :psize => paper_size, :pdata => a.open(), :ptype => '2' }.merge!(opts))
+          end
+        end
+      elsif submission.submission_type == 'online_text_entry' && (asset_string.nil? || submission.asset_string == asset_string)
+        paper_id = Digest::SHA1.hexdigest submission.plaintext_body
+        paper_ext = "html"
+        paper_title = "InlineSubmission"
+        plain_text = "<html>#{submission.plaintext_body}</html>"
+        paper_type = "text/html"
+        paper_size = plain_text.bytesize
+
+        responses[submission.asset_string] = sendRequest(:submit_paper, {:pid => paper_id, :ptl => paper_title, :pext => paper_ext, :ptype => paper_type, :psize => paper_size, :pdata => plain_text, :ptype => "1" }.merge!(opts))
+      else
+        raise "Unsupported submission type for VeriCite integration: #{submission.submission_type}"
+      end
+
+      responses.keys.each do |asset_string|
+        res = responses[asset_string]
+        responses[asset_string] = is_response_success?(res) ? {object_id: res[:returned_object_id]} : response_error_hash(res)
+      end
+
+      responses
+    end
+
+    def generateReport(submission, asset_string)
+      user = submission.user
+      assignment = submission.assignment
+      course = assignment.context
+      object_id = submission.vericite_data_hash[asset_string][:object_id] rescue nil
+      res = nil
+      res = sendRequest(:get_scores, :oid => object_id, :utp => '2', :user => user, :course => course, :assignment => assignment) if object_id
+      data = {}
+      if res
+        data[:similarity_score] = res[:similarity_score]
+      end
+      data
+    end
+
+    def submissionReportUrl(submission, current_user, asset_string)
+      user = submission.user
+      assignment = submission.assignment
+      course = assignment.context
+      object_id = submission.vericite_data_hash[asset_string][:object_id] rescue nil
+      response = sendRequest(:generate_report, :oid => object_id, :utp => '2', :current_user => current_user, :user => user, :course => course, :assignment => assignment)
+      if response != nil
+        response[:report_url]
+      else
+        nil
+      end
+    end
+
+    def submissionStudentReportUrl(submission, current_user, asset_string)
+      user = submission.user
+      assignment = submission.assignment
+      course = assignment.context
+      object_id = submission.vericite_data_hash[asset_string][:object_id] rescue nil
+      response = sendRequest(:generate_report, :oid => object_id, :utp => '1', :current_user => current_user, :user => user, :course => course, :assignment => assignment, :tem => email(course))
+      if response != nil
+        response[:report_url]
+      else
+        nil
+      end
+    end
+
+    def sendRequest(command, args)
+      # default response is "ok" since VeriCite doesn't implement all functions
+      response = {}
+      begin
+        vericite_config = VeriCiteClient::Configuration.new()
+        vericite_config.host = @host
+        vericite_config.base_path = '/lms/v1'
+        api_client = VeriCiteClient::ApiClient.new(vericite_config)
+        vericite_client = VeriCiteClient::DefaultApi.new(api_client)
+
+        user = args.delete :user
+        course = args.delete :course
+        assignment = args.delete :assignment
+
+        consumer = @account_id
+        consumer_secret = @shared_secret
+        if command == :create_assignment
+          context_id = course.id
+          assignment_id = assignment.id
+          assignment_data = VeriCiteClient::AssignmentData.new()
+          assignment_data.assignment_title = assignment.title != nil ? assignment.title : assignment_id
+          assignment_data.assignment_instructions = assignment.description != nil ? assignment.description : ""
+          assignment_data.assignment_exclude_quotes = args["exclude_quoted"] != nil && args["exclude_quoted"] == '1' ? true : false
+          assignment_data.assignment_exclude_self_plag = args["exclude_self_plag"] != nil && args["exclude_self_plag"] == '1' ? true : false
+          assignment_data.assignment_store_in_index = args["store_in_index"] != nil && args["store_in_index"] == '1' ? true : false
+          assignment_data.assignment_due_date = 0
+          if assignment.due_at != nil
+            # convert to epoch time in milli
+            assignment_data.assignment_due_date = assignment.due_at.to_time.utc.to_i * 1000
+          end
+          assignment_data.assignment_grade = assignment.points_possible != nil ? assignment.points_possible : -1
+          data, status_code, headers = vericite_client.assignments_context_id_assignment_id_post(context_id, assignment_id, consumer, consumer_secret, assignment_data)
+          # check status code
+          response[:return_code] = status_code
+          if !is_response_success?(response)
+            response[:return_message] = "An error has occurred while creating the VeriCite assignment."
+            response[:public_error_message] = response[:return_message]
+            fail "Failed to create assignment: #{assignment_id}, site #{context_id}"
+          end
+          # this is a flag to signal success
+          response[:assignment_id] = assignment.id
+        elsif command == :submit_paper
+          context_id = course.id
+          assignment_id = assignment.id
+          user_id = user.id
+          report_meta_data = VeriCiteClient::ReportMetaData.new()
+          report_meta_data.user_first_name = user.first_name
+          report_meta_data.user_last_name = user.last_name
+          report_meta_data.user_email = email(user)
+          report_meta_data.user_role = args[:role]
+          if assignment
+            report_meta_data.assignment_title = assignment.title != nil ? assignment.title : assignment_id
+          end
+          if course
+            report_meta_data.context_title = course.name != nil ? course.name : context_id
+          end
+          external_content_data = VeriCiteClient::ExternalContentData.new()
+          external_content_data.external_content_id = "#{consumer}/#{context_id}/#{assignment_id}/#{user_id}/#{args[:pid]}"
+          external_content_data.file_name = args[:ptl]
+          external_content_data.upload_content_type = args[:pext]
+          external_content_data.upload_content_length = args[:psize]
+          report_meta_data.external_content_data = external_content_data
+          # @return [Array<ExternalContentUploadInfo>]
+          data, status_code, headers = vericite_client.reports_submit_request_context_id_assignment_id_user_id_post(context_id, assignment_id, user_id, consumer, consumer_secret, report_meta_data)
+          # check status code
+          response[:return_code] = status_code
+          if !is_response_success?(response)
+            response[:return_message] = "An error has occurred while submitting the paper to VeriCite."
+            response[:public_error_message] = response[:return_message]
+            fail "Failed to submit paper: #{external_content_data.external_content_id}"
+          end
+          data.each do |externalContentUploadInfo|
+            #API will return an upload URL to store the submission (throws an exception if it fails)
+            res = api_client.uploadfile(externalContentUploadInfo.url_post, args[:pdata])
+          end
+          # this is a flag to signal success
+          response[:returned_object_id] = external_content_data.external_content_id
+        elsif command == :get_scores
+          context_id = course.id
+          assignment_id = assignment.id
+          user_id = user.id
+          user_score_cache_key = "vericite_scores/#{consumer}/#{context_id}/#{user_id}"
+          # first check if the cache already has the score:
+          user_score_map = Rails.cache.read(user_score_cache_key)
+          if user_score_map == nil
+            # we need to look up the user scores in VeriCite for this course
+            # @return [Array<ReportScoreReponse>]
+            data, status_code, headers = vericite_client.reports_scores_context_id_get(context_id, consumer, consumer_secret, {:'user_id' => user_id})
+            # check status code
+            response[:return_code] = status_code
+            if !is_response_success?(response)
+             response[:return_message] = "An error has occurred while getting scores from VeriCite."
+             response[:public_error_message] = response[:return_message]
+             fail "Failed to get scores for site: #{context_id}, assignment: #{assignment_id}, user: #{user_id},  exId: #{args[:oid]}"
+            end
+            # create the user scores map and cache it
+            user_score_map = {}
+            data.each do |reportScoreReponse|
+              if reportScoreReponse.score.is_a?(Integer) && reportScoreReponse.score >= 0 &&
+                (@show_preliminary_score || reportScoreReponse.preliminary.nil? || !reportScoreReponse.preliminary)
+                # since external content id's are unique, we can store it as the key
+                user_score_map[reportScoreReponse.external_content_id] = Float(reportScoreReponse.score)
+              end
+            end
+            # cache the user score map for a short period of time
+            Rails.cache.fetch(user_score_cache_key, :expires_in => 5.minutes) do
+              user_score_map
+            end
+          else
+            # since we didn't have to consult VeriCite, set response status to 200
+            response[:return_code] = 200
+          end
+
+          # the user score map shouldn't be empty now (either grabbed from the cache or VeriCite)
+          if user_score_map != nil
+            user_score_map.each do |key, score|
+              if key ==  args[:oid] && score >= 0
+                response[:similarity_score] = score
+              end
+            end
+          end
+        elsif command == :generate_report
+          context_id = course.id
+          assignment_id_filter = assignment.id
+          user_id = user.id
+          current_user = args.delete :current_user
+          token_user = current_user.id
+          token_user_role = 'Learner'
+          if args[:utp] == '2'
+            #instructor
+            token_user_role = 'Instructor'
+          end
+          # @return [Array<ReportURLLinkReponse>]
+          data, status_code, headers = vericite_client.reports_urls_context_id_get(context_id, assignment_id_filter, consumer, consumer_secret, token_user, token_user_role, {:'user_id_filter' => user_id, :'external_content_id_filter' => args[:oid]})
+          # check status code
+          response[:return_code] = status_code
+          if !is_response_success?(response)
+            response[:return_message] = "An error has occurred while getting the report URL from VeriCite."
+            response[:public_error_message] = response[:return_message]
+            fail "Failed to get the report url for site: #{context_id}, assignment: #{assignment_id}, user: #{user_id},  exId: #{args[:oid]}, token_user: #{token_user}, token_user_role: #{token_user_role}"
+          end
+          data.each do |reportURLLinkReponse|
+            #should only be 1 url
+            if reportURLLinkReponse.external_content_id ==  args[:oid]
+              # setting response URL is a signal for success
+              response[:report_url] = reportURLLinkReponse.url
+            end
+          end
+        end
+      rescue => e
+        Rails.logger.error("VeriCite: account_id: #{@account_id}, code: #{response[:return_code]}, error: #{e}")
+        if is_response_success?(response)
+          # we do not want to return a success code if there was an error
+          response[:return_code] = 100
+        end
+        if !response.key?(:return_message)
+          # we want a generic error message at a minimum
+          response[:return_message] = "VeriCite error during #{command} command, error: #{e}"
+          response[:public_error_message] = response[:return_message]
+        end
+      end #begin
+
+      return nil if @testing
+
+      response
+    end
+
+    private
+
+    SUCCESSFUL_RETURN_CODES = (200..299)
+    def is_response_success?(response)
+      begin
+        response && response.key?(:return_code) && SUCCESSFUL_RETURN_CODES.cover?(Integer(response[:return_code]))
+      rescue
+        false
+      end
+    end
+
+    def response_error_hash(response)
+      return {} unless !is_response_success?(response)
+      {
+        error_code: response[:return_code],
+        error_message: response[:return_message],
+        public_error_message: response[:public_error_message],
+      }
+    end
+
+  end
+end
diff --git a/public/javascripts/speed_grader.js b/public/javascripts/speed_grader.js
index d16a753245945..e5c13c029d456 100644
--- a/public/javascripts/speed_grader.js
+++ b/public/javascripts/speed_grader.js
@@ -35,6 +35,8 @@ define([
   'speed_grader_helpers',
   'jst/_turnitinInfo',
   'jst/_turnitinScore',
+  'jst/_vericiteInfo',
+  'jst/_vericiteScore',
   'jqueryui/draggable' /* /\.draggable/ */,
   'jquery.ajaxJSON' /* getJSON, ajaxJSON */,
   'jquery.instructure_forms' /* ajaxJSONFiles */,
@@ -54,7 +56,7 @@ define([
   'vendor/jquery.getScrollbarWidth' /* getScrollbarWidth */,
   'vendor/jquery.scrollTo' /* /\.scrollTo/ */,
   'vendor/ui.selectmenu' /* /\.selectmenu/ */
-], function(MGP, OutlierScoreHelper, studentViewedAtTemplate, submissionsDropdownTemplate, speechRecognitionTemplate, round, _, INST, I18n, $, tz, userSettings, htmlEscape, rubricAssessment, SpeedgraderSelectMenu, SpeedgraderHelpers, turnitinInfoTemplate, turnitinScoreTemplate) {
+], function(MGP, OutlierScoreHelper, studentViewedAtTemplate, submissionsDropdownTemplate, speechRecognitionTemplate, round, _, INST, I18n, $, tz, userSettings, htmlEscape, rubricAssessment, SpeedgraderSelectMenu, SpeedgraderHelpers, turnitinInfoTemplate, turnitinScoreTemplate, vericiteInfoTemplate, vericiteScoreTemplate) {
 
   // PRIVATE VARIABLES AND FUNCTIONS
   // all of the $ variables here are to speed up access to dom nodes,
@@ -128,6 +130,8 @@ define([
       $assignment_submission_url = $("#assignment_submission_url"),
       $assignment_submission_turnitin_report_url = $("#assignment_submission_turnitin_report_url"),
       $assignment_submission_resubmit_to_turnitin_url = $("#assignment_submission_resubmit_to_turnitin_url"),
+      $assignment_submission_vericite_report_url = $("#assignment_submission_vericite_report_url"),
+      $assignment_submission_resubmit_to_vericite_url = $("#assignment_submission_resubmit_to_vericite_url"),
       $rubric_full = $("#rubric_full"),
       $rubric_full_resizer_handle = $("#rubric_full_resizer_handle"),
       $mute_link = $('#mute_link'),
@@ -1489,7 +1493,58 @@ define([
         }
       }
     },
+    populateVeriCite: function(submission, assetString, vericiteAsset, $vericiteScoreContainer, $vericiteInfoContainer, isMostRecent) {
+      var $vericiteSimilarityScore = null;
 
+      // build up new values based on this asset
+      if (vericiteAsset.status == 'scored' || (vericiteAsset.status == null && vericiteAsset.similarity_score != null)) {
+        $vericiteScoreContainer.html(vericiteScoreTemplate({
+          state: (vericiteAsset.state || 'no') + '_score',
+          reportUrl: $.replaceTags($assignment_submission_vericite_report_url.attr('href'), { user_id: submission.user_id, asset_string: assetString }),
+          tooltip: I18n.t('vericite.tooltip.score', 'VeriCite Similarity Score - See detailed report'),
+          score: vericiteAsset.similarity_score + '%'
+        }));
+      } else if (vericiteAsset.status) {
+        // status == 'error' or status == 'pending'
+        var pendingTooltip = I18n.t('vericite.tooltip.pending', 'VeriCite Similarity Score - Submission pending'),
+            errorTooltip = I18n.t('vericite.tooltip.error', 'VeriCite Similarity Score - See submission error details');
+        $vericiteSimilarityScore = $(vericiteScoreTemplate({
+          state: 'submission_' + vericiteAsset.status,
+          reportUrl: '#',
+          tooltip: (vericiteAsset.status == 'error' ? errorTooltip : pendingTooltip),
+          icon: '/images/turnitin_submission_' + vericiteAsset.status + '.png'
+        }));
+        $vericiteScoreContainer.append($vericiteSimilarityScore);
+        $vericiteSimilarityScore.click(function(event) {
+          event.preventDefault();
+          $vericiteInfoContainer.find('.vericite_'+assetString).slideToggle();
+        });
+
+        var defaultInfoMessage = I18n.t('vericite.info_message',
+                                        'This file is still being processed by VeriCite. Please check back later to see the score'),
+            defaultErrorMessage = I18n.t('vericite.error_message',
+                                         'There was an error submitting to VeriCite. Please try resubmitting the file before contacting support');
+        var $vericiteInfo = $(vericiteInfoTemplate({
+          assetString: assetString,
+          message: (vericiteAsset.status == 'error' ? (vericiteAsset.public_error_message || defaultErrorMessage) : defaultInfoMessage),
+          showResubmit: vericiteAsset.status == 'error' && isMostRecent
+        }));
+        $vericiteInfoContainer.append($vericiteInfo);
+
+        if (vericiteAsset.status == 'error' && isMostRecent) {
+          var resubmitUrl = $.replaceTags($assignment_submission_resubmit_to_vericite_url.attr('href'), { user_id: submission.user_id });
+          $vericiteInfo.find('.vericite_resubmit_button').click(function(event) {
+            event.preventDefault();
+            $(this).attr('disabled', true)
+              .text(I18n.t('vericite.resubmitting', 'Resubmitting...'));
+
+            $.ajaxJSON(resubmitUrl, "POST", {}, function() {
+              window.location.reload();
+            });
+          });
+        }
+      }
+    },
     handleSubmissionSelectionChange: function(){
       clearInterval(crocodocSessionTimer);
 
@@ -1522,20 +1577,37 @@ define([
           inlineableAttachments = [],
           browserableAttachments = [];
 
-      var $turnitinScoreContainer = $grade_container.find(".turnitin_score_container").empty(),
-          $turnitinInfoContainer = $grade_container.find(".turnitin_info_container").empty(),
-          assetString = 'submission_' + submission.id,
-          turnitinAsset = submission.turnitin_data && submission.turnitin_data[assetString];
-      // There might be a previous submission that was text_entry, but the
-      // current submission is an upload. The turnitin asset for the text
-      // entry would still exist
-      if (turnitinAsset && submission.submission_type == 'online_text_entry') {
-        EG.populateTurnitin(submission, assetString, turnitinAsset, $turnitinScoreContainer, $turnitinInfoContainer, isMostRecent);
+      var turnitinEnabled = submission.turnitin_data && (typeof submission.turnitin_data.provider === 'undefined');
+      var vericiteEnabled = submission.turnitin_data && submission.turnitin_data.provider === 'vericite';
+      if(vericiteEnabled){
+        var $vericiteScoreContainer = $grade_container.find(".turnitin_score_container").empty(),
+            $vericiteInfoContainer = $grade_container.find(".turnitin_info_container").empty(),
+            assetString = 'submission_' + submission.id,
+            vericiteAsset = vericiteEnabled && submission.turnitin_data && submission.turnitin_data[assetString];
+        // There might be a previous submission that was text_entry, but the
+        // current submission is an upload. The vericite asset for the text
+        // entry would still exist
+        if (vericiteAsset && submission.submission_type == 'online_text_entry') {
+          EG.populateVeriCite(submission, assetString, vericiteAsset, $vericiteScoreContainer, $vericiteInfoContainer, isMostRecent);
+        }
+      }else{
+        //default to TII
+        var $turnitinScoreContainer = $grade_container.find(".turnitin_score_container").empty(),
+            $turnitinInfoContainer = $grade_container.find(".turnitin_info_container").empty(),
+            assetString = 'submission_' + submission.id,
+            turnitinAsset = turnitinEnabled && submission.turnitin_data && submission.turnitin_data[assetString];
+        // There might be a previous submission that was text_entry, but the
+        // current submission is an upload. The turnitin asset for the text
+        // entry would still exist
+        if (turnitinAsset && submission.submission_type == 'online_text_entry') {
+          EG.populateTurnitin(submission, assetString, turnitinAsset, $turnitinScoreContainer, $turnitinInfoContainer, isMostRecent);
+        }
       }
 
       //handle the files
       $submission_files_list.empty();
       $turnitinInfoContainer = $("#submission_files_container .turnitin_info_container").empty();
+      $vericiteInfoContainer = $("#submission_files_container .turnitin_info_container").empty();
       $.each(submission.versioned_attachments || [], function(i,a){
         var attachment = a.attachment;
         if (attachment.crocodoc_url && EG.currentStudent.provisional_crocodoc_urls) {
@@ -1583,10 +1655,16 @@ define([
           .show();
         $turnitinScoreContainer = $submission_file.find(".turnitin_score_container");
         assetString = 'attachment_' + attachment.id;
-        turnitinAsset = submission.turnitin_data && submission.turnitin_data[assetString];
+        turnitinAsset = turnitinEnabled && submission.turnitin_data && submission.turnitin_data[assetString];
         if (turnitinAsset) {
           EG.populateTurnitin(submission, assetString, turnitinAsset, $turnitinScoreContainer, $turnitinInfoContainer, isMostRecent);
         }
+        $vericiteScoreContainer = $submission_file.find(".turnitin_score_container");
+        assetString = 'attachment_' + attachment.id;
+        vericiteAsset = vericiteEnabled && submission.turnitin_data && submission.turnitin_data[assetString];
+        if (vericiteAsset) {
+          EG.populateVeriCite(submission, assetString, vericiteAsset, $vericiteScoreContainer, $vericiteInfoContainer, isMostRecent);
+        }
       });
 
       $submission_files_container.showIf(submission.versioned_attachments && submission.versioned_attachments.length);
diff --git a/public/javascripts/submit_assignment.js b/public/javascripts/submit_assignment.js
index 7c5212573fc2c..18206f373e57a 100644
--- a/public/javascripts/submit_assignment.js
+++ b/public/javascripts/submit_assignment.js
@@ -107,6 +107,7 @@ define([
     submissionForm.submit(function(event) {
       var self = this;
       var $turnitin = $(this).find(".turnitin_pledge");
+      var $vericite = $(this).find(".vericite_pledge");
       if($("#external_tool_submission_type").val() == "online_url_to_file") {
         event.preventDefault();
         event.stopPropagation();
@@ -120,6 +121,13 @@ define([
         return false;
       }
 
+      if($vericite.length > 0 && !$vericite.attr('checked')) {
+        alert(I18n.t('messages.agree_to_pledge', "You must agree to the submission pledge before you can submit this assignment."));
+        event.preventDefault();
+        event.stopPropagation();
+        return false;
+      }
+
       var valid = !$(this).is('#submit_online_text_entry_form') || $(this).validateForm({
         object_name: 'submission',
         required: ['body']
diff --git a/spec/apis/v1/assignments_api_spec.rb b/spec/apis/v1/assignments_api_spec.rb
index ae03dbc8350d5..b3403b073e4f5 100644
--- a/spec/apis/v1/assignments_api_spec.rb
+++ b/spec/apis/v1/assignments_api_spec.rb
@@ -903,6 +903,7 @@ def create_assignment_json(group, group_category)
         'peer_review_count' => 2,
         'group_category_id' => group_category.id,
         'turnitin_enabled' => true,
+        'vericite_enabled' => true,
         'grading_type' => 'points',
         'muted' => 'true'
       }
@@ -978,6 +979,8 @@ def create_assignment_json(group, group_category)
       @group_category = @course.group_categories.create!(name: "foo")
       @course.any_instantiation.expects(:turnitin_enabled?).
         at_least_once.returns true
+      @course.any_instantiation.expects(:vericite_enabled?).
+        at_least_once.returns true
       @json = api_create_assignment_in_course(@course,
         create_assignment_json(@group, @group_category)
        )
@@ -1001,6 +1004,7 @@ def create_assignment_json(group, group_category)
       expect(@json['position']).to eq 1
       expect(@json['group_category_id']).to eq @group_category.id
       expect(@json['turnitin_enabled']).to eq true
+      expect(@json['vericite_enabled']).to eq true
       expect(@json['turnitin_settings']).to eq({
         'originality_report_visibility' => 'immediate',
         's_paper_check' => true,
@@ -1053,6 +1057,18 @@ def create_assignment_json(group, group_category)
       expect(response.keys).not_to include 'turnitin_enabled'
       expect(Assignment.last.turnitin_enabled).to be_falsey
     end
+    
+    it "does not allow modifying vericite_enabled when not enabled on the context" do
+      Course.any_instance.expects(:vericite_enabled?).at_least_once.returns false
+      response = api_create_assignment_in_course(@course,
+            { 'name' => 'some assignment',
+              'vericite_enabled' => false
+            }
+       )
+
+      expect(response.keys).not_to include 'vericite_enabled'
+      expect(Assignment.last.vericite_enabled).to be_falsey
+    end
 
     it "should process html content in description on create" do
       should_process_incoming_user_content(@course) do |content|
diff --git a/spec/coffeescripts/models/VeriCiteSettingsSpec.coffee b/spec/coffeescripts/models/VeriCiteSettingsSpec.coffee
new file mode 100644
index 0000000000000..f9bd9becf0739
--- /dev/null
+++ b/spec/coffeescripts/models/VeriCiteSettingsSpec.coffee
@@ -0,0 +1,38 @@
+define  [
+  'compiled/models/VeriCiteSettings'
+], ( VeriCiteSettings ) ->
+
+  module "VeriCiteSettings"
+
+  module "VeriCiteSettings#constructor"
+
+  test "assigns originalityReportVisibility", ->
+    ts = new VeriCiteSettings originality_report_visibility: 'after_grading'
+    strictEqual ts.originalityReportVisibility, 'after_grading'
+
+  test "assigns excludeQuoted", ->
+    ts = new VeriCiteSettings exclude_quoted: false
+    strictEqual ts.excludeQuoted, false
+  test "works with '0' and '1' as well", ->
+    ts = new VeriCiteSettings
+      exclude_quoted: '1'
+    strictEqual ts.excludeQuoted, true
+
+  module "VeriCiteSettings#toJSON"
+
+  test "it converts back to snake_case", ->
+    options =
+      exclude_quoted: false
+      exclude_self_plag: false
+      originality_report_visibility: 'after_grading'
+      store_in_index: false
+    ts = new VeriCiteSettings options
+    deepEqual ts.toJSON(), options
+
+  module "VeriCiteSettings#present",
+    setup: ->
+      @options =
+        exclude_biblio: true
+        originality_report_visibility: 'after_grading'
+      @ts = new VeriCiteSettings @options
+      @view = @ts.present()
diff --git a/spec/lib/cc/importer/canvas_cartridge_converter_spec.rb b/spec/lib/cc/importer/canvas_cartridge_converter_spec.rb
index d677d6ab6b710..a75efcfb577fe 100644
--- a/spec/lib/cc/importer/canvas_cartridge_converter_spec.rb
+++ b/spec/lib/cc/importer/canvas_cartridge_converter_spec.rb
@@ -724,6 +724,7 @@ def import_learning_outcomes
     asmnt.due_at = 1.week.from_now
     asmnt.all_day_date = 1.week.from_now
     asmnt.turnitin_enabled = true
+    asmnt.vericite_enabled = true
     asmnt.peer_reviews = true
     asmnt.anonymous_peer_reviews = true
     asmnt.peer_review_count = 37
@@ -755,6 +756,7 @@ def import_learning_outcomes
     expect(asmnt_2.peer_reviews_due_at.to_i).to eq asmnt.peer_reviews_due_at.to_i
     expect(asmnt_2.all_day_date).to eq asmnt.all_day_date
     expect(asmnt_2.turnitin_enabled).to eq asmnt.turnitin_enabled
+    expect(asmnt_2.vericite_enabled).to eq asmnt.vericite_enabled
     expect(asmnt_2.peer_reviews).to eq asmnt.peer_reviews
     expect(asmnt_2.anonymous_peer_reviews).to eq asmnt.peer_reviews
     expect(asmnt_2.peer_review_count).to eq asmnt.peer_review_count
diff --git a/spec/models/content_migration/course_copy_assignments_spec.rb b/spec/models/content_migration/course_copy_assignments_spec.rb
index 8e2ff8944f1ab..05eeeb026804a 100644
--- a/spec/models/content_migration/course_copy_assignments_spec.rb
+++ b/spec/models/content_migration/course_copy_assignments_spec.rb
@@ -149,6 +149,7 @@
     it "should copy assignment attributes" do
       assignment_model(:course => @copy_from, :points_possible => 40, :submission_types => 'file_upload', :grading_type => 'points')
       @assignment.turnitin_enabled = true
+      @assignment.vericite_enabled = true
       @assignment.peer_reviews = true
       @assignment.peer_review_count = 2
       @assignment.automatic_peer_reviews = true
@@ -160,7 +161,7 @@
 
       @assignment.save!
 
-      attrs = [:turnitin_enabled, :peer_reviews,
+      attrs = [:turnitin_enabled, :vericite_enabled, :peer_reviews,
           :automatic_peer_reviews, :anonymous_peer_reviews,
           :grade_group_students_individually, :allowed_extensions,
           :position, :peer_review_count, :muted, :omit_from_final_grade]
diff --git a/spec/selenium/assignments/assignments_turn_it_in_spec.rb b/spec/selenium/assignments/assignments_turn_it_in_spec.rb
index fb62f6f2952a2..86076b93865bc 100644
--- a/spec/selenium/assignments/assignments_turn_it_in_spec.rb
+++ b/spec/selenium/assignments/assignments_turn_it_in_spec.rb
@@ -28,6 +28,7 @@ def change_turnitin_settings
     f('#exclude_biblio').click # 1 -> 0
     f('#exclude_quoted').click # 1 -> 0
     f('#exclude_small_matches').click # 0 -> 1
+    f('#exclude_small_matches_type_r1').click
     f('#exclude_small_matches_words_value').click # 0 -> 1
     f('#submit_papers_to').click # 1 -> 0
     f('#exclude_small_matches_words_value').send_keys([:backspace, "5"]) # '0' -> 5
