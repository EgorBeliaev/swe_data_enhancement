diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/file_fetcher.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/file_fetcher.rb
index 58cc62c0b6..50527ff5dd 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/file_fetcher.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/file_fetcher.rb
@@ -342,6 +342,11 @@ def pnpm_workspace_yaml
           fetch_support_file(PNPMPackageManager::PNPM_WS_YML_FILENAME),
           T.nilable(DependencyFile)
         )
+
+        # Only fetch from parent directories if the file wasn't found initially
+        @pnpm_workspace_yaml ||= fetch_file_from_parent_directories(PNPMPackageManager::PNPM_WS_YML_FILENAME)
+
+        @pnpm_workspace_yaml
       end
 
       sig { returns(T.nilable(DependencyFile)) }
diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater.rb
index e6b0ee5325..e744391f89 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater.rb
@@ -50,7 +50,6 @@ def self.updated_files_regex
         ]
       end
 
-      # rubocop:disable Metrics/PerceivedComplexity
       sig { override.returns(T::Array[DependencyFile]) }
       def updated_dependency_files
         updated_files = T.let([], T::Array[DependencyFile])
@@ -63,20 +62,9 @@ def updated_dependency_files
                          end
 
         if updated_files.none?
-
-          if Dependabot::Experiments.enabled?(:enable_fix_for_pnpm_no_change_error)
-            # when all dependencies are transitive
-            all_transitive = dependencies.none?(&:top_level?)
-            # when there is no update in package.json
-            no_package_json_update = package_files.empty?
-            # handle the no change error for transitive dependency updates
-            if pnpm_locks.any? && dependencies.length.positive? && all_transitive && no_package_json_update
-              raise ToolFeatureNotSupported.new(
-                tool_name: "pnpm",
-                tool_type: "package_manager",
-                feature: "updating transitive dependencies"
-              )
-            end
+          if Dependabot::Experiments.enabled?(:enable_fix_for_pnpm_no_change_error) && original_pnpm_locks.any?
+            raise_tool_not_supported_for_pnpm_if_transitive
+            raise_miss_configured_tooling_if_pnpm_subdirectory
           end
 
           raise NoChangeError.new(
@@ -95,10 +83,47 @@ def updated_dependency_files
 
         vendor_updated_files(updated_files)
       end
-      # rubocop:enable Metrics/PerceivedComplexity
 
       private
 
+      sig { void }
+      def raise_tool_not_supported_for_pnpm_if_transitive
+        # ✅ Ensure there are dependencies and check if all are transitive
+        return if dependencies.empty? || dependencies.any?(&:top_level?)
+
+        raise ToolFeatureNotSupported.new(
+          tool_name: "pnpm",
+          tool_type: "package_manager",
+          feature: "updating transitive dependencies"
+        )
+      end
+
+      # rubocop:disable Metrics/PerceivedComplexity
+      sig { void }
+      def raise_miss_configured_tooling_if_pnpm_subdirectory
+        workspace_files = original_pnpm_workspace
+        lockfiles = original_pnpm_locks
+
+        # ✅ Ensure `pnpm-workspace.yaml` is in a parent directory
+        return if workspace_files.empty?
+        return if workspace_files.any? { |f| f.directory == "/" }
+        return unless workspace_files.all? { |f| f.name.end_with?("../pnpm-workspace.yaml") }
+
+        # ✅ Ensure `pnpm-lock.yaml` is also in a parent directory
+        return if lockfiles.empty?
+        return if lockfiles.any? { |f| f.directory == "/" }
+        return unless lockfiles.all? { |f| f.name.end_with?("../pnpm-lock.yaml") }
+
+        # ❌ Raise error → Updating inside a subdirectory is misconfigured
+        raise MisconfiguredTooling.new(
+          "pnpm",
+          "Updating workspaces from inside a workspace subdirectory is not supported. " \
+          "Both `pnpm-lock.yaml` and `pnpm-workspace.yaml` exist in a parent directory. " \
+          "Dependabot should only update from the root workspace."
+        )
+      end
+      # rubocop:enable Metrics/PerceivedComplexity
+
       sig { returns(T::Array[Dependabot::DependencyFile]) }
       def update_pnpm_workspace_and_locks
         workspace_updates = updated_pnpm_workspace_files
@@ -245,6 +270,24 @@ def pnpm_workspace
         )
       end
 
+      sig { returns(T::Array[Dependabot::DependencyFile]) }
+      def original_pnpm_locks
+        @original_pnpm_locks ||= T.let(
+          dependency_files
+          .select { |f| f.name.end_with?("pnpm-lock.yaml") },
+          T.nilable(T::Array[Dependabot::DependencyFile])
+        )
+      end
+
+      sig { returns(T::Array[Dependabot::DependencyFile]) }
+      def original_pnpm_workspace
+        @original_pnpm_workspace ||= T.let(
+          dependency_files
+          .select { |f| f.name.end_with?("pnpm-workspace.yaml") },
+          T.nilable(T::Array[Dependabot::DependencyFile])
+        )
+      end
+
       sig { returns(T::Array[Dependabot::DependencyFile]) }
       def bun_locks
         @bun_locks ||= T.let(
diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater/pnpm_lockfile_updater.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater/pnpm_lockfile_updater.rb
index b6cce6d698..cb15f80c65 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater/pnpm_lockfile_updater.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/file_updater/pnpm_lockfile_updater.rb
@@ -146,11 +146,15 @@ def run_pnpm_install
           )
         end
 
+        def workspace_files
+          @workspace_files ||= dependency_files.select { |f| f.name.end_with?("pnpm-workspace.yaml") }
+        end
+
         def lockfile_dependencies(lockfile)
           @lockfile_dependencies ||= {}
           @lockfile_dependencies[lockfile.name] ||=
             NpmAndYarn::FileParser.new(
-              dependency_files: [lockfile, *package_files],
+              dependency_files: [lockfile, *package_files, *workspace_files],
               source: nil,
               credentials: credentials
             ).parse
diff --git a/npm_and_yarn/spec/dependabot/npm_and_yarn/file_fetcher_spec.rb b/npm_and_yarn/spec/dependabot/npm_and_yarn/file_fetcher_spec.rb
index 5544d992c8..9d6f2a10b8 100644
--- a/npm_and_yarn/spec/dependabot/npm_and_yarn/file_fetcher_spec.rb
+++ b/npm_and_yarn/spec/dependabot/npm_and_yarn/file_fetcher_spec.rb
@@ -408,6 +408,20 @@
             body: fixture("github", "pnpm_lock_quotes_content.json"),
             headers: json_header
           )
+        stub_request(:get, File.join(url, "packages/pnpm-workspace.yaml?ref=sha"))
+          .with(headers: { "Authorization" => "token token" })
+          .to_return(
+            status: 404, # Simulate file not found in nested project
+            body: nil,
+            headers: json_header
+          )
+        stub_request(:get, File.join(url, "pnpm-workspace.yaml?ref=sha"))
+          .with(headers: { "Authorization" => "token token" })
+          .to_return(
+            status: 404, # Simulate file not found in nested project
+            body: nil,
+            headers: json_header
+          )
       end
 
       it "fetches the pnpm-lock.yaml file at the root of the monorepo" do
