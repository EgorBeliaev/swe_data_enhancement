diff --git a/docker/lib/dependabot/docker/update_checker.rb b/docker/lib/dependabot/docker/update_checker.rb
index 851ba2dd60..147e325eb3 100644
--- a/docker/lib/dependabot/docker/update_checker.rb
+++ b/docker/lib/dependabot/docker/update_checker.rb
@@ -241,6 +241,9 @@ def fetch_digest_of(tag)
       rescue DockerRegistry2::RegistryAuthenticationException,
              RestClient::Forbidden
         raise PrivateSourceAuthenticationFailure, registry_hostname
+      rescue RestClient::ServerBrokeConnection,
+             RestClient::TooManyRequests
+        raise PrivateSourceBadResponse, registry_hostname
       end
 
       def transient_docker_errors
diff --git a/docker/spec/dependabot/docker/update_checker_spec.rb b/docker/spec/dependabot/docker/update_checker_spec.rb
index 3e9df8e3af..257903311d 100644
--- a/docker/spec/dependabot/docker/update_checker_spec.rb
+++ b/docker/spec/dependabot/docker/update_checker_spec.rb
@@ -476,6 +476,42 @@ def stub_tag_with_no_digest(tag)
 
       it { is_expected.to eq("17.10") }
 
+      context "when it returns a bad response (TooManyRequests) error" do
+        before do
+          stub_request(:get, repo_url + "tags/list")
+            .to_raise(RestClient::TooManyRequests)
+        end
+
+        it "raises" do
+          expect { checker.latest_version }
+            .to raise_error(Dependabot::PrivateSourceBadResponse)
+        end
+
+        context "when using a private registry" do
+          let(:dependency_name) { "ubuntu" }
+          let(:dependency) do
+            Dependabot::Dependency.new(
+              name: dependency_name,
+              version: version,
+              requirements: [{
+                requirement: nil,
+                groups: [],
+                file: "Dockerfile",
+                source: { registry: "registry-host.io:5000" }
+              }],
+              package_manager: "docker"
+            )
+          end
+          let(:repo_url) { "https://registry-host.io:5000/v2/ubuntu/" }
+          let(:tags_fixture_name) { "ubuntu_no_latest.json" }
+
+          it "raises" do
+            expect { checker.latest_version }
+              .to raise_error(Dependabot::PrivateSourceBadResponse)
+          end
+        end
+      end
+
       context "when the time out occurs every time" do
         before do
           stub_request(:get, repo_url + "tags/list")
