diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb
index 75d214b38d..3d9f570e33 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb
@@ -18,6 +18,8 @@ module ConstraintHelper
       # Matches semantic versions:
       VERSION = T.let("#{DIGIT}(?:\\.#{DIGIT}){0,2}#{PRERELEASE}#{BUILD_METADATA}".freeze, String)
 
+      VERSION_REGEX = T.let(/\A#{VERSION}\z/o, Regexp)
+
       # SemVer regex: major.minor.patch[-prerelease][+build]
       SEMVER_REGEX = /^(?<version>\d+\.\d+\.\d+)(?:-(?<prerelease>[a-zA-Z0-9.-]+))?(?:\+(?<build>[a-zA-Z0-9.-]+))?$/
 
diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/npm_package_manager.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/npm_package_manager.rb
index e722aec428..07dc7650e3 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/npm_package_manager.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/npm_package_manager.rb
@@ -38,8 +38,8 @@ class NpmPackageManager < Ecosystem::VersionManager
       def initialize(detected_version: nil, raw_version: nil, requirement: nil)
         super(
           name: NAME,
-          detected_version: detected_version ? Version.new(detected_version) : nil,
-          version: raw_version ? Version.new(raw_version) : nil,
+          detected_version: detected_version && !detected_version.empty? ? Version.new(detected_version) : nil,
+          version: raw_version && !raw_version.empty? ? Version.new(raw_version) : nil,
           deprecated_versions: DEPRECATED_VERSIONS,
           supported_versions: SUPPORTED_VERSIONS,
           requirement: requirement
@@ -48,22 +48,16 @@ def initialize(detected_version: nil, raw_version: nil, requirement: nil)
 
       sig { override.returns(T::Boolean) }
       def deprecated?
-        return false unless detected_version
-
-        return false if unsupported?
-
         return false unless Dependabot::Experiments.enabled?(:npm_v6_deprecation_warning)
 
-        deprecated_versions.include?(detected_version)
+        super
       end
 
       sig { override.returns(T::Boolean) }
       def unsupported?
-        return false unless detected_version
-
         return false unless Dependabot::Experiments.enabled?(:npm_v6_unsupported_error)
 
-        supported_versions.all? { |supported| supported > detected_version }
+        super
       end
     end
   end
diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb
index 2820823f19..d9fdbe19ca 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb
@@ -302,19 +302,24 @@ def setup(name)
 
       sig { params(name: String).returns(T.nilable(String)) }
       def detect_version(name)
-        # we prioritize version mentioned in "packageManager" instead of "engines"
+        # Prioritize version mentioned in "packageManager" instead of "engines"
         if @manifest_package_manager&.start_with?("#{name}@")
           detected_version = @manifest_package_manager.split("@").last.to_s
         end
 
-        # if "packageManager" have no version specified, we check if we can extract "engines" information
-        detected_version = check_engine_version(name) if !detected_version || detected_version.empty?
+        # If "packageManager" has no version specified, check if we can extract "engines" information
+        detected_version ||= check_engine_version(name) if detected_version.to_s.empty?
+
+        # If neither "packageManager" nor "engines" have versions, infer version from lockfileVersion
+        detected_version ||= guessed_version(name) if detected_version.to_s.empty?
+
+        # Strip and validate version format
+        detected_version_string = detected_version.to_s.strip
 
-        # if "packageManager" and "engines" both are not present, we check if we can infer the version
-        # from the manifest file lockfileVersion
-        detected_version = guessed_version(name) if !detected_version || detected_version.empty?
+        # Ensure detected_version is neither "0" nor invalid format
+        return if detected_version_string == "0" || !detected_version_string.match?(ConstraintHelper::VERSION_REGEX)
 
-        detected_version&.to_s
+        detected_version_string
       end
 
       sig { params(name: T.nilable(String)).returns(Ecosystem::VersionManager) }
@@ -345,7 +350,7 @@ def package_manager_by_name(name)
         end
 
         package_manager_class.new(
-          detected_version: detected_version.to_s,
+          detected_version: detected_version,
           raw_version: installed_version,
           requirement: package_manager_requirement
         )
