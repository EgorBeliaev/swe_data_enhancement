diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb
index 3d9f570e33..2e89779fe7 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/constraint_helper.rb
@@ -8,30 +8,51 @@ module NpmAndYarn
     module ConstraintHelper
       extend T::Sig
 
-      INVALID = "invalid" # Invalid constraint
       # Regex Components for Semantic Versioning
       DIGIT = "\\d+"                             # Matches a single number (e.g., "1")
       PRERELEASE = "(?:-[a-zA-Z0-9.-]+)?"        # Matches optional pre-release tag (e.g., "-alpha")
       BUILD_METADATA = "(?:\\+[a-zA-Z0-9.-]+)?"  # Matches optional build metadata (e.g., "+001")
-      DOT = "\\."                                # Matches a literal dot "."
 
       # Matches semantic versions:
       VERSION = T.let("#{DIGIT}(?:\\.#{DIGIT}){0,2}#{PRERELEASE}#{BUILD_METADATA}".freeze, String)
 
-      VERSION_REGEX = T.let(/\A#{VERSION}\z/o, Regexp)
+      VERSION_REGEX = T.let(/^#{VERSION}$/, Regexp)
 
-      # SemVer regex: major.minor.patch[-prerelease][+build]
-      SEMVER_REGEX = /^(?<version>\d+\.\d+\.\d+)(?:-(?<prerelease>[a-zA-Z0-9.-]+))?(?:\+(?<build>[a-zA-Z0-9.-]+))?$/
+      # Base regex for SemVer (major.minor.patch[-prerelease][+build])
+      # This pattern extracts valid semantic versioning strings based on the SemVer 2.0 specification.
+      SEMVER_REGEX = T.let(/
+        (?<version>\d+\.\d+\.\d+)               # Match major.minor.patch (e.g., 1.2.3)
+        (?:-(?<prerelease>[a-zA-Z0-9.-]+))?     # Optional prerelease (e.g., -alpha.1, -rc.1, -beta.5)
+        (?:\+(?<build>[a-zA-Z0-9.-]+))?         # Optional build metadata (e.g., +build.20231101, +exp.sha.5114f85)
+      /x, Regexp)
+
+      # Full SemVer validation regex (ensures the entire string is a valid SemVer)
+      # This ensures the entire input strictly follows SemVer, without extra characters before/after.
+      SEMVER_VALIDATION_REGEX = T.let(/^#{SEMVER_REGEX}$/, Regexp)
+
+      # SemVer constraint regex (supports package.json version constraints)
+      # This pattern ensures proper parsing of SemVer versions with optional operators.
+      SEMVER_CONSTRAINT_REGEX = T.let(/
+        (?: (>=|<=|>|<|=|~|\^)\s*)?  # Make operators optional (e.g., >=, ^, ~)
+        (\d+\.\d+\.\d+(?:-[a-zA-Z0-9.-]+)?(?:\+[a-zA-Z0-9.-]+)?)  # Match full SemVer versions
+        | (\*|latest) # Match wildcard (*) or 'latest'
+      /x, Regexp)
+
+      # /(>=|<=|>|<|=|~|\^)\s*(\d+\.\d+\.\d+(?:-[a-zA-Z0-9.-]+)?(?:\+[a-zA-Z0-9.-]+)?)|(\*|latest)/
+
+      SEMVER_OPERATOR_REGEX = /^(>=|<=|>|<|~|\^|=)$/
 
       # Constraint Types as Constants
-      CARET_CONSTRAINT_REGEX = T.let(/^\^(#{VERSION})$/, Regexp)
-      TILDE_CONSTRAINT_REGEX = T.let(/^~(#{VERSION})$/, Regexp)
-      EXACT_CONSTRAINT_REGEX = T.let(/^(#{VERSION})$/, Regexp)
-      GREATER_THAN_EQUAL_REGEX = T.let(/^>=(#{VERSION})$/, Regexp)
-      LESS_THAN_EQUAL_REGEX = T.let(/^<=(#{VERSION})$/, Regexp)
-      GREATER_THAN_REGEX = T.let(/^>(#{VERSION})$/, Regexp)
-      LESS_THAN_REGEX = T.let(/^<(#{VERSION})$/, Regexp)
+      CARET_CONSTRAINT_REGEX = T.let(/^\^\s*(#{VERSION})$/, Regexp)
+      TILDE_CONSTRAINT_REGEX = T.let(/^~\s*(#{VERSION})$/, Regexp)
+      EXACT_CONSTRAINT_REGEX = T.let(/^\s*(#{VERSION})$/, Regexp)
+      GREATER_THAN_EQUAL_REGEX = T.let(/^>=\s*(#{VERSION})$/, Regexp)
+      LESS_THAN_EQUAL_REGEX = T.let(/^<=\s*(#{VERSION})$/, Regexp)
+      GREATER_THAN_REGEX = T.let(/^>\s*(#{VERSION})$/, Regexp)
+      LESS_THAN_REGEX = T.let(/^<\s*(#{VERSION})$/, Regexp)
       WILDCARD_REGEX = T.let(/^\*$/, Regexp)
+      LATEST_REGEX = T.let(/^latest$/, Regexp)
+      SEMVER_CONSTANTS = ["*", "latest"].freeze
 
       # Unified Regex for Valid Constraints
       VALID_CONSTRAINT_REGEX = T.let(Regexp.union(
@@ -42,43 +63,10 @@ module ConstraintHelper
         LESS_THAN_EQUAL_REGEX,
         GREATER_THAN_REGEX,
         LESS_THAN_REGEX,
-        WILDCARD_REGEX
+        WILDCARD_REGEX,
+        LATEST_REGEX
       ).freeze, Regexp)
 
-      # Validates if the provided semver constraint expression from a `package.json` is valid.
-      # A valid semver constraint expression in `package.json` can consist of multiple groups
-      # separated by logical OR (`||`). Within each group, space-separated constraints are treated
-      # as logical AND. Each individual constraint must conform to the semver rules defined in
-      # `VALID_CONSTRAINT_REGEX`.
-      #
-      # Example (valid `package.json` semver constraints):
-      #   ">=1.2.3 <2.0.0 || ~3.4.5" → Valid (space-separated constraints are AND, `||` is OR)
-      #   "^1.0.0 || >=2.0.0 <3.0.0" → Valid (caret and range constraints combined)
-      #   "1.2.3" → Valid (exact version)
-      #   "*" → Valid (wildcard allows any version)
-      #
-      # Example (invalid `package.json` semver constraints):
-      #   ">=1.2.3 && <2.0.0" → Invalid (`&&` is not valid in semver)
-      #   ">=x.y.z" → Invalid (non-numeric version parts are not valid)
-      #   "1.2.3 ||" → Invalid (trailing OR operator)
-      #
-      # @param constraint_expression [String] The semver constraint expression from `package.json` to validate.
-      # @return [T::Boolean] Returns true if the constraint expression is valid semver, false otherwise.
-      sig { params(constraint_expression: T.nilable(String)).returns(T::Boolean) }
-      def self.valid_constraint_expression?(constraint_expression)
-        normalized_constraint = constraint_expression&.strip
-
-        # Treat nil or empty input as valid (no constraints)
-        return true if normalized_constraint.nil? || normalized_constraint.empty?
-
-        # Split the expression by logical OR (`||`) into groups
-        normalized_constraint.split("||").reject(&:empty?).all? do |or_group|
-          or_group.split(/\s+/).reject(&:empty?).all? do |and_constraint|
-            and_constraint.match?(VALID_CONSTRAINT_REGEX)
-          end
-        end
-      end
-
       # Extract unique constraints from the given constraint expression.
       # @param constraint_expression [T.nilable(String)] The semver constraint expression.
       # @return [T::Array[String]] The list of unique Ruby-compatible constraints.
@@ -89,17 +77,92 @@ def self.valid_constraint_expression?(constraint_expression)
         )
           .returns(T.nilable(T::Array[String]))
       end
-      def self.extract_constraints(constraint_expression, dependabot_versions = nil)
-        normalized_constraint = constraint_expression&.strip
-        return [] if normalized_constraint.nil? || normalized_constraint.empty?
-
-        parsed_constraints = parse_constraints(normalized_constraint, dependabot_versions)
+      def self.extract_ruby_constraints(constraint_expression, dependabot_versions = nil)
+        parsed_constraints = parse_constraints(constraint_expression, dependabot_versions)
 
         return nil unless parsed_constraints
 
         parsed_constraints.filter_map { |parsed| parsed[:constraint] }
       end
 
+      # rubocop:disable Metrics/AbcSize
+      # rubocop:disable Metrics/CyclomaticComplexity
+      # rubocop:disable Metrics/MethodLength
+      # rubocop:disable Metrics/PerceivedComplexity
+      sig do
+        params(constraint_expression: T.nilable(String))
+          .returns(T.nilable(T::Array[String]))
+      end
+      def self.split_constraints(constraint_expression)
+        normalized_constraint = constraint_expression&.strip
+        return [] if normalized_constraint.nil? || normalized_constraint.empty?
+
+        # Split constraints by logical OR (`||`)
+        constraint_groups = normalized_constraint.split("||")
+
+        # Split constraints by logical AND (`,`)
+        constraint_groups = constraint_groups.map do |or_constraint|
+          or_constraint.split(",").map(&:strip)
+        end.flatten
+
+        constraint_groups = constraint_groups.map do |constraint|
+          tokens = constraint.split(/\s+/).map(&:strip)
+
+          and_constraints = []
+
+          previous = T.let(nil, T.nilable(String))
+          operator = T.let(false, T.nilable(T::Boolean))
+          wildcard = T.let(false, T::Boolean)
+
+          tokens.each do |token|
+            token = token.strip
+            next if token.empty?
+
+            # Invalid constraint if wildcard and anything else
+            return nil if wildcard
+
+            # If token is one of the operators (>=, <=, >, <, ~, ^, =)
+            if token.match?(SEMVER_OPERATOR_REGEX)
+              wildcard = false
+              operator = true
+            # If token is wildcard or latest
+            elsif token.match?(/(\*|latest)/)
+              and_constraints << token
+              wildcard = true
+              operator = false
+            # If token is exact version (e.g., "1.2.3")
+            elsif token.match(VERSION_REGEX)
+              and_constraints << if operator
+                                   "#{previous}#{token}"
+                                 else
+                                   token
+                                 end
+              wildcard = false
+              operator = false
+            # If token is a valid constraint (e.g., ">=1.2.3", "<=2.0.0")
+            elsif token.match(VALID_CONSTRAINT_REGEX)
+              return nil if operator
+
+              and_constraints << token
+
+              wildcard = false
+              operator = false
+            else
+              # invalid constraint
+              return nil
+            end
+            previous = token
+          end
+          and_constraints.uniq
+        end.flatten
+        constraint_groups if constraint_groups.any?
+      end
+
+      # rubocop:enable Metrics/AbcSize
+      # rubocop:enable Metrics/CyclomaticComplexity
+      # rubocop:enable Metrics/MethodLength
+      # rubocop:enable Metrics/PerceivedComplexity
+
       # Find the highest version from the given constraint expression.
       # @param constraint_expression [T.nilable(String)] The semver constraint expression.
       # @return [T.nilable(String)] The highest version, or nil if no versions are available.
@@ -111,10 +174,7 @@ def self.extract_constraints(constraint_expression, dependabot_versions = nil)
           .returns(T.nilable(String))
       end
       def self.find_highest_version_from_constraint_expression(constraint_expression, dependabot_versions = nil)
-        normalized_constraint = constraint_expression&.strip
-        return nil if normalized_constraint.nil? || normalized_constraint.empty?
-
-        parsed_constraints = parse_constraints(normalized_constraint, dependabot_versions)
+        parsed_constraints = parse_constraints(constraint_expression, dependabot_versions)
 
         return nil unless parsed_constraints
 
@@ -136,20 +196,11 @@ def self.find_highest_version_from_constraint_expression(constraint_expression,
           .returns(T.nilable(T::Array[T::Hash[Symbol, T.nilable(String)]]))
       end
       def self.parse_constraints(constraint_expression, dependabot_versions = nil)
-        normalized_constraint = constraint_expression&.strip
-
-        # Return an empty array for valid "no constraints" (nil or empty input)
-        return [] if normalized_constraint.nil? || normalized_constraint.empty?
+        splitted_constraints = split_constraints(constraint_expression)
 
-        # Return nil for invalid constraints
-        return nil unless valid_constraint_expression?(normalized_constraint)
+        return unless splitted_constraints
 
-        # Parse valid constraints
-        constraints = normalized_constraint.split("||").flat_map do |or_group|
-          or_group.strip.split(/\s+/).map(&:strip)
-        end.then do |normalized_constraints| # rubocop:disable Style/MultilineBlockChain
-          to_ruby_constraints_with_versions(normalized_constraints, dependabot_versions)
-        end.uniq { |parsed| parsed[:constraint] } # Ensure uniqueness based on `:constraint` # rubocop:disable Style/MultilineBlockChain
+        constraints = to_ruby_constraints_with_versions(splitted_constraints, dependabot_versions)
         constraints
       end
 
@@ -292,7 +343,7 @@ def self.highest_matching_version(dependabot_versions, constraint_version, &cond
       def self.version_components(full_version)
         return [] if full_version.nil?
 
-        match = full_version.match(SEMVER_REGEX)
+        match = full_version.match(SEMVER_VALIDATION_REGEX)
         return [] unless match
 
         version = match[:version]
diff --git a/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb b/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb
index d9fdbe19ca..19c1bde851 100644
--- a/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb
+++ b/npm_and_yarn/lib/dependabot/npm_and_yarn/package_manager.rb
@@ -189,8 +189,10 @@ def language_requirement
         @language_requirement ||= find_engine_constraints_as_requirement(Language::NAME)
       end
 
+      # rubocop:disable Metrics/PerceivedComplexity
+      # rubocop:disable Metrics/AbcSize
       sig { params(name: String).returns(T.nilable(Requirement)) }
-      def find_engine_constraints_as_requirement(name) # rubocop:disable Metrics/PerceivedComplexity
+      def find_engine_constraints_as_requirement(name)
         Dependabot.logger.info("Processing engine constraints for #{name}")
 
         return nil unless @engines.is_a?(Hash) && @engines[name]
@@ -199,8 +201,7 @@ def find_engine_constraints_as_requirement(name) # rubocop:disable Metrics/Perce
         return nil if raw_constraint.empty?
 
         if Dependabot::Experiments.enabled?(:enable_engine_version_detection)
-          constraints = ConstraintHelper.extract_constraints(raw_constraint)
-
+          constraints = ConstraintHelper.extract_ruby_constraints(raw_constraint)
           # When constraints are invalid we return constraints array nil
           if constraints.nil?
             Dependabot.logger.warn(
@@ -225,12 +226,16 @@ def find_engine_constraints_as_requirement(name) # rubocop:disable Metrics/Perce
 
         end
 
-        Dependabot.logger.info("Parsed constraints for #{name}: #{constraints.join(', ')}")
-        Requirement.new(constraints)
+        if constraints && !constraints.empty?
+          Dependabot.logger.info("Parsed constraints for #{name}: #{constraints.join(', ')}")
+          Requirement.new(constraints)
+        end
       rescue StandardError => e
         Dependabot.logger.error("Error processing constraints for #{name}: #{e.message}")
         nil
       end
+      # rubocop:enable Metrics/AbcSize
+      # rubocop:enable Metrics/PerceivedComplexity
 
       # rubocop:disable Metrics/CyclomaticComplexity
       # rubocop:disable Metrics/AbcSize
diff --git a/npm_and_yarn/spec/dependabot/npm_and_yarn/constraint_helper_spec.rb b/npm_and_yarn/spec/dependabot/npm_and_yarn/constraint_helper_spec.rb
index 30e780201b..eacf5f99a2 100644
--- a/npm_and_yarn/spec/dependabot/npm_and_yarn/constraint_helper_spec.rb
+++ b/npm_and_yarn/spec/dependabot/npm_and_yarn/constraint_helper_spec.rb
@@ -148,38 +148,29 @@
     end
   end
 
-  describe ".valid_constraint_expression?" do
-    it "returns true for valid constraints" do
-      valid_constraints = [
-        ">=1.2.3 <2.0.0 || ~3.4.5", "1.2.3", "*", ">=1.0.0-alpha+build"
-      ]
-      valid_constraints.each do |constraint|
-        expect(helper.valid_constraint_expression?(constraint)).to be(true), "Expected #{constraint} to be valid"
-      end
-    end
-
-    it "returns false for invalid constraints" do
-      invalid_constraints = [
-        ">=1.2.3 && <2.0.0", ">=x.y.z", "invalid || >=x.y.z"
-      ]
-      invalid_constraints.each do |constraint|
-        expect(helper.valid_constraint_expression?(constraint)).to be(false), "Expected #{constraint} to be invalid"
-      end
-    end
-  end
-
-  describe ".extract_constraints" do
+  describe ".extract_ruby_constraints" do
     it "extracts unique constraints from valid expressions" do
       constraints = ">=1.2.3 <2.0.0 || ~2.3.4 || ^3.0.0"
-      result = helper.extract_constraints(constraints)
+      result = helper.extract_ruby_constraints(constraints)
       expect(result).to eq([">=1.2.3", "<2.0.0", ">=2.3.4 <2.4.0", ">=3.0.0 <4.0.0"])
     end
 
     it "returns nil for invalid constraints" do
       constraints = "invalid || >=x.y.z"
-      result = helper.extract_constraints(constraints)
+      result = helper.extract_ruby_constraints(constraints)
       expect(result).to be_nil
     end
+
+    it "handles constraints with spaces and commas" do
+      constraints = ">=1.2.3  ,  <=2.0.0  ,  ~3.4.5"
+      result = helper.extract_ruby_constraints(constraints)
+      expect(result).to eq([">=1.2.3", "<=2.0.0", ">=3.4.5 <3.5.0"])
+    end
+
+    it "handles wildcard versions correctly" do
+      expect(helper.extract_ruby_constraints("*")).to eq([])
+      expect(helper.extract_ruby_constraints("latest")).to eq([])
+    end
   end
 
   describe ".find_highest_version_from_constraint_expression" do
@@ -194,6 +185,12 @@
       result = helper.find_highest_version_from_constraint_expression(constraints)
       expect(result).to be_nil
     end
+
+    it "handles constraints with spaces and commas" do
+      constraints = ">= 1.2.3 , <= 2.0.0 , ~ 3.4.5"
+      result = helper.find_highest_version_from_constraint_expression(constraints)
+      expect(result).to eq("3.4.5")
+    end
   end
 
   describe ".parse_constraints" do
@@ -207,5 +204,86 @@
         { constraint: ">=3.0.0 <4.0.0", version: "3.0.0" }
       ])
     end
+
+    it "returns nil for invalid constraints" do
+      constraints = ">=1.2.3 invalid <2.0.0"
+      result = helper.parse_constraints(constraints)
+      expect(result).to be_nil
+    end
+
+    it "handles multiple constraints with spaces and commas" do
+      constraints = ">= 1.2.3 , <= 2.0.0 , ~ 3.4.5"
+      result = helper.parse_constraints(constraints)
+      expect(result).to eq([
+        { constraint: ">=1.2.3", version: nil },
+        { constraint: "<=2.0.0", version: "2.0.0" },
+        { constraint: ">=3.4.5 <3.5.0", version: "3.4.5" }
+      ])
+    end
+  end
+
+  describe ".split_constraints" do
+    it "extracts valid semver constraints correctly" do
+      valid_constraints = [
+        ">=1.2.3", "<=2.0.0", "^3.4.5", "~4.5.6", "1.0.0", "latest", "*"
+      ]
+      valid_constraints.each do |constraint|
+        expect(helper.split_constraints(constraint)).to eq([constraint])
+      end
+    end
+
+    it "handles spaces between operators and versions" do
+      constraints = ">= 1.2.3   <=  2.0.0  ~  3.4.5"
+      expect(helper.split_constraints(constraints)).to eq([">=1.2.3", "<=2.0.0", "~3.4.5"])
+    end
+
+    it "handles multiple constraints with spaces and commas" do
+      constraints = ">= 1.2.3  ,  <= 2.0.0  ,  ~ 3.4.5"
+      expect(helper.split_constraints(constraints)).to eq([">=1.2.3", "<=2.0.0", "~3.4.5"])
+    end
+
+    it "handles package.json-style OR constraints with spaces" do
+      constraints = "^ 1.2.3  ||  >= 2.0.0  < 3.0.0  ||  ~ 3.4.5-beta+build42"
+      expect(helper.split_constraints(constraints)).to eq(["^1.2.3", ">=2.0.0", "<3.0.0", "~3.4.5-beta+build42"])
+    end
+
+    it "handles wildcard versions correctly" do
+      expect(helper.split_constraints("*")).to eq(["*"])
+      expect(helper.split_constraints("latest")).to eq(["latest"])
+    end
+
+    it "returns an empty array for nil input" do
+      expect(helper.split_constraints(nil)).to eq([])
+    end
+
+    it "returns an empty array for an empty string" do
+      expect(helper.split_constraints("")).to eq([])
+    end
+
+    it "returns an empty array for whitespace-only input" do
+      expect(helper.split_constraints("    ")).to eq([])
+    end
+
+    it "ignores invalid constraints mixed with valid ones" do
+      constraints = ">=1.2.3, invalid, <=2.0.0"
+      expect(helper.split_constraints(constraints)).to be_nil
+    end
+
+    it "extracts prerelease and build versions correctly" do
+      constraints = ">= 1.2.3-alpha  <  2.0.0-beta+build.42"
+      expect(helper.split_constraints(constraints)).to eq([">=1.2.3-alpha", "<2.0.0-beta+build.42"])
+    end
+
+    it "handles complex cases with missing or broken constraints" do
+      constraints = ">= 1.2.3 ,, <= 2.0.0 && ^ 3.4.5, * latest"
+      expect(helper.split_constraints(constraints)).to be_nil
+    end
+
+    it "ignores completely invalid inputs" do
+      invalid_constraints = ["random-text", ">>>", "??", "invalid.version"]
+      invalid_constraints.each do |constraint|
+        expect(helper.split_constraints(constraint)).to be_nil
+      end
+    end
   end
 end
diff --git a/npm_and_yarn/spec/dependabot/npm_and_yarn/package_manager_helper_spec.rb b/npm_and_yarn/spec/dependabot/npm_and_yarn/package_manager_helper_spec.rb
index 60ca67be5e..59a7959746 100644
--- a/npm_and_yarn/spec/dependabot/npm_and_yarn/package_manager_helper_spec.rb
+++ b/npm_and_yarn/spec/dependabot/npm_and_yarn/package_manager_helper_spec.rb
@@ -69,6 +69,24 @@
   let(:package_json) { { "packageManager" => "npm@7" } }
   let(:helper) { described_class.new(package_json, lockfiles, register_config_files, []) }
 
+  before do
+    allow(Dependabot::Experiments).to receive(:enabled?)
+      .with(:npm_fallback_version_above_v6)
+      .and_return(false)
+    allow(Dependabot::Experiments).to receive(:enabled?)
+      .with(:npm_v6_deprecation_warning)
+      .and_return(true)
+    allow(Dependabot::Experiments).to receive(:enabled?)
+      .with(:npm_v6_unsupported_error)
+      .and_return(false)
+    allow(Dependabot::Experiments).to receive(:enabled?)
+      .with(:enable_shared_helpers_command_timeout)
+      .and_return(true)
+    allow(Dependabot::Experiments).to receive(:enabled?)
+      .with(:enable_engine_version_detection)
+      .and_return(true)
+  end
+
   describe "#package_manager" do
     context "when npm lockfile exists" do
       it "returns an NpmPackageManager instance" do
@@ -148,21 +166,6 @@
         )
       end
 
-      before do
-        allow(Dependabot::Experiments).to receive(:enabled?)
-          .with(:npm_fallback_version_above_v6)
-          .and_return(false)
-        allow(Dependabot::Experiments).to receive(:enabled?)
-          .with(:npm_v6_deprecation_warning)
-          .and_return(true)
-        allow(Dependabot::Experiments).to receive(:enabled?)
-          .with(:npm_v6_unsupported_error)
-          .and_return(false)
-        allow(Dependabot::Experiments).to receive(:enabled?)
-          .with(:enable_shared_helpers_command_timeout)
-          .and_return(true)
-      end
-
       it "returns the deprecated package manager" do
         expect(package_manager.deprecated?).to be true
         expect(package_manager.detected_version.to_s).to eq "6"
@@ -536,5 +539,43 @@
         expect(requirement).to be_nil
       end
     end
+
+    context "when constraints are valid" do
+      let(:package_json) { { "engines" => { "npm" => ">= 6.0.0 < 8.0.0" } } }
+
+      it "returns a requirement object with correct constraints" do
+        requirement = helper.find_engine_constraints_as_requirement("npm")
+        expect(requirement).to be_a(Dependabot::NpmAndYarn::Requirement)
+        expect(requirement.constraints).to eq([">= 6.0.0", "< 8.0.0"])
+      end
+    end
+
+    context "when constraints are empty" do
+      let(:package_json) { { "engines" => { "npm" => "" } } }
+
+      it "returns nil" do
+        requirement = helper.find_engine_constraints_as_requirement("npm")
+        expect(requirement).to be_nil
+      end
+    end
+
+    context "when constraints are nil" do
+      let(:package_json) { { "engines" => {} } }
+
+      it "returns nil" do
+        requirement = helper.find_engine_constraints_as_requirement("npm")
+        expect(requirement).to be_nil
+      end
+    end
+
+    context "when constraints contain an invalid format" do
+      let(:package_json) { { "engines" => { "npm" => "invalid-constraint" } } }
+
+      it "logs a warning and returns nil" do
+        expect(Dependabot.logger).to receive(:warn).with(/Unrecognized constraint format for npm/)
+        requirement = helper.find_engine_constraints_as_requirement("npm")
+        expect(requirement).to be_nil
+      end
+    end
   end
 end
