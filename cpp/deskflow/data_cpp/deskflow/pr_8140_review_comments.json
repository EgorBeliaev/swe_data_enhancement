[
    {
        "title": "feat: Refactor OSX event buffer from Carbon to Grand Central Dispatch"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "These changes were originally proposed in the Input Leap repository:\r\nhttps://github.com/input-leap/input-leap/pull/2164\r\n\r\nSummary of Changes\r\nThis pull request introduces a refactored version of the OSXEventQueueBuffer class, transitioning from the original Carbon-based implementation to a modern Grand Central Dispatch (GCD)-based approach. The key modifications include:\r\n\r\n- ~~Changed QT version from 6.7.0 to 6.8.1. This is specifically changed in Deskflow, not Input Leap.~~\r\n- Removal of Carbon Dependencies: Eliminated the use of Carbon APIs (EventRef, CreateEvent, PostEventToQueue, etc.) to modernize the codebase and improve compatibility with recent macOS versions.\r\n- Elimination of m_carbonEventQueue: Removed the EventQueueRef m_carbonEventQueue; member, which was previously used for managing Carbon event queues.\r\n- Introduction of a Thread-Safe Event Queue: Replaced the Carbon event queue with a thread-safe std::queuestd::uint32_t guarded by std::mutex and std::condition_variable.\r\n- Direct Usage of Main Dispatch Queue: Utilized dispatch_get_main_queue() directly within the addEvent method, removing the need to store a separate dispatch queue member variable.\r\n- Maintained Original Event Handling Behavior: Ensured that all events added via addEvent are treated as Syne (User) events (kUser), consistent with the original Carbon-based logic that hardcoded the event class to 'Syne'. This meant removing handling for non 'Syne' events from getEvent because we shouldn't get them in the first place since addEvent was hardcoded to 'Syne' events. Additionally, with the refactor, we can't call GetEventClass to tell the type like we could in the Carbon code so the process of having a switch statement is unnecessary in the current implementation.\r\n\r\nThe purpose of this fix is to address a repeated crashing behavior I saw with Input Leap not Deskflow in mac OS 15.2 where I'd see logs like:\r\n\r\nThread 3 Crashed:\r\n0   HIToolbox                      0x1a8f35f28 PostEventToQueueInternal + 288\r\n1   HIToolbox                      0x1a8f35dcc PostEventToQueue + 116\r\n2   input-leapc                    0x10464a9b0 inputleap::OSXEventQueueBuffer::addEvent(unsigned int) + 108\r\n3   input-leapc                    0x1046243c8 inputleap::EventQueue::add_event_to_buffer(inputleap::Event&&) + 284\r\n4   input-leapc                    0x1046398bc inputleap::TCPSocket::sendEvent(inputleap::EventType) + 68\r\n5   input-leapc                    0x10463f564 inputleap::SecureSocket::doRead() + 404\r\n6   input-leapc                    0x10463aec4 inputleap::TCPSocket::serviceConnected(...) + 268\r\n7   input-leapc                    0x10463c0e0 inputleap::TSocketMultiplexerMethodJob::run(...) + 68\r\n...\r\nSignal:  SIGSEGV (EXC_BAD_ACCESS / KERN_INVALID_ADDRESS at 0x0000000000000028)\r\n\r\nI read that PostEventToQueue calls are strongly discouraged in modern macOS and that might explain this bad pointer reference I'm seeing.\r\n\r\n"
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "After having tested this on macOS it seams to work well. \r\n"
    },
    {
        "author": {
            "login": "CaptainChemist"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "I have removed the extra commit. Safe to land if the CI is green"
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "LGTM"
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": ""
    },
    {
        "author": {
            "login": "nbolton"
        },
        "body": "Thanks for the PR, I tested with macOS server and macOS client and it works well.\r\n\r\nChange request: \r\n- Please use `DEBUG2` for debug messages that are high frequency (like the events system).\r\n- We typically omit function names from log strings because it's impractical to keep them consistent long term. Often when functions are renamed, the log line is missed (because it's not part of the diff in the code review) and this leads to confusion (ie. searching for old function names that don't exist anymore).\r\n- Conventionally, we use lower case for our log lines, instead of sentence case.\r\n\r\nIf these points are missing from the code style, we should fix the wiki (edit: [done](https://github.com/deskflow/deskflow/wiki/Code-Style#logging))\r\n\r\nI opened a PR with the suggested changes in case that's easier for you to apply than GitHub suggestions. Here's the commit if you want to use it: https://github.com/deskflow/deskflow/pull/8148/commits/eb96818e5fce1599ea49a861f9f4236269fdb398\r\n\r\n----\r\n\r\nEdit: Amended commit as discussed on [Matrix](https://matrix.to/#/#deskflow-dev:matrix.org):\r\n> just apply them to his PR and lets get it landed\r\n"
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": ""
    },
    {
        "author": {
            "login": "nbolton"
        },
        "body": ""
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "Please do not \"fix\" review issues with new commits"
    },
    {
        "author": {
            "login": "github-actions"
        },
        "body": "## CI Summary\n\u274c\ud83d\udee0\ufe0f `clang-format`: Lint errors, fix available.\n\n[Full summary](https://github.com/deskflow/deskflow/actions/runs/12989629870) (scroll down)\n<!-- Sticky Pull Request CommentContinuous Integration -->"
    },
    {
        "author": {
            "login": "CaptainChemist"
        },
        "body": "Thanks for reverting my PR, sorry about that. For my own education, in the future when an issue is identified on a PR how should I have addressed it rather than reverting a change through a commit on the feature branch? "
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "@CaptainChemist  I will keep this updated until we land it. Thank you for your contribution. If you are so inclined you may find lots of the macOS code is ancient and in need up updating."
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "> Thanks for reverting my PR, sorry about that. For my own education, in the future when an issue is identified on a PR how should I have addressed it rather than reverting a change through a commit on the feature branch?\r\n\r\nAh that is a great question we have this all in the wiki's [Hacking Guide](https://github.com/deskflow/deskflow/wiki/Hacking-Guide). If you find this lacking please feel free to suggest improvements. \r\n"
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "@CaptainChemist  can you add your info to the copyright , we are in the middle of updating our license policy to recommend ppl include themselves in the copyright section when making non trivial code changes.\r\n\r\nhow todo this in git (just incase  you need it)\r\n\r\n git checkout refactor-event-buffer\r\n git pull --rebase\r\n update the files \r\n git commit <files> --amend\r\n git push --force\r\n"
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "updated the license block to be ready for #8135 "
    },
    {
        "author": {
            "login": "CaptainChemist"
        },
        "body": "Great thank you! I just added my copyright line to both files."
    },
    {
        "author": {
            "login": "sithlord48"
        },
        "body": "very nice but the newest always should go to the top of the list let me fix that for you quick"
    }
]