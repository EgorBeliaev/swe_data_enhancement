diff --git a/src/apps/deskflow-gui/MainWindow.cpp b/src/apps/deskflow-gui/MainWindow.cpp
index e15cd37a309..b2db9cbf011 100644
--- a/src/apps/deskflow-gui/MainWindow.cpp
+++ b/src/apps/deskflow-gui/MainWindow.cpp
@@ -36,9 +36,6 @@
 #include "gui/tls/TlsFingerprint.h"
 #include "platform/wayland.h"
 
-#if defined(Q_OS_MAC)
-#include "gui/OSXHelpers.h"
-#endif
 #if defined(Q_OS_LINUX)
 #include "config.h"
 #endif
@@ -130,8 +127,6 @@ MainWindow::MainWindow(ConfigScopes &configScopes, AppConfig &appConfig)
 
   m_ConfigScopes.signalReady();
 
-  applyCloseToTray();
-
   updateScreenName();
   applyConfig();
   restoreWindow();
@@ -270,7 +265,7 @@ void MainWindow::connectSlots()
   connect(m_actionHelp, &QAction::triggered, this, &MainWindow::openHelpUrl);
   connect(m_actionMinimize, &QAction::triggered, this, &MainWindow::hide);
 
-  connect(m_actionQuit, &QAction::triggered, this, &MainWindow::quitApp);
+  connect(m_actionQuit, &QAction::triggered, this, &MainWindow::close);
   connect(m_actionRestore, &QAction::triggered, this, &MainWindow::showAndActivate);
   connect(m_actionSave, &QAction::triggered, this, &MainWindow::saveConfig);
   connect(m_actionSettings, &QAction::triggered, this, &MainWindow::openSettings);
@@ -316,13 +311,6 @@ void MainWindow::connectSlots()
   connect(ui->btnToggleLog, &QAbstractButton::toggled, this, &MainWindow::toggleLogVisible);
 }
 
-void MainWindow::onAppAboutToQuit()
-{
-  if (m_SaveOnExit) {
-    m_ConfigScopes.save();
-  }
-}
-
 void MainWindow::toggleLogVisible(bool visible)
 {
   if (visible) {
@@ -438,7 +426,6 @@ void MainWindow::clearSettings()
 
   m_CoreProcess.stop();
 
-  m_Quitting = true;
   m_SaveOnExit = false;
   diagnostic::clearSettings(m_ConfigScopes, true);
 }
@@ -474,7 +461,6 @@ void MainWindow::openSettings()
     m_ConfigScopes.save();
 
     applyConfig();
-    applyCloseToTray();
 
     if (m_CoreProcess.isStarted()) {
       m_CoreProcess.restart();
@@ -527,13 +513,6 @@ void MainWindow::setModeClient()
   m_ConfigScopes.save();
 }
 
-void MainWindow::quitApp()
-{
-  qDebug() << "quitting application";
-  m_Quitting = true;
-  QApplication::quit();
-}
-
 void MainWindow::onWindowSaveTimerTimeout()
 {
   saveWindow();
@@ -580,7 +559,7 @@ void MainWindow::open()
   // Duplicate quit needed for mac os tray menu
   QAction *actionTrayQuit = new QAction(tr("Quit Deskflow"), this);
   actionTrayQuit->setShortcut(QKeySequence::Quit);
-  connect(actionTrayQuit, &QAction::triggered, this, &MainWindow::quitApp);
+  connect(actionTrayQuit, &QAction::triggered, this, &MainWindow::close);
 
   m_actionRestore->setText(tr("Open Deskflow"));
   trayActions.insert(3, m_actionRestore);
@@ -676,11 +655,6 @@ void MainWindow::applyConfig()
   updateLocalFingerprint();
 }
 
-void MainWindow::applyCloseToTray() const
-{
-  QApplication::setQuitOnLastWindowClosed(!m_AppConfig.closeToTray());
-}
-
 void MainWindow::saveSettings()
 {
   m_AppConfig.setServerGroupChecked(ui->rbModeServer->isChecked());
@@ -809,23 +783,23 @@ void MainWindow::showEvent(QShowEvent *event)
 
 void MainWindow::closeEvent(QCloseEvent *event)
 {
-  if (m_Quitting) {
-    qDebug() << "skipping close event handle on quit";
-    return;
-  }
-
-  if (!m_AppConfig.closeToTray()) {
-    qDebug() << "window will not hide to tray";
+  if (m_AppConfig.closeToTray() && event->spontaneous()) {
+    if (m_AppConfig.showCloseReminder()) {
+      messages::showCloseReminder(this);
+      m_AppConfig.setShowCloseReminder(false);
+    }
+    qDebug() << "hiding to tray";
+    hide();
+    event->ignore();
     return;
   }
 
-  if (m_AppConfig.showCloseReminder()) {
-    messages::showCloseReminder(this);
-    m_AppConfig.setShowCloseReminder(false);
-  }
+  if (m_SaveOnExit)
+    m_ConfigScopes.save();
 
-  m_ConfigScopes.save();
-  qDebug() << "window should hide to tray";
+  qDebug() << "quitting application";
+  event->accept();
+  QApplication::quit();
 }
 
 void MainWindow::showFirstConnectedMessage()
diff --git a/src/apps/deskflow-gui/MainWindow.h b/src/apps/deskflow-gui/MainWindow.h
index 3d7334edb08..c20d77513bf 100644
--- a/src/apps/deskflow-gui/MainWindow.h
+++ b/src/apps/deskflow-gui/MainWindow.h
@@ -39,6 +39,10 @@
 #include "gui/core/WaylandWarnings.h"
 #include "gui/tls/TlsUtility.h"
 
+#ifdef Q_OS_MAC
+#include "gui/OSXHelpers.h"
+#endif
+
 class QAction;
 class QMenu;
 class QLineEdit;
@@ -94,12 +98,16 @@ class MainWindow : public QMainWindow
   }
   void autoAddScreen(const QString name);
 
+#ifdef Q_OS_MAC
+  void hide()
+  {
+    macOSNativeHide();
+  }
+#endif
+
 signals:
   void shown();
 
-public slots:
-  void onAppAboutToQuit();
-
 private slots:
   void toggleLogVisible(bool visible);
   //
@@ -138,7 +146,6 @@ private slots:
 private:
   std::unique_ptr<Ui::MainWindow> ui;
 
-  void quitApp();
   void updateSize();
   AppConfig &appConfig()
   {
@@ -152,7 +159,6 @@ private slots:
   void createStatusBar();
   void createTrayIcon();
   void applyConfig();
-  void applyCloseToTray() const;
   void setIcon();
   bool checkForApp(int which, QString &app);
   void setStatus(const QString &status);
@@ -190,7 +196,6 @@ private slots:
   QAbstractButton *m_pCancelButton = nullptr;
   bool m_SecureSocket = false;
   bool m_SaveWindow = false;
-  bool m_Quitting = false;
   deskflow::gui::config::ServerConfigDialogState m_ServerConfigDialogState;
   bool m_SaveOnExit = true;
   deskflow::gui::core::WaylandWarnings m_WaylandWarnings;
diff --git a/src/lib/gui/OSXHelpers.h b/src/lib/gui/OSXHelpers.h
index 3d319a0404b..b766718425c 100644
--- a/src/lib/gui/OSXHelpers.h
+++ b/src/lib/gui/OSXHelpers.h
@@ -31,4 +31,5 @@ bool isOSXDevelopmentBuild();
 bool showOSXNotification(const QString &title, const QString &body);
 bool isOSXInterfaceStyleDark();
 void forceAppActive();
+void macOSNativeHide();
 IconsTheme getOSXIconsTheme();
diff --git a/src/lib/gui/OSXHelpers.mm b/src/lib/gui/OSXHelpers.mm
index 37701e489ad..71d2cf74be0 100644
--- a/src/lib/gui/OSXHelpers.mm
+++ b/src/lib/gui/OSXHelpers.mm
@@ -112,6 +112,11 @@ void forceAppActive()
   [[NSApplication sharedApplication] activateIgnoringOtherApps:YES];
 }
 
+void macOSNativeHide()
+{
+  [NSApp hide:nil];
+}
+
 IconsTheme getOSXIconsTheme()
 {
   if (@available(macOS 11, *))
