diff --git a/src/render/d3d11/generated/render_d3d11.meta.h b/src/render/d3d11/generated/render_d3d11.meta.h
index c98e681f1..4fc2c54bb 100644
--- a/src/render/d3d11/generated/render_d3d11.meta.h
+++ b/src/render/d3d11/generated/render_d3d11.meta.h
@@ -63,18 +63,15 @@ str8_lit_comp(
 "\n"
 "struct Vertex2Pixel\n"
 "{\n"
-"  float4 position           : SV_POSITION;\n"
-"  float2 rect_half_size_px  : PSIZE;\n"
-"  float2 texcoord_pct       : TEX;\n"
-"  float2 cornercoord_pct    : COLC;\n"
-"  float4 color00            : COL0;\n"
-"  float4 color01            : COL1;\n"
-"  float4 color10            : COL2;\n"
-"  float4 color11            : COL3;\n"
-"  float corner_radius_px    : CRAD;\n"
-"  float border_thickness_px : BTHC;\n"
-"  float softness_px         : SFT;\n"
-"  float omit_texture        : OTX;\n"
+"                  float4 position           : SV_POSITION;\n"
+"  nointerpolation float2 rect_half_size_px  : PSIZE;\n"
+"                  float2 texcoord_pct       : TEX;\n"
+"                  float2 sdf_sample_pos     : SDF;\n"
+"                  float4 tint               : TINT;\n"
+"                  float corner_radius_px    : CRAD;\n"
+"  nointerpolation float border_thickness_px : BTHC;\n"
+"  nointerpolation float softness_px         : SFT;\n"
+"  nointerpolation float omit_texture        : OTX;\n"
 "};\n"
 "\n"
 "Texture2D    main_t2d     : register(t0);\n"
@@ -105,24 +102,17 @@ str8_lit_comp(
 "  //- rjf: prep per-vertex arrays to sample from (p: position, t: texcoord, c: colorcoord, r: cornerradius)\n"
 "  float2 dst_p_verts_px[] =\n"
 "  {\n"
-"    mul(xform, float3(dst_p0_px.x, dst_p1_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),\n"
-"    mul(xform, float3(dst_p0_px.x, dst_p0_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),\n"
-"    mul(xform, float3(dst_p1_px.x, dst_p1_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),\n"
-"    mul(xform, float3(dst_p1_px.x, dst_p0_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),\n"
+"    float2(dst_p0_px.x, viewport_size_px.y - dst_p1_px.y),\n"
+"    float2(dst_p0_px.x, viewport_size_px.y - dst_p0_px.y),\n"
+"    float2(dst_p1_px.x, viewport_size_px.y - dst_p1_px.y),\n"
+"    float2(dst_p1_px.x, viewport_size_px.y - dst_p0_px.y),\n"
 "  };\n"
-"  float2 src_p_verts_pct[] =\n"
+"  float2 src_p_verts_px[] =\n"
 "  {\n"
-"    float2(src_p0_px.x/texture_t2d_size_px.x, src_p1_px.y/texture_t2d_size_px.y),\n"
-"    float2(src_p0_px.x/texture_t2d_size_px.x, src_p0_px.y/texture_t2d_size_px.y),\n"
-"    float2(src_p1_px.x/texture_t2d_size_px.x, src_p1_px.y/texture_t2d_size_px.y),\n"
-"    float2(src_p1_px.x/texture_t2d_size_px.x, src_p0_px.y/texture_t2d_size_px.y),\n"
-"  };\n"
-"  float2 dst_c_verts_pct[] =\n"
-"  {\n"
-"    float2(0, 1),\n"
-"    float2(0, 0),\n"
-"    float2(1, 1),\n"
-"    float2(1, 0),\n"
+"    float2(src_p0_px.x, src_p1_px.y),\n"
+"    float2(src_p0_px.x, src_p0_px.y),\n"
+"    float2(src_p1_px.x, src_p1_px.y),\n"
+"    float2(src_p1_px.x, src_p0_px.y),\n"
 "  };\n"
 "  float dst_r_verts_px[] =\n"
 "  {\n"
@@ -131,21 +121,26 @@ str8_lit_comp(
 "    cpu2vertex.corner_radii_px.w,\n"
 "    cpu2vertex.corner_radii_px.z,\n"
 "  };\n"
+"  float4 src_color[] = {\n"
+"    cpu2vertex.color01,\n"
+"    cpu2vertex.color00,\n"
+"    cpu2vertex.color11,\n"
+"    cpu2vertex.color10,\n"
+"  };\n"
+"  float2 dst_verts_pct = float2(\n"
+"    (cpu2vertex.vertex_id >> 1) ? 1.f : 0.f,\n"
+"    (cpu2vertex.vertex_id & 1)  ? 0.f : 1.f);\n"
 "  \n"
 "  // rjf: fill vertex -> pixel data\n"
 "  Vertex2Pixel vertex2pixel;\n"
 "  {\n"
-"    vertex2pixel.position.x           = 2 * dst_p_verts_px[cpu2vertex.vertex_id].x / viewport_size_px.x - 1.f;\n"
-"    vertex2pixel.position.y           = 2 * dst_p_verts_px[cpu2vertex.vertex_id].y / viewport_size_px.y - 1.f;\n"
+"    vertex2pixel.position.xy          = 2.f * mul(xform, float3(dst_p_verts_px[cpu2vertex.vertex_id], 1.f)).xy / viewport_size_px - 1.f;\n"
 "    vertex2pixel.position.z           = 0.f;\n"
 "    vertex2pixel.position.w           = 1.f;\n"
-"    vertex2pixel.rect_half_size_px    = dst_size_px/2 * xform_scale;\n"
-"    vertex2pixel.texcoord_pct         = src_p_verts_pct[cpu2vertex.vertex_id];\n"
-"    vertex2pixel.cornercoord_pct      = dst_c_verts_pct[cpu2vertex.vertex_id];\n"
-"    vertex2pixel.color00              = cpu2vertex.color00;\n"
-"    vertex2pixel.color01              = cpu2vertex.color01;\n"
-"    vertex2pixel.color10              = cpu2vertex.color10;\n"
-"    vertex2pixel.color11              = cpu2vertex.color11;\n"
+"    vertex2pixel.rect_half_size_px    = dst_size_px / 2.f * xform_scale;\n"
+"    vertex2pixel.texcoord_pct         = src_p_verts_px[cpu2vertex.vertex_id] / texture_t2d_size_px;\n"
+"    vertex2pixel.sdf_sample_pos       = (2.f * dst_verts_pct - 1.f) * vertex2pixel.rect_half_size_px;\n"
+"    vertex2pixel.tint                 = src_color[cpu2vertex.vertex_id];\n"
 "    vertex2pixel.corner_radius_px     = dst_r_verts_px[cpu2vertex.vertex_id];\n"
 "    vertex2pixel.border_thickness_px  = border_thickness_px;\n"
 "    vertex2pixel.softness_px          = softness_px;\n"
@@ -160,9 +155,7 @@ str8_lit_comp(
 "ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET\n"
 "{\n"
 "  // rjf: blend corner colors to produce final tint\n"
-"  float4 top_color   = (1-vertex2pixel.cornercoord_pct.x)*vertex2pixel.color00 + (vertex2pixel.cornercoord_pct.x)*vertex2pixel.color10;\n"
-"  float4 bot_color   = (1-vertex2pixel.cornercoord_pct.x)*vertex2pixel.color01 + (vertex2pixel.cornercoord_pct.x)*vertex2pixel.color11;\n"
-"  float4 tint        = (1-vertex2pixel.cornercoord_pct.y)*top_color + (vertex2pixel.cornercoord_pct.y)*bot_color;\n"
+"  float4 tint = vertex2pixel.tint;\n"
 "  \n"
 "  // rjf: sample texture\n"
 "  float4 albedo_sample = float4(1, 1, 1, 1);\n"
@@ -172,8 +165,7 @@ str8_lit_comp(
 "  }\n"
 "  \n"
 "  // rjf: determine SDF sample position\n"
-"  float2 sdf_sample_pos = float2((2*vertex2pixel.cornercoord_pct.x-1)*vertex2pixel.rect_half_size_px.x,\n"
-"                                 (2*vertex2pixel.cornercoord_pct.y-1)*vertex2pixel.rect_half_size_px.y);\n"
+"  float2 sdf_sample_pos = vertex2pixel.sdf_sample_pos;\n"
 "  \n"
 "  // rjf: sample for corners\n"
 "  float corner_sdf_s = rect_sdf(sdf_sample_pos,\n"
@@ -213,10 +205,14 @@ str8_lit_comp(
 "cbuffer Globals : register(b0)\n"
 "{\n"
 "  float4 rect;\n"
-"  float2 viewport_size;\n"
-"  float blur_size;\n"
-"  float is_vertical;\n"
 "  float4 corner_radii_px;\n"
+"  float2 direction;\n"
+"  float2 viewport_size;\n"
+"  uint blur_count;\n"
+"}\n"
+"\n"
+"cbuffer Kernel : register(b1)\n"
+"{\n"
 "  float4 kernel[32];\n"
 "}\n"
 "\n"
@@ -229,7 +225,7 @@ str8_lit_comp(
 "{\n"
 "  float4 position        : SV_POSITION;\n"
 "  float2 texcoord        : TEX;\n"
-"  float2 cornercoord     : CRN;\n"
+"  float2 sdf_sample_pos  : SDF;\n"
 "  float corner_radius    : RAD;\n"
 "};\n"
 "\n"
@@ -246,12 +242,12 @@ str8_lit_comp(
 "Vertex2Pixel\n"
 "vs_main(CPU2Vertex c2v)\n"
 "{\n"
-"  float4 vertex_positions__scrn[] =\n"
+"  float2 vertex_positions__scrn[] =\n"
 "  {\n"
-"    float4(rect.x, rect.w, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),\n"
-"    float4(rect.x, rect.y, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),\n"
-"    float4(rect.z, rect.w, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),\n"
-"    float4(rect.z, rect.y, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),\n"
+"    rect.xw,\n"
+"    rect.xy,\n"
+"    rect.zw,\n"
+"    rect.zy,\n"
 "  };\n"
 "  float corner_radii__px[] =\n"
 "  {\n"
@@ -260,22 +256,20 @@ str8_lit_comp(
 "    corner_radii_px.w,\n"
 "    corner_radii_px.z,\n"
 "  };\n"
-"  float2 cornercoords__pct[] =\n"
-"  {\n"
-"    float2(0, 1),\n"
-"    float2(0, 0),\n"
-"    float2(1, 1),\n"
-"    float2(1, 0),\n"
-"  };\n"
-"  float4 vertex_position__scrn = vertex_positions__scrn[c2v.vertex_id];\n"
-"  float4 vertex_position__clip = float4(2*vertex_position__scrn.x/viewport_size.x - 1,\n"
-"                                        2*vertex_position__scrn.y/viewport_size.y - 1,\n"
-"                                        0, 1);\n"
+"  float2 cornercoords__pct = float2(\n"
+"    (c2v.vertex_id >> 1) ? 1.f : 0.f,\n"
+"    (c2v.vertex_id & 1)  ? 0.f : 1.f);\n"
+"\n"
+"  float2 vertex_position__pct = vertex_positions__scrn[c2v.vertex_id] / viewport_size;\n"
+"  float2 vertex_position__scr = 2.f * vertex_position__pct - 1.f;\n"
+"\n"
+"  float2 rect_half_size = float2((rect.z-rect.x)/2, (rect.w-rect.y)/2);\n"
+"\n"
 "  Vertex2Pixel v2p;\n"
 "  {\n"
-"    v2p.position = vertex_position__clip;\n"
-"    v2p.texcoord = float2(vertex_position__scrn.x/viewport_size.x, 1 - vertex_position__scrn.y/viewport_size.y);\n"
-"    v2p.cornercoord = cornercoords__pct[c2v.vertex_id];\n"
+"    v2p.position = float4(vertex_position__scr.x, -vertex_position__scr.y, 0.f, 1.f);\n"
+"    v2p.texcoord = vertex_position__pct;\n"
+"    v2p.sdf_sample_pos = (2.f * cornercoords__pct - 1.f) * rect_half_size;\n"
 "    v2p.corner_radius = corner_radii__px[c2v.vertex_id];\n"
 "  }\n"
 "  return v2p;\n"
@@ -287,26 +281,27 @@ str8_lit_comp(
 "ps_main(Vertex2Pixel v2p) : SV_TARGET\n"
 "{\n"
 "  // rjf: blend weighted texture samples into color\n"
-"  float4 color = stage_t2d.Sample(stage_sampler, v2p.texcoord) * kernel[0].x;\n"
+"  float4 color = kernel[0].x * stage_t2d.Sample(stage_sampler, v2p.texcoord);\n"
 "  color.a = kernel[0].x;\n"
-"  for(float i = 1; i < blur_size; i += 1)\n"
+"\n"
+"  for(uint i = 1; i < blur_count; i += 1)\n"
 "  {\n"
-"    float weight = ((float[4])kernel[uint(i)/4])[uint(i)%4];\n"
-"    float4 min_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord - float2(!is_vertical*i/viewport_size.x, is_vertical*i/viewport_size.y));\n"
-"    float4 max_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord + float2(!is_vertical*i/viewport_size.x, is_vertical*i/viewport_size.y));\n"
-"    min_sample.a = 1;\n"
-"    max_sample.a = 1;\n"
-"    color += min_sample*weight;\n"
-"    color += max_sample*weight;\n"
+"    float weight = kernel[i].x;\n"
+"    float offset = kernel[i].y;\n"
+"    float4 min_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord - offset * direction);\n"
+"    float4 max_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord + offset * direction);\n"
+"    min_sample.a = 1.f;\n"
+"    max_sample.a = 1.f;\n"
+"    color += min_sample * weight;\n"
+"    color += max_sample * weight;\n"
 "  }\n"
 "  \n"
 "  // rjf: determine SDF sample position\n"
 "  float2 rect_half_size = float2((rect.z-rect.x)/2, (rect.w-rect.y)/2);\n"
-"  float2 sdf_sample_pos = float2((2*v2p.cornercoord.x-1)*rect_half_size.x,\n"
-"                                 (2*v2p.cornercoord.y-1)*rect_half_size.y);\n"
+"  float2 sdf_sample_pos = v2p.sdf_sample_pos;\n"
 "  \n"
 "  // rjf: sample for corners\n"
-"  float corner_sdf_s = rect_sdf(sdf_sample_pos, rect_half_size - float2(2.f, 2.f), v2p.corner_radius);\n"
+"  float corner_sdf_s = rect_sdf(sdf_sample_pos, rect_half_size - 2.f, v2p.corner_radius);\n"
 "  float corner_sdf_t = 1-smoothstep(0, 2, corner_sdf_s);\n"
 "  \n"
 "  // rjf: weight output color by sdf\n"
diff --git a/src/render/d3d11/render_d3d11.cpp b/src/render/d3d11/render_d3d11.cpp
index 5e5ae9489..dcfc5801c 100644
--- a/src/render/d3d11/render_d3d11.cpp
+++ b/src/render/d3d11/render_d3d11.cpp
@@ -1183,99 +1183,140 @@ r_window_submit(OS_Handle window, R_Handle window_equip, R_PassList *passes)
         case R_PassKind_Blur:
         {
           R_PassParams_Blur *params = pass->params_blur;
-          ID3D11SamplerState *sampler   = r_d3d11_state->samplers[R_Tex2DSampleKind_Nearest];
+          ID3D11SamplerState *sampler   = r_d3d11_state->samplers[R_Tex2DSampleKind_Linear];
           ID3D11VertexShader *vshad     = r_d3d11_state->vshads[R_D3D11_VShadKind_Blur];
           ID3D11PixelShader *pshad      = r_d3d11_state->pshads[R_D3D11_PShadKind_Blur];
           ID3D11Buffer *uniforms_buffer = r_d3d11_state->uniform_type_kind_buffers[R_D3D11_VShadKind_Blur];
-          
-          //- rjf: perform blur on each axis
-          ID3D11RenderTargetView *rtvs[Axis2_COUNT] =
-          {
-            wnd->stage_scratch_color_rtv,
-            wnd->stage_color_rtv,
-          };
-          ID3D11ShaderResourceView *srvs[Axis2_COUNT] =
+
+          // rjf: setup output merger
+          d_ctx->OMSetDepthStencilState(r_d3d11_state->noop_depth_stencil, 0);
+          d_ctx->OMSetBlendState(r_d3d11_state->main_blend_state, 0, 0xffffffff);
+
+          // rjf: set up viewport
+          Vec2S32 resolution = wnd->last_resolution;
+          D3D11_VIEWPORT viewport = { 0.0f, 0.0f, (F32)resolution.x, (F32)resolution.y, 0.0f, 1.0f };
+          d_ctx->RSSetViewports(1, &viewport);
+          d_ctx->RSSetState(r_d3d11_state->main_rasterizer);
+
+          // rjf: setup input assembly
+          d_ctx->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);
+          d_ctx->IASetInputLayout(0);
+
+          // rjf: setup shaders
+          d_ctx->VSSetShader(vshad, 0, 0);
+          d_ctx->VSSetConstantBuffers(0, 1, &uniforms_buffer);
+          d_ctx->PSSetShader(pshad, 0, 0);
+          d_ctx->PSSetSamplers(0, 1, &sampler);
+
+          // rjf: setup scissor rect
           {
-            wnd->stage_color_srv,
-            wnd->stage_scratch_color_srv,
-          };
-          for(Axis2 axis = (Axis2)0; axis < Axis2_COUNT; axis = (Axis2)(axis+1))
+              D3D11_RECT rect = { 0 };
+              rect.left = 0;
+              rect.right = (LONG)wnd->last_resolution.x;
+              rect.top = 0;
+              rect.bottom = (LONG)wnd->last_resolution.y;
+              d_ctx->RSSetScissorRects(1, &rect);
+          }
+
+          // rjf: set up uniforms
+          R_D3D11_Uniforms_Blur uniforms = { 0 };
           {
-            // rjf: setup output merger
-            d_ctx->OMSetRenderTargets(1, &rtvs[axis], 0);
-            d_ctx->OMSetDepthStencilState(r_d3d11_state->noop_depth_stencil, 0);
-            d_ctx->OMSetBlendState(r_d3d11_state->main_blend_state, 0, 0xffffffff);
-            
-            // rjf: set up viewport
-            Vec2S32 resolution = wnd->last_resolution;
-            D3D11_VIEWPORT viewport = { 0.0f, 0.0f, (F32)resolution.x, (F32)resolution.y, 0.0f, 1.0f };
-            d_ctx->RSSetViewports(1, &viewport);
-            d_ctx->RSSetState(r_d3d11_state->main_rasterizer);
-            
-            // rjf: setup input assembly
-            d_ctx->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP);
-            d_ctx->IASetInputLayout(0);
-            
-            // rjf: set up uniforms
+            F32 weights[ArrayCount(uniforms.kernel)*2] = {0};
+
+            F32 blur_size = Min(params->blur_size, ArrayCount(weights));
+            U64 blur_count = (U64)round_f32(blur_size);
+
+            F32 stdev = (blur_size-1.f)/2.f;
+            F32 one_over_root_2pi_stdev2 = 1/sqrt_f32(2*pi32*stdev*stdev);
+            F32 euler32 = 2.718281828459045f;
+
+            weights[0] = 1.f;
+            if(stdev > 0.f)
             {
-              F32 stdev = (params->blur_size-1.f)/2.f;
-              F32 one_over_root_2pi_stdev2 = 1/sqrt_f32(2*pi32*stdev*stdev);
-              F32 euler32 = 2.718281828459045f;
-              R_D3D11_Uniforms_Blur uniforms = {0};
-              uniforms.viewport_size  = v2f32(resolution.x, resolution.y);
-              uniforms.rect           = params->rect;
-              uniforms.blur_size      = params->blur_size;
-              uniforms.is_vertical    = (F32)!!axis;
-              MemoryCopyArray(uniforms.corner_radii.v, params->corner_radii);
-              F32 kernel_x = 0;
-              uniforms.kernel[0].v[0] = 1.f;
-              if(stdev > 0.f)
-              {
-                for(U64 idx = 0; idx < ArrayCount(uniforms.kernel); idx += 1)
-                {
-                  for(U64 v_idx = 0; v_idx < ArrayCount(uniforms.kernel[idx].v); v_idx += 1)
-                  {
-                    uniforms.kernel[idx].v[v_idx] = one_over_root_2pi_stdev2*pow_f32(euler32, -kernel_x*kernel_x/(2.f*stdev*stdev)); 
-                    kernel_x += 1;
-                  }
-                }
-              }
-              if(uniforms.kernel[0].v[0] > 1.f)
+              for(U64 idx = 0; idx < blur_count; idx += 1)
               {
-                MemoryZeroArray(uniforms.kernel);
-                uniforms.kernel[0].v[0] = 1.f;
+                F32 kernel_x = (F32)idx;
+                weights[idx] = one_over_root_2pi_stdev2*pow_f32(euler32, -kernel_x*kernel_x/(2.f*stdev*stdev)); 
               }
-              D3D11_MAPPED_SUBRESOURCE sub_rsrc = {0};
-              r_d3d11_state->device_ctx->Map(uniforms_buffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &sub_rsrc);
-              MemoryCopy((U8 *)sub_rsrc.pData, &uniforms, sizeof(uniforms));
-              r_d3d11_state->device_ctx->Unmap(uniforms_buffer, 0);
             }
-            
-            // rjf: setup shaders
-            d_ctx->VSSetShader(vshad, 0, 0);
-            d_ctx->VSSetConstantBuffers(0, 1, &uniforms_buffer);
-            d_ctx->PSSetShader(pshad, 0, 0);
-            d_ctx->PSSetConstantBuffers(0, 1, &uniforms_buffer);
-            d_ctx->PSSetShaderResources(0, 1, &srvs[axis]);
-            d_ctx->PSSetSamplers(0, 1, &sampler);
-            
-            // rjf: setup scissor rect
+            if(weights[0] > 1.f)
             {
-              D3D11_RECT rect = {0};
-              rect.left = 0;
-              rect.right = (LONG)wnd->last_resolution.x;
-              rect.top = 0;
-              rect.bottom = (LONG)wnd->last_resolution.y;
-              d_ctx->RSSetScissorRects(1, &rect);
+              MemoryZeroArray(weights);
+              weights[0] = 1.f;
             }
-            
-            // rjf: draw
-            d_ctx->Draw(4, 0);
-            
-            // rjf: unset srv
-            ID3D11ShaderResourceView *srv = 0;
-            d_ctx->PSSetShaderResources(0, 1, &srv);
+            else
+            {
+              // prepare weights & offsets for bilinear lookup
+              // blur filter wants to calculate w0*pixel[pos] + w1*pixel[pos+1] + ...
+              // with bilinear filter we can do this calulation by doing only w*sample(pos+t) = w*((1-t)*pixel[pos] + t*pixel[pos+1])
+              // we can see w0=w*(1-t) and w1=w*t
+              // thus w=w0+w1 and t=w1/w
+              for (U64 idx = 1; idx < blur_count; idx += 2)
+              {
+                  F32 w0 = weights[idx + 0];
+                  F32 w1 = weights[idx + 1];
+                  F32 w = w0 + w1;
+                  F32 t = w1 / w;
+
+                  // each kernel element is float2(weight, offset)
+                  // weights & offsets are adjusted for bilinear sampling
+                  // zw elements are not used, a bit of waste but it allows for simpler shader code
+                  uniforms.kernel[(idx+1)/2] = v4f32(w, (F32)idx + t, 0, 0);
+              }
+              uniforms.kernel[0].x = weights[0];
+            }
+
+            // technically we need just direction be different
+            // but there are 256 bytes of usable space anyway for each constant buffer chunk
+
+            uniforms.passes[Axis2_X].viewport_size = v2f32(resolution.x, resolution.y);
+            uniforms.passes[Axis2_X].rect          = params->rect;
+            uniforms.passes[Axis2_X].direction     = v2f32(1.f / resolution.x, 0);
+            uniforms.passes[Axis2_X].blur_count    = 1 + blur_count / 2; // 2x smaller because of bilinear sampling
+            MemoryCopyArray(uniforms.passes[Axis2_X].corner_radii.v, params->corner_radii);
+
+            uniforms.passes[Axis2_Y].viewport_size = v2f32(resolution.x, resolution.y);
+            uniforms.passes[Axis2_Y].rect          = params->rect;
+            uniforms.passes[Axis2_Y].direction     = v2f32(0, 1.f / resolution.y);
+            uniforms.passes[Axis2_Y].blur_count    = 1 + blur_count / 2; // 2x smaller because of bilinear sampling
+            MemoryCopyArray(uniforms.passes[Axis2_Y].corner_radii.v, params->corner_radii);
+
+            D3D11_MAPPED_SUBRESOURCE sub_rsrc = {0};
+            r_d3d11_state->device_ctx->Map(uniforms_buffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &sub_rsrc);
+            MemoryCopy((U8 *)sub_rsrc.pData, &uniforms, sizeof(uniforms));
+            r_d3d11_state->device_ctx->Unmap(uniforms_buffer, 0);
           }
+
+          ID3D11Buffer* uniforms_buffers[] = { uniforms_buffer, uniforms_buffer };
+
+          U32 uniform_offset[Axis2_COUNT][2] =
+          {
+              { 0 * sizeof(R_D3D11_Uniforms_BlurPass) / 16, OffsetOf(R_D3D11_Uniforms_Blur, kernel) / 16 },
+              { 1 * sizeof(R_D3D11_Uniforms_BlurPass) / 16, OffsetOf(R_D3D11_Uniforms_Blur, kernel) / 16 },
+          };
+
+          U32 uniform_count[Axis2_COUNT][2] =
+          {
+              { sizeof(R_D3D11_Uniforms_BlurPass) / 16, sizeof(uniforms.kernel) / 16 },
+              { sizeof(R_D3D11_Uniforms_BlurPass) / 16, sizeof(uniforms.kernel) / 16 },
+          };
+
+          // rjf: for unsetting srv
+          ID3D11ShaderResourceView* srv = 0;
+
+          // horizontal pass
+          d_ctx->OMSetRenderTargets(1, &wnd->stage_scratch_color_rtv, 0);
+          d_ctx->PSSetConstantBuffers1(0, ArrayCount(uniforms_buffers), uniforms_buffers, uniform_offset[Axis2_X], uniform_count[Axis2_X]);
+          d_ctx->PSSetShaderResources(0, 1, &wnd->stage_color_srv);
+          d_ctx->Draw(4, 0);
+          d_ctx->PSSetShaderResources(0, 1, &srv);
+
+          // vertical pass
+          d_ctx->OMSetRenderTargets(1, &wnd->stage_color_rtv, 0);
+          d_ctx->PSSetConstantBuffers1(0, ArrayCount(uniforms_buffers), uniforms_buffers, uniform_offset[Axis2_Y], uniform_count[Axis2_Y]);
+          d_ctx->PSSetShaderResources(0, 1, &wnd->stage_scratch_color_srv);
+          d_ctx->Draw(4, 0);
+          d_ctx->PSSetShaderResources(0, 1, &srv);
         }break;
         
         
diff --git a/src/render/d3d11/render_d3d11.h b/src/render/d3d11/render_d3d11.h
index 565928e62..ca08fc790 100644
--- a/src/render/d3d11/render_d3d11.h
+++ b/src/render/d3d11/render_d3d11.h
@@ -32,13 +32,20 @@ struct R_D3D11_Uniforms_Rect
   Vec2F32 xform_scale;
 };
 
-struct R_D3D11_Uniforms_Blur
+struct R_D3D11_Uniforms_BlurPass
 {
   Rng2F32 rect;
-  Vec2F32 viewport_size;
-  F32 blur_size;
-  F32 is_vertical;
   Vec4F32 corner_radii;
+  Vec2F32 direction;
+  Vec2F32 viewport_size;
+  U32 blur_count;
+  U8 _padding0_[204];
+};
+StaticAssert(sizeof(R_D3D11_Uniforms_BlurPass) % 256 == 0, NotAligned); // constant count/offset must be aligned to 256 bytes
+
+struct R_D3D11_Uniforms_Blur
+{
+  R_D3D11_Uniforms_BlurPass passes[Axis2_COUNT];
   Vec4F32 kernel[32];
 };
 
diff --git a/src/render/d3d11/render_d3d11.mdesk b/src/render/d3d11/render_d3d11.mdesk
index d597376b2..6130d74cf 100644
--- a/src/render/d3d11/render_d3d11.mdesk
+++ b/src/render/d3d11/render_d3d11.mdesk
@@ -62,18 +62,15 @@ struct CPU2Vertex
 
 struct Vertex2Pixel
 {
-  float4 position           : SV_POSITION;
-  float2 rect_half_size_px  : PSIZE;
-  float2 texcoord_pct       : TEX;
-  float2 cornercoord_pct    : COLC;
-  float4 color00            : COL0;
-  float4 color01            : COL1;
-  float4 color10            : COL2;
-  float4 color11            : COL3;
-  float corner_radius_px    : CRAD;
-  float border_thickness_px : BTHC;
-  float softness_px         : SFT;
-  float omit_texture        : OTX;
+                  float4 position           : SV_POSITION;
+  nointerpolation float2 rect_half_size_px  : PSIZE;
+                  float2 texcoord_pct       : TEX;
+                  float2 sdf_sample_pos     : SDF;
+                  float4 tint               : TINT;
+                  float corner_radius_px    : CRAD;
+  nointerpolation float border_thickness_px : BTHC;
+  nointerpolation float softness_px         : SFT;
+  nointerpolation float omit_texture        : OTX;
 };
 
 Texture2D    main_t2d     : register(t0);
@@ -104,24 +101,17 @@ vs_main(CPU2Vertex cpu2vertex)
   //- rjf: prep per-vertex arrays to sample from (p: position, t: texcoord, c: colorcoord, r: cornerradius)
   float2 dst_p_verts_px[] =
   {
-    mul(xform, float3(dst_p0_px.x, dst_p1_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
-    mul(xform, float3(dst_p0_px.x, dst_p0_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
-    mul(xform, float3(dst_p1_px.x, dst_p1_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
-    mul(xform, float3(dst_p1_px.x, dst_p0_px.y, 1)).xy * float2(1, -1) + float2(0, viewport_size_px.y),
+    float2(dst_p0_px.x, viewport_size_px.y - dst_p1_px.y),
+    float2(dst_p0_px.x, viewport_size_px.y - dst_p0_px.y),
+    float2(dst_p1_px.x, viewport_size_px.y - dst_p1_px.y),
+    float2(dst_p1_px.x, viewport_size_px.y - dst_p0_px.y),
   };
-  float2 src_p_verts_pct[] =
+  float2 src_p_verts_px[] =
   {
-    float2(src_p0_px.x/texture_t2d_size_px.x, src_p1_px.y/texture_t2d_size_px.y),
-    float2(src_p0_px.x/texture_t2d_size_px.x, src_p0_px.y/texture_t2d_size_px.y),
-    float2(src_p1_px.x/texture_t2d_size_px.x, src_p1_px.y/texture_t2d_size_px.y),
-    float2(src_p1_px.x/texture_t2d_size_px.x, src_p0_px.y/texture_t2d_size_px.y),
-  };
-  float2 dst_c_verts_pct[] =
-  {
-    float2(0, 1),
-    float2(0, 0),
-    float2(1, 1),
-    float2(1, 0),
+    float2(src_p0_px.x, src_p1_px.y),
+    float2(src_p0_px.x, src_p0_px.y),
+    float2(src_p1_px.x, src_p1_px.y),
+    float2(src_p1_px.x, src_p0_px.y),
   };
   float dst_r_verts_px[] =
   {
@@ -130,21 +120,26 @@ vs_main(CPU2Vertex cpu2vertex)
     cpu2vertex.corner_radii_px.w,
     cpu2vertex.corner_radii_px.z,
   };
+  float4 src_color[] = {
+    cpu2vertex.color01,
+    cpu2vertex.color00,
+    cpu2vertex.color11,
+    cpu2vertex.color10,
+  };
+  float2 dst_verts_pct = float2(
+    (cpu2vertex.vertex_id >> 1) ? 1.f : 0.f,
+    (cpu2vertex.vertex_id & 1)  ? 0.f : 1.f);
   
   // rjf: fill vertex -> pixel data
   Vertex2Pixel vertex2pixel;
   {
-    vertex2pixel.position.x           = 2 * dst_p_verts_px[cpu2vertex.vertex_id].x / viewport_size_px.x - 1.f;
-    vertex2pixel.position.y           = 2 * dst_p_verts_px[cpu2vertex.vertex_id].y / viewport_size_px.y - 1.f;
+    vertex2pixel.position.xy          = 2.f * mul(xform, float3(dst_p_verts_px[cpu2vertex.vertex_id], 1.f)).xy / viewport_size_px - 1.f;
     vertex2pixel.position.z           = 0.f;
     vertex2pixel.position.w           = 1.f;
-    vertex2pixel.rect_half_size_px    = dst_size_px/2 * xform_scale;
-    vertex2pixel.texcoord_pct         = src_p_verts_pct[cpu2vertex.vertex_id];
-    vertex2pixel.cornercoord_pct      = dst_c_verts_pct[cpu2vertex.vertex_id];
-    vertex2pixel.color00              = cpu2vertex.color00;
-    vertex2pixel.color01              = cpu2vertex.color01;
-    vertex2pixel.color10              = cpu2vertex.color10;
-    vertex2pixel.color11              = cpu2vertex.color11;
+    vertex2pixel.rect_half_size_px    = dst_size_px / 2.f * xform_scale;
+    vertex2pixel.texcoord_pct         = src_p_verts_px[cpu2vertex.vertex_id] / texture_t2d_size_px;
+    vertex2pixel.sdf_sample_pos       = (2.f * dst_verts_pct - 1.f) * vertex2pixel.rect_half_size_px;
+    vertex2pixel.tint                 = src_color[cpu2vertex.vertex_id];
     vertex2pixel.corner_radius_px     = dst_r_verts_px[cpu2vertex.vertex_id];
     vertex2pixel.border_thickness_px  = border_thickness_px;
     vertex2pixel.softness_px          = softness_px;
@@ -159,9 +154,7 @@ float4
 ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
 {
   // rjf: blend corner colors to produce final tint
-  float4 top_color   = (1-vertex2pixel.cornercoord_pct.x)*vertex2pixel.color00 + (vertex2pixel.cornercoord_pct.x)*vertex2pixel.color10;
-  float4 bot_color   = (1-vertex2pixel.cornercoord_pct.x)*vertex2pixel.color01 + (vertex2pixel.cornercoord_pct.x)*vertex2pixel.color11;
-  float4 tint        = (1-vertex2pixel.cornercoord_pct.y)*top_color + (vertex2pixel.cornercoord_pct.y)*bot_color;
+  float4 tint = vertex2pixel.tint;
   
   // rjf: sample texture
   float4 albedo_sample = float4(1, 1, 1, 1);
@@ -171,8 +164,7 @@ ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
   }
   
   // rjf: determine SDF sample position
-  float2 sdf_sample_pos = float2((2*vertex2pixel.cornercoord_pct.x-1)*vertex2pixel.rect_half_size_px.x,
-                                 (2*vertex2pixel.cornercoord_pct.y-1)*vertex2pixel.rect_half_size_px.y);
+  float2 sdf_sample_pos = vertex2pixel.sdf_sample_pos;
   
   // rjf: sample for corners
   float corner_sdf_s = rect_sdf(sdf_sample_pos,
@@ -212,10 +204,14 @@ ps_main(Vertex2Pixel vertex2pixel) : SV_TARGET
 cbuffer Globals : register(b0)
 {
   float4 rect;
-  float2 viewport_size;
-  float blur_size;
-  float is_vertical;
   float4 corner_radii_px;
+  float2 direction;
+  float2 viewport_size;
+  uint blur_count;
+}
+
+cbuffer Kernel : register(b1)
+{
   float4 kernel[32];
 }
 
@@ -228,7 +224,7 @@ struct Vertex2Pixel
 {
   float4 position        : SV_POSITION;
   float2 texcoord        : TEX;
-  float2 cornercoord     : CRN;
+  float2 sdf_sample_pos  : SDF;
   float corner_radius    : RAD;
 };
 
@@ -245,12 +241,12 @@ float rect_sdf(float2 sample_pos, float2 rect_half_size, float r)
 Vertex2Pixel
 vs_main(CPU2Vertex c2v)
 {
-  float4 vertex_positions__scrn[] =
+  float2 vertex_positions__scrn[] =
   {
-    float4(rect.x, rect.w, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),
-    float4(rect.x, rect.y, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),
-    float4(rect.z, rect.w, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),
-    float4(rect.z, rect.y, 0, 1) * float4(1, -1, 1, 1) + float4(0, viewport_size.y, 0, 0),
+    rect.xw,
+    rect.xy,
+    rect.zw,
+    rect.zy,
   };
   float corner_radii__px[] =
   {
@@ -259,22 +255,20 @@ vs_main(CPU2Vertex c2v)
     corner_radii_px.w,
     corner_radii_px.z,
   };
-  float2 cornercoords__pct[] =
-  {
-    float2(0, 1),
-    float2(0, 0),
-    float2(1, 1),
-    float2(1, 0),
-  };
-  float4 vertex_position__scrn = vertex_positions__scrn[c2v.vertex_id];
-  float4 vertex_position__clip = float4(2*vertex_position__scrn.x/viewport_size.x - 1,
-                                        2*vertex_position__scrn.y/viewport_size.y - 1,
-                                        0, 1);
+  float2 cornercoords__pct = float2(
+    (c2v.vertex_id >> 1) ? 1.f : 0.f,
+    (c2v.vertex_id & 1)  ? 0.f : 1.f);
+
+  float2 vertex_position__pct = vertex_positions__scrn[c2v.vertex_id] / viewport_size;
+  float2 vertex_position__scr = 2.f * vertex_position__pct - 1.f;
+
+  float2 rect_half_size = float2((rect.z-rect.x)/2, (rect.w-rect.y)/2);
+
   Vertex2Pixel v2p;
   {
-    v2p.position = vertex_position__clip;
-    v2p.texcoord = float2(vertex_position__scrn.x/viewport_size.x, 1 - vertex_position__scrn.y/viewport_size.y);
-    v2p.cornercoord = cornercoords__pct[c2v.vertex_id];
+    v2p.position = float4(vertex_position__scr.x, -vertex_position__scr.y, 0.f, 1.f);
+    v2p.texcoord = vertex_position__pct;
+    v2p.sdf_sample_pos = (2.f * cornercoords__pct - 1.f) * rect_half_size;
     v2p.corner_radius = corner_radii__px[c2v.vertex_id];
   }
   return v2p;
@@ -286,26 +280,27 @@ float4
 ps_main(Vertex2Pixel v2p) : SV_TARGET
 {
   // rjf: blend weighted texture samples into color
-  float4 color = stage_t2d.Sample(stage_sampler, v2p.texcoord) * kernel[0].x;
+  float4 color = kernel[0].x * stage_t2d.Sample(stage_sampler, v2p.texcoord);
   color.a = kernel[0].x;
-  for(float i = 1; i < blur_size; i += 1)
+
+  for(uint i = 1; i < blur_count; i += 1)
   {
-    float weight = ((float[4])kernel[uint(i)/4])[uint(i)%4];
-    float4 min_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord - float2(!is_vertical*i/viewport_size.x, is_vertical*i/viewport_size.y));
-    float4 max_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord + float2(!is_vertical*i/viewport_size.x, is_vertical*i/viewport_size.y));
-    min_sample.a = 1;
-    max_sample.a = 1;
-    color += min_sample*weight;
-    color += max_sample*weight;
+    float weight = kernel[i].x;
+    float offset = kernel[i].y;
+    float4 min_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord - offset * direction);
+    float4 max_sample = stage_t2d.Sample(stage_sampler, v2p.texcoord + offset * direction);
+    min_sample.a = 1.f;
+    max_sample.a = 1.f;
+    color += min_sample * weight;
+    color += max_sample * weight;
   }
   
   // rjf: determine SDF sample position
   float2 rect_half_size = float2((rect.z-rect.x)/2, (rect.w-rect.y)/2);
-  float2 sdf_sample_pos = float2((2*v2p.cornercoord.x-1)*rect_half_size.x,
-                                 (2*v2p.cornercoord.y-1)*rect_half_size.y);
+  float2 sdf_sample_pos = v2p.sdf_sample_pos;
   
   // rjf: sample for corners
-  float corner_sdf_s = rect_sdf(sdf_sample_pos, rect_half_size - float2(2.f, 2.f), v2p.corner_radius);
+  float corner_sdf_s = rect_sdf(sdf_sample_pos, rect_half_size - 2.f, v2p.corner_radius);
   float corner_sdf_t = 1-smoothstep(0, 2, corner_sdf_s);
   
   // rjf: weight output color by sdf
