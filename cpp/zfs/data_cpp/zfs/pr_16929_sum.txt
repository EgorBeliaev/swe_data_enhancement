**Instruction for Programmer:**

1. **Optimize Functionality:**
   - Refactor `recv_fix_encryption_hierarchy()` to enhance performance.
   - Replace inefficient snapshot lookups by using `gather_nvlist()` to collect nvlists for all local filesystems.
   - Traverse snapshots using the snapshot's GUID and search with it in `stream_avl` for the corresponding stream's filesystem.

2. **Error Handling:**
   - Modify `recv_incremental_replication()` to silently ignore errors caused by promoted clones outside the top filesystem specified in `zfs send`.
   - Ensure `recv_fix_encryption_hierarchy()` runs even if `recv_incremental_replication()` detects the wrong origin, preventing unmountable filesystems.

3. **Performance Testing:**
   - Expand existing tests to validate the changes.
   - Conduct performance benchmarks locally using mentioned scripts to ensure performance improvements from reducing execution time from minutes to seconds for large datasets (~1000 filesystems).

4. **Documentation and Code Standards:**
   - Ensure the changes adhere to OpenZFS code style requirements.
   - Verify test coverage for changes.
   - Confirm commit messages are formatted correctly with a `Signed-off-by` statement.

**Issue Being Fixed:**

The original `recv_fix_encryption_hierarchy()` function causes high CPU usage and lengthy processing duration when handling many filesystems due to inefficient snapshot lookups. Improvements are needed to handle the issue where promoted clones outside of the top filesystem could cause unmountable filesystems due to skipped hierarchy fixes.