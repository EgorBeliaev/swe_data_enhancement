[
    {
        "title": "Assert if we're logging after final txg was set"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "### Motivation and Context\r\nRunning into this from time to time when running ZTS\r\n\r\n### Description\r\nThis should avoid this VERIFY trip:\r\n```\r\nVERIFY3(tx->tx_txg <= spa_final_dirty_txg(os->os_spa)) failed (63 <= 62 PANIC at dbuf.c:2324:dbuf_dirty()\r\nShowing stack for process 587858\r\nCPU: 1 PID: 587858 Comm: txg_sync Tainted: P           OE      6.10.12-\r\nHardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-\r\nCall Trace:\r\n <TASK>\r\n dump_stack_lvl+0x64/0x80\r\n spl_panic+0x100/0x120 [spl]\r\n dbuf_dirty+0xd5a/0x1300 [zfs]\r\n ? srso_alias_return_thunk+0x5/0xfbef5\r\n ? dmu_buf_will_dirty_impl+0xdf/0x330 [zfs]\r\n spa_history_log_sync+0x11e/0x620 [zfs]\r\n ? srso_alias_return_thunk+0x5/0xfbef5\r\n ? list_head+0x9/0x30 [zfs]\r\n ? srso_alias_return_thunk+0x5/0xfbef5\r\n ? srso_alias_return_thunk+0x5/0xfbef5\r\n ? __cv_destroy+0x92/0x250 [spl]\r\n ? srso_alias_return_thunk+0x5/0xfbef5\r\n ? mutex_lock+0x12/0x30\r\n dsl_sync_task_sync+0xb9/0x120 [zfs]\r\n dsl_pool_sync+0x4c7/0x6a0 [zfs]\r\n spa_sync_iterate_to_convergence+0xd8/0x320 [zfs]\r\n spa_sync+0x308/0x8e0 [zfs]\r\n ? __wake_up+0x44/0x60\r\n txg_sync_thread+0x272/0x3c0 [zfs]\r\n ? __pfx_txg_sync_thread+0x10/0x10 [zfs]\r\n ? __pfx_thread_generic_wrapper+0x10/0x10 [spl]\r\n thread_generic_wrapper+0x66/0x90 [spl]\r\n kthread+0xd2/0x100\r\n ? __pfx_kthread+0x10/0x10\r\n ret_from_fork+0x34/0x50\r\n ? __pfx_kthread+0x10/0x10\r\n ret_from_fork_asm+0x1a/0x30\r\n </TASK>\r\n```\r\n### How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your changes. -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc. -->\r\n<!--- If your change is a performance enhancement, please provide benchmarks here. -->\r\n<!--- Please think about using the draft PR feature if appropriate -->\r\n\r\n### Types of changes\r\n<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Performance enhancement (non-breaking change which improves efficiency)\r\n- [ ] Code cleanup (non-breaking change which makes code smaller or more readable)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Library ABI change (libzfs, libzfs\\_core, libnvpair, libuutil and libzfsbootenv)\r\n- [ ] Documentation (a change to man pages or other documentation)\r\n\r\n### Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the OpenZFS [code style requirements](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#coding-conventions).\r\n- [ ] I have updated the documentation accordingly.\r\n- [x] I have read the [**contributing** document](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md).\r\n- [ ] I have added [tests](https://github.com/openzfs/zfs/tree/master/tests) to cover my changes.\r\n- [x] I have run the ZFS Test Suite with this change applied.\r\n- [x] All commit messages are properly formatted and contain [`Signed-off-by`](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#signed-off-by).\r\n"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "Looks good to me, except I don't like the extra empty line added before `if (err) {`."
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": "This issue was recently resolved by #16782.  Are you still seeing this with this patch applied?"
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "Here's an example: https://github.com/openzfs/zfs/actions/runs/11938548960/job/33284373903 - it's (barely) visible in vm1 serial console log"
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "> This issue was recently resolved by #16782. Are you still seeing this with this patch applied?\r\n\r\nI'm going to force push the other three PRs I have open rebased on current master to re-check, I've seen this but thought this might be something separate so I didn't re-validate whether it fixes it, so let's find out :)"
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "Pushed, so in ~3hrs we'll know :)"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "I agree with Brian that I should have fixed one of the case.  Related to this change I think instead of ignoring the messages we should assert it, otherwise it is very difficult to diagnose it.  The logging is only a symptom."
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "> I agree with Brian that I should have fixed one of the case. Related to this change I think instead of ignoring the messages we should assert it, otherwise it is very difficult to diagnose it. The logging is only a symptom.\r\n\r\nGood idea, I'll let the tests in the other PRs finish and redo this one to VERIFY or an ASSERT, which one fits better?"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "> Good idea, I'll let the tests in the other PRs finish and redo this one to VERIFY or an ASSERT, which one fits better?\r\n\r\nI'd say ASSERT() + ignore, since it should not be fatal for production, but would be good to catch on debug. BTW, logging the message in the panic was really helpful for diagnostics."
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "> BTW, logging the message in the panic was really helpful for diagnostics.\r\n\r\nSo maybe no change would be for the best here? :)"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "> > BTW, logging the message in the panic was really helpful for diagnostics.\r\n> \r\n> So maybe no change would be for the best here? :)\r\n\r\nI meant using `ASSERT3UF()` just when the logging is requested, including the message text, instead of useless panic when it is applied much later.  That is how I actually diagnosed the L2ARC issue:\r\n```\r\n@@ -535,6 +536,7 @@ log_internal(nvlist_t *nvl, const char *operation, spa_t *spa,\r\n        fnvlist_add_uint64(nvl, ZPOOL_HIST_TXG, tx->tx_txg);\r\n        fnvlist_add_uint64(nvl, ZPOOL_HIST_TIME, gethrestime_sec());\r\n \r\n+       VERIFY3UF(tx->tx_txg, <=, spa_final_dirty_txg(spa), \"%s %s\", operation, fmt);\r\n        if (dmu_tx_is_syncing(tx)) {\r\n                spa_history_log_sync(nvl, tx);\r\n        } else {\r\n```\r\nI am not saying the patch is correct, but it was helpful."
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "@amotin I think the change as you've made makes sense, there doesn't seem to be anything left to figure out, so I'd say the change is yours, would you mind if I mark you as an author? Maybe I'd just change the format to include what's going on, like `\"Logged after final txg was set: %s %s\"`"
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "(forgot to change it into an actual assert, that's why the second push)"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "There is another entrance to `spa_history_log_sync()` via `spa_history_log_nvl()`, where I haven't looked deep how to log the message."
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "Right, how about I just duplicate the assert in `spa_history_log_nvl` then?\r\n\r\nDidn't know I could expect more logging paths, but they seem to have in common that they call `spa_history_log_sync`, so grepping for that it seems it's exactly these two paths and that's it, right?\r\n"
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "oh oops I'll remove it"
    },
    {
        "author": {
            "login": "snajpa"
        },
        "body": "Funny, I can't use the 3UF assertion in a way I could with printf, the varargs are required it seems... can't seem to find any variant that would take str without VA? So I'll do it this dumber way :D"
    }
]