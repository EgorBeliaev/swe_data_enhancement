[
    {
        "title": "Update pin_user_pages() calls for Direct I/O"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Originally #16856 updated Linux Direct I/O requests to use the new pin_user_pages API. However, it was an oversight that this PR only handled iov_iter's of type ITER_IOVEC and ITER_UBUF. Other iov_iter types may try and use the pin_user_pages API if it is available. This can lead to panics as the iov_iter is not being iterated over correctly in zfs_uio_pin_user_pages().\r\n\r\nUnfortunately, generic iov_iter API's that call pin_user_page_fast() are protected as GPL only. Rather than update zfs_uio_pin_user_pages() to account for all iov_iter types, we can simply just call zfs_uio_get_dio_page_iov_iter() if the iov_iter type is not ITER_IOVEC or ITER_UBUF. zfs_uio_get_dio_page_iov_iter() calls the iov_iter_get_pages() calls that can handle any iov_iter type.\r\n\r\nIn the future it might be worth using the exposed iov_iter iterator functions that are included in the header iov_iter.h since v6.7. These functions allow for any iov_iter type to be iterated over and advanced while applying a step function during iteration. This could possibly be leveraged in zfs_uio_pin_user_pages().\r\n\r\nA new ZFS test case was added to test that a ITER_BVEC is handled correctly using this new code path. This test case was provided though issue #16956.\r\n\r\nSigned-off-by: Brian Atkinson <batkinson@lanl.gov>\r\nCloses #16956\r\n\r\n<!--- Please fill out the following template, which will help other contributors review your Pull Request. -->\r\n\r\n<!--- Provide a general summary of your changes in the Title above -->\r\nUpdated when to use `pin_user_pages_unlocked()` based on the `iov_iter` type.\r\n<!---\r\nDocumentation on ZFS Buildbot options can be found at\r\nhttps://openzfs.github.io/openzfs-docs/Developer%20Resources/Buildbot%20Options.html\r\n-->\r\n\r\n### Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->00\r\nIt resolves a kernel panic that can occur in `zfs_uio_pin_user_pages()` when trying to iterate over a `struct iov_iter` t    hat is not a `ITER_IOVEC` or `ITER_UBUF`.\r\n<!--- If it fixes an open issue, please link to the issue here. -->\r\nFixes issue #16956.\r\n\r\n### Description\r\n<!--- Describe your changes in detail -->\r\nUpdated the check in `zfs_uio_get_dio_pages_alloc()` to only call ` zfs_uio_pin_user_pages()` if the `iov_iter` type is `ITER_IOVEC` or `ITER_UBUF`. These two types are the only `iov_iter` types taken into account for iterating in `zfs_uio_pin_user_pages()`. While we could manually code in other `iov_iter` types to iterate over them, that seems ripe for error in the future if the kernel introduces another `struct iov_iter` type in the future. Added `boolean_t` variable called `pinned` to `zfs_uio_dio_t` to signal whether `pin_user_pages_unlocked()` was used for pages for Direct I/O. \r\n\r\nDue to this update, I did have to add back the check for `iov_iter_get_pages2()` in the config checks. This will still need to used in kernels >= v6.0 if we need to call `zfs_uio_get_dio_pages_iov_iter()`.\r\n\r\nA ZTS test case `dio_loopback_dev` was added that uses the test that caused a kernel panic in #16956.\r\n\r\n### How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your changes. -->\r\nTested by running the direct ZTS tests on:\r\n\r\n1. 4.18.0-240.15.1.el8_3.x86_64 -> pin_user_pages_unlocked() not available, iter_is_ubuf() not available\r\n2. 4.18.0-553.6.1.el8.x86_64 -> pin_user_pages_unlocked() available, iter_is_ubuf() not available\r\n3. 6.5.12-100.fc37.x86_64 -> pin_user_pages_unlocked() available, iter_is_ubuf() available\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc. -->\r\n<!--- If your change is a performance enhancement, please provide benchmarks here. -->\r\n<!--- Please think about using the draft PR feature if appropriate -->\r\n\r\n### Types of changes\r\n<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Performance enhancement (non-breaking change which improves efficiency)\r\n- [ ] Code cleanup (non-breaking change which makes code smaller or more readable)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Library ABI change (libzfs, libzfs\\_core, libnvpair, libuutil and libzfsbootenv)\r\n- [ ] Documentation (a change to man pages or other documentation)\r\n\r\n### Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the OpenZFS [code style requirements](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#coding-conventions).\r\n- [ ] I have updated the documentation accordingly.\r\n- [x] I have read the [**contributing** document](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md).\r\n- [x] I have added [tests](https://github.com/openzfs/zfs/tree/master/tests) to cover my changes.\r\n- [ ] I have run the ZFS Test Suite with this change applied.\r\n- [x] All commit messages are properly formatted and contain [`Signed-off-by`](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#signed-off-by).\r\n"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "bwatkinson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "bwatkinson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "As much as I understand that code I have no objections, just few cosmetic comments."
    },
    {
        "author": {
            "login": "bwatkinson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "bwatkinson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "bwatkinson"
        },
        "body": ""
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ixhamza"
        },
        "body": ""
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": "Makes sense.  Thanks for running this down!"
    },
    {
        "data": {
            "repository": {
                "issue": {
                    "title": "Creating a loop device over ZFS file system causes NULL pointer exception when direct=always is set",
                    "body": "<!-- Please fill out the following template, which will help other contributors address your issue. -->\n\n<!--\nThank you for reporting an issue.\n\n*IMPORTANT* - Please check our issue tracker before opening a new issue.\nAdditional valuable information can be found in the OpenZFS documentation\nand mailing list archives.\n\nPlease fill in as much of the template as possible.\n-->\n\n### System information\n<!--  add version after \"|\" character -->\nType | Version/Name\n --- | ---\nDistribution Name\t| Ubuntu 24.04.1 LTS\nDistribution Version\t| 24.04\nKernel Version\t|  6.8.0-51-generic\nArchitecture\t| x86_64\nOpenZFS Version\t| zfs-2.3.0-1\n<!--\nCommand to find OpenZFS version:\nzfs version\n\nCommands to find kernel version:\nuname -r\t\t# Linux\nfreebsd-version -r\t# FreeBSD\n-->\n\n### Describe the problem you're observing\nAs the title states, creating a loop device over a ZFS file system with `direct=always` set causes a `NULL` pointer dereference in the kernel. Alternatively, setting `direct=always` just after the loop device is created and then reading a single page also triggers a kernel panic.\n**Note:** Reproducible on 5.15, and 6.12 kernel as well. \n\n### Describe how to reproduce the problem\n```\nsudo truncate -s 2G /tmp/f1\nsudo rm -rf /mnt/tank\nsudo zpool create tank /tmp/f1 -O mountpoint=/mnt/tank -O direct=always\nsudo truncate -s 1G /mnt/tank/temp_file\nsudo losetup /dev/loop19 /mnt/tank/temp_file\n```\nAlternatively,\n```\nsudo truncate -s 2G /tmp/f1\nsudo rm -rf /mnt/tank\nsudo zpool create tank /tmp/f1 -O mountpoint=/mnt/tank\nsudo truncate -s 1G /mnt/tank/temp_file\nsudo losetup /dev/loop19 /mnt/tank/temp_file\nsudo zfs set  direct=always tank\nsudo dd if=/dev/loop19 bs=4k count=1\n```\n\n### Include any warning/errors/backtraces from the system logs\n<!--\n*IMPORTANT* - Please mark logs and text output from terminal commands\nor else Github will not display them correctly.\nAn example is provided below.\n\nExample:\n```\nthis is an example how log text should be marked (wrap it with ```)\n```\n-->\n```\n[  867.662333] BUG: kernel NULL pointer dereference, address: 00000000000000b0\n[  867.662354] #PF: supervisor write access in kernel mode\n[  867.662361] #PF: error_code(0x0002) - not-present page\n[  867.662367] PGD 2c548b067 P4D 2c548b067 PUD 0 \n[  867.662380] Oops: 0002 [#1] PREEMPT SMP NOPTI\n[  867.662389] CPU: 16 PID: 351 Comm: kworker/u40:7 Tainted: P           OE      6.8.0-51-generic #52-Ubuntu\n[  867.662399] Hardware name: Micro-Star International Co., Ltd. MS-7D96/MAG B760 TOMAHAWK WIFI DDR4 (MS-7D96), BIOS 1.70 10/26/2023\n[  867.662405] Workqueue: loop19 loop_rootcg_workfn\n[  867.662421] RIP: 0010:down_read_killable+0x1e/0xe0\n[  867.662437] Code: 90 90 90 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 55 48 89 e5 53 48 89 fb e8 2e c0 ff ff 65 ff 05 df f2 9e 65 be 00 01 00 00 <f0> 48 0f c1 33 48 81 c6 00 01 00 00 78 65 48 b8 07 00 00 00 00 00\n[  867.662445] RSP: 0018:ffffade5c086f9f8 EFLAGS: 00010282\n[  867.662452] RAX: 0000000000000000 RBX: 00000000000000b0 RCX: 0000000000290001\n[  867.662458] RDX: 0000000000000000 RSI: 0000000000000100 RDI: 0000000000000000\n[  867.662463] RBP: ffffade5c086fa00 R08: 00000000000000b0 R09: 0000000000290001\n[  867.662468] R10: ffff9467db256700 R11: 0000000000000001 R12: 0000000000000000\n[  867.662473] R13: ffffade5c086faa4 R14: 0000000000000000 R15: ffffade5c086fd28\n[  867.662478] FS:  0000000000000000(0000) GS:ffff946f1f600000(0000) knlGS:0000000000000000\n[  867.662485] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  867.662490] CR2: 00000000000000b0 CR3: 0000000269352004 CR4: 0000000000f70ef0\n[  867.662496] PKRU: 55555554\n[  867.662500] Call Trace:\n[  867.662505]  <TASK>\n[  867.662515]  ? show_regs+0x6d/0x80\n[  867.662528]  ? __die+0x24/0x80\n[  867.662536]  ? page_fault_oops+0x99/0x1b0\n[  867.662548]  ? do_user_addr_fault+0x2e9/0x670\n[  867.662557]  ? exc_page_fault+0x83/0x1b0\n[  867.662567]  ? asm_exc_page_fault+0x27/0x30\n[  867.662582]  ? down_read_killable+0x1e/0xe0\n[  867.662592]  ? down_read_killable+0x12/0xe0\n[  867.662602]  __gup_longterm_locked+0x46e/0x980\n[  867.662620]  ? spl_kvmalloc+0x7a/0xb0 [spl]\n[  867.662663]  pin_user_pages_unlocked+0x7a/0xc0\n[  867.662677]  zfs_uio_get_dio_pages_alloc+0xc7/0x270 [zfs]\n[  867.663332]  zfs_setup_direct+0xda/0x180 [zfs]\n[  867.663993]  zfs_read+0x153/0x610 [zfs]\n[  867.664705]  zpl_iter_read+0xfd/0x1b0 [zfs]\n[  867.665360]  do_iter_readv_writev+0x196/0x1d0\n[  867.665377]  vfs_iter_read+0xac/0x150\n[  867.665384]  lo_read_simple+0x11d/0x1f0\n[  867.665395]  do_req_filebacked+0x196/0x1a0\n[  867.665404]  loop_process_work+0xb9/0x3a0\n[  867.665413]  loop_rootcg_workfn+0x1b/0x30\n[  867.665420]  process_one_work+0x175/0x350\n[  867.665434]  worker_thread+0x306/0x440\n[  867.665446]  ? __pfx_worker_thread+0x10/0x10\n[  867.665457]  kthread+0xef/0x120\n[  867.665467]  ? __pfx_kthread+0x10/0x10\n[  867.665476]  ret_from_fork+0x44/0x70\n[  867.665485]  ? __pfx_kthread+0x10/0x10\n[  867.665494]  ret_from_fork_asm+0x1b/0x30\n[  867.665507]  </TASK>\n```\n",
                    "state": "CLOSED",
                    "comments": {
                        "nodes": []
                    }
                }
            }
        }
    }
]