[
    {
        "title": "Improve speculative prefetcher for block cloning"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": " - Issue prescient prefetches for demand indirect blocks after the first one.  It should be quite rare for reads/writes, but much more useful for cloning due to much bigger accesses (up to 1022 blocks, while default 32KB indirect block stores only 256 pointers).  It covers the gap during the first couple accesses when we can not speculate yet, but we know what is needed right now.  It reduces dbuf_hold() sync read delays in dmu_buf_hold_array_by_dnode().\r\n - Increase maximum prefetch distance for indirect blocks from 64 to 128MB.  It should cover the maximum 1022 blocks of block cloning access size in case of default 128KB recordsize used.  In case of bigger recordsize the above prescient prefetch should also help.  Indirects for 128MB take only 128KB (and even less with compression), so it should not cost us much.\r\n\r\n### How Has This Been Tested?\r\nTo simulate the worst possible scenario I created HDD pool with 200 files of 2048 block each, wiped their indirects from ARC and disk caches and cloned them.  This patch reduced time needed to complete the cloning in half, from 9 to 4.5 seconds.  Stats show that 63% of the issued prescient reads complete before demand, and other 37% while already in progress.\r\n\r\n### Types of changes\r\n<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [x] Performance enhancement (non-breaking change which improves efficiency)\r\n- [ ] Code cleanup (non-breaking change which makes code smaller or more readable)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Library ABI change (libzfs, libzfs\\_core, libnvpair, libuutil and libzfsbootenv)\r\n- [ ] Documentation (a change to man pages or other documentation)\r\n\r\n### Checklist:\r\n<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the OpenZFS [code style requirements](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#coding-conventions).\r\n- [ ] I have updated the documentation accordingly.\r\n- [ ] I have read the [**contributing** document](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md).\r\n- [ ] I have added [tests](https://github.com/openzfs/zfs/tree/master/tests) to cover my changes.\r\n- [ ] I have run the ZFS Test Suite with this change applied.\r\n- [x] All commit messages are properly formatted and contain [`Signed-off-by`](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#signed-off-by).\r\n"
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": "This makes good sense to me as a performance optimization. "
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": "@pjd can you take a look."
    }
]