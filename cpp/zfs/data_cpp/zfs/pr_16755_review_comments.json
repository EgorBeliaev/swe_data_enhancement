[
    {
        "title": "zdb: show dedup table and log attributes"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "_[Sponsors: Klara, Inc., Wasabi Technology, Inc.]_\r\n\r\n### Motivation and Context\r\n\r\nCommenting on #16752, and realised we didn't have a way to definitely show what kind dedup options are in place.\r\n\r\n### Description\r\n\r\nExtends `dump_ddt()` to show container config (version, flags) and log flags and other info. A bit more lowlevel detail as befits a debugger.\r\n\r\n```\r\n$ zdb -D tank\r\nDDT-blake3: version=1 [FDT]; flags=0x03 [FLAT LOG]; rootobj=65\r\nDDT-blake3-zap-duplicate: dspace=0xa3400; mspace=0x88000; entries=1888\r\nDDT-blake3-zap-unique: dspace=0x121800; mspace=0x108000; entries=2968\r\nDDT-log-blake3-0: flags=0x01 [FLUSHING]; obj=66; len=0x0; txg=649; entries=0\r\nDDT-log-blake3-1: flags=0x00; obj=67; len=0x160000; txg=657; entries=360\r\n```\r\n\r\n```\r\n$ zdb -D tank\r\nDDT-blake3: version=0 [LEGACY]; flags=0x00; rootobj=1\r\nDDT-blake3-zap-duplicate: dspace=0x6e800; mspace=0x48000; entries=1824\r\nDDT-blake3-zap-unique: dspace=0xba400; mspace=0x88000; entries=2752\r\n```\r\n\r\nGoes on to show the histograms and etc as it did before, so something for everyone.\r\n\r\n### How Has This Been Tested?\r\n\r\nJust eyeballing on various test dedup configs and load generators I have lying around.\r\n\r\n### Types of changes\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Performance enhancement (non-breaking change which improves efficiency)\r\n- [ ] Code cleanup (non-breaking change which makes code smaller or more readable)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Library ABI change (libzfs, libzfs\\_core, libnvpair, libuutil and libzfsbootenv)\r\n- [ ] Documentation (a change to man pages or other documentation)\r\n\r\n### Checklist:\r\n- [x] My code follows the OpenZFS [code style requirements](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#coding-conventions).\r\n- [ ] I have updated the documentation accordingly.\r\n- [x] I have read the [**contributing** document](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md).\r\n- [ ] I have added [tests](https://github.com/openzfs/zfs/tree/master/tests) to cover my changes.\r\n- [ ] I have run the ZFS Test Suite with this change applied.\r\n- [x] All commit messages are properly formatted and contain [`Signed-off-by`](https://github.com/openzfs/zfs/blob/master/.github/CONTRIBUTING.md#signed-off-by).\r\n"
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "robn"
        },
        "body": ""
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "As was told in other thread, len, dspace and mspace should still better be decimal."
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "This makes me wish we had some 32bit build target."
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": ""
    },
    {
        "author": {
            "login": "behlendorf"
        },
        "body": ""
    },
    {
        "author": {
            "login": "robn"
        },
        "body": "Ok, repushed with decimal bytes. Surprising controversy! :sweat_smile: "
    },
    {
        "author": {
            "login": "robn"
        },
        "body": "istg it drives me mad that user and kernel code have different ideas of what `%lu` and `%llu` are."
    },
    {
        "author": {
            "login": "amotin"
        },
        "body": "> istg it drives me mad that user and kernel code have different ideas of what `%lu` and `%llu` are.\r\n\r\nIs there a place where they don't mean `long unsigned` and `long long unsigned`?"
    },
    {
        "author": {
            "login": "robn"
        },
        "body": "> > istg it drives me mad that user and kernel code have different ideas of what `%lu` and `%llu` are.\r\n> \r\n> Is there a place where they don't mean `long unsigned` and `long long unsigned`?\r\n\r\nFair, my grumble was not very specific. It's more that on Linux (at least), `uint64_t` is `long unsigned int` in the kernel, but `long long unsigned int` in userspace. In shared code, the compiler will complain about both `%lu` and `%llu`, one in the kernel build, one in the user build. That is very annoying, but at least a reminder to add a cast. In userspace-only code, we end up here.\r\n\r\nI keep meaning to find out exactly why `uint64_t` is defined differently.\r\n\r\nI suppose I have no real cause for complaint, `%lu` and `%llu` say what they are, and `PRIu64` is there for exactly this reason. But also that's a hassle to remember to type out, including closing the quotes; the inline `%abc` is much easier. If `-Wformat` would outright reject _any_ use of `%lu` with something that isn't explicitly `long unsigned` (ditto `%llu`) then it'd be fine; I'd quickly train the muscle memory to use `PRIu64`. When the compiler doesn't complain though, I don't notice."
    }
]