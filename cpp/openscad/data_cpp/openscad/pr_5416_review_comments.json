[
    {
        "title": "Add protection/workaround for every possible call to fs::absolute with empty path"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "This addresses a difference in behavior between `boost::filesystem::absolute` and `std::filesystem::absolute` where passing an empty path to boost would return `fs::current_path()`, and the std library now throws a `std::filesystem_error`.\r\n\r\nI don't know if an empty path can even necessarily reach all these calls, but better to just handle the possibility regardless, than wait for another bug report."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "thehans"
        },
        "body": "relevant discussion also in #5413 "
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "One question is whether current_path is even wanted in OpenSCAD as a fallback.\n..but this is safe for now as it reverts to the previous behavior, so further tweaks can be deferred."
    },
    {
        "data": {
            "repository": {
                "issue": null
            }
        },
        "errors": [
            {
                "type": "NOT_FOUND",
                "path": [
                    "repository",
                    "issue"
                ],
                "locations": [
                    {
                        "line": 4,
                        "column": 9
                    }
                ],
                "message": "Could not resolve to an Issue with the number of 5413."
            }
        ]
    }
]