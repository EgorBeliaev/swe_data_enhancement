[
    {
        "title": "PovRay export"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "This patch set adds support for exporting PovRay scripts from OpenSCAD.\r\nNote that it exports triangles, not the original CSG scripting.\r\n\r\nBy default it adds \"radiosity\" to the output-scripts, this makes rendering a tad slow. Fix that by removing:\r\n\r\n     global_settings { photons { count 20000 autostop 0 jitter .4 } radiosity { Rad_Settings(Radiosity_Normal, off, off) } }\r\n\r\nTo render a .pov-script using povray, invoke:\r\n\r\n     povray +Imy_script.pov +W3840 +H2160 +A0.01\r\n\r\nThis renders it at 4k resolution with anti aliasing enabled.\r\n\r\nThere's a crude animation added to it that can be controlled via +K. +K here lets you control the rotation of the camera around the object. This is of course optional.\r\n\r\nTo render such an animation, run e.g.:\r\n\r\n     for i in `seq 0 360` ; do DISPLAY= povray +Irpi3.pov +W3840 +H2160 +A0.01 +k$i +O${i}.png ; done\r\n\r\nto create an mp4 of the result:\r\n\r\n    fmpeg -framerate 25 -i %d.png -c:v libx264 -r 25 -pix_fmt yuv420p output.mp4\r\n\r\nExample animation render: https://vanheusden.com/permshare/openscad-povray-example.mp4\r\nExample POV script: https://vanheusden.com/permshare/openscad-povray-example2.pov\r\nExample PNG render output: https://vanheusden.com/permshare/openscad-povray-example2.png\r\n"
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "Nice, I'm currently rendering a simple animation :tada:.\r\n\r\nI've just added a couple of minor notes for things to check. Also I'm getting 2 warnings from povray. Considering version 3.7 is probably old enough to be a safe target, it would be great if we could address those.\r\n\r\n```\r\nPossible Parse Error: assumed_gamma not specified in this POV-Ray 3.7 or later\r\n scene. Future versions of POV-Ray may consider this a fatal error. To avoid\r\n this warning, explicitly specify 'assumed_gamma 1.0' in the global_settings\r\n section. See the documentation for more details.\r\n```\r\n```\r\nParse Warning: This scene had other declarations preceding the first #version\r\n directive. Please be aware that as of POV-Ray 3.7, unless already specified via\r\n an INI option, a #version is expected as the first declaration in a scene file.\r\n If this is not done, POV-Ray may apply compatibility settings to some features\r\n that are intended to make pre-3.7 scenes render as designed. You are strongly\r\n encouraged to add a #version statement to the scene to make your intent clear.\r\n Future versions of POV-Ray may make the presence of a #version mandatory.\r\n``` "
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Mostly looks good. Added some comments.\r\nAlso, while it's tricky to add graphical tests, we should at the minimum add a sanity check that the export work, similar to how we export a simple object in OFF, OBJ etc. and compare the output against a golden file. ..plus a similar one for color support."
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "I didn't see any bounding box calculation code.\r\nTip: Instead of doing this manually, do `auto bbox = polyset.getBoundingBox()`, and `mybbox.extend(otherbbox)`\r\n\r\nCould you update your code and pov file to show the bad lighting? This sounds like a bug in your code."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "It's getting better!\r\nLet's wire up that test, so that the test files can be compared automatically."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Getting close. I think this is my last batch of comments."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "Very nice result for a really simple script: https://files.openscad.org/tmp/tetris.mp4\r\n\r\nJust moved the camera up a bit.\r\n\r\n```\r\n$fa = 2; $fs = 0.2;\r\n\r\ns1 = 60;\r\ns2 = 80;\r\ns3 = 2;\r\n\r\neps = 0.1;\r\n\r\nmodule block() {\r\n\thull()\r\n\t\tfor (r = [[0, 0, 0], [90, 0, 0], [0, 90, 0]])\r\n\t\t\trotate(r)\r\n\t\t\t\tminkowski() {\r\n\t\t\t\t\tlinear_extrude(s2 - 2 * s3 + 2 * eps, center = true)\r\n\t\t\t\t\t\tsquare(s1, center = true);\r\n\t\t\t\t\tsphere(s3);\r\n\t\t\t\t}\r\n}\r\n\r\nmodule blocks(pos) {\r\n\tfor (p = pos)\r\n\t\ttranslate(s2 * p)\r\n\t\t\tblock();\r\n}\r\n\r\ntranslate(s2 *[-4, -2]) color(\"red\") blocks([[0, 0], [1, 0], [2, 0], [3, 0]]);\r\ntranslate(s2 *[2, 2]) color(\"khaki\") blocks([[0, 0], [1, 0], [0, 1], [1, 1]]);\r\ntranslate(s2 *[1, -2]) color(\"orange\") blocks([[0, 0], [1, 0], [2, 0], [2, 1]]);\r\ntranslate(s2 *[-4, 2]) color(\"green\") blocks([[0, 0], [1, 0], [1, 1], [2, 1]]);\r\ntranslate(s2 *[-1, 0]) color(\"purple\") blocks([[0, 0], [1, 0], [2, 0], [1, 1]]);\r\n```"
    },
    {
        "author": {
            "login": "jordanbrown0"
        },
        "body": "It is indeed very pretty, but I'm confused about where the light source is.  Faces that are close to us (all of the \"outside\" faces as it rotates) are dark, but faces that are further away but facing toward us (the same direction as the \"near\" faces) are lit.  Am I just not interpreting what I'm seeing correctly, or is there something off about the lighting?\r\n![{0AF0D0DA-9944-4856-A02C-5160950B3CD7}](https://github.com/user-attachments/assets/c72dd5a8-ea11-4568-9a8d-4d2e117ffbff)\r\nWhere would the light source be, so that the fronts of the white and yellow blocks are in shadow, but the fronts of the green, purple, and red blocks are lit?"
    },
    {
        "author": {
            "login": "jordanbrown0"
        },
        "body": "Also, it's backwards.  Or up-side down.  Or something.\r\n\r\n![image](https://github.com/user-attachments/assets/bb7ab779-e86f-4356-b503-3084167a77d1)\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": ">\n>\n> I've just added a couple of minor notes for things to check. Also I'm\n> getting 2 warnings from povray. Considering version 3.7 is probably old\n> enough to be a safe target, it would be great if we could address those.\n>\n> Possible Parse Error: assumed_gamma not specified in this POV-Ray 3.7 or later\n>  scene. Future versions of POV-Ray may consider this a fatal error. To avoid\n>  this warning, explicitly specify 'assumed_gamma 1.0' in the global_settings\n>  section. See the documentation for more details.\n>\n> Parse Warning: This scene had other declarations preceding the first #version\n>  directive. Please be aware that as of POV-Ray 3.7, unless already specified via\n>  an INI option, a #version is expected as the first declaration in a scene file.\n>  If this is not done, POV-Ray may apply compatibility settings to some features\n>  that are intended to make pre-3.7 scenes render as designed. You are strongly\n>  encouraged to add a #version statement to the scene to make your intent clear.\n>  Future versions of POV-Ray may make the presence of a #version mandatory.\n>\n>\nOk, fixed!\n\n\n> It should be possible to use std::clamp\n> <https://en.cppreference.com/w/cpp/algorithm/clamp> as we declare c++17\n> compatibility.\n>\ndone\n\n\n> +  output << \"// hello povray!\\n\\n\";\n>\n> Maybe something like \"Generated by OpenSCAD from <source file>\n> <https://github.com/openscad/openscad/blob/dbd7d4f3d93356fedc0cfac1989e2a1e85335de8/src/io/export_pdf.cc#L259>\"\n> instead?\n>\nI'd love to, but where do I get that info from? The name of the source-file\nthat is. Is it in a global parameter block or so?\n\n\n\n> The icons are not yet automatically generated in the build process, they\n> need to be updated via scripts/generate-svg-icons.sh, checked in and\n> added to the Qt resource file\n> https://github.com/openscad/openscad/blob/dbd7d4f3d93356fedc0cfac1989e2a1e85335de8/resources/common.qrc.in#L37\n>\n\ndone\n\n\n> Another place where POV should be added is in the settings for the 3d\n> export toolbar\n> https://github.com/openscad/openscad/blob/dbd7d4f3d93356fedc0cfac1989e2a1e85335de8/src/gui/Settings.cc#L128\n>\n\nI've added it but could not find where it is in the gui. So that's not\ntested.\n\n>\n>\nMessage ID: ***@***.***>\n>\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "The lights are placed arbitrarily. I can add more but my idea is (open for\r\ndiscussion!) that it simply emits the povray code and that the user then\r\ndetermines where the camera should be located as well as the lights. Also\r\nthe radiosity can be optional as it can take quite a while to render with\r\nit.\r\n\r\nOn Sat, Sep 14, 2024 at 4:26\u202fAM Jordan Brown ***@***.***>\r\nwrote:\r\n\r\n> It is indeed very pretty, but I'm confused about where the light source\r\n> is. Faces that are close to us (all of the \"outside\" faces as it rotates)\r\n> are dark, but faces that are further away but facing toward us (the same\r\n> direction as the \"near\" faces) are lit. Am I just not interpreting what I'm\r\n> seeing correctly, or is there something off about the lighting?\r\n> 0AF0D0DA-9944-4856-A02C-5160950B3CD7.png (view on web)\r\n> <https://github.com/user-attachments/assets/c72dd5a8-ea11-4568-9a8d-4d2e117ffbff>\r\n> Where would the light source be, so that the fronts of the white and\r\n> yellow blocks are in shadow, but the fronts of the green, purple, and red\r\n> blocks are lit?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2350791415>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IWYSFRF6MGZJJWOPGPTZWONFBAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNJQG44TCNBRGU>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Try rendering with +K180 then it is rotated to somewhat more correctly.\r\nMaybe the viewpoint of the camera in openscad can be made available for the\r\nexport-code?\r\n\r\nOn Sat, Sep 14, 2024 at 4:31\u202fAM Jordan Brown ***@***.***>\r\nwrote:\r\n\r\n> Also, it's backwards. Or up-side down. Or something.\r\n>\r\n> image.png (view on web)\r\n> <https://github.com/user-attachments/assets/bb7ab779-e86f-4356-b503-3084167a77d1>\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2350793453>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IW4WHY3VJYOJ5WTNUMDZWONYFAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNJQG44TGNBVGM>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "jordanbrown0"
        },
        "body": "WRT lighting - if the results make sense for the lights used, that's fine.  But maybe the default light should match the OpenSCAD light.\n\nWRT rotation, yes, I'm sure you can rotate to match (assuming that it's not a mirroring problem), but again the defaults should match."
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Lighting: but what is the position of the OpenSCAD light?\r\n\r\n\r\nOn Sun, Sep 22, 2024 at 5:40\u202fPM Jordan Brown ***@***.***>\r\nwrote:\r\n\r\n> WRT lighting - if the results make sense for the lights used, that's fine.\r\n> But maybe the default light should match the OpenSCAD light.\r\n>\r\n> WRT rotation, yes, I'm sure you can rotate to match (assuming that it's\r\n> not a mirroring problem), but again the defaults should match.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2366843500>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IWZGHJLG7BCKKV7WT4DZX3QHLAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNRWHA2DGNJQGA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "nophead"
        },
        "body": "The lighting in OpenSCAD is awful. It has two diffuse light diametrically opposed for a trick with OpenCSG. One is above and behind and the other below and in front so objects facing the camera are not well lit."
    },
    {
        "author": {
            "login": "jordanbrown0"
        },
        "body": "https://github.com/openscad/openscad/blob/ea7f4aab937bd61c5c35a3d4b72711c07af34052/src/glview/GLView.cc#L253\r\n```\r\n  GLfloat light_position0[] = {-1.0, +1.0, +1.0, 0.0};\r\n  GLfloat light_position1[] = {+1.0, -1.0, -1.0, 0.0};\r\n```\r\nI don't know beans about OpenGL, but I suspect that's in a -1 to +1 coordinate space.\r\n\r\n(It's not this topic, but I think it might be interesting to have an OpenSCAD module that adds a light with specified parameters at the origin, subject to enclosing transformations.)"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "> WRT rotation, yes, I'm sure you can rotate to match (assuming that it's not a mirroring problem), but again the defaults should match.\r\n\r\nWill look at that.\r\n\r\nIt's really wrong currently:\r\n\r\n```\r\nrotate([90, 0, 0]) translate([15, 0, -5]) linear_extrude(height=5) text(\"right\");\r\nrotate([90, 0, 0]) translate([-25, 0, -5]) linear_extrude(height=5) text(\"left\");\r\nrotate([90, 90, 0]) translate([5, 0, -5]) linear_extrude(height=5) text(\"down\");\r\nrotate([90, 0, 90]) translate([15, 0, -5]) linear_extrude(height=5) text(\"back\");\r\n```\r\n\r\ngives in the OpenSCAD view:\r\n\r\n![image](https://github.com/user-attachments/assets/33bc2511-311c-4be0-913c-d15d12b54a90)\r\n\r\nand in the povray export:\r\n\r\n![image](https://github.com/user-attachments/assets/7bd8a28b-70dd-4457-8a38-7c5c20e0f32d)\r\n"
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "> I'd love to, but where do I get that info from? The name of the source-file that is. Is it in a global parameter block or so?\r\n\r\nPDF export is currently adding the filename to the meta data.\r\nhttps://github.com/openscad/openscad/blob/master/src/io/export_pdf.cc#L260\r\n\r\nThis is contained in `ExportInfo` passed along in `export.cc:exportFile()`."
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "![image](https://github.com/user-attachments/assets/10cf1509-c8c7-47c2-8f64-f752f9317c67)\r\n\r\nhttps://github.com/openscad/openscad/pull/5288\r\n\r\nhttps://github.com/user-attachments/assets/b68311a2-7b8f-42e5-afab-d5f1066e2791\r\n"
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "I'm not sure why the failure happens now, but it seems the root cause is the unity build colliding between Qt and boost. Can you disable this by changing `-DCMAKE_UNITY_BUILD=ON` to `OFF` in\r\n\r\nhttps://github.com/openscad/openscad/blob/master/scripts/github-ci.sh#L34\r\n\r\n"
    },
    {
        "author": {
            "login": "hzeller"
        },
        "body": "Nice!\r\nI successfully rendered some [old project](https://github.com/hzeller/hot-snipper/blob/master/band-cutter-machine.scad ) including transparency, but the pov-output of [another one](https://github.com/hzeller/digi-spherometer/blob/master/frame/frame.scad) could not be parsed by povray  (3.8.0 beta 2) with a message like:\r\n\r\n```\r\nFile 'digi-spherometer/frame/frame.pov' line 83250:\r\n Possible Parse Error: Singular matrix in MInvers.\r\nFatal error in parser: Uncategorized error.\r\n```\r\n\r\nData around there looks like this; maybe the vertices are too close together ? This is certainly a fault of my model, but maybe there are ways to repair that (not in this PR, I am happy to see this landed first).\r\n\r\n```\r\n...\r\npolygon { 4, \r\n<-17, 17.39, 2.50025>, <-17.0002, 17.39, 2.5003>, <-17.0501, 17.39, 2.56089>, <-17, 17.39, 2.50025>\r\ntexture { pigment { color rgbf <0.501961, 0.501961, 0.501961, 0> } }\r\nfinish { MATERIAL } interior { MATERIAL_INT }\r\n}\r\n...\r\n```\r\n\r\n(also cool would be if the camera position `$vpr` was available to the export modules that that the povray export can emit the viewport chosen by the user in the UI or even programmatically by setting `$vpr`. Also something for later, as it looks like it might need to be wired all the way through to `ExportInfo`)."
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": ">\n> Mostly looks good. Added some comments.\n> Also, while it's tricky to add graphical tests, we should at the minimum\n> add a sanity check that the export work, similar to how we export a simple\n> object in OFF, OBJ etc. and compare the output against a golden file.\n> ..plus a similar one for color support.\n>\nI'm not entirely sure where to locate the test-files.\nAm I right that the input should be in openscad/tests/data/scad/pov and the\nresult in openscad/tests/data/scad/pov/ ?\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776293448>:\n>\n> > +      tsd_y += ps->vertices[t.at(i)].y() * ps->vertices[t.at(i)].y();\n> +      tsd_z += ps->vertices[t.at(i)].z() * ps->vertices[t.at(i)].z();\n> +      avg_n++;\n> +    }\n> +    double r = 1.0, g = 1.0, b = 1.0, a = 0.0;\n> +    if (has_color) {\n> +      auto color_index = ps->color_indices[pi];\n> +      if (color_index >= 0) {\n> +        auto color = ps->colors[color_index];\n> +        r = std::clamp(double(color[0]), 0., 1.);\n> +        g = std::clamp(double(color[1]), 0., 1.);\n> +        b = std::clamp(double(color[2]), 0., 1.);\n> +        a = std::clamp(1.0 - color[3], 0., 1.);\n> +      }\n> +    }\n> +    if (r == 0 && g == 0 && b == 0)  // work around for black objects in 5185\n>\n> Is this a workaround for #5216\n> <https://github.com/openscad/openscad/issues/5216> ? If so, I suggest\n> leaving it unfixed and add a test case.\n>\nI did the clamping as other code was doing it as well. I've removed it now.\nNote that the black-test is there because some example .scad files I saw\nuse the color black for objects. That's hard to see when rendered :-)\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776294513>:\n>\n> > +  output << \"global_settings { assumed_gamma 1.0 }\\n\";\n> +  output << \"#declare MATERIAL=finish { specular 0.5 roughness 0.001 reflection{0 0.63 fresnel} ambient 0 diffuse 0.6 conserve_energy }\\n\";\n> +  output << \"#declare MATERIAL_INT=interior{ior 1.32}\\n\";\n> +\n> +  auto has_color = !ps->color_indices.empty();\n> +\n> +  double avg_x = 0;\n> +  double avg_y = 0;\n> +  double avg_z = 0;\n> +  double tsd_x = 0;\n> +  double tsd_y = 0;\n> +  double tsd_z = 0;\n> +  size_t avg_n = 0;\n> +\n> +  for (size_t pi=0; pi<ps->indices.size(); pi++) {\n> +    const auto &t = ps->indices.at(pi);\n>\n> What is \"t\"? I assume it's short for \"triangle\", but in reality it's a\n> polygon.\n> -> in general, try to use longer variable names, unless it's painfully\n> obvious what the name means, as code is primarily meant for human\n> consumption.\n>\nDone\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776296299>:\n>\n> > +  output << \"global_settings { assumed_gamma 1.0 }\\n\";\n> +  output << \"#declare MATERIAL=finish { specular 0.5 roughness 0.001 reflection{0 0.63 fresnel} ambient 0 diffuse 0.6 conserve_energy }\\n\";\n> +  output << \"#declare MATERIAL_INT=interior{ior 1.32}\\n\";\n> +\n> +  auto has_color = !ps->color_indices.empty();\n> +\n> +  double avg_x = 0;\n> +  double avg_y = 0;\n> +  double avg_z = 0;\n> +  double tsd_x = 0;\n> +  double tsd_y = 0;\n> +  double tsd_z = 0;\n> +  size_t avg_n = 0;\n> +\n> +  for (size_t pi=0; pi<ps->indices.size(); pi++) {\n> +    const auto &t = ps->indices.at(pi);\n>\n> I find it more readable to use [pi] than .at(pi).\n>\nDone\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776298528>:\n>\n> > +      output << \"<\" << ps->vertices[t.at(i)].x() << \", \" << -ps->vertices[t.at(i)].y() << \", \" << ps->vertices[t.at(i)].z() << \">\";\n> +      avg_x += ps->vertices[t.at(i)].x();\n> +      avg_y += -ps->vertices[t.at(i)].y();\n> +      avg_z += ps->vertices[t.at(i)].z();\n> +      tsd_x += ps->vertices[t.at(i)].x() * ps->vertices[t.at(i)].x();\n> +      tsd_y += ps->vertices[t.at(i)].y() * ps->vertices[t.at(i)].y();\n> +      tsd_z += ps->vertices[t.at(i)].z() * ps->vertices[t.at(i)].z();\n>\n> Lots of repetition here and it's easy to miss something.\n> Suggestion:\n>\n> const auto& x = ps->vertices[i].x();\n> const auto& y = -ps->vertices[i].y();\n> const auto& z = ps->vertices[i].z();\n>\n> ..then use x, y an z repeated.\n> ...or some similar construct\n>\nDone\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776298765>:\n>\n> > +\n> +  double avg_x = 0;\n> +  double avg_y = 0;\n> +  double avg_z = 0;\n> +  double tsd_x = 0;\n> +  double tsd_y = 0;\n> +  double tsd_z = 0;\n> +  size_t avg_n = 0;\n> +\n> +  for (size_t pi=0; pi<ps->indices.size(); pi++) {\n> +    const auto &t = ps->indices.at(pi);\n> +    output << \"polygon { \" << t.size() + 1 << \", \\n\";\n> +    for (size_t i=0; i<t.size(); i++) {\n> +      if (i)\n> +        output << \", \";\n> +      output << \"<\" << ps->vertices[t.at(i)].x() << \", \" << -ps->vertices[t.at(i)].y() << \", \" << ps->vertices[t.at(i)].z() << \">\";\n>\n> The negated y axis is a bit surprising here. Does PovRay use a left-handed\n> coordinate system? This is worth a comment.\n>\nI've changed the camera output now to use the coordinate system of\nOpenSCAD. So the negating is removed now.\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776301083>:\n>\n> > +  for (size_t pi=0; pi<ps->indices.size(); pi++) {\n> +    const auto &t = ps->indices.at(pi);\n> +    output << \"polygon { \" << t.size() + 1 << \", \\n\";\n> +    for (size_t i=0; i<t.size(); i++) {\n> +      if (i)\n> +        output << \", \";\n> +      output << \"<\" << ps->vertices[t.at(i)].x() << \", \" << -ps->vertices[t.at(i)].y() << \", \" << ps->vertices[t.at(i)].z() << \">\";\n> +      avg_x += ps->vertices[t.at(i)].x();\n> +      avg_y += -ps->vertices[t.at(i)].y();\n> +      avg_z += ps->vertices[t.at(i)].z();\n> +      tsd_x += ps->vertices[t.at(i)].x() * ps->vertices[t.at(i)].x();\n> +      tsd_y += ps->vertices[t.at(i)].y() * ps->vertices[t.at(i)].y();\n> +      tsd_z += ps->vertices[t.at(i)].z() * ps->vertices[t.at(i)].z();\n> +      avg_n++;\n> +    }\n> +    double r = 1.0, g = 1.0, b = 1.0, a = 0.0;\n>\n> Why double? Should be fine to keep it as float as you're not trying to do\n> any calculations needing more precision here\n>\nDone.\n\n(I tend to use double where possible as on some platforms double is faster\nthan float)\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776301296>:\n>\n> > +  double center_z = avg_z / avg_n;\n> +\n> +  double sd_x = sqrt(tsd_x / avg_n - pow(center_x, 2.));\n> +  double sd_y = sqrt(tsd_y / avg_n - pow(center_y, 2.));\n> +  double sd_z = sqrt(tsd_z / avg_n - pow(center_z, 2.));\n> +  double dist = pow(sd_x * sd_x + sd_y * sd_y + sd_z * sd_z, 1/3.);\n> +\n> +  double l_x = center_x + sd_x * 5;  // '5' is chosen arbitrarily\n> +  double l_y = center_y + sd_y * 5;\n> +  double l_z = center_z + sd_z * 5;\n> +\n> +  std::vector<double> lx { -l_x, 0, +l_x };\n> +  std::vector<double> ly { -l_y, 0, +l_y };\n> +  std::vector<double> lz { -l_z, 0, +l_z };\n> +\n> +  constexpr const double brightness = 0.2;  // 1.0 is way too bright\n>\n> const is redundant\n>\nIndeed! Today I learned :-)\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776309292>:\n>\n> > +  double l_z = center_z + sd_z * 5;\n> +\n> +  std::vector<double> lx { -l_x, 0, +l_x };\n> +  std::vector<double> ly { -l_y, 0, +l_y };\n> +  std::vector<double> lz { -l_z, 0, +l_z };\n> +\n> +  constexpr const double brightness = 0.2;  // 1.0 is way too bright\n> +\n> +  for(auto cur_lx: lx) {\n> +\t  for(auto cur_ly: ly) {\n> +\t\t  for(auto cur_lz: lz)\n> +\t\t\t  output << \"light_source { <\" << cur_lx << \", \" << cur_ly << \", \" << cur_lz << \"> color rgb <\" << brightness << \", \" << brightness << \", \" << brightness << \"> }\\n\";\n> +\t  }\n> +  }\n> +\n> +  output << \"camera { look_at <0, 0, 0> location <0, \" << dist * 15 << \", 0> sky <0, 0, 1> rotate <55, clock * 3, clock - 25> }\\n\";\n>\n> How does your example have a real value for look_at, while it's hard-coded\n> to 0,0,0 here?\n>\nBecause initially I did not realise most (all?) drawings are centered at\n0,0,0 in OpenSCAD. I did a conversion earlier for other formats and there\nit worked better to calculate a camera position.\nBut after a bit of experimenting I noticed that for O-S, 0,0,0 works better\n(together with the dist vector and the rotation)\n\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1776309909>:\n>\n> > +  double center_x = avg_x / avg_n;\n> +  double center_y = avg_y / avg_n;\n> +  double center_z = avg_z / avg_n;\n> +\n> +  double sd_x = sqrt(tsd_x / avg_n - pow(center_x, 2.));\n> +  double sd_y = sqrt(tsd_y / avg_n - pow(center_y, 2.));\n> +  double sd_z = sqrt(tsd_z / avg_n - pow(center_z, 2.));\n> +  double dist = pow(sd_x * sd_x + sd_y * sd_y + sd_z * sd_z, 1/3.);\n> +\n> +  double l_x = center_x + sd_x * 5;  // '5' is chosen arbitrarily\n> +  double l_y = center_y + sd_y * 5;\n> +  double l_z = center_z + sd_z * 5;\n>\n> I have a hard time understanding what's going on here. Are you on purpose\n> trying to find the center of gravity and average distance from that center?\n> It kind of feels like you might be better off working with bounding boxes\n> or bounding spheres.\n>\nThat's exactly what I'm doing there, finding the gravity/distance.\nWith bounding boxes/spheres I also need to add some arbitrary distance to\neach point to make the lighting \"work\" I think or else light_sources may\nend up in the \"material\" (unless I misunderstood).\n\nMessage ID: ***@***.***>\n>\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Hi,\n\nNice!\n> I successfully rendered some old project\n> <https://github.com/hzeller/hot-snipper/blob/master/band-cutter-machine.scad>\n> including transparency, but the pov-output of another one\n> <https://github.com/hzeller/digi-spherometer/blob/master/frame/frame.scad>\n> could not be parsed by povray (3.8.0 beta 2) with a message like:\n>\n> File 'digi-spherometer/frame/frame.pov' line 83250:\n>  Possible Parse Error: Singular matrix in MInvers.\n> Fatal error in parser: Uncategorized error.\n>\n>\nCan this be a regression in povray 3.8.0 beta 2 instead?\nBecause 3.7.0.10.unofficial (unofficial: ubuntu build) runs fine with it:\nhttps://vanheusden.com/permshare/spherometer_frame_main_block-povray.tar.xz\n\n> Message ID: ***@***.***>\n>\n"
    },
    {
        "author": {
            "login": "hzeller"
        },
        "body": "I could render that part you posted (main_block) with 3.8.\r\nThe issue I saw was when exporting the whole assembly as *.pov\r\n\r\n[spherometer-assembly.pov.tar.gz](https://github.com/user-attachments/files/17144236/spherometer-assembly.pov.tar.gz)\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "That file you included runs fine with 3.7 as well.\r\n\r\nOn Thu, Sep 26, 2024 at 9:01\u202fAM Henner Zeller ***@***.***>\r\nwrote:\r\n\r\n> I could render that part you posted (main_block) with 3.8.\r\n> The issue I saw was when exporting the whole assembly as *.pov\r\n>\r\n> spherometer-assembly.pov.tar.gz\r\n> <https://github.com/user-attachments/files/17144236/spherometer-assembly.pov.tar.gz>\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2376092894>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IW4BIGTDNXIGKTKZ5HDZYOWKPAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZWGA4TEOBZGQ>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "hzeller"
        },
        "body": "That file you included runs fine with 3.7 as well.\n\n\nAlright, cool, will dig into the sources of povray to see what is happening\nthere.\n\n\n>\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "f.w.i.w.: povray 3.8 741b6f8771b8bdbd27bd4996417220128b74fce7 fails\r\ndifferently:\r\n\r\nFile '../spherometer_frame_main_block.pov' line 36365: Parse Error: Viewing\r\n angle has to be smaller than 180 degrees.\r\n\r\nThat's with\r\ncamera { look_at <0, 0, 0> location <0, -124.945, 0> up <0, 0, 1> right <1,\r\n0, 0> sky <0, 0, 1> rotate <125, 0, 25> }\r\n\r\nIf you like, we can take the povray discussion to somewhere else?\r\n\r\n\r\nOn Thu, Sep 26, 2024 at 9:14\u202fAM Henner Zeller ***@***.***>\r\nwrote:\r\n\r\n> That file you included runs fine with 3.7 as well.\r\n>\r\n>\r\n> Alright, cool, will dig into the sources of povray to see what is happening\r\n> there.\r\n>\r\n>\r\n> >\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2376117002>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IW32C34AO3DQZRBOURTZYOX5ZAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZWGEYTOMBQGI>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "In terms of tests, what I meant was adding an automated test using the smallest example possible. For an example, see:\r\nhttps://github.com/openscad/openscad/blob/master/tests/data/scad/obj/obj-export.scad\r\nhttps://github.com/openscad/openscad/blob/master/tests/regression/objexport/obj-export-expected.obj\r\n\r\nWired up like this:\r\nhttps://github.com/openscad/openscad/blob/master/tests/CMakeLists.txt#L1134\r\n\r\nThe -expected file is auto-generated by setting TEST_GENERATE=1 as discussed here:\r\nhttps://github.com/openscad/openscad/blob/master/doc/testing.txt\r\n\r\nIf you struggle with this, we can probably lend you a hand once the rest of the PR is good to go.\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "> Because initially I did not realise most (all?) drawings are centered at\r\n0,0,0 in OpenSCAD. I did a conversion earlier for other formats and there\r\nit worked better to calculate a camera position.\r\nBut after a bit of experimenting I noticed that for O-S, 0,0,0 works better\r\n(together with the dist vector and the rotation)\r\n\r\nCentering in the origin is a design decision and not something OpenSCAD does. For generating a default view, I would suggest choosing an (arbitrary?) view angle and pointing to the center of the bounding box as a start.\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "> That's exactly what I'm doing there, finding the gravity/distance.\r\nWith bounding boxes/spheres I also need to add some arbitrary distance to\r\neach point to make the lighting \"work\" I think or else light_sources may\r\nend up in the \"material\" (unless I misunderstood).\r\n\r\nNot sure I understand. Today you have to introduce the (arbitrary) scale factor of 5 since you operate on _average_ vertex distance from the center of gravity. If you instead calculate a bounding box, you know exactly where the center of your object is and exactly how far you need to place the lights to not interfere with the geometry. Then you can place lights at some distance away from the object (e.g. measured relative to the object extents).\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "I've now calculated the boundingbox. Then I point the camera to its center\r\nand moved to \"x1 + (x2 - x1) * distance\" with distance being 1.5.\r\nUnfortunately that gives problems with the lighting.\r\n\r\n![tetris](https://github.com/user-attachments/assets/2f19ea4c-3d9c-4990-8544-919bc39ae9b4)\r\n\r\n\r\n> This crates 27 light sources. Not sure I understand the reasoning behind\r\nthis? Are you just trying to sprinkle light everywhere so that no internal\r\npart of the object is in shadows?\r\n\r\nThat's correct. Now there again are 27 light sources but their placement is\r\nnot ideal. e.g.:\r\n\r\n![tetris](https://github.com/user-attachments/assets/9fba9eed-db40-45a5-ab14-5821c285e100)\r\n\r\n\r\nSo I would *suggest* that we *do *use the boundingbox, but only for camera\r\nplacement. And keep the other code for lighting.\r\nDo you agree?\r\n\r\n\r\n\r\n\r\nOn Thu, Sep 26, 2024 at 2:50\u202fPM Marius Kintel ***@***.***>\r\nwrote:\r\n\r\n> Because initially I did not realise most (all?) drawings are centered at\r\n> 0,0,0 in OpenSCAD. I did a conversion earlier for other formats and there\r\n> it worked better to calculate a camera position.\r\n> But after a bit of experimenting I noticed that for O-S, 0,0,0 works better\r\n> (together with the dist vector and the rotation)\r\n>\r\n> Centering in the origin is a design decision and not something OpenSCAD\r\n> does. For generating a default view, I would suggest choosing an\r\n> (arbitrary?) view angle and pointing to the center of the bounding box as a\r\n> start.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2376864110>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IWYCK3NO7JUQ5ODF5Y3ZYP7J7AVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZWHA3DIMJRGA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "On Fri, Sep 27, 2024 at 4:26\u202fPM Marius Kintel ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n>\r\n> I didn't see any bounding box calculation code.\r\n>\r\nI had not committed nor pushed it :-)\r\n\r\n\r\n> Tip: Instead of doing this manually, do auto bbox =\r\n> polyset.getBoundingBox(), and mybbox.extend(otherbbox)\r\n>\r\nOk, replaced it with BoundingBox bbox = geom->getBoundingBox(); now.\r\n\r\n\r\n> Could you update your code and pov file to show the bad lighting? This\r\n> sounds like a bug in your code.\r\n>\r\nI believe I fixed it now.\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1779717553>:\n>\n> > +  std::vector<double> lx { min_x - dx * move_away_factor, 0, max_x + dx * move_away_factor };\n> +  std::vector<double> ly { min_y - dy * move_away_factor, 0, max_y + dy * move_away_factor };\n> +  std::vector<double> lz { min_z - dz * move_away_factor, 0, max_z + dz * move_away_factor };\n> +\n>\n> the zeroes here should probably be the center of the bounding box.\n> FYI: bbox.center().\n>\nOops! yes\n\n\n> ------------------------------\n>\n> In src/io/export_pov.cc\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1779718611>:\n>\n> > +  auto & min_x = bbox.min().x();\n> +  auto & min_y = bbox.min().y();\n> +  auto & min_z = bbox.min().z();\n> +\n> +  auto & max_x = bbox.max().x();\n> +  auto & max_y = bbox.max().y();\n> +  auto & max_z = bbox.max().z();\n> +\n> +  double dx = max_x - min_x;\n> +  double dy = max_y - min_y;\n> +  double dz = max_z - min_z;\n>\n> You could probably reduce the # lines of code by doing bbox.diagonal().\n>\nTried that but I could not reduce the line count by that.\nBecause we probably(?) want a double dx = bbox.diagonal().dx etc as well?\n\n\nThen the testing: I followed the steps from doc/testing.txt and placed an\nscad under ../tests/data/pov/conversion-test.pov\nthen same thing under ../tests/data/scad/pov/conversion-test.scad\nThen I added\nlist(APPEND EXPORT_POV_TEST_FILES ${TEST_SCAD_DIR}/pov/conversion-test.scad)\nadd_cmdline_test(povexport              EXPERIMENTAL OPENSCAD SUFFIX pov\nFILES ${EXPORT_POV_TEST_FILES} ARGS --render --enable=predictible-output)\nto the cmakefile under tests.\n\nBut I'm not sure what to do next. I know how to run the test\n( TEST_GENERATE=1 ctest -R pov ) which runs fine:\n\nrunning '/home/folkert/t/openscad/build/openscad --info' to generate\nsysinfo.txt\nQObject::startTimer: Timers can only be used with threads started with\nQThread\nPost test:/usr/bin/python3\n\"/home/folkert/t/openscad/tests/test_pretty_print.py\"\n--builddir=/home/folkert/t/openscad/build\nTest project /home/folkert/t/openscad/build\n    Start 1712: povexport_conversion-test\n1/1 Test #1712: povexport_conversion-test ........   Passed    0.19 sec\n\nBut how/why/what? Did I just do the right thing?\n\nMessage ID: ***@***.***>\n>\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "I think it's because your `tests/data/pov/conversion-test.pov` file is in the wrong location. Remove that one, and add the one generated when running the test with TEST_GENERATE=1.\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "In terms of # of lines of code; it's not a big deal, but it's because you explode everything manually. I think I'd probably write it smth. like this (not tested, but should be conceptually correct I think):\r\n```\r\nvector<Vector3f> lightExtremes = {\r\n  bbox.min() - 2*bbox.diagonal(),\r\n  bbox.center(),\r\n  box.max + 2*bbox.diagonal(),\r\n};\r\n\r\nfor (int z=0;z<2;z++) {\r\n  for (int y=0;y<2;y++) {\r\n    for (int x=0;x<2;x++) {\r\n      output << lightExtremes[x].x() << lightExtremes[y].y() << lightExtremes[z].z();\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Ok but nothing is generated at all?\r\n\r\n\r\n\r\nOn Sat, Sep 28, 2024 at 8:23\u202fPM Marius Kintel ***@***.***>\r\nwrote:\r\n\r\n> I think it's because your tests/data/pov/conversion-test.pov file is in\r\n> the wrong location. Remove that one, and add the one generated when running\r\n> the test with TEST_GENERATE=1.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2380856360>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IWYDX6J66XCMFMRU453ZY3XYTAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGOBQHA2TMMZWGA>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Oh, the test wasn't added to tests/CMakeLists.txt - I can take a look; adding a new rule can be a bit finicky"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "ok, pushed an example of how to add tests. Added a minimal cube test for now; once we're happy with that, we can add another test that exercises the remaining exporter features (camera position, light position, colors)\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Resolved the conflict, but the test now fails due to your last commit"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "As intended: it tells povray to compensate for the aspect ratio.\r\n\r\nOn Sun, Sep 29, 2024, 16:00 Marius Kintel ***@***.***> wrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n> ------------------------------\r\n>\r\n> In src/io/export_pov.cc\r\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1780052104>:\r\n>\r\n> > @@ -108,7 +108,7 @@ void export_pov(const std::shared_ptr<const Geometry>& geom, std::ostream& outpu\r\n>\r\n>    output << \"camera { look_at <\" << (min_x + max_x) / 2 << \", \" << (min_y + max_y) / 2 << \", \" << (min_z + max_z) / 2 << \"> \"\r\n>  \t  \"location <\" << min_x + dx * move_away_factor << \", \" << min_y - dy * move_away_factor << \", \" << min_z + dz * move_away_factor << \"> \"\r\n> -\t  \"up <0, 0, 1> right <1, 0, 0> sky <0, 0, 1> rotate <-55, clock * 3, clock + 25> }\\n\";\r\n> +\t  \"up <0, 0, 1> right <1, 0, 0> sky <0, 0, 1> rotate <-55, clock * 3, clock + 25> right x*image_width/image_height }\\n\";\r\n>\r\n> You're writing your formula as an explicit string\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#pullrequestreview-2335862827>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IWYDFG6LRQCSYU7L42LZZABVJAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZDGMZVHA3DEOBSG4>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "> As intended: it tells povray to compensate for the aspect ratio.\r\n\r\nWops, it looked like a typo. Could you run `TEST_GENERATE=1 ctest -R pov` and validate that the output is correct and commit the expected file changes?"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": ">\n> Out of curiosity, why are you using individual triangles, when PovRay has a mesh2 object which allows vertices + face indices, including specifying a texture list and index into it per face?\n>\n> I guess it's the same functionality, but the mesh2 approach is meant to\n> produce more compact files.\n>\n>\n> https://wiki.povray.org/content/Documentation:Tutorial_Section_3.1#Mesh_Object\n>\nIt's because I was not sure if each polygon meets the requirements for a\nmesh object.\n\nAlso if people like this pov-export feature, we may want to invest time in\nexporting /before/ the triangle-phase.\n\n\n\n> +    output << \", <\" << ps->vertices[polygon[0]].x() << \", \" << ps->vertices[polygon[0]].y() << \", \" << ps->vertices[polygon[0]].z() << \">\";\n> +    float r = 1.0, g = 1.0, b = 1.0, a = 0.0;\n>\n> Is white a good default, or should we use the color from the current\n> OpenSCAD color scheme?\n>\nThe OpenSCAD yellow may be even better. I've set it to that now.\n\n\n> + if (r == 0 && g == 0 && b == 0) // work around for black objects in 5185\n>\n> This probably still needs addressing.\n>\nI've let it in but removed the \"in 5185\" part of the comment. I left it in\nbecause people may choose to create black objects which would not be\nvisible in povray.\nBut maybe a warning in the log-window is better?\n\n\nregards\n\n> Message ID: ***@***.***>\n>\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Thanks for the fixes! I say keep the black color for now, then I'm good to merge."
    },
    {
        "author": {
            "login": "nophead"
        },
        "body": "Black isn't very useful in OpenSCAD either. I use a very dark grey instead because black nerver reacts to lights. I imagine it is the same in Povray. "
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Ok, removed the check & override\r\n\r\nOn Fri, Oct 4, 2024 at 9:51\u202fPM Marius Kintel ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** commented on this pull request.\r\n> ------------------------------\r\n>\r\n> In src/io/export_pov.cc\r\n> <https://github.com/openscad/openscad/pull/5288#discussion_r1788239401>:\r\n>\r\n> >        }\r\n>      }\r\n> -    if (r == 0 && g == 0 && b == 0)  // work around for black objects in 5185\r\n> +    if (r == 0 && g == 0 && b == 0)  // work around for black objects\r\n>        g = 1.0;\r\n>\r\n> I'd say black objects are useful if you want an object that absorbs light\r\n> with some light object in the background. Ideally we'd support real\r\n> materials, but changing black to green feels like the wrong idea. If black\r\n> is really universally unwanted in PovRay, a warning makes sense.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#pullrequestreview-2349019942>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IW2HWNPYOGJ2TQBARPTZZ3WSNAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZDGNBZGAYTSOJUGI>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "tpimh"
        },
        "body": "This is what I've got on the first try, pretty impressive. Are there any tools that can help to adjust lights and camera?\r\n\r\nhttps://github.com/user-attachments/assets/0dbfeb24-9bca-4bb1-9fe2-377c8a5fe1a3\r\n\r\n"
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Hi,\r\n\r\nThere are sofar no tools other than notepad :-)\r\nIf you open the .pov-file, then you see the lights defined at the bottom\r\n(as well as the camera).\r\nYou can adjust the parameters there. Oh and at the top there's a define\r\nwhich describes the \"material\", also parameters to tweak.\r\n\r\n\r\n\r\n\r\nOn Thu, Oct 17, 2024 at 8:34\u202fAM Dima Pulkinen ***@***.***>\r\nwrote:\r\n\r\n> This is what I've got on the first try, pretty impressive. Are there any\r\n> tools that can help to adjust lights and camera?\r\n>\r\n>\r\n> https://github.com/user-attachments/assets/0dbfeb24-9bca-4bb1-9fe2-377c8a5fe1a3\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2418642777>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IW4RMF4PKX4Z5SUQ5ODZ35K5XAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIMJYGY2DENZXG4>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "tpimh"
        },
        "body": "Thanks for your reply. Just editing the file is what I am doing now, but this is not very convenient as there is no immediate preview. I can probably write a script which would extract the \"camera\" object in OpenSCAD, and patch the exported PovRay file accordingly."
    },
    {
        "author": {
            "login": "folkertvanheusden"
        },
        "body": "Yes for now indeed that would work.\r\nI'm working on something that takes the viewport from openscad and uses\r\nthat in the output.\r\n\r\nOn Thu, Oct 17, 2024 at 10:46\u202fAM Dima Pulkinen ***@***.***>\r\nwrote:\r\n\r\n> Thanks for your reply. Just editing the file is what I am doing now, but\r\n> this is not very convenient as there is no immediate preview. I can\r\n> probably write a script which would extract the \"camera\" object in\r\n> OpenSCAD, and patch the exported PovRay file accordingly.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/openscad/openscad/pull/5288#issuecomment-2418934287>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AUN5IW3FCFAXVT4PALHN7DTZ352OVAVCNFSM6AAAAABN5AGFDOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIMJYHEZTIMRYG4>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n"
    },
    {
        "author": {
            "login": "tpimh"
        },
        "body": "This sounds great! Does it mean the result would be similar to what current PNG export looks like?"
    },
    {
        "author": {
            "login": "jordanbrown0"
        },
        "body": "You might also consider somehow having two files:  one that represents the model, and one that represents \"presentation\" stuff like camera and lights.  The camera/lights file might be entirely static.  Then the user could edit the camera/lights file by hand, without making it difficult to regenerate the model file when the model changes.\r\n\r\nWe should also add some general-purpose markup features that would let the OpenSCAD model supply markup that would be interpreted by the exporter."
    }
]