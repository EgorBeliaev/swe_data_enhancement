[
    {
        "title": "Refactoring: Split openscad_gui.cc from openscad.cc, slimmed down ExportInfo"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "* Split openscad_gui.cc from openscad.cc\r\n* Removed redundant fields from ExportInfo, moved platform specific file-format handling closer to where files are opened\r\n* Added support for writing filename metadata to PDF and POV files in cmd-line mode\r\n* Default filename output for PDF export to false in cmd-line mode, mostly to make testing easier.\r\n\r\nNote: We _could_ output just the filename without path in PDF exports, but I'm uncertain what the actual use-case for this is.\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "@JonMcLin Could you comment on the filename output in PDF feature? Does it work as intended, or could/should we output just the filename?"
    },
    {
        "author": {
            "login": "JonMcLin"
        },
        "body": "That was the previous pattern, and I thought it was good.  This results in the path being saved and restored with each save.   The save dialog will come up in the last location a PDF was saved, and then if changed, that new path becomes the default.   There are certainly other ways this could be implemented, but I replicated what was existing and it certainly worked for my applications.      For command-line usage a different implementation that isolates that may be appropriate, so that persistent path is only relevant to when the dialog is used."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "@JonMcLin I was referring to the feature where the full path of the .scad filename is rendered into the resulting PDF."
    },
    {
        "author": {
            "login": "JonMcLin"
        },
        "body": "Ahhh.  No particular use case for that - but probably a result simply of adding the gui.   Although I used it extensively when I was developing the code - that would point me to the specific design-project folder that had the design I'd printed (I'd have design variants, where the variant info was coded in the path. )   "
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "I'm not yet sure why but this breaks the lookup for the bundled files in AppImages:\r\n\r\nOk:\r\n```\r\n-rwxr-xr-x 1 tp users 52348096 Okt 23 04:45 ./OpenSCAD-2024.10.23.ai20994-x86_64.AppImage\r\n```\r\nError:\r\n```\r\n-rwxr-xr-x 1 tp users 52348096 Okt 24 03:51 ./OpenSCAD-2024.10.24.ai21003-x86_64.AppImage\r\nCould not initialize localization.\r\nError reading examples.json: examples.json: cannot open file\r\n```"
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "Hmm, I think it's caused by moving\r\n```\r\n#ifndef OPENSCAD_NOGUI\r\n#include \"gui/QSettingsCached.h\"\r\n#define OPENSCAD_QTGUI 1\r\n#endif\r\n```\r\n\r\nSo due to OPENSCAD_QTGUI not being defined, it uses the boost based PlatformUtils::registerApplicationPath() and that's not working for AppImages as they start via AppRun:\r\n\r\n```\r\n$ \u00a0./OpenSCAD-2024.10.24.ai21003-x86_64.AppImage --appimage-mount\r\n/tmp/.mount_OpenSCjlunvq\r\n\r\n$ find /tmp/.mount_OpenSCjlunvq -name AppRun -o -name openscad -type f\r\n/tmp/.mount_OpenSCjlunvq/AppRun\r\n/tmp/.mount_OpenSCjlunvq/usr/bin/openscad\r\n```\r\n\r\nRunning `/tmp/.mount_OpenSCjlunvq/usr/bin/openscad` works."
    },
    {
        "author": {
            "login": "t-paul"
        },
        "body": "Added AppImage specific lookup path via #5392. This fixes the AppImage startup.\r\n\r\nI guess we can now decide if we want to fully go with the boost solution or if we find a way of still using the Qt code."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Thanks for finding and fixing! The less Qt in common initialization the better I think. Not sure if there are other hidden corner cases though.."
    }
]