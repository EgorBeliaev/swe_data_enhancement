[
    {
        "title": "Make Design->Check validity support Manifold"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Ref #4825"
    },
    {
        "data": {
            "repository": {
                "issue": {
                    "title": "Make manifold integration release ready",
                    "body": "This is a meta issue collecting everything needed or wanted to be able to make our Manifold integration release ready.\nWe may want to ship with Manifold before all of these issues are addressed, in which case we should split out the unsolved topics into separate issues.\n\n* [x] Integrate Manifold's updated build setup, preparing for Manifold V3: #5434\n* [x] Make CGAL optional (undefine `ENABLE_CGAL`), with severe loss of functionality, as a way of identifying all CGAL code paths: #4840\n* [x] Diagnose and fix convexity issue (#4934)\n* [x] Some manifold objects fail to import into Manifold (#5022)\n* [x] Move manifold out of experimental: #5235\n* [ ] Make Manifold the default backend\n   * [ ] Needs test framework updates.\n   * [ ] Resolve non-manifold conversion failure warnings: #5135\n* [WIP] Support wireframe rendering of Manifold geometries (#2031): Requires some refactoring: #5533 #5530\n* [x] 3MF import: Performs CGAL union of imported objects -> rewrite to Manifold union, potentially write a ticket for adding support for importing a tree (e.g. group node): #5527\n* [x] Go through all code using CGAL and identify why it needs CGAL\n* [x] Polygon2D triangulation: Needs CGAL's constrained delaunay triangulator. Support for Manifold's triangulator is implemented but still disabled by default, see #5164, #5294. PR: #5483\n* [ ] (WIP) Use Manifold for 3D hull(): #5196\n* [ ] Go through all cases where using PolySetBuilder may yield a non-manifold geometry\n   * [x] linear_extrude (#5046)\n   * [ ] rotate_extrude (#5046)\n   * [x] 3MF import: #5527\n   * [ ] TODO: Others?\n* [ ] Go through all code using CGAL and update as much of it as possible to use an alternative in no-CGAL mode\n   * [ ] `minkowski()`:\n      * [ ] Concave objects: Needs convex decomposition\n      * [ ] Convex objects: is_convex() requires CGAL\n      * [x] Some manifold results cannot be processed by CGAL, e.g. #5211\n   * [x] `projection(cut=true)`: Use Manifold's Slice() feature: #5076\n   * [x] `--render=cgal`: Forces usage of Nef3 polyhedrons: #4822\n   * [x] OFF import: File I/O is implemented by CGAL (#4960)\n   * [x] MainWindow::canExport(): Manifold check only implemented in CGAL: #5339\n   * [ ] ManifoldUtils::createManifoldFromPolySet(): Repair functionality requires CGAL features for is_convex and hull\n   * [x] GUI check validity converts to Nef yielding bad results in some cases: #5342\n* [ ] Establish a better caching strategy for partial Manifold results. To meaningfully insert Manifold objects into the cache, we need some sort of resoruce limit, and manifold currently doesn't give us much insight into memory usage. We may want to avoid caching Manifold nodes if feasible, and rather cache PolySets instead: #5485\n* [ ] Look through the 2D backend to make sure it's well understood how it interacts with Manifold\n* [x] Consider moving all our Clipper V1 code to Clipper V2 and use the same Clipper build as Manifold -> #4974\n* [ ] Look into our libtess usage and see if it's possible to use the same tessellator as Manifold\n* [ ] Find a way of running a larger scale test of OpenSCAD with CGAL vs. Manifold backends to attempt to exercise more cases than the test framework currently does (e.g. download some SCAD collections and run against both backends)\n* [x] Make the CGAL and Manifold backends co-exist and add UI + cmd-line features to choose which one to prefer: #5192\n   * [x] Once this in in place, consider which of the items in this list could be split into items not blocking moving Manifold out of experimental\n* [WIP] If feasible, look into whether `CGALRenderer` could be split into separate components for Nef polyhedrons, fast-csg and manifold: #5530\n* [x] If feasible, look into whether `CGALRenderer` could highlight negative regions in a similar way as for Nef polyhedrons, as demoed on https://manifoldcad.org\n* [ ] If feasible, look into whether GeometryEvaluator could be split into separate components for Nef polyhedrons, fast-csg and manifold\n* [x] Color scheme changes after rendering doesn't work for ManifoldGeometry or PolySets, only for Nef Polyhedrons: #5077\n* [x] Make sure Manifold failures and exceptions don't crash the OpenSCAD process: #4824\n* [ ] Tech debt\n    * [ ] We use the following pattern a lot, can we make that more elegant?\n    ```\n      if (const auto geomlist = dynamic_pointer_cast<const GeometryList>(geom)) { ... }\n    #ifdef ENABLE_CGAL\n      else if (const auto N = dynamic_pointer_cast<const CGAL_Nef_polyhedron>(geom)) { ... }\n      else if (const auto hybrid = dynamic_pointer_cast<const CGALHybridPolyhedron>(geom)) { ... }\n    #endif\n    #ifdef ENABLE_MANIFOLD\n      else if (const auto mani = dynamic_pointer_cast<const ManifoldGeometry>(geom)) { ... }\n    #endif\n      else if (const auto ps = dynamic_pointer_cast<const PolySet>(geom)) { ... }\n      else if (dynamic_pointer_cast<const Polygon2d>(geom)) { ... }\n      else { assert(false && \"Not implemented\"); }\n    ```\n",
                    "state": "OPEN",
                    "comments": {
                        "nodes": [
                            {
                                "author": {
                                    "login": "pca006132"
                                },
                                "body": "I think one important missing feature would be minkowski sum. We are not very interested in implementing the convex decomposition algorithm required because we think there are better algorithms for 3D offsetting, but we do accept PRs if anyone is willing to do it."
                            },
                            {
                                "author": {
                                    "login": "kintel"
                                },
                                "body": "Good point about minkowski. A very common use-case for minkowski is indeed 3d offset, but there may be other use-cases for which 3d offset wouldn't suffice. We're kind of committed to supporting minkowski forever, but we could use Manifold for the resulting large union of convex objects (unless we already do that, and the CGAL API gives us easy access to those objects). We also have a special-case already which optimizes the case for which all minkowski operands are convex."
                            },
                            {
                                "author": {
                                    "login": "kintel"
                                },
                                "body": "Updated text to mention minkowski"
                            },
                            {
                                "author": {
                                    "login": "pca006132"
                                },
                                "body": "I think the current minkowski already uses manifold if possible: https://github.com/openscad/openscad/blob/master/src/geometry/manifold/manifold-applyops-minkowski.cc#L196"
                            },
                            {
                                "author": {
                                    "login": "ochafik"
                                },
                                "body": "> I think the current minkowski already uses manifold if possible: https://github.com/openscad/openscad/blob/master/src/geometry/manifold/manifold-applyops-minkowski.cc#L196\r\n\r\nYes it does, and hopefully soon it will also use Manifold's Hull (incubating this [here](https://github.com/openscad/openscad/compare/master...ochafik:openscad:manifold-hull) BTW)\r\n\r\nThe convex decomposition is a tough one. And currently if it fails we also use CGAL's Nef minkowski as a fallback, even when Manifold backend is enabled.\r\n\r\nTBH I wouldn't necessarily make it a strict goal to wean ourselves off of CGAL. We could just progressively restrict its use to what it's still the best at (e.g. use it to [repair](https://github.com/openscad/openscad/compare/master...ochafik:openscad:repair) meshes or for minkowski), and ensure it progressively becomes the exception rather than the rule.\r\n\r\n@kintel To answer your open question from https://github.com/openscad/openscad/pull/4646#event-11018650929, I think it might soon be time to promote Manifold to the default (if only, to increase the amount of feedback / bug reports from users), and decide what should be the fallback behaviour: we could have a `no-manifold` experimental feature that uses fast-csg or Nef, depending which one we think is most preferable / backwards compatible (as a first step we could keep both of course). Maybe the fallback could be a non-experimental flag, so we could ship a release with the two backends if we really fear regressions. In all cases some Nef will remain necessary for minkowski for a while, so if binary size is a factor we could just save a lot by having just Manifold + Nef (+ some bits of surface mesh for repair purposes).\r\n\r\nAlso, not sure if we also need some OpenGL work to make Manifold (or fast-csg) a 1st class citizen, I remember cutting some corners / converting to PolySet or CGAL_Polyhedron a bit aggressively there."
                            },
                            {
                                "author": {
                                    "login": "kintel"
                                },
                                "body": "For the record, I agree that completely weaning off CGAL isn't an explicit goal, but being able to isolate it could be a way of improving code health. Both your suggestions are already in my list above. Feel free to edit/reword/split into separate issues once you think anything is well-defined enough to explore as separate efforts.\r\n\r\nThe rendering pieces may benefit from waiting for #4782 \r\n"
                            },
                            {
                                "author": {
                                    "login": "pca006132"
                                },
                                "body": "Btw there are some weird issues regarding geometry cache, #4732 and #4753."
                            },
                            {
                                "author": {
                                    "login": "kintel"
                                },
                                "body": "We have similar geometry cache issues for CGAL. I believe the issue is that we can cache geometry as Nef polyhedrons or PolySets, but since PolySets are lossy, correctness of the final result may depend on avoiding cached PolySets. ..and sometimes, doing preview before render primes the cache with non-Nef3 data, or smth.\r\nI don't think we have a cache for Manifold objects, so we convert to/from PolySet for caching purposes, which may also be lossy. I haven't read the Manifold-related code in detail."
                            },
                            {
                                "author": {
                                    "login": "pca006132"
                                },
                                "body": "Thinking about it, we will get self-intersecting polygons when we try to get the projection of a mesh that is not a valid mesh but only \u03b5-valid (e.g. the touching cubes example), or attempt to slice the mesh. Not sure if clipper works fine with self-intersecting inputs."
                            },
                            {
                                "author": {
                                    "login": "nophead"
                                },
                                "body": "Clipper can fix self intersections if you offset by a minute amount. I have never tried 0, so I don't know if that works. It depends if it gets ignored completely or is still passed through clipper."
                            }
                        ]
                    }
                }
            }
        }
    }
]