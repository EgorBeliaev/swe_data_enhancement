diff --git a/src/geometry/PolySet.cc b/src/geometry/PolySet.cc
index 2574eb22a9..9e0a718654 100644
--- a/src/geometry/PolySet.cc
+++ b/src/geometry/PolySet.cc
@@ -136,22 +136,23 @@ void PolySet::resize(const Vector3d& newsize, const Eigen::Matrix<bool, 3, 1>& a
  */
 void PolySet::quantizeVertices(std::vector<Vector3d> *pPointsOut)
 {
+  const bool has_colors = !this->color_indices.empty();
   Grid3d<unsigned int> grid(GRID_FINE);
-  std::vector<unsigned int> indices; // Vertex indices in one polygon
+  std::vector<unsigned int> polygon_indices; // Vertex indices in one polygon
   for (size_t i=0; i < this->indices.size();) {
     IndexedFace& ind_f = this->indices[i];
-    indices.resize(ind_f.size());
+    polygon_indices.resize(ind_f.size());
     // Quantize all vertices. Build index list
     for (unsigned int i = 0; i < ind_f.size(); ++i) {
-      indices[i] = grid.align(this->vertices[ind_f[i]]);
+      polygon_indices[i] = grid.align(this->vertices[ind_f[i]]);
       if (pPointsOut && pPointsOut->size() < grid.db.size()) {
         pPointsOut->push_back(this->vertices[ind_f[i]]);
       }
     }
     // Remove consecutive duplicate vertices
     auto currp = ind_f.begin();
-    for (unsigned int i = 0; i < indices.size(); ++i) {
-      if (indices[i] != indices[(i + 1) % indices.size()]) {
+    for (unsigned int i = 0; i < polygon_indices.size(); ++i) {
+      if (polygon_indices[i] != polygon_indices[(i + 1) % polygon_indices.size()]) {
         (*currp++) = ind_f[i];
       }
     }
@@ -159,6 +160,7 @@ void PolySet::quantizeVertices(std::vector<Vector3d> *pPointsOut)
     if (ind_f.size() < 3) {
       PRINTD("Removing collapsed polygon due to quantizing");
       this->indices.erase(this->indices.begin()+i);
+      if (has_colors) this->color_indices.erase(this->color_indices.begin()+i);
     } else {
       i++;
     }
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 22e169aa0b..e3b40675c1 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -738,6 +738,8 @@ list(REMOVE_ITEM RENDERTEST_FILES
   ${TEST_SCAD_DIR}/3D/features/hex-colors-tests.scad
 )
 
+list(APPEND RENDERFORCETEST_FILES ${TEST_SCAD_DIR}/3D/issues/issue5548.scad)
+
 set(PRUNE_TEST ${TEST_SCAD_DIR}/misc/intersection-prune-test.scad)
 list(APPEND PREVIEWTEST_FILES ${STL_IMPORT_FILES} ${RENDERTEST_FILES} ${PRUNE_TEST} ${PREVIEW_ONLY_FILES})
 list(APPEND THROWNTOGETHERTEST_FILES ${RENDERTEST_FILES} ${PRUNE_TEST} ${PREVIEW_ONLY_FILES})
@@ -991,6 +993,7 @@ set_test_config(Examples FILES ${EXAMPLE_2D_FILES} PREFIXES dxfrendertest)
 # o echotest: Just record console output
 # o dumptest: Export .csg
 # o rendertest: Export to PNG using --render
+# o renderforcetest: Export to PNG using --render=force
 # o rendermanifoldtest: Export to PNG using --render with --backend=manifold
 # o previewtest: Export to PNG using OpenCSG
 # o previewmanifoldtest: Export to PNG in preview mode with --backend=manifold
@@ -1050,6 +1053,7 @@ add_cmdline_test(previewtest        OPENSCAD FILES ${PREVIEWTEST_FILES} SUFFIX p
 add_cmdline_test(throwntogethertest OPENSCAD SUFFIX png FILES ${THROWNTOGETHERTEST_FILES} ARGS --preview=throwntogether)
 
 # Other PNG tests
+add_cmdline_test(renderforcetest     OPENSCAD FILES ${RENDERFORCETEST_FILES} SUFFIX png ARGS --render=force)
 add_cmdline_test(renderstdiotest     OPENSCAD SUFFIX png FILES ${RENDERSTDIOTEST_FILES} STDIO EXPECTEDDIR rendertest ARGS --export-format png --render)
 add_cmdline_test(csgrendertest       SCRIPT ${EXPORT_IMPORT_PNGTEST_PY} SUFFIX png FILES ${RENDERTEST_FILES} EXPECTEDDIR rendertest ARGS ${OPENSCAD_EXE_ARG} --format=csg --render)
 if (ENABLE_MANIFOLD)
diff --git a/tests/data/scad/3D/issues/issue5548.scad b/tests/data/scad/3D/issues/issue5548.scad
new file mode 100644
index 0000000000..5c9a9237c3
--- /dev/null
+++ b/tests/data/scad/3D/issues/issue5548.scad
@@ -0,0 +1,19 @@
+color("red") polyhedron(
+  points=[
+    [0, 0, 0],
+    [1, 0, 0],
+    [0, 1, 0],
+    [1, 1, 0],
+    [0, 0, 1],
+    [1, 0, 1],
+    [0, 1, 1],
+    [0.000000000001, 1, 1],
+  ],
+  faces=[
+    [6,7,5], [6,5,4],
+    [0,1,3], [0,3,2],
+    [4,5,1], [4,1,0],
+    [5,7,3], [5,3,1],
+    [7,6,2,3],
+    [6,4,0], [6,0,2],
+  ]);
diff --git a/tests/regression/previewtest/issue5548-expected.png b/tests/regression/previewtest/issue5548-expected.png
new file mode 100644
index 0000000000..7bde87ccf6
Binary files /dev/null and b/tests/regression/previewtest/issue5548-expected.png differ
diff --git a/tests/regression/renderforcetest/issue5548-expected.png b/tests/regression/renderforcetest/issue5548-expected.png
new file mode 100644
index 0000000000..fe467624c8
Binary files /dev/null and b/tests/regression/renderforcetest/issue5548-expected.png differ
diff --git a/tests/regression/rendertest/issue5548-expected.png b/tests/regression/rendertest/issue5548-expected.png
new file mode 100644
index 0000000000..7bde87ccf6
Binary files /dev/null and b/tests/regression/rendertest/issue5548-expected.png differ
diff --git a/tests/regression/throwntogethertest/issue5548-expected.png b/tests/regression/throwntogethertest/issue5548-expected.png
new file mode 100644
index 0000000000..0e30345971
Binary files /dev/null and b/tests/regression/throwntogethertest/issue5548-expected.png differ
