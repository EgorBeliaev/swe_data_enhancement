diff --git a/src/core/RotateExtrudeNode.cc b/src/core/RotateExtrudeNode.cc
index 71107fd39d..1ff8c2a824 100644
--- a/src/core/RotateExtrudeNode.cc
+++ b/src/core/RotateExtrudeNode.cc
@@ -48,16 +48,28 @@ std::shared_ptr<AbstractNode> builtin_rotate_extrude(const ModuleInstantiation *
   auto node = std::make_shared<RotateExtrudeNode>(inst);
 
   const Parameters parameters = Parameters::parse(std::move(arguments), inst->location(),
-                                            {"angle"}, {"convexity"});
+                                            {"angle", "start"}, {"convexity"});
 
   node->fn = parameters["$fn"].toDouble();
   node->fs = parameters["$fs"].toDouble();
   node->fa = parameters["$fa"].toDouble();
 
   node->convexity = static_cast<int>(parameters["convexity"].toDouble());
-  node->angle = 360;
-  parameters["angle"].getFiniteDouble(node->angle);
-  if ((node->angle <= -360) || (node->angle > 360)) node->angle = 360;
+  // If an angle is specified, use it, defaulting to starting at zero.
+  // If no angle is specified, use 360 and default to starting at 180.
+  // Regardless, if a start angle is specified, use it.
+  bool hasAngle = parameters["angle"].getFiniteDouble(node->angle);
+  if (hasAngle) {
+    node->start = 0;
+    if ((node->angle <= -360) || (node->angle > 360)) node->angle = 360;
+  } else {
+    node->angle = 360;
+    node->start = 180;
+  }
+  bool hasStart = parameters["start"].getFiniteDouble(node->start);
+  if (!hasAngle && !hasStart && (int)node->fn % 2 != 0) {
+    LOG(message_group::Deprecated, "In future releases, rotational extrusion without \"angle\" will start at zero, the +X axis.  Set start=180 to explicitly start on the -X axis.");
+  }
 
   if (node->convexity <= 0) node->convexity = 2;
 
@@ -72,11 +84,13 @@ std::string RotateExtrudeNode::toString() const
 {
   std::ostringstream stream;
 
-  stream << this->name() << "(";
-  stream <<
+  stream << this->name() << "("
     "angle = " << this->angle << ", "
+    "start = " << this->start << ", "
     "convexity = " << this->convexity << ", "
-    "$fn = " << this->fn << ", $fa = " << this->fa << ", $fs = " << this->fs << ")";
+    "$fn = " << this->fn << ", "
+    "$fa = " << this->fa << ", "
+    "$fs = " << this->fs << ")";
 
   return stream.str();
 }
diff --git a/src/core/RotateExtrudeNode.h b/src/core/RotateExtrudeNode.h
index 2664939b0e..973ce0b072 100644
--- a/src/core/RotateExtrudeNode.h
+++ b/src/core/RotateExtrudeNode.h
@@ -13,11 +13,12 @@ class RotateExtrudeNode : public AbstractPolyNode
     convexity = 0;
     fn = fs = fa = 0;
     angle = 360;
+    start = 0;
   }
   std::string toString() const override;
   std::string name() const override { return "rotate_extrude"; }
 
   int convexity;
   double fn, fs, fa;
-  double angle;
+  double angle, start;
 };
diff --git a/src/geometry/GeometryEvaluator.cc b/src/geometry/GeometryEvaluator.cc
index 4960bc2c9a..56044a34a9 100644
--- a/src/geometry/GeometryEvaluator.cc
+++ b/src/geometry/GeometryEvaluator.cc
@@ -788,14 +788,14 @@ static void fill_ring(std::vector<Vector3d>& ring, const Outline2d& o, double a,
   if (flip) {
     unsigned int l = o.vertices.size() - 1;
     for (unsigned int i = 0; i < o.vertices.size(); ++i) {
-      ring[i][0] = o.vertices[l - i][0] * sin_degrees(a);
-      ring[i][1] = o.vertices[l - i][0] * cos_degrees(a);
+      ring[i][0] = o.vertices[l - i][0] * cos_degrees(a);
+      ring[i][1] = o.vertices[l - i][0] * sin_degrees(a);
       ring[i][2] = o.vertices[l - i][1];
     }
   } else {
     for (unsigned int i = 0; i < o.vertices.size(); ++i) {
-      ring[i][0] = o.vertices[i][0] * sin_degrees(a);
-      ring[i][1] = o.vertices[i][0] * cos_degrees(a);
+      ring[i][0] = o.vertices[i][0] * cos_degrees(a);
+      ring[i][1] = o.vertices[i][0] * sin_degrees(a);
       ring[i][2] = o.vertices[i][1];
     }
   }
@@ -843,12 +843,14 @@ static std::unique_ptr<Geometry> rotatePolygon(const RotateExtrudeNode& node, co
 
   fragments = (unsigned int)std::ceil(fmax(Calc::get_fragments_from_r(max_x - min_x, node.fn, node.fs, node.fa) * std::abs(node.angle) / 360, 1));
 
-  bool flip_faces = (min_x >= 0 && node.angle > 0 && node.angle != 360) || (min_x < 0 && (node.angle < 0 || node.angle == 360));
+  bool flip_faces = (min_x >= 0 && node.angle > 0) || (min_x < 0 && node.angle < 0);
 
+  // If not going all the way around, we have to create faces on each end.
   if (node.angle != 360) {
     auto ps_start = poly.tessellate(); // starting face
-    Transform3d rot(angle_axis_degrees(90, Vector3d::UnitX()));
-    ps_start->transform(rot);
+    Transform3d rotx(angle_axis_degrees(90, Vector3d::UnitX()));
+    Transform3d rotz1(angle_axis_degrees(node.start, Vector3d::UnitZ()));
+    ps_start->transform(rotz1 * rotx);
     // Flip vertex ordering
     if (!flip_faces) {
       for (auto& p : ps_start->indices) {
@@ -858,8 +860,8 @@ static std::unique_ptr<Geometry> rotatePolygon(const RotateExtrudeNode& node, co
     builder.appendPolySet(*ps_start);
 
     auto ps_end = poly.tessellate();
-    Transform3d rot2(angle_axis_degrees(node.angle, Vector3d::UnitZ()) * angle_axis_degrees(90, Vector3d::UnitX()));
-    ps_end->transform(rot2);
+    Transform3d rotz2(angle_axis_degrees(node.start + node.angle, Vector3d::UnitZ()));
+    ps_end->transform(rotz2 * rotx);
     if (flip_faces) {
       for (auto& p : ps_end->indices) {
         std::reverse(p.begin(), p.end());
@@ -873,11 +875,9 @@ static std::unique_ptr<Geometry> rotatePolygon(const RotateExtrudeNode& node, co
     rings[0].resize(o.vertices.size());
     rings[1].resize(o.vertices.size());
 
-    fill_ring(rings[0], o, (node.angle == 360) ? -90 : 90, flip_faces); // first ring
+    fill_ring(rings[0], o, node.start, flip_faces); // first ring
     for (unsigned int j = 0; j < fragments; ++j) {
-      double a;
-      if (node.angle == 360) a = -90 + ((j + 1) % fragments) * 360.0 / fragments; // start on the -X axis, for legacy support
-      else a = 90 - (j + 1) * node.angle / fragments; // start on the X axis
+      double a = node.start + (j + 1) * node.angle / fragments; // start on the X axis
       fill_ring(rings[(j + 1) % 2], o, a, flip_faces);
 
       for (size_t i = 0; i < o.vertices.size(); ++i) {
diff --git a/tests/data/scad/3D/issues/issue1105d.scad b/tests/data/scad/3D/issues/issue1105d.scad
index f37b655454..98d0733cd1 100644
--- a/tests/data/scad/3D/issues/issue1105d.scad
+++ b/tests/data/scad/3D/issues/issue1105d.scad
@@ -1,5 +1,5 @@
 difference() {
-    rotate_extrude(convexity=2, $fn=8)
+    rotate_extrude(convexity=4, $fn=8)
     translate([5,0,0]) difference() {
         circle(r=2);
         circle(r=1);
diff --git a/tests/regression/dumptest-examples/example007-expected.csg b/tests/regression/dumptest-examples/example007-expected.csg
index 4536ca0755..6d5273b041 100644
--- a/tests/regression/dumptest-examples/example007-expected.csg
+++ b/tests/regression/dumptest-examples/example007-expected.csg
@@ -1,7 +1,7 @@
 multmatrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, -10], [0, 0, 0, 1]]) {
 	group() {
 		difference() {
-			rotate_extrude(angle = 360, convexity = 3, $fn = 0, $fa = 12, $fs = 2) {
+			rotate_extrude(angle = 360, start = 180, convexity = 3, $fn = 0, $fa = 12, $fs = 2) {
 				import(file = "example007.dxf", layer = "dorn", origin = [0, 0], scale = 1, convexity = 1, $fn = 0, $fa = 12, $fs = 2, timestamp = 1576020815);
 			}
 			group() {
diff --git a/tests/regression/dumptest-examples/example009-expected.csg b/tests/regression/dumptest-examples/example009-expected.csg
index 00093e5814..cfd5b169d5 100644
--- a/tests/regression/dumptest-examples/example009-expected.csg
+++ b/tests/regression/dumptest-examples/example009-expected.csg
@@ -17,7 +17,7 @@ intersection() {
 	linear_extrude(height = 20, center = true, twist = -57.5288, $fn = 0, $fa = 3, $fs = 1, convexity = 10) {
 		import(file = "example009.dxf", layer = "fan_top", origin = [0, 0], scale = 1, convexity = 1, $fn = 0, $fa = 3, $fs = 1, timestamp = 1576020815);
 	}
-	rotate_extrude(angle = 360, convexity = 10, $fn = 0, $fa = 3, $fs = 1) {
+	rotate_extrude(angle = 360, start = 180, convexity = 10, $fn = 0, $fa = 3, $fs = 1) {
 		import(file = "example009.dxf", layer = "fan_side", origin = [0, -40], scale = 1, convexity = 1, $fn = 0, $fa = 3, $fs = 1, timestamp = 1576020815);
 	}
 }
diff --git a/tests/regression/dumptest-examples/example017-expected.csg b/tests/regression/dumptest-examples/example017-expected.csg
index bd940cd580..1984e32752 100644
--- a/tests/regression/dumptest-examples/example017-expected.csg
+++ b/tests/regression/dumptest-examples/example017-expected.csg
@@ -187,7 +187,7 @@ group() {
 		}
 %		multmatrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 12], [0, 0, 0, 1]]) {
 			group() {
-				rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+				rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 					square(size = [25, 68], center = false);
 					multmatrix([[1, 0, 0, 0], [0, 1, 0, 68], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 						intersection() {
diff --git a/tests/regression/dumptest-examples/rotate_extrude-expected.csg b/tests/regression/dumptest-examples/rotate_extrude-expected.csg
index fa21b95b0d..52af9d0c0d 100644
--- a/tests/regression/dumptest-examples/rotate_extrude-expected.csg
+++ b/tests/regression/dumptest-examples/rotate_extrude-expected.csg
@@ -1,5 +1,5 @@
 color([1, 0, 0, 1]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 		multmatrix([[1, 0, 0, 10], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			square(size = [5, 5], center = false);
 		}
@@ -7,34 +7,34 @@ color([1, 0, 0, 1]) {
 }
 color([0, 1, 1, 1]) {
 	multmatrix([[1, 0, 0, 40], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-		rotate_extrude(angle = 360, convexity = 2, $fn = 80, $fa = 12, $fs = 2) {
+		rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 80, $fa = 12, $fs = 2) {
 			text(text = "  J", size = 10, spacing = 1, font = "", direction = "ltr", language = "en", script = "Latn", halign = "default", valign = "default", $fn = 80, $fa = 12, $fs = 2);
 		}
 	}
 }
 color([0, 0.501961, 0, 1]) {
 	multmatrix([[1, 0, 0, 0], [0, 1, 0, 30], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-		rotate_extrude(angle = 360, convexity = 2, $fn = 80, $fa = 12, $fs = 2) {
+		rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 80, $fa = 12, $fs = 2) {
 			polygon(points = [[0, 0], [8, 4], [4, 8], [4, 12], [12, 16], [0, 20]], paths = undef, convexity = 1);
 		}
 	}
 }
 color([1, 0, 1, 1]) {
 	multmatrix([[1, 0, 0, 40], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-		rotate_extrude(angle = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+		rotate_extrude(angle = 180, start = 0, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 			multmatrix([[1, 0, 0, 12.5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
 			}
 		}
 		multmatrix([[1, 0, 0, 7.5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-			rotate_extrude(angle = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+			rotate_extrude(angle = 180, start = 0, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 				multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 					square(size = [5, 5], center = false);
 				}
 			}
 		}
 		multmatrix([[1, 0, 0, -7.5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-			rotate_extrude(angle = -180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+			rotate_extrude(angle = -180, start = 0, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 				multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 					square(size = [5, 5], center = false);
 				}
diff --git a/tests/regression/dumptest/allmodules-expected.csg b/tests/regression/dumptest/allmodules-expected.csg
index a3374e0fa5..8191b6b2e6 100644
--- a/tests/regression/dumptest/allmodules-expected.csg
+++ b/tests/regression/dumptest/allmodules-expected.csg
@@ -11,7 +11,7 @@ union();
 difference();
 intersection();
 linear_extrude(height = 100, $fn = 0, $fa = 12, $fs = 2);
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
 import(file = "", origin = [0, 0], scale = 1, convexity = 1, $fn = 0, $fa = 12, $fs = 2, timestamp = 0);
 group();
 cube(size = [1, 1, 1], center = false);
diff --git a/tests/regression/dumptest/dxf_rotate_extrude-expected.csg b/tests/regression/dumptest/dxf_rotate_extrude-expected.csg
index 54f06b30e8..81e3068e49 100644
--- a/tests/regression/dumptest/dxf_rotate_extrude-expected.csg
+++ b/tests/regression/dumptest/dxf_rotate_extrude-expected.csg
@@ -1,3 +1,3 @@
 group() {
-	rotate_extrude(convexity = 1, $fn = 0, $fa = 12, $fs = 2);
+	rotate_extrude(angle = 360, start = 180, convexity = 1, $fn = 0, $fa = 12, $fs = 2);
 }
diff --git a/tests/regression/dumptest/linear_extrude-tests-expected.csg b/tests/regression/dumptest/linear_extrude-tests-expected.csg
index 2709d39f48..97b92ee8ff 100644
--- a/tests/regression/dumptest/linear_extrude-tests-expected.csg
+++ b/tests/regression/dumptest/linear_extrude-tests-expected.csg
@@ -1,6 +1,6 @@
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 	cube(size = [1, 1, 1], center = false);
 }
 linear_extrude(height = 10, $fn = 0, $fa = 12, $fs = 2) {
diff --git a/tests/regression/dumptest/rotate_extrude-angle-expected.csg b/tests/regression/dumptest/rotate_extrude-angle-expected.csg
index 04cf53fa36..36fc9bd9d7 100644
--- a/tests/regression/dumptest/rotate_extrude-angle-expected.csg
+++ b/tests/regression/dumptest/rotate_extrude-angle-expected.csg
@@ -1,4 +1,4 @@
-rotate_extrude(angle = 45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+rotate_extrude(angle = 45, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	group() {
 		multmatrix([[1, 0, 0, 10], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			difference() {
@@ -8,7 +8,7 @@ rotate_extrude(angle = 45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		}
 	}
 }
-rotate_extrude(angle = 45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+rotate_extrude(angle = 45, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	group() {
 		multmatrix([[1, 0, 0, -10], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			difference() {
@@ -18,7 +18,7 @@ rotate_extrude(angle = 45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		}
 	}
 }
-rotate_extrude(angle = -45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+rotate_extrude(angle = -45, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	group() {
 		multmatrix([[1, 0, 0, 21], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			difference() {
@@ -28,7 +28,7 @@ rotate_extrude(angle = -45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		}
 	}
 }
-rotate_extrude(angle = -45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+rotate_extrude(angle = -45, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	group() {
 		multmatrix([[1, 0, 0, -21], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			difference() {
@@ -39,7 +39,7 @@ rotate_extrude(angle = -45, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	}
 }
 multmatrix([[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 5, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 5, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 10], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				difference() {
@@ -49,7 +49,7 @@ multmatrix([[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			}
 		}
 	}
-	rotate_extrude(angle = 5, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 5, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, -10], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				difference() {
@@ -59,7 +59,7 @@ multmatrix([[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			}
 		}
 	}
-	rotate_extrude(angle = -5, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = -5, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 21], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				difference() {
@@ -69,7 +69,7 @@ multmatrix([[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			}
 		}
 	}
-	rotate_extrude(angle = -5, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = -5, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, -21], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				difference() {
@@ -80,7 +80,7 @@ multmatrix([[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 		}
 	}
 }
-rotate_extrude(angle = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+rotate_extrude(angle = 0, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	group() {
 		multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			difference() {
@@ -91,7 +91,7 @@ rotate_extrude(angle = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 	}
 }
 multmatrix([[1, 0, 0, -40], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -100,7 +100,7 @@ multmatrix([[1, 0, 0, -40], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, 0], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -109,7 +109,7 @@ multmatrix([[1, 0, 0, 0], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, 40], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -118,7 +118,7 @@ multmatrix([[1, 0, 0, 40], [0, 1, 0, 40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, -40], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -127,7 +127,7 @@ multmatrix([[1, 0, 0, -40], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, 40], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -136,7 +136,7 @@ multmatrix([[1, 0, 0, 40], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, -40], [0, 1, 0, -40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -145,7 +145,7 @@ multmatrix([[1, 0, 0, -40], [0, 1, 0, -40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, 0], [0, 1, 0, -40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
@@ -154,7 +154,7 @@ multmatrix([[1, 0, 0, 0], [0, 1, 0, -40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, 40], [0, 1, 0, -40], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
+	rotate_extrude(angle = 360, start = 0, convexity = 2, $fn = 0, $fa = 15, $fs = 4) {
 		group() {
 			multmatrix([[1, 0, 0, 5], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				square(size = [5, 5], center = false);
diff --git a/tests/regression/dumptest/rotate_extrude-expected.csg b/tests/regression/dumptest/rotate_extrude-expected.csg
index 54f06b30e8..81e3068e49 100644
--- a/tests/regression/dumptest/rotate_extrude-expected.csg
+++ b/tests/regression/dumptest/rotate_extrude-expected.csg
@@ -1,3 +1,3 @@
 group() {
-	rotate_extrude(convexity = 1, $fn = 0, $fa = 12, $fs = 2);
+	rotate_extrude(angle = 360, start = 180, convexity = 1, $fn = 0, $fa = 12, $fs = 2);
 }
diff --git a/tests/regression/dumptest/rotate_extrude-tests-expected.csg b/tests/regression/dumptest/rotate_extrude-tests-expected.csg
index dca04c2039..6ef25304c2 100644
--- a/tests/regression/dumptest/rotate_extrude-tests-expected.csg
+++ b/tests/regression/dumptest/rotate_extrude-tests-expected.csg
@@ -1,16 +1,16 @@
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2);
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 	cube(size = [1, 1, 1], center = false);
 }
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 	multmatrix([[1, 0, 0, 20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 		circle($fn = 0, $fa = 12, $fs = 2, r = 10);
 	}
 }
 multmatrix([[1, 0, 0, 50], [0, 1, 0, -20], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	difference() {
-		rotate_extrude(angle = 360, convexity = 4, $fn = 0, $fa = 12, $fs = 2) {
+		rotate_extrude(angle = 360, start = 180, convexity = 4, $fn = 0, $fa = 12, $fs = 2) {
 			multmatrix([[1, 0, 0, 20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 				difference() {
 					circle($fn = 0, $fa = 12, $fs = 2, r = 10);
@@ -26,12 +26,12 @@ multmatrix([[1, 0, 0, 50], [0, 1, 0, -20], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 multmatrix([[1, 0, 0, 50], [0, 1, 0, 50], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	difference() {
 		difference() {
-			rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+			rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 				multmatrix([[1, 0, 0, 20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 					circle($fn = 0, $fa = 12, $fs = 2, r = 10);
 				}
 			}
-			rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+			rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 				multmatrix([[1, 0, 0, 20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 					circle($fn = 0, $fa = 12, $fs = 2, r = 8);
 				}
@@ -43,14 +43,14 @@ multmatrix([[1, 0, 0, 50], [0, 1, 0, 50], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 	}
 }
 multmatrix([[1, 0, 0, 0], [0, 1, 0, -60], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 1, $fa = 12, $fs = 2) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 1, $fa = 12, $fs = 2) {
 		multmatrix([[1, 0, 0, 20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			circle($fn = 1, $fa = 12, $fs = 2, r = 10);
 		}
 	}
 }
 multmatrix([[1, 0, 0, 0], [0, 1, 0, 60], [0, 0, 1, 0], [0, 0, 0, 1]]) {
-	rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+	rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 		multmatrix([[1, 0, 0, -20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 			square(size = [10, 10], center = false);
 		}
diff --git a/tests/regression/dumptest/rotate_extrude-touch-edge-expected.csg b/tests/regression/dumptest/rotate_extrude-touch-edge-expected.csg
index 7eb6bb94fa..42d8b55176 100644
--- a/tests/regression/dumptest/rotate_extrude-touch-edge-expected.csg
+++ b/tests/regression/dumptest/rotate_extrude-touch-edge-expected.csg
@@ -1,4 +1,4 @@
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 	square(size = [10, 10], center = false);
 }
 
diff --git a/tests/regression/dumptest/rotate_extrude-touch-vertex-expected.csg b/tests/regression/dumptest/rotate_extrude-touch-vertex-expected.csg
index 4986f4192b..b0e5c39ea6 100644
--- a/tests/regression/dumptest/rotate_extrude-touch-vertex-expected.csg
+++ b/tests/regression/dumptest/rotate_extrude-touch-vertex-expected.csg
@@ -1,4 +1,4 @@
-rotate_extrude(angle = 360, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
+rotate_extrude(angle = 360, start = 180, convexity = 2, $fn = 0, $fa = 12, $fs = 2) {
 	multmatrix([[0.707107, 0.707107, 0, 0], [-0.707107, 0.707107, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) {
 		square(size = [10, 10], center = false);
 	}
diff --git a/tests/regression/previewtest/issue1105d-expected.png b/tests/regression/previewtest/issue1105d-expected.png
index 20db2c4104..147d271545 100644
Binary files a/tests/regression/previewtest/issue1105d-expected.png and b/tests/regression/previewtest/issue1105d-expected.png differ
