[
    {
        "title": "Use filesystem::relative for boostfs_uncomplete."
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Cleans up some old custom code with now standard function, since Boost 1.60.  I would have liked to directly replace the calls to boostfs_uncomplete with calls to fs::relative, but there was a difference in that empty path was treated as equivalent to \".\" in the old code.\r\n\r\nI think it should be fine to update our requirements to boost 1.60 (in README and and check dependencies scripts).  However there is also the option to swap out `boost::filesystem` for `std::filesystem` here.  I think one or the other should be done before merging.\r\n"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Good stuff!"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Last I checked, compiler support (or rather stdlib support) for std::filesystem wasn't great. Do you know if this could pose a challenge for moving to std::filesystem?"
    },
    {
        "author": {
            "login": "thehans"
        },
        "body": "According to gnu docs, filesystem support is in libstdc++ 8.1 and up\r\nhttps://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2017\r\n\r\nAs far as I know the oldest packages we deal with would be on Ubuntu 20.04, and that [appears to have](https://packages.ubuntu.com/search?keywords=libstdc%2B%2B6&searchon=names&suite=focal&section=all) package `libstdc++6` in version `10.5.0-1ubuntu1~20.04` (i don't know why they show a 6 in the package name, but that isn't an indication of the actual version)\r\n\r\nAs for libc++ (not sure it matters, because I don't think we build any releases using it, but...)\r\nAccording to https://libcxx.llvm.org/Status/Cxx17.html \r\n`P0219R1 Relative Paths for Filesystem` is in libc++ 7.0\r\n\r\nAlso a note from [cppreference](https://en.cppreference.com/w/cpp/filesystem) which may be relevant:\r\n> Using this library may require additional compiler/linker options. GNU implementation prior to 9.1 requires linking with -lstdc++fs and LLVM implementation prior to LLVM 9.0 requires linking with -lc++fs."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "macOS is on libc++ and if we bump minimal version requirements from 10.14 to 10.15 I think we can use it."
    },
    {
        "author": {
            "login": "thehans"
        },
        "body": "What's the significance of 10.15?\r\n\r\nAlso the one major difference I've encountered when swapping in `std::filesystem` is that `std::filesystem::last_write_time` returns `std::filesystem::file_time_type` as opposed to `std::time_t` in boost.\r\nI wrote a little helper function to return the value of seconds since epoch time, but ran into a confusing issue where I was seeing negative numbers of high magnitude.  I finally found that this is because libstdc++ is using an internal epoch time in the far future of [Jan 1 2174](https://stackoverflow.com/a/67142253/251068)  and not what I had assumed to be the typical 1970 epoch.\r\n\r\nQuestion is if we care that csg output has negative value \"timestamp\" (for `import` and other nodes that accept filenames).\r\nAs far as I can tell the code doesn't really read in and use this timestamp info for anything?"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "No real significance of requiring macOS 10.15, just that everytime we increase requirements, we lock out some users with older hardware. Not much we can do about it as other dependencies (like Qt) also impose minimum requirements.\r\n\r\nI believe the timestamp is really only used for caching."
    },
    {
        "author": {
            "login": "thehans"
        },
        "body": "Ah, I misunderstood thinking 10.15 was referring to clang or libc++ version.  I truly know nothing about the mac world, would that affect CI at all or pretty much just a documentation change?"
    },
    {
        "author": {
            "login": "thehans"
        },
        "body": "OK I see the errors already in CI `error: 'path' is unavailable: introduced in macOS 10.15` etc.\r\nI will try a (manual) search and replace of 10.14 with 10.15"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "The main doc for system requirement is on the download page: https://github.com/openscad/openscad.github.com/blob/main/downloads.html#L444"
    }
]