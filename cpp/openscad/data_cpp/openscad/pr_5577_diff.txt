diff --git a/CMakeLists.txt b/CMakeLists.txt
index a88c693ee1..903453b317 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -794,6 +794,7 @@ set(CORE_SOURCES
   src/core/CgalAdvNode.cc
   src/core/Children.cc
   src/core/ColorNode.cc
+  src/core/ColorUtil.cc
   src/core/Context.cc
   src/core/ContextFrame.cc
   src/core/ContextMemoryManager.cc
@@ -817,6 +818,7 @@ set(CORE_SOURCES
   src/core/RenderVariables.cc
   src/core/RotateExtrudeNode.cc
   src/core/ScopeContext.cc
+  src/core/Settings.cc
   src/core/SourceFile.cc
   src/core/SourceFileCache.cc
   src/core/StatCache.cc
@@ -1092,6 +1094,7 @@ set(GUI_SOURCES
   src/gui/Editor.cc
   src/gui/ErrorLog.cc
   src/gui/EventFilter.h
+  src/gui/Export3mfDialog.cc
   src/gui/ExportPdfDialog.cc
   src/gui/FontListDialog.cc
   src/gui/FontListTableView.cc
@@ -1118,7 +1121,6 @@ set(GUI_SOURCES
   src/gui/ScadApi.cc
   src/gui/ScadLexer.cc
   src/gui/ScintillaEditor.cc
-  src/gui/Settings.cc
   src/gui/SettingsWriter.cc
   src/gui/TabManager.cc
   src/gui/TabWidget.cc
@@ -1160,6 +1162,7 @@ set(GUI_HEADERS
     src/gui/Editor.h
     src/gui/ErrorLog.h
     src/gui/EventFilter.h
+    src/gui/Export3mfDialog.h
     src/gui/ExportPdfDialog.h
     src/gui/FontList.h
     src/gui/FontListDialog.h
@@ -1185,7 +1188,6 @@ set(GUI_HEADERS
     src/gui/ScadApi.h
     src/gui/ScadLexer.h
     src/gui/ScintillaEditor.h
-    src/gui/Settings.h
     src/gui/SettingsWriter.h
     src/gui/TabManager.h
     src/gui/TabWidget.h
@@ -1213,6 +1215,7 @@ set(GUI_UIS
     src/gui/Animate.ui
     src/gui/Console.ui
     src/gui/ErrorLog.ui
+    src/gui/Export3mfDialog.ui
     src/gui/ExportPdfDialog.ui
     src/gui/FontList.ui
     src/gui/FontListDialog.ui
diff --git a/resources/common.qrc.in b/resources/common.qrc.in
index 66c213cd6d..52ee7945d4 100644
--- a/resources/common.qrc.in
+++ b/resources/common.qrc.in
@@ -16,7 +16,7 @@
     <file>icons/prefs3DView.png</file>
     <file>icons/prefsEditor.png</file>
     <file>icons/prefsUpdate.png</file>
-
+    <file>icons/prefsDialogs.png</file>
     <file>icons/close.png</file>
     <file>icons/information-icons-error.png</file>
     <file>icons/information-icons-info.png</file>
diff --git a/resources/icons/license.txt b/resources/icons/license.txt
index a93e8cfedd..0bbddf02eb 100644
--- a/resources/icons/license.txt
+++ b/resources/icons/license.txt
@@ -1,6 +1,9 @@
 Taken from http://tango.freedesktop.org/Tango_Icon_Library, version 0.8.90 / public domain:
+https://web.archive.org/web/20160120233412/http://tango.freedesktop.org/Tango_Icon_Library
+http://tango.freedesktop.org/releases/tango-icon-theme-0.8.90.tar.gz
 
-- prefsFeatures.png (converted from preferences-system.svg)
+- prefsFeatures.png (converted from categories/preferences-system.svg)
+- prefsDialogs.png (converted from actions/window-new.svg)
 
 https://openclipart.org/detail/35425/tango-desktop-peripherals / Tango Icon Library / public domain:
 
diff --git a/resources/icons/prefsDialogs.png b/resources/icons/prefsDialogs.png
new file mode 100644
index 0000000000..a609654149
Binary files /dev/null and b/resources/icons/prefsDialogs.png differ
diff --git a/src/core/ColorNode.cc b/src/core/ColorNode.cc
index 0d52ea4e2a..765bb52d96 100644
--- a/src/core/ColorNode.cc
+++ b/src/core/ColorNode.cc
@@ -30,6 +30,7 @@
 #include "core/Builtins.h"
 #include "core/Children.h"
 #include "core/Parameters.h"
+#include "core/ColorUtil.h"
 #include "utils/printutils.h"
 #include <algorithm>
 #include <utility>
@@ -200,45 +201,6 @@ std::unordered_map<std::string, Color4f> webcolors{
   {"transparent", {0, 0, 0, 0}}
 };
 
-// Parses hex colors according to: https://drafts.csswg.org/css-color/#typedef-hex-color.
-// If the input is invalid, returns boost::none.
-// Supports the following formats:
-// * "#rrggbb"
-// * "#rrggbbaa"
-// * "#rgb"
-// * "#rgba"
-boost::optional<Color4f> parse_hex_color(const std::string& hex) {
-  // validate size. short syntax uses one hex digit per color channel instead of 2.
-  const bool short_syntax = hex.size() == 4 || hex.size() == 5;
-  const bool long_syntax = hex.size() == 7 || hex.size() == 9;
-  if (!short_syntax && !long_syntax) return boost::none;
-
-  // validate
-  if (hex[0] != '#') return boost::none;
-  if (!std::all_of(std::begin(hex) + 1, std::end(hex),
-                   [](char c) {
-    return std::isxdigit(static_cast<unsigned char>(c));
-  })) {
-    return boost::none;
-  }
-
-  // number of characters per color channel
-  const int stride = short_syntax ? 1 : 2;
-  const float channel_max = short_syntax ? 15.0f : 255.0f;
-
-  Color4f rgba;
-  rgba[3] = 1.0; // default alpha to 100%
-
-  for (unsigned i = 0; i < (hex.size() - 1) / stride; ++i) {
-    const std::string chunk = hex.substr(1 + i * stride, stride);
-
-    // convert the hex character(s) from base 16 to base 10
-    rgba[i] = stoi(chunk, nullptr, 16) / channel_max;
-  }
-
-  return rgba;
-}
-
 static std::shared_ptr<AbstractNode> builtin_color(const ModuleInstantiation *inst, Arguments arguments, const Children& children)
 {
   auto node = std::make_shared<ColorNode>(inst);
@@ -259,7 +221,7 @@ static std::shared_ptr<AbstractNode> builtin_color(const ModuleInstantiation *in
       node->color = webcolors.at(colorname);
     } else {
       // Try parsing it as a hex color such as "#rrggbb".
-      const auto hexColor = parse_hex_color(colorname);
+      const auto hexColor = OpenSCAD::parse_hex_color(colorname);
       if (hexColor) {
         node->color = *hexColor;
       } else {
diff --git a/src/core/ColorUtil.cc b/src/core/ColorUtil.cc
new file mode 100644
index 0000000000..63466184e0
--- /dev/null
+++ b/src/core/ColorUtil.cc
@@ -0,0 +1,101 @@
+#include "core/ColorUtil.h"
+
+namespace OpenSCAD {
+
+// See http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
+void rgbtohsv(float r, float g, float b, float& h, float& s, float& v)
+{
+  float K = 0.f;
+
+  if (g < b) {
+    std::swap(g, b);
+    K = -1.f;
+  }
+
+  if (r < g) {
+    std::swap(r, g);
+    K = -2.f / 6.f - K;
+  }
+
+  float chroma = r - std::min(g, b);
+  h = std::fabs(K + (g - b) / (6.f * chroma + 1e-20f));
+  s = chroma / (r + 1e-20f);
+  v = r;
+}
+
+Color4f getColorHSV(const Color4f& col)
+{
+  float h, s, v;
+  OpenSCAD::rgbtohsv(col[0], col[1], col[2], h, s, v);
+  return {h, s, v, col[3]};
+}
+
+/**
+ * Calculate contrast color. Based on the article
+ * http://gamedev.stackexchange.com/questions/38536/given-a-rgb-color-x-how-to-find-the-most-contrasting-color-y
+ *
+ * @param col the input color
+ * @return a color with high contrast to the input color
+ */
+Color4f getContrastColor(const Color4f& col)
+{
+  Color4f hsv = getColorHSV(col);
+  float Y = 0.2126f * col[0] + 0.7152f * col[1] + 0.0722f * col[2];
+  float S = hsv[1];
+
+  if (S < 0.5) {
+    // low saturation, choose between black / white based on luminance Y
+    float val = Y > 0.5 ? 0.0f : 1.0f;
+    return {val, val, val, 1.0f};
+  } else {
+    float H = 360 * hsv[0];
+    if ((H < 60) || (H > 300)) {
+      return {0.0f, 1.0f, 1.0f, 1.0f}; // red -> cyan
+    } else if (H < 180) {
+      return {1.0f, 0.0f, 1.0f, 1.0f}; // green -> magenta
+    } else {
+      return {1.0f, 1.0f, 0.0f, 1.0f}; // blue -> yellow
+    }
+  }
+}
+
+// Parses hex colors according to: https://drafts.csswg.org/css-color/#typedef-hex-color.
+// If the input is invalid, returns boost::none.
+// Supports the following formats:
+// * "#rrggbb"
+// * "#rrggbbaa"
+// * "#rgb"
+// * "#rgba"
+std::optional<Color4f> parse_hex_color(const std::string& hex) {
+  // validate size. short syntax uses one hex digit per color channel instead of 2.
+  const bool short_syntax = hex.size() == 4 || hex.size() == 5;
+  const bool long_syntax = hex.size() == 7 || hex.size() == 9;
+  if (!short_syntax && !long_syntax) return {};
+
+  // validate
+  if (hex[0] != '#') return {};
+  if (!std::all_of(std::begin(hex) + 1, std::end(hex),
+                   [](char c) {
+    return std::isxdigit(static_cast<unsigned char>(c));
+  })) {
+    return {};
+  }
+
+  // number of characters per color channel
+  const int stride = short_syntax ? 1 : 2;
+  const float channel_max = short_syntax ? 15.0f : 255.0f;
+
+  Color4f rgba;
+  rgba[3] = 1.0; // default alpha to 100%
+
+  for (unsigned i = 0; i < (hex.size() - 1) / stride; ++i) {
+    const std::string chunk = hex.substr(1 + i * stride, stride);
+
+    // convert the hex character(s) from base 16 to base 10
+    rgba[i] = stoi(chunk, nullptr, 16) / channel_max;
+  }
+
+  return rgba;
+}
+
+} // namespace
\ No newline at end of file
diff --git a/src/core/ColorUtil.h b/src/core/ColorUtil.h
new file mode 100644
index 0000000000..10693d7529
--- /dev/null
+++ b/src/core/ColorUtil.h
@@ -0,0 +1,31 @@
+#pragma once
+
+#include <string>
+#include <optional>
+
+#include "linalg.h"
+
+template<> struct std::hash<Color4f> {
+    std::size_t operator()(Color4f const& c) const noexcept {
+      std::size_t hash = 0;
+      for (int idx = 0;idx < 4;idx++) {
+        std::size_t h = std::hash<float>{}(c[idx]);
+        hash = h ^ (hash << 1);
+      }
+      return hash;
+    }
+};
+
+namespace OpenSCAD {
+
+inline Color4f CORNFIELD_FACE_COLOR{ 0xf9, 0xd7, 0x2c, 255 };
+
+void rgbtohsv(float r, float g, float b, float& h, float& s, float& v);
+
+std::optional<Color4f> parse_hex_color(const std::string& hex);
+
+Color4f getContrastColor(const Color4f& col);
+
+Color4f getColorHSV(const Color4f& col);
+
+} // namespace
\ No newline at end of file
diff --git a/src/core/Settings.cc b/src/core/Settings.cc
new file mode 100644
index 0000000000..eb8d33c493
--- /dev/null
+++ b/src/core/Settings.cc
@@ -0,0 +1,333 @@
+#include "core/Settings.h"
+
+#include <cassert>
+#include <cstddef>
+#include <istream>
+#include <iterator>
+#include <string>
+#include <utility>
+#include <vector>
+#include <boost/algorithm/string.hpp>
+#include <boost/lexical_cast.hpp>
+#include <boost/range/adaptors.hpp>
+
+#include "export_enums.h"
+#include "io/export.h"
+#include "utils/printutils.h"
+
+#include "json/json.hpp"
+
+using json = nlohmann::json;
+
+namespace Settings {
+
+namespace {
+
+std::vector<SettingsEntryBase *> entries;
+
+std::vector<SettingsEntryEnum<std::string>::Item> createFileFormatItems(std::vector<FileFormat> formats) {
+  std::vector<SettingsEntryEnum<std::string>::Item> items;
+  std::transform(formats.begin(), formats.end(), std::back_inserter(items),
+                 [](const FileFormat& format){
+    const FileFormatInfo &info = fileformat::info(format);
+    return SettingsEntryEnum<std::string>::Item{info.identifier, info.description};
+    });
+  return items;
+}
+
+std::vector<SettingsEntryEnum<std::string>::Item> axisValues() {
+  std::vector<SettingsEntryEnum<std::string>::Item> output;
+  output.push_back({"None", _("None")});
+  for (size_t i = 0; i < max_axis; ++i) {
+    const auto userData = (boost::format("+%d") % (i + 1)).str();
+    const auto text = (boost::format(_("Axis %d")) % i).str();
+    output.push_back({userData, text});
+
+    const auto userDataInv = (boost::format("-%d") % (i + 1)).str();
+    const auto textInv = (boost::format(_("Axis %d (inverted)")) % i).str();
+    output.push_back({userDataInv, textInv});
+  }
+  return output;
+}
+
+} // namespace
+
+void Settings::visit(const SettingsVisitor& visitor)
+{
+  for (SettingsEntryBase *entry : entries) {
+    visitor.handle(*entry);
+  }
+}
+
+SettingsEntryBase::SettingsEntryBase(std::string category, std::string name) :
+  _category(std::move(category)), _name(std::move(name))
+{
+  entries.push_back(this);
+}
+
+std::string SettingsEntryBool::encode() const
+{
+  return _value ? "true" : "false";
+}
+
+const bool SettingsEntryBool::decode(const std::string& encoded) const
+{
+  std::string trimmed = boost::algorithm::trim_copy(encoded);
+  if (trimmed == "true") {
+    return true;
+  } else if (trimmed == "false") {
+    return false;
+  } else {
+    try {
+      return boost::lexical_cast<bool>(trimmed);
+    } catch (const boost::bad_lexical_cast&) {
+      return defaultValue();
+    }
+  }
+}
+
+std::string SettingsEntryInt::encode() const
+{
+  return STR(_value);
+}
+
+const int SettingsEntryInt::decode(const std::string& encoded) const
+{
+  try {
+    return boost::lexical_cast<int>(boost::algorithm::trim_copy(encoded));
+  } catch (const boost::bad_lexical_cast&) {
+    return defaultValue();
+  }
+}
+
+std::string SettingsEntryDouble::encode() const
+{
+  return STR(_value);
+}
+
+const double SettingsEntryDouble::decode(const std::string& encoded) const
+{
+  try {
+    return boost::lexical_cast<double>(boost::algorithm::trim_copy(encoded));
+  } catch (const boost::bad_lexical_cast&) {
+    return defaultValue();
+  }
+}
+
+std::ostream& operator<<(std::ostream& stream, const LocalAppParameter& param)
+{
+  json data;
+  data["type"] = static_cast<int>(param.type);
+  if (!param.value.empty()) {
+    data["value"] = param.value;
+  }
+  stream << data.dump();
+  return stream;
+}
+
+std::istream& operator>>(std::istream& stream, LocalAppParameter& param)
+{
+  try {
+    json data;
+    stream >> data;
+    param.type = static_cast<LocalAppParameterType>(data["type"]);
+    if (data.contains("value")) {
+      param.value = data["value"];
+    }
+  } catch (const json::exception& e) {
+    param.type = LocalAppParameterType::invalid;
+    param.value = "";
+  }
+  return stream;
+}
+
+SettingsEntryBool Settings::showWarningsIn3dView("3dview", "showWarningsIn3dView", true);
+SettingsEntryBool Settings::mouseCentricZoom("3dview", "mouseCentricZoom", true);
+SettingsEntryBool Settings::mouseSwapButtons("3dview", "mouseSwapButtons", false);
+SettingsEntryInt Settings::indentationWidth("editor", "indentationWidth", 1, 16, 4);
+SettingsEntryInt Settings::tabWidth("editor", "tabWidth", 1, 16, 4);
+SettingsEntryEnum<std::string> Settings::lineWrap("editor", "lineWrap", {{"None", _("None")}, {"Char", _("Wrap at character boundaries")}, {"Word", _("Wrap at word boundaries")}}, "Word");
+SettingsEntryEnum<std::string> Settings::lineWrapIndentationStyle("editor", "lineWrapIndentationStyle", {{"Fixed", _("Fixed")}, {"Same", _("Same")}, {"Indented", _("Indented")}}, "Fixed");
+SettingsEntryInt Settings::lineWrapIndentation("editor", "lineWrapIndentation", 0, 999, 4);
+SettingsEntryEnum<std::string> Settings::lineWrapVisualizationBegin("editor", "lineWrapVisualizationBegin", {{"None", _("None")}, {"Text", _("Text")}, {"Border", _("Border")}, {"Margin", _("Margin")}}, "None");
+SettingsEntryEnum<std::string> Settings::lineWrapVisualizationEnd("editor", "lineWrapVisualizationEnd", {{"None", _("None")}, {"Text", _("Text")}, {"Border", _("Border")}, {"Margin", _("Margin")}}, "Border");
+SettingsEntryEnum<std::string> Settings::showWhitespace("editor", "showWhitespaces", {{"Never", _("Never")}, {"Always", _("Always")}, {"AfterIndentation", _("After indentation")}}, "Never");
+SettingsEntryInt Settings::showWhitespaceSize("editor", "showWhitespacesSize", 1, 16, 2);
+SettingsEntryBool Settings::autoIndent("editor", "autoIndent", true);
+SettingsEntryBool Settings::backspaceUnindents("editor", "backspaceUnindents", false);
+SettingsEntryEnum<std::string> Settings::indentStyle("editor", "indentStyle", {{"Spaces", _("Spaces")}, {"Tabs", _("Tabs")}}, "Spaces");
+SettingsEntryEnum<std::string> Settings::tabKeyFunction("editor", "tabKeyFunction", {{"Indent", _("Indent")}, {"InsertTab", _("Insert Tab")}}, "Indent");
+SettingsEntryBool Settings::highlightCurrentLine("editor", "highlightCurrentLine", true);
+SettingsEntryBool Settings::enableBraceMatching("editor", "enableBraceMatching", true);
+SettingsEntryBool Settings::enableLineNumbers("editor", "enableLineNumbers", true);
+SettingsEntryBool Settings::enableNumberScrollWheel("editor", "enableNumberScrollWheel", true);
+SettingsEntryEnum<std::string> Settings::modifierNumberScrollWheel("editor", "modifierNumberScrollWheel", {{"Alt", _("Alt")}, {"Left Mouse Button", _("Left Mouse Button")}, {"Either", _("Either")}}, "Alt");
+
+SettingsEntryString Settings::defaultPrintService("printing", "printService", "NONE");
+
+SettingsEntryString Settings::printServiceName("printing", "printServiceName", "");
+SettingsEntryString Settings::printServiceFileFormat("printing", "printServiceFileFormat", "stl");
+
+SettingsEntryString Settings::octoPrintUrl("printing", "octoPrintUrl", "");
+SettingsEntryString Settings::octoPrintApiKey("printing", "octoPrintApiKey", "");
+SettingsEntryEnum<std::string> Settings::octoPrintAction("printing", "octoPrintAction", {{"upload", _("Upload only")}, {"slice", _("Upload & Slice")}, {"select", _("Upload, Slice & Select for printing")}, {"print", _("Upload, Slice & Start printing")}}, "upload");
+SettingsEntryString Settings::octoPrintSlicerEngine("printing", "octoPrintSlicerEngine", "");
+SettingsEntryString Settings::octoPrintSlicerEngineDesc("printing", "octoPrintSlicerEngineDesc", "");
+SettingsEntryString Settings::octoPrintSlicerProfile("printing", "octoPrintSlicerProfile", "");
+SettingsEntryString Settings::octoPrintSlicerProfileDesc("printing", "octoPrintSlicerProfileDesc", "");
+SettingsEntryEnum<std::string> Settings::octoPrintFileFormat(
+    "printing", "octoPrintFileFormat",
+    createFileFormatItems({FileFormat::ASCII_STL, FileFormat::BINARY_STL, FileFormat::_3MF, FileFormat::OFF}),
+    fileformat::info(FileFormat::ASCII_STL).description);
+
+SettingsEntryString Settings::localAppExecutable("printing", "localAppExecutable", "");
+SettingsEntryString Settings::localAppTempDir("printing", "localAppTempDir", "");
+SettingsEntryEnum<std::string> Settings::localAppFileFormat(
+    "printing", "localAppFileFormat", createFileFormatItems(fileformat::all3D()),
+    fileformat::info(FileFormat::ASCII_STL).description);
+SettingsEntryList<LocalAppParameter> Settings::localAppParameterList("printing", "localAppParameterList");
+
+SettingsEntryEnum<std::string> Settings::renderBackend3D("advanced", "renderBackend3D", {{"CGAL", "CGAL (old/slow)"}, {"Manifold", "Manifold (new/fast)"}}, "CGAL");
+SettingsEntryEnum<std::string> Settings::toolbarExport3D("advanced", "toolbarExport3D", createFileFormatItems(fileformat::all3D()), fileformat::info(FileFormat::ASCII_STL).description);
+SettingsEntryEnum<std::string> Settings::toolbarExport2D("advanced", "toolbarExport2D", createFileFormatItems(fileformat::all2D()), fileformat::info(FileFormat::DXF).description);
+
+SettingsEntryBool Settings::summaryCamera("summary", "camera", false);
+SettingsEntryBool Settings::summaryArea("summary", "measurementArea", false);
+SettingsEntryBool Settings::summaryBoundingBox("summary", "boundingBox", false);
+
+SettingsEntryBool Settings::inputEnableDriverHIDAPI("input", "enableDriverHIDAPI", false);
+SettingsEntryBool Settings::inputEnableDriverHIDAPILog("input", "enableDriverHIDAPILog", false);
+SettingsEntryBool Settings::inputEnableDriverSPNAV("input", "enableDriverSPNAV", false);
+SettingsEntryBool Settings::inputEnableDriverJOYSTICK("input", "enableDriverJOYSTICK", false);
+SettingsEntryBool Settings::inputEnableDriverQGAMEPAD("input", "enableDriverQGAMEPAD", false);
+SettingsEntryBool Settings::inputEnableDriverDBUS("input", "enableDriverDBUS", false);
+
+SettingsEntryEnum<std::string> Settings::inputTranslationX("input", "translationX", axisValues(), "+1");
+SettingsEntryEnum<std::string> Settings::inputTranslationY("input", "translationY", axisValues(), "-2");
+SettingsEntryEnum<std::string> Settings::inputTranslationZ("input", "translationZ", axisValues(), "-3");
+SettingsEntryEnum<std::string> Settings::inputTranslationXVPRel("input", "translationXVPRel", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputTranslationYVPRel("input", "translationYVPRel", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputTranslationZVPRel("input", "translationZVPRel", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputRotateX("input", "rotateX", axisValues(), "+4");
+SettingsEntryEnum<std::string> Settings::inputRotateY("input", "rotateY", axisValues(), "-5");
+SettingsEntryEnum<std::string> Settings::inputRotateZ("input", "rotateZ", axisValues(), "-6");
+SettingsEntryEnum<std::string> Settings::inputRotateXVPRel("input", "rotateXVPRel", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputRotateYVPRel("input", "rotateYVPRel", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputRotateZVPRel("input", "rotateZVPRel", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputZoom("input", "zoom", axisValues(), "None");
+SettingsEntryEnum<std::string> Settings::inputZoom2("input", "zoom2", axisValues(), "None");
+
+SettingsEntryDouble Settings::inputTranslationGain("input", "translationGain", 0.01, 0.01, 9.99, 1.00);
+SettingsEntryDouble Settings::inputTranslationVPRelGain("input", "translationVPRelGain", 0.01, 0.01, 9.99, 1.00);
+SettingsEntryDouble Settings::inputRotateGain("input", "rotateGain", 0.01, 0.01, 9.99, 1.00);
+SettingsEntryDouble Settings::inputRotateVPRelGain("input", "rotateVPRelGain", 0.01, 0.01, 9.99, 1.00);
+SettingsEntryDouble Settings::inputZoomGain("input", "zoomGain", 0.1, 0.1, 99.9, 1.0);
+
+SettingsEntryString Settings::inputButton0("input", "button0", "");
+SettingsEntryString Settings::inputButton1("input", "button1", "");
+SettingsEntryString Settings::inputButton2("input", "button2", "");
+SettingsEntryString Settings::inputButton3("input", "button3", "");
+SettingsEntryString Settings::inputButton4("input", "button4", "");
+SettingsEntryString Settings::inputButton5("input", "button5", "");
+SettingsEntryString Settings::inputButton6("input", "button6", "");
+SettingsEntryString Settings::inputButton7("input", "button7", "");
+SettingsEntryString Settings::inputButton8("input", "button8", "");
+SettingsEntryString Settings::inputButton9("input", "button9", "");
+SettingsEntryString Settings::inputButton10("input", "button10", "");
+SettingsEntryString Settings::inputButton11("input", "button11", "");
+SettingsEntryString Settings::inputButton12("input", "button12", "");
+SettingsEntryString Settings::inputButton13("input", "button13", "");
+SettingsEntryString Settings::inputButton14("input", "button14", "");
+SettingsEntryString Settings::inputButton15("input", "button15", "");
+SettingsEntryString Settings::inputButton16("input", "button16", "");
+SettingsEntryString Settings::inputButton17("input", "button17", "");
+SettingsEntryString Settings::inputButton18("input", "button18", "");
+SettingsEntryString Settings::inputButton19("input", "button19", "");
+SettingsEntryString Settings::inputButton20("input", "button20", "");
+SettingsEntryString Settings::inputButton21("input", "button21", "");
+SettingsEntryString Settings::inputButton22("input", "button22", "");
+SettingsEntryString Settings::inputButton23("input", "button23", "");
+SettingsEntryDouble Settings::axisTrim0("input", "axisTrim0", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim1("input", "axisTrim1", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim2("input", "axisTrim2", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim3("input", "axisTrim3", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim4("input", "axisTrim4", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim5("input", "axisTrim5", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim6("input", "axisTrim6", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim7("input", "axisTrim7", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisTrim8("input", "axisTrim8", -1.0, 0.01, 1.0, 0.0);
+SettingsEntryDouble Settings::axisDeadzone0("input", "axisDeadzone0", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone1("input", "axisDeadzone1", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone2("input", "axisDeadzone2", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone3("input", "axisDeadzone3", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone4("input", "axisDeadzone4", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone5("input", "axisDeadzone5", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone6("input", "axisDeadzone6", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone7("input", "axisDeadzone7", 0.0, 0.01, 1.0, 0.10);
+SettingsEntryDouble Settings::axisDeadzone8("input", "axisDeadzone8", 0.0, 0.01, 1.0, 0.10);
+
+SettingsEntryInt Settings::joystickNr("input", "joystickNr", 0, 9, 0);
+
+SettingsEntryBool SettingsExportPdf::exportPdfAlwaysShowDialog(SECTION_EXPORT_PDF, "always-show-sialog", true);
+SettingsEntryEnum<ExportPdfPaperSize> SettingsExportPdf::exportPdfPaperSize(SECTION_EXPORT_PDF, "paper-size", {
+  {ExportPdfPaperSize::A6,      "a6",      _("A6 (105 x 148 mm)")},
+  {ExportPdfPaperSize::A5,      "a5",      _("A5 (148 x 210 mm)")},
+  {ExportPdfPaperSize::A4,      "a4",      _("A4 (210x297 mm)")},
+  {ExportPdfPaperSize::A3,      "a3",      _("A3 (297x420 mm)")},
+  {ExportPdfPaperSize::LETTER,  "letter",  _("Letter (8.5x11 in)")},
+  {ExportPdfPaperSize::LEGAL,   "legal",   _("Legal (8.5x14 in)")},
+  {ExportPdfPaperSize::TABLOID, "tabloid", _("Tabloid (11x17 in)")}
+}, ExportPdfPaperSize::A4);
+SettingsEntryEnum<ExportPdfPaperOrientation> SettingsExportPdf::exportPdfOrientation(SECTION_EXPORT_PDF, "orientation", {
+  {ExportPdfPaperOrientation::PORTRAIT,  "portrait",  _("Portrait (Vertical)")},
+  {ExportPdfPaperOrientation::LANDSCAPE, "landscape", _("Landscape (Horizontal)")},
+  {ExportPdfPaperOrientation::AUTO,      "auto",      _("Auto")}
+}, ExportPdfPaperOrientation::PORTRAIT);
+SettingsEntryBool SettingsExportPdf::exportPdfShowFilename(SECTION_EXPORT_PDF, "show-filename", true);
+SettingsEntryBool SettingsExportPdf::exportPdfShowScale(SECTION_EXPORT_PDF, "show-scale", true);
+SettingsEntryBool SettingsExportPdf::exportPdfShowScaleMessage(SECTION_EXPORT_PDF, "show-scale-message", true);
+SettingsEntryBool SettingsExportPdf::exportPdfShowGrid(SECTION_EXPORT_PDF, "show-grid", true);
+SettingsEntryDouble SettingsExportPdf::exportPdfGridSize(SECTION_EXPORT_PDF, "grid-size", 1.0, 1.0, 100.0, 10.0);
+SettingsEntryBool SettingsExportPdf::exportPdfAddMetaData(SECTION_EXPORT_PDF, "add-meta-data", true);
+SettingsEntryBool SettingsExportPdf::exportPdfAddMetaDataAuthor(SECTION_EXPORT_PDF, "add-meta-data-author", false);
+SettingsEntryBool SettingsExportPdf::exportPdfAddMetaDataSubject(SECTION_EXPORT_PDF, "add-meta-data-subject", false);
+SettingsEntryBool SettingsExportPdf::exportPdfAddMetaDataKeywords(SECTION_EXPORT_PDF, "add-meta-data-keywords", false);
+SettingsEntryString SettingsExportPdf::exportPdfMetaDataTitle(SECTION_EXPORT_PDF, "meta-data-title", "");
+SettingsEntryString SettingsExportPdf::exportPdfMetaDataAuthor(SECTION_EXPORT_PDF, "meta-data-author", "");
+SettingsEntryString SettingsExportPdf::exportPdfMetaDataSubject(SECTION_EXPORT_PDF, "meta-data-subject", "");
+SettingsEntryString SettingsExportPdf::exportPdfMetaDataKeywords(SECTION_EXPORT_PDF, "meta-data-keywords", "");
+
+SettingsEntryBool SettingsExport3mf::export3mfAlwaysShowDialog(SECTION_EXPORT_3MF, "always-show-dialog", true);
+SettingsEntryEnum<Export3mfColorMode> SettingsExport3mf::export3mfColorMode(SECTION_EXPORT_3MF, "color-mode", {
+  {Export3mfColorMode::model,               "model",               _("Use colors from model")},
+  {Export3mfColorMode::none,                "none",                _("No colors")},
+  {Export3mfColorMode::selected_only,       "selected-only",       _("Use selected color only")},
+}, Export3mfColorMode::model);
+SettingsEntryEnum<Export3mfUnit> SettingsExport3mf::export3mfUnit(SECTION_EXPORT_3MF, "unit", {
+  {Export3mfUnit::micron,     "micron",     _("Micron")},
+  {Export3mfUnit::millimeter, "millimeter", _("Millimeter")},
+  {Export3mfUnit::centimeter, "centimeter", _("Centimeter")},
+  {Export3mfUnit::meter,      "meter",      _("Meter")},
+  {Export3mfUnit::inch,       "inch",       _("Inch")},
+  {Export3mfUnit::foot,       "foot",       _("Feet")},
+}, Export3mfUnit::millimeter);
+SettingsEntryString SettingsExport3mf::export3mfColor(SECTION_EXPORT_3MF, "color", "#f9d72c"); // Cornfield: CGAL_FACE_FRONT_COLOR
+SettingsEntryEnum<Export3mfMaterialType> SettingsExport3mf::export3mfMaterialType(SECTION_EXPORT_3MF, "material-type", {
+  {Export3mfMaterialType::color,        "color",        _("Color")},
+  {Export3mfMaterialType::basematerial, "basematerial", _("Base Material")},
+}, Export3mfMaterialType::basematerial);
+SettingsEntryInt SettingsExport3mf::export3mfDecimalPrecision(SECTION_EXPORT_3MF, "decimal-precision", 1, 16, 6);
+SettingsEntryBool SettingsExport3mf::export3mfAddMetaData(SECTION_EXPORT_3MF, "add-meta-data", true);
+SettingsEntryBool SettingsExport3mf::export3mfAddMetaDataDesigner(SECTION_EXPORT_3MF, "add-meta-data-designer", false);
+SettingsEntryBool SettingsExport3mf::export3mfAddMetaDataDescription(SECTION_EXPORT_3MF, "add-meta-data-description", false);
+SettingsEntryBool SettingsExport3mf::export3mfAddMetaDataCopyright(SECTION_EXPORT_3MF, "add-meta-data-copyright", false);
+SettingsEntryBool SettingsExport3mf::export3mfAddMetaDataLicenseTerms(SECTION_EXPORT_3MF, "add-meta-data-license-terms", false);
+SettingsEntryBool SettingsExport3mf::export3mfAddMetaDataRating(SECTION_EXPORT_3MF, "add-meta-data-rating", false);
+SettingsEntryString SettingsExport3mf::export3mfMetaDataTitle(SECTION_EXPORT_3MF, "meta-data-title", "");
+SettingsEntryString SettingsExport3mf::export3mfMetaDataDesigner(SECTION_EXPORT_3MF, "meta-data-designer", "");
+SettingsEntryString SettingsExport3mf::export3mfMetaDataDescription(SECTION_EXPORT_3MF, "meta-data-description", "");
+SettingsEntryString SettingsExport3mf::export3mfMetaDataCopyright(SECTION_EXPORT_3MF, "meta-data-copyright", "");
+SettingsEntryString SettingsExport3mf::export3mfMetaDataLicenseTerms(SECTION_EXPORT_3MF, "meta-data-license-terms", "");
+SettingsEntryString SettingsExport3mf::export3mfMetaDataRating(SECTION_EXPORT_3MF, "meta-data-rating", "");
+
+} // namespace Settings
diff --git a/src/core/Settings.h b/src/core/Settings.h
new file mode 100644
index 0000000000..551a092456
--- /dev/null
+++ b/src/core/Settings.h
@@ -0,0 +1,559 @@
+#pragma once
+
+#include <cstddef>
+#include <cstdint>
+#include <string>
+#include <utility>
+#include <vector>
+#include <array>
+#include <sstream>
+#include <tuple>
+
+#include "io/export_enums.h"
+
+namespace Settings {
+
+  // Note that those 2 values also relate to the currently
+  // static list of fields in the preferences GUI, so updating
+  // here needs a change in the UI definition!
+constexpr inline size_t max_axis = 9;
+constexpr inline size_t max_buttons = 24;
+
+// Property name in GUI designer for matching enum values
+constexpr inline auto PROPERTY_NAME = "_settings_value";
+// Additional value for enums that can map to an additional value (e.g. GridSize in PDF Export)
+constexpr inline auto PROPERTY_SELECTED_VALUE = "_selected_value";
+
+constexpr inline auto SECTION_EXPORT_PDF = "export-pdf";
+constexpr inline auto SECTION_EXPORT_3MF = "export-3mf";
+
+class SettingsEntryBase
+{
+public:
+  const std::string& category() const { return _category; }
+  const std::string& name() const { return _name; }
+  const std::string key() const { return category() + "/" + name(); }
+
+  virtual bool isDefault() const = 0;
+  virtual std::string encode() const = 0;
+  virtual void set(const std::string& encoded) = 0;
+  virtual const std::tuple<std::string, std::string> help() const = 0;
+
+protected:
+  SettingsEntryBase(std::string category, std::string name);
+  virtual ~SettingsEntryBase() = default;
+
+private:
+  std::string _category;
+  std::string _name;
+};
+
+template<typename entry_type>
+class SettingsEntry : public SettingsEntryBase
+{
+public:
+  using entry_type_t = entry_type;
+
+  virtual const entry_type decode(const std::string& encoded) const = 0;
+
+protected:
+  SettingsEntry(const std::string& category, const std::string& name) : SettingsEntryBase(category, name) {}
+  virtual ~SettingsEntry() = default;
+};
+
+class SettingsEntryBool : public SettingsEntry<bool>
+{
+public:
+  SettingsEntryBool(const std::string& category, const std::string& name, bool defaultValue) :
+    SettingsEntry(category, name),
+    _value(defaultValue),
+    _defaultValue(defaultValue)
+  {}
+
+  bool value() const { return _value; }
+  void setValue(bool value) { _value = value; }
+  bool defaultValue() const { return _defaultValue; }
+  bool isDefault() const override { return _value == _defaultValue; }
+  std::string encode() const override;
+  const bool decode(const std::string& encoded) const override;
+  void set(const std::string& encoded) override { setValue(decode(encoded)); };
+  const std::tuple<std::string, std::string> help() const override {
+    return {"bool", defaultValue() ? "<true>/false" : "true/<false>"};
+  };
+
+private:
+  bool _value;
+  bool _defaultValue;
+};
+
+class SettingsEntryInt : public SettingsEntry<int>
+{
+public:
+  SettingsEntryInt(const std::string& category, const std::string& name, int minimum, int maximum, int defaultValue) :
+    SettingsEntry(category, name),
+    _value(defaultValue),
+    _defaultValue(defaultValue),
+    _minimum(minimum),
+    _maximum(maximum)
+  {}
+
+  int value() const { return _value; }
+  void setValue(int value) { _value = value; }
+  int minimum() const { return _minimum; }
+  int maximum() const { return _maximum; }
+  int defaultValue() const { return _defaultValue; }
+  bool isDefault() const override { return _value == _defaultValue; }
+  std::string encode() const override;
+  const int decode(const std::string& encoded) const override;
+  void set(const std::string& encoded) override { setValue(decode(encoded)); };
+  const std::tuple<std::string, std::string> help() const override {
+    return {"int", std::to_string(_minimum) + " : <" + std::to_string(defaultValue()) + "> : " + std::to_string(maximum())};
+  };
+
+private:
+  int _value;
+  int _defaultValue;
+  int _minimum;
+  int _maximum;
+};
+
+class SettingsEntryDouble : public SettingsEntry<double>
+{
+public:
+  SettingsEntryDouble(const std::string& category, const std::string& name, double minimum, double step, double maximum, double defaultValue) :
+    SettingsEntry(category, name),
+    _value(defaultValue),
+    _defaultValue(defaultValue),
+    _minimum(minimum),
+    _step(step),
+    _maximum(maximum)
+  {}
+
+  double value() const { return _value; }
+  void setValue(double value) { _value = value; }
+  double minimum() const { return _minimum; }
+  double step() const { return _step; }
+  double maximum() const { return _maximum; }
+  double defaultValue() const { return _defaultValue; }
+  bool isDefault() const override { return _value == _defaultValue; }
+  std::string encode() const override;
+  const double decode(const std::string& encoded) const override;
+  void set(const std::string& encoded) override { setValue(decode(encoded)); };
+  const std::tuple<std::string, std::string> help() const override {
+    return {"double", std::to_string(_minimum) + " : <" + std::to_string(defaultValue()) + "> : " + std::to_string(maximum())};
+  };
+
+private:
+  double _value;
+  double _defaultValue;
+  double _minimum;
+  double _step;
+  double _maximum;
+};
+
+class SettingsEntryString : public SettingsEntry<std::string>
+{
+public:
+  SettingsEntryString(const std::string& category, const std::string& name, const std::string& defaultValue) :
+    SettingsEntry(category, name),
+    _value(defaultValue),
+    _defaultValue(defaultValue)
+  {}
+
+  const std::string& value() const { return _value; }
+  void setValue(const std::string& value) { _value = value; }
+  const std::string& defaultValue() const { return _defaultValue; }
+  bool isDefault() const override { return _value == _defaultValue; }
+  std::string encode() const override { return value(); }
+  const std::string decode(const std::string& encoded) const override { return encoded; }
+  void set(const std::string& encoded) override { setValue(decode(encoded)); };
+  const std::tuple<std::string, std::string> help() const override { return {"string", "\"" + encode() + "\""}; };
+
+private:
+  std::string _value;
+  std::string _defaultValue;
+};
+
+template<typename enum_type>
+class SettingsEntryEnum : public SettingsEntry<enum_type>
+{
+public:
+  struct Item {
+    enum_type value;
+    std::string name;
+    std::string description;
+  };
+  SettingsEntryEnum(const std::string& category, const std::string& name, std::vector<Item> items, enum_type defaultValue) :
+    SettingsEntry<enum_type>(category, name),
+    _items(std::move(items)),
+    _defaultValue(std::move(defaultValue))
+  {
+    setValue(_defaultValue);
+  }
+
+  const Item& item() const { return _items[_index]; }
+  const enum_type& value() const { return item().value; }
+  size_t index() const { return _index; }
+  void setValue(const enum_type& value);
+  void setIndex(size_t index) { if (index < _items.size()) _index = index; }
+  const std::vector<Item>& items() const { return _items; }
+  const enum_type& defaultValue() const { return _defaultValue; }
+  bool isDefault() const override { return value() == _defaultValue; }
+  std::string encode() const override;
+  const enum_type decode(const std::string& encoded) const override;
+  void set(const std::string& encoded) override { setValue(decode(encoded)); }
+  const std::tuple<std::string, std::string> help() const override {
+    std::string sep = "[";
+    std::string list = "";
+    for (const auto& item : items()) {
+      const auto def = item.value == defaultValue();
+      const auto p = def ? "<" : "";
+      const auto s = def ? ">" : "";
+      list += sep + p + item.name + s;
+      sep = ",";
+    }
+    list += "]";
+    return {"enum", list};
+  };
+
+private:
+  std::vector<Item> _items;
+  size_t _index{0};
+  enum_type _defaultValue;
+};
+
+template<typename enum_type>
+void SettingsEntryEnum<enum_type>::setValue(const enum_type& value)
+{
+  for (size_t i = 0; i < _items.size(); ++i) {
+    if (_items[i].value == value) {
+      _index = i;
+      return;
+    }
+  }
+}
+
+template<typename enum_type>
+std::string SettingsEntryEnum<enum_type>::encode() const { return item().name; }
+
+template<typename enum_type>
+const enum_type SettingsEntryEnum<enum_type>::decode(const std::string& encoded) const {
+  for (const Item& item : items()) {
+    if (item.name == encoded) {
+      return item.value;
+    }
+  }
+  return defaultValue();
+}
+
+template<>
+inline std::string SettingsEntryEnum<std::string>::encode() const { return value(); }
+
+template<>
+inline const std::string SettingsEntryEnum<std::string>::decode(const std::string& encoded) const { return encoded; }
+
+class LocalAppParameterType
+{
+public:
+  enum Value : uint8_t
+  {
+    invalid,
+    string,
+    file,
+    dir,
+    extension,
+    source,
+    sourcedir
+  };
+
+  LocalAppParameterType() = default;
+  constexpr LocalAppParameterType(Value v) : value(v) { }
+  constexpr operator Value() const { return value; }
+  explicit operator bool() const = delete;
+
+  std::string icon() const {
+    switch (value) {
+      case string: return "chokusen-parameter";
+      case file: return "chokusen-orthogonal";
+      case dir: return "chokusen-folder";
+      case extension: return "chokusen-parameter";
+      case source: return "chokusen-file";
+      case sourcedir: return "chokusen-folder";
+      default: return "*invalid*";
+    }
+  }
+
+  std::string description() const {
+    switch (value) {
+      case string: return "";
+      case file: return "<full path to the output file>";
+      case dir: return "<directory of the output file>";
+      case extension: return "<extension of the output file without leading dot>";
+      case source: return "<full path to the main source file>";
+      case sourcedir: return "<directory of the main source file>";
+      default: return "*invalid*";
+    }
+  }
+
+private:
+  Value value;
+};
+
+struct LocalAppParameter {
+  LocalAppParameterType type;
+  std::string value;
+
+  LocalAppParameter() : type(LocalAppParameterType::string), value("") {}
+  LocalAppParameter(const LocalAppParameterType t, std::string v) : type(t), value(std::move(v)) {}
+  operator bool() const { return type != LocalAppParameterType::invalid; }
+};
+
+template<typename item_type>
+class SettingsEntryList : public SettingsEntry<std::vector<item_type>>
+{
+public:
+  using list_type_t = std::vector<item_type>;
+  SettingsEntryList(const std::string& category, const std::string& name) :
+    SettingsEntry<std::vector<item_type>>(category, name)
+  {
+  }
+  const list_type_t& value() const { return _items; }
+  void setValue(const list_type_t& items) { _items = items; }
+  bool isDefault() const override { return _items.empty(); }
+  std::string encode() const override {
+    std::ostringstream oss;
+    for (const auto& item : _items) {
+      oss << item;
+    }
+    return oss.str();
+  }
+  const std::vector<item_type> decode(const std::string& encoded) const override {
+    std::vector<item_type> items;
+    std::stringstream ss;
+    ss << encoded;
+    while (ss.good()) {
+      item_type item;
+      ss >> item;
+      if (item) {
+        items.push_back(item);
+      }
+    }
+    return items;
+  }
+  void set(const std::string& encoded) override { setValue(decode(encoded)); };
+  const std::tuple<std::string, std::string> help() const override { return {"list", ""};
+  };
+
+private:
+  list_type_t _items;
+};
+
+class SettingsVisitor;
+
+class Settings
+{
+public:
+  static SettingsEntryBool showWarningsIn3dView;
+  static SettingsEntryBool mouseCentricZoom;
+  static SettingsEntryBool mouseSwapButtons;
+  static SettingsEntryInt indentationWidth;
+  static SettingsEntryInt tabWidth;
+  static SettingsEntryEnum<std::string> lineWrap;
+  static SettingsEntryEnum<std::string> lineWrapIndentationStyle;
+  static SettingsEntryInt lineWrapIndentation;
+  static SettingsEntryEnum<std::string> lineWrapVisualizationBegin;
+  static SettingsEntryEnum<std::string> lineWrapVisualizationEnd;
+  static SettingsEntryEnum<std::string> showWhitespace;
+  static SettingsEntryInt showWhitespaceSize;
+  static SettingsEntryBool autoIndent;
+  static SettingsEntryBool backspaceUnindents;
+  static SettingsEntryEnum<std::string> indentStyle;
+  static SettingsEntryEnum<std::string> tabKeyFunction;
+  static SettingsEntryBool highlightCurrentLine;
+  static SettingsEntryBool enableBraceMatching;
+  static SettingsEntryBool enableLineNumbers;
+  static SettingsEntryBool enableNumberScrollWheel;
+  static SettingsEntryEnum<std::string> modifierNumberScrollWheel;
+
+  static SettingsEntryString defaultPrintService;
+  static SettingsEntryString printServiceName;
+  static SettingsEntryString printServiceFileFormat;
+
+  static SettingsEntryString octoPrintUrl;
+  static SettingsEntryString octoPrintApiKey;
+  static SettingsEntryEnum<std::string> octoPrintFileFormat;
+  static SettingsEntryEnum<std::string> octoPrintAction;
+  static SettingsEntryString octoPrintSlicerEngine;
+  static SettingsEntryString octoPrintSlicerEngineDesc;
+  static SettingsEntryString octoPrintSlicerProfile;
+  static SettingsEntryString octoPrintSlicerProfileDesc;
+
+  static SettingsEntryString localAppExecutable;
+  static SettingsEntryString localAppTempDir;
+  static SettingsEntryList<LocalAppParameter> localAppParameterList;
+  static SettingsEntryEnum<std::string> localAppFileFormat;
+
+  static SettingsEntryBool manifoldEnabled;
+  static SettingsEntryEnum<std::string> renderBackend3D;
+  static SettingsEntryEnum<std::string> toolbarExport3D;
+  static SettingsEntryEnum<std::string> toolbarExport2D;
+
+  static SettingsEntryBool summaryCamera;
+  static SettingsEntryBool summaryArea;
+  static SettingsEntryBool summaryBoundingBox;
+
+  static SettingsEntryBool inputEnableDriverHIDAPI;
+  static SettingsEntryBool inputEnableDriverHIDAPILog;
+  static SettingsEntryBool inputEnableDriverSPNAV;
+  static SettingsEntryBool inputEnableDriverJOYSTICK;
+  static SettingsEntryBool inputEnableDriverQGAMEPAD;
+  static SettingsEntryBool inputEnableDriverDBUS;
+
+  static SettingsEntryEnum<std::string> inputTranslationX;
+  static SettingsEntryEnum<std::string> inputTranslationY;
+  static SettingsEntryEnum<std::string> inputTranslationZ;
+  static SettingsEntryEnum<std::string> inputTranslationXVPRel;
+  static SettingsEntryEnum<std::string> inputTranslationYVPRel;
+  static SettingsEntryEnum<std::string> inputTranslationZVPRel;
+  static SettingsEntryEnum<std::string> inputRotateX;
+  static SettingsEntryEnum<std::string> inputRotateY;
+  static SettingsEntryEnum<std::string> inputRotateZ;
+  static SettingsEntryEnum<std::string> inputRotateXVPRel;
+  static SettingsEntryEnum<std::string> inputRotateYVPRel;
+  static SettingsEntryEnum<std::string> inputRotateZVPRel;
+  static SettingsEntryEnum<std::string> inputZoom;
+  static SettingsEntryEnum<std::string> inputZoom2;
+  static SettingsEntryDouble inputTranslationGain;
+  static SettingsEntryDouble inputTranslationVPRelGain;
+  static SettingsEntryDouble inputRotateGain;
+  static SettingsEntryDouble inputRotateVPRelGain;
+  static SettingsEntryDouble inputZoomGain;
+  static SettingsEntryString inputButton0;
+  static SettingsEntryString inputButton1;
+  static SettingsEntryString inputButton2;
+  static SettingsEntryString inputButton3;
+  static SettingsEntryString inputButton4;
+  static SettingsEntryString inputButton5;
+  static SettingsEntryString inputButton6;
+  static SettingsEntryString inputButton7;
+  static SettingsEntryString inputButton8;
+  static SettingsEntryString inputButton9;
+  static SettingsEntryString inputButton10;
+  static SettingsEntryString inputButton11;
+  static SettingsEntryString inputButton12;
+  static SettingsEntryString inputButton13;
+  static SettingsEntryString inputButton14;
+  static SettingsEntryString inputButton15;
+  static SettingsEntryString inputButton16;
+  static SettingsEntryString inputButton17;
+  static SettingsEntryString inputButton18;
+  static SettingsEntryString inputButton19;
+  static SettingsEntryString inputButton20;
+  static SettingsEntryString inputButton21;
+  static SettingsEntryString inputButton22;
+  static SettingsEntryString inputButton23;
+  static SettingsEntryDouble axisTrim0;
+  static SettingsEntryDouble axisTrim1;
+  static SettingsEntryDouble axisTrim2;
+  static SettingsEntryDouble axisTrim3;
+  static SettingsEntryDouble axisTrim4;
+  static SettingsEntryDouble axisTrim5;
+  static SettingsEntryDouble axisTrim6;
+  static SettingsEntryDouble axisTrim7;
+  static SettingsEntryDouble axisTrim8;
+  static SettingsEntryDouble axisDeadzone0;
+  static SettingsEntryDouble axisDeadzone1;
+  static SettingsEntryDouble axisDeadzone2;
+  static SettingsEntryDouble axisDeadzone3;
+  static SettingsEntryDouble axisDeadzone4;
+  static SettingsEntryDouble axisDeadzone5;
+  static SettingsEntryDouble axisDeadzone6;
+  static SettingsEntryDouble axisDeadzone7;
+  static SettingsEntryDouble axisDeadzone8;
+  static SettingsEntryInt joystickNr;
+
+  static void visit(const SettingsVisitor& visitor);
+};
+
+class SettingsExportPdf {
+public:
+  static SettingsEntryBool exportPdfAlwaysShowDialog;
+  static SettingsEntryEnum<ExportPdfPaperSize> exportPdfPaperSize;
+  static SettingsEntryEnum<ExportPdfPaperOrientation> exportPdfOrientation;
+  static SettingsEntryBool exportPdfShowFilename;
+  static SettingsEntryBool exportPdfShowScale;
+  static SettingsEntryBool exportPdfShowScaleMessage;
+  static SettingsEntryBool exportPdfShowGrid;
+  static SettingsEntryDouble exportPdfGridSize;
+  static SettingsEntryBool exportPdfAddMetaData;
+  static SettingsEntryBool exportPdfAddMetaDataAuthor;
+  static SettingsEntryBool exportPdfAddMetaDataSubject;
+  static SettingsEntryBool exportPdfAddMetaDataKeywords;
+  static SettingsEntryString exportPdfMetaDataTitle;
+  static SettingsEntryString exportPdfMetaDataAuthor;
+  static SettingsEntryString exportPdfMetaDataSubject;
+  static SettingsEntryString exportPdfMetaDataKeywords;
+
+  static constexpr std::array<const SettingsEntryBase *, 12> cmdline{
+    &exportPdfPaperSize,
+    &exportPdfOrientation,
+    &exportPdfShowFilename,
+    &exportPdfShowScale,
+    &exportPdfShowScaleMessage,
+    &exportPdfShowGrid,
+    &exportPdfGridSize,
+    &exportPdfAddMetaData,
+    &exportPdfMetaDataTitle,
+    &exportPdfMetaDataAuthor,
+    &exportPdfMetaDataSubject,
+    &exportPdfMetaDataKeywords,
+  };
+};
+
+class SettingsExport3mf {
+public:
+  static SettingsEntryBool export3mfAlwaysShowDialog;
+  static SettingsEntryEnum<Export3mfColorMode> export3mfColorMode;
+  static SettingsEntryEnum<Export3mfUnit> export3mfUnit;
+  static SettingsEntryString export3mfColor;
+  static SettingsEntryEnum<Export3mfMaterialType> export3mfMaterialType;
+  static SettingsEntryInt export3mfDecimalPrecision;
+  static SettingsEntryBool export3mfAddMetaData;
+  static SettingsEntryBool export3mfAddMetaDataDesigner;
+  static SettingsEntryBool export3mfAddMetaDataDescription;
+  static SettingsEntryBool export3mfAddMetaDataCopyright;
+  static SettingsEntryBool export3mfAddMetaDataLicenseTerms;
+  static SettingsEntryBool export3mfAddMetaDataRating;
+  static SettingsEntryString export3mfMetaDataTitle;
+  static SettingsEntryString export3mfMetaDataDesigner;
+  static SettingsEntryString export3mfMetaDataDescription;
+  static SettingsEntryString export3mfMetaDataCopyright;
+  static SettingsEntryString export3mfMetaDataLicenseTerms;
+  static SettingsEntryString export3mfMetaDataRating;
+
+  static constexpr std::array<const SettingsEntryBase *, 12> cmdline{
+    &export3mfColorMode,
+    &export3mfUnit,
+    &export3mfColor,
+    &export3mfMaterialType,
+    &export3mfDecimalPrecision,
+    &export3mfAddMetaData,
+    &export3mfMetaDataTitle,
+    &export3mfMetaDataDesigner,
+    &export3mfMetaDataDescription,
+    &export3mfMetaDataCopyright,
+    &export3mfMetaDataLicenseTerms,
+    &export3mfMetaDataRating,
+  };
+};
+
+class SettingsVisitor
+{
+public:
+  SettingsVisitor() = default;
+  virtual ~SettingsVisitor() = default;
+
+  virtual void handle(SettingsEntryBase& entry) const = 0;
+};
+
+} // namespace Settings
diff --git a/src/core/node.h b/src/core/node.h
index 4e098b7241..2518e156e5 100644
--- a/src/core/node.h
+++ b/src/core/node.h
@@ -4,7 +4,6 @@
 #include <memory>
 #include <cstddef>
 #include <utility>
-#include <utility>
 #include <vector>
 #include <string>
 #include <deque>
diff --git a/src/glview/ColorMap.cc b/src/glview/ColorMap.cc
index d7e661da23..181ae5bb67 100644
--- a/src/glview/ColorMap.cc
+++ b/src/glview/ColorMap.cc
@@ -1,4 +1,5 @@
 #include "glview/ColorMap.h"
+#include "core/ColorUtil.h"
 #include "utils/printutils.h"
 #include "platform/PlatformUtils.h"
 
@@ -17,27 +18,6 @@ namespace fs = std::filesystem;
 
 static const char *DEFAULT_COLOR_SCHEME_NAME = "Cornfield";
 
-// See http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
-static void rgbtohsv(float r, float g, float b, float& h, float& s, float& v)
-{
-  float K = 0.f;
-
-  if (g < b) {
-    std::swap(g, b);
-    K = -1.f;
-  }
-
-  if (r < g) {
-    std::swap(r, g);
-    K = -2.f / 6.f - K;
-  }
-
-  float chroma = r - std::min(g, b);
-  h = std::fabs(K + (g - b) / (6.f * chroma + 1e-20f));
-  s = chroma / (r + 1e-20f);
-  v = r;
-}
-
 RenderColorScheme::RenderColorScheme() : _path("")
 {
   _name = DEFAULT_COLOR_SCHEME_NAME;
@@ -226,42 +206,6 @@ Color4f ColorMap::getColor(const ColorScheme& cs, const RenderColor rc)
   return {0, 0, 0, 127};
 }
 
-Color4f ColorMap::getColorHSV(const Color4f& col)
-{
-  float h, s, v;
-  rgbtohsv(col[0], col[1], col[2], h, s, v);
-  return {h, s, v, col[3]};
-}
-
-/**
- * Calculate contrast color. Based on the article
- * http://gamedev.stackexchange.com/questions/38536/given-a-rgb-color-x-how-to-find-the-most-contrasting-color-y
- *
- * @param col the input color
- * @return a color with high contrast to the input color
- */
-Color4f ColorMap::getContrastColor(const Color4f& col)
-{
-  Color4f hsv = ColorMap::getColorHSV(col);
-  float Y = 0.2126f * col[0] + 0.7152f * col[1] + 0.0722f * col[2];
-  float S = hsv[1];
-
-  if (S < 0.5) {
-    // low saturation, choose between black / white based on luminance Y
-    float val = Y > 0.5 ? 0.0f : 1.0f;
-    return {val, val, val, 1.0f};
-  } else {
-    float H = 360 * hsv[0];
-    if ((H < 60) || (H > 300)) {
-      return {0.0f, 1.0f, 1.0f, 1.0f}; // red -> cyan
-    } else if (H < 180) {
-      return {1.0f, 0.0f, 1.0f, 1.0f}; // green -> magenta
-    } else {
-      return {1.0f, 1.0f, 0.0f, 1.0f}; // blue -> yellow
-    }
-  }
-}
-
 void ColorMap::enumerateColorSchemesInPath(colorscheme_set_t& result_set, const fs::path& basePath)
 {
   const fs::path color_schemes = basePath / "color-schemes" / "render";
diff --git a/src/gui/Export3mfDialog.cc b/src/gui/Export3mfDialog.cc
new file mode 100644
index 0000000000..56b3180fba
--- /dev/null
+++ b/src/gui/Export3mfDialog.cc
@@ -0,0 +1,124 @@
+/*
+ *  OpenSCAD (www.openscad.org)
+ *  Copyright (C) 2009-2025 Clifford Wolf <clifford@clifford.at> and
+ *                          Marius Kintel <marius@kintel.net>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  As a special exception, you have permission to link this program
+ *  with the CGAL library and distribute executables, as long as you
+ *  follow the requirements of the GNU GPL in regard to all of the
+ *  software in the executable aside from CGAL.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include "gui/Export3mfDialog.h"
+
+#include <QString>
+#include <QCheckBox>
+#include <QColor>
+#include <QDialog>
+#include <QColorDialog>
+#include <QLineEdit>
+
+#include "export.h"
+#include "Settings.h"
+#include "UIUtils.h"
+#include "gui/SettingsWriter.h"
+
+using S = Settings::SettingsExport3mf;
+using SEBool = Settings::SettingsEntryBool;
+using SEString = Settings::SettingsEntryString;
+
+extern const std::string get_lib3mf_version();
+
+Export3mfDialog::Export3mfDialog()
+{
+	setupUi(this);
+	this->checkBoxAlwaysShowDialog->setChecked(S::export3mfAlwaysShowDialog.value());
+	initButtonGroup(this->buttonGroupColors, S::export3mfColorMode);
+	initButtonGroup(this->buttonGroupUnit, S::export3mfUnit);
+	this->color = QColor(QString::fromStdString(S::export3mfColor.value()));
+	this->labelColorsSelected->setStyleSheet(UIUtils::getBackgroundColorStyleSheet(this->color));
+	this->spinBoxDecimalPrecision->setValue(S::export3mfDecimalPrecision.value());
+	initComboBox(this->comboBoxMaterialType, S::export3mfMaterialType);
+
+	groupMetaData->setChecked(S::export3mfAddMetaData.value());
+	initMetaData(nullptr, this->lineEditMetaDataTitle, nullptr, S::export3mfMetaDataTitle);
+	initMetaData(this->checkBoxMetaDataDesigner, this->lineEditMetaDataDesigner, &S::export3mfAddMetaDataDesigner, S::export3mfMetaDataDesigner);
+	initMetaData(this->checkBoxMetaDataDescription, this->lineEditMetaDataDescription, &S::export3mfAddMetaDataDescription, S::export3mfMetaDataDescription);
+	initMetaData(this->checkBoxMetaDataCopyright, this->lineEditMetaDataCopyright, &S::export3mfAddMetaDataCopyright, S::export3mfMetaDataCopyright);
+	initMetaData(this->checkBoxMetaDataLicenseTerms, this->lineEditMetaDataLicenseTerms, &S::export3mfAddMetaDataLicenseTerms, S::export3mfMetaDataLicenseTerms);
+	initMetaData(this->checkBoxMetaDataRating, this->lineEditMetaDataRating, &S::export3mfAddMetaDataRating, S::export3mfMetaDataRating);
+
+	const auto library_version = get_lib3mf_version();
+	if (library_version.compare(0, 2, "1.") == 0) {
+		this->spinBoxDecimalPrecision->setEnabled(false);
+		this->toolButtonDecimalPrecisionReset->setEnabled(false);
+		this->labelDecimalPrecision->setEnabled(false);
+		this->spinBoxDecimalPrecision->setToolTip(_("This OpenSCAD build uses lib3mf version 1. Setting the decimal precision for export needs version 2 or later."));
+		this->toolButtonDecimalPrecisionReset->setToolTip("");
+	}
+}
+
+void Export3mfDialog::updateColor(const QColor& color)
+{
+	this->color = color;
+	this->labelColorsSelected->setStyleSheet(UIUtils::getBackgroundColorStyleSheet(this->color));
+}
+
+int Export3mfDialog::exec()
+{
+  bool showDialog = this->checkBoxAlwaysShowDialog->isChecked();
+  if ((QApplication::keyboardModifiers() & Qt::ShiftModifier) != 0) {
+	showDialog = true;
+  }
+
+  const auto result = showDialog ? QDialog::exec() : QDialog::Accepted;
+
+  if (result == QDialog::Accepted) {
+	S::export3mfAlwaysShowDialog.setValue(this->checkBoxAlwaysShowDialog->isChecked());
+	applyButtonGroup(this->buttonGroupColors, S::export3mfColorMode);
+	applyButtonGroup(this->buttonGroupUnit, S::export3mfUnit);
+	S::export3mfColor.setValue(this->color.toRgb().name().toStdString());
+	S::export3mfMaterialType.setIndex(this->comboBoxMaterialType->currentIndex());
+	S::export3mfDecimalPrecision.setValue(this->spinBoxDecimalPrecision->value());
+	S::export3mfAddMetaData.setValue(this->groupMetaData->isChecked());
+	applyMetaData(nullptr, this->lineEditMetaDataTitle, nullptr, S::export3mfMetaDataTitle);
+	applyMetaData(this->checkBoxMetaDataDesigner, this->lineEditMetaDataDesigner, &S::export3mfAddMetaDataDesigner, S::export3mfMetaDataDesigner);
+	applyMetaData(this->checkBoxMetaDataDescription, this->lineEditMetaDataDescription, &S::export3mfAddMetaDataDescription, S::export3mfMetaDataDescription);
+	applyMetaData(this->checkBoxMetaDataCopyright, this->lineEditMetaDataCopyright, &S::export3mfAddMetaDataCopyright, S::export3mfMetaDataCopyright);
+	applyMetaData(this->checkBoxMetaDataLicenseTerms, this->lineEditMetaDataLicenseTerms, &S::export3mfAddMetaDataLicenseTerms, S::export3mfMetaDataLicenseTerms);
+	applyMetaData(this->checkBoxMetaDataRating, this->lineEditMetaDataRating, &S::export3mfAddMetaDataRating, S::export3mfMetaDataRating);
+	Settings::Settings::visit(SettingsWriter());
+  }
+
+  return result;
+}
+
+void Export3mfDialog::on_toolButtonColorsSelected_clicked()
+{
+	updateColor(QColorDialog::getColor(this->color));
+}
+
+void Export3mfDialog::on_toolButtonColorsSelectedReset_clicked()
+{
+	updateColor(QColor(QString::fromStdString(S::export3mfColor.defaultValue())));
+}
+
+void Export3mfDialog::on_toolButtonDecimalPrecisionReset_clicked()
+{
+	this->spinBoxDecimalPrecision->setValue(S::export3mfDecimalPrecision.defaultValue());
+}
diff --git a/src/gui/Export3mfDialog.h b/src/gui/Export3mfDialog.h
new file mode 100644
index 0000000000..a46c6b72b3
--- /dev/null
+++ b/src/gui/Export3mfDialog.h
@@ -0,0 +1,63 @@
+/*
+ *  OpenSCAD (www.openscad.org)
+ *  Copyright (C) 2009-2025 Clifford Wolf <clifford@clifford.at> and
+ *                          Marius Kintel <marius@kintel.net>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  As a special exception, you have permission to link this program
+ *  with the CGAL library and distribute executables, as long as you
+ *  follow the requirements of the GNU GPL in regard to all of the
+ *  software in the executable aside from CGAL.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#pragma once
+
+#include <memory>
+#include <QDialog>
+
+#include "Settings.h"
+#include "gui/qtgettext.h" // IWYU pragma: keep
+#include "io/export.h"
+#include "ui_Export3mfDialog.h"
+#include "gui/InitConfigurator.h"
+
+using SEBool = Settings::SettingsEntryBool;
+using SEString = Settings::SettingsEntryString;
+
+class Export3mfDialog : public QDialog, public Ui::Export3mfDialog, public InitConfigurator
+{
+  Q_OBJECT;
+
+public:
+  Export3mfDialog();
+
+  int exec() override;
+
+  std::shared_ptr<const Export3mfOptions> getOptions() const {
+    return Export3mfOptions::fromSettings();
+  }
+
+private slots:
+  void on_toolButtonColorsSelected_clicked();
+  void on_toolButtonColorsSelectedReset_clicked();
+  void on_toolButtonDecimalPrecisionReset_clicked();
+
+private:
+  void updateColor(const QColor& color);
+
+  QColor color;
+};
diff --git a/src/gui/Export3mfDialog.ui b/src/gui/Export3mfDialog.ui
new file mode 100644
index 0000000000..0d28e1b0af
--- /dev/null
+++ b/src/gui/Export3mfDialog.ui
@@ -0,0 +1,661 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Export3mfDialog</class>
+ <widget class="QDialog" name="Export3mfDialog">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>701</width>
+    <height>730</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Export 3MF Options</string>
+  </property>
+  <property name="autoFillBackground">
+   <bool>true</bool>
+  </property>
+  <layout class="QVBoxLayout" name="verticalLayout_3">
+   <property name="leftMargin">
+    <number>9</number>
+   </property>
+   <property name="topMargin">
+    <number>9</number>
+   </property>
+   <property name="rightMargin">
+    <number>9</number>
+   </property>
+   <property name="bottomMargin">
+    <number>9</number>
+   </property>
+   <item>
+    <widget class="QScrollArea" name="scrollArea">
+     <property name="frameShape">
+      <enum>QFrame::NoFrame</enum>
+     </property>
+     <property name="widgetResizable">
+      <bool>true</bool>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>
+     </property>
+     <widget class="QWidget" name="scrollAreaWidgetContents">
+      <property name="geometry">
+       <rect>
+        <x>0</x>
+        <y>0</y>
+        <width>683</width>
+        <height>669</height>
+       </rect>
+      </property>
+      <layout class="QGridLayout" name="gridLayout_4" rowstretch="0,0,0,1" columnstretch="1,1">
+       <property name="leftMargin">
+        <number>0</number>
+       </property>
+       <property name="topMargin">
+        <number>0</number>
+       </property>
+       <property name="rightMargin">
+        <number>0</number>
+       </property>
+       <property name="bottomMargin">
+        <number>0</number>
+       </property>
+       <item row="0" column="1">
+        <widget class="QGroupBox" name="groupUnit">
+         <property name="toolTip">
+          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Set the PDF page (paper) size.  &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+         <property name="title">
+          <string>Unit</string>
+         </property>
+         <layout class="QGridLayout" name="gridLayout">
+          <item row="0" column="0">
+           <layout class="QVBoxLayout" name="vLayoutUnit">
+            <item>
+             <widget class="QRadioButton" name="radioButtonUnitMicron">
+              <property name="text">
+               <string>Micron</string>
+              </property>
+              <property name="checked">
+               <bool>true</bool>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>micron</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupUnit</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonUnitMillimeter">
+              <property name="text">
+               <string>Millimeter (default)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>millimeter</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupUnit</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonUnitCentimeter">
+              <property name="text">
+               <string>Centimeter</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>centimeter</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupUnit</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonUnitMeter">
+              <property name="text">
+               <string>Meter</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>meter</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupUnit</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonUnitInch">
+              <property name="text">
+               <string>Inch</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>inch</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupUnit</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonUnitFoot">
+              <property name="text">
+               <string>Foot</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>foot</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupUnit</string>
+              </attribute>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
+        </widget>
+       </item>
+       <item row="0" column="0">
+        <widget class="QGroupBox" name="groupColor">
+         <property name="toolTip">
+          <string/>
+         </property>
+         <property name="title">
+          <string>Colors</string>
+         </property>
+         <layout class="QGridLayout" name="gridLayout_2">
+          <item row="0" column="0">
+           <layout class="QVBoxLayout" name="verticalLayoutColors">
+            <item>
+             <widget class="QRadioButton" name="radioButtonColorsModel">
+              <property name="text">
+               <string>Use colors from model and color scheme</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>model</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupColors</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonColorsNone">
+              <property name="text">
+               <string>No colors</string>
+              </property>
+              <property name="checked">
+               <bool>true</bool>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>none</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupColors</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonColorsUseForAll">
+              <property name="text">
+               <string>Use selected color for all objects</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <string>selected-only</string>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupColors</string>
+              </attribute>
+             </widget>
+            </item>
+           </layout>
+          </item>
+          <item row="2" column="0">
+           <layout class="QHBoxLayout" name="horizontalLayoutColorsSelected">
+            <property name="topMargin">
+             <number>9</number>
+            </property>
+            <item>
+             <widget class="QLabel" name="labelColorsSelected">
+              <property name="minimumSize">
+               <size>
+                <width>100</width>
+                <height>0</height>
+               </size>
+              </property>
+              <property name="frameShape">
+               <enum>QFrame::Box</enum>
+              </property>
+              <property name="lineWidth">
+               <number>2</number>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QToolButton" name="toolButtonColorsSelectedReset">
+              <property name="text">
+               <string>...</string>
+              </property>
+              <property name="icon">
+               <iconset theme="chokusen-undo">
+                <normaloff>.</normaloff>.</iconset>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QToolButton" name="toolButtonColorsSelected">
+              <property name="text">
+               <string>...</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+          <item row="1" column="0">
+           <spacer name="verticalSpacerColors">
+            <property name="orientation">
+             <enum>Qt::Vertical</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>20</width>
+              <height>40</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </widget>
+       </item>
+       <item row="2" column="0" colspan="2">
+        <widget class="QGroupBox" name="groupMetaData">
+         <property name="title">
+          <string>Meta data</string>
+         </property>
+         <property name="checkable">
+          <bool>true</bool>
+         </property>
+         <layout class="QVBoxLayout" name="verticalLayout_2">
+          <item>
+           <widget class="QLabel" name="labelMetaData">
+            <property name="text">
+             <string>The fields Title, Application and CreationDate are always filled in the exported file when meta data is enabled.</string>
+            </property>
+            <property name="textFormat">
+             <enum>Qt::PlainText</enum>
+            </property>
+            <property name="wordWrap">
+             <bool>true</bool>
+            </property>
+            <property name="textInteractionFlags">
+             <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByMouse</set>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <layout class="QGridLayout" name="gridLayoutMetaData">
+            <property name="horizontalSpacing">
+             <number>16</number>
+            </property>
+            <property name="verticalSpacing">
+             <number>8</number>
+            </property>
+            <item row="4" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataCopyright">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>A copyright associated with this document</string>
+              </property>
+              <property name="placeholderText">
+               <string>Copyright</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="1" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataTitle">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>Title, leave empty to use the file name</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="3" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataDescription">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>Description</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataDesigner">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>Designer</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="5" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataLicenseTerms">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>License terms</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="6" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataRating">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>An industry rating associated with this document</string>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item row="4" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataCopyright">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataDesigner">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>A name for a designer of this document</string>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item row="6" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataRating">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="inputMask">
+               <string/>
+              </property>
+              <property name="placeholderText">
+               <string>Rating</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="5" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataLicenseTerms">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>License information associated with this document</string>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item row="3" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataDescription">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>A description of the document</string>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
+        </widget>
+       </item>
+       <item row="1" column="0" colspan="2">
+        <widget class="QGroupBox" name="groupBox">
+         <property name="title">
+          <string>Format</string>
+         </property>
+         <layout class="QGridLayout" name="gridLayout_3">
+          <item row="1" column="0">
+           <widget class="QLabel" name="labelDecimalPrecision">
+            <property name="text">
+             <string>Decimal precision</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="1">
+           <widget class="QComboBox" name="comboBoxMaterialType"/>
+          </item>
+          <item row="0" column="0">
+           <widget class="QLabel" name="labelExportColorsAs">
+            <property name="text">
+             <string>Export colors as</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="1">
+           <widget class="QSpinBox" name="spinBoxDecimalPrecision">
+            <property name="alignment">
+             <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
+            </property>
+            <property name="minimum">
+             <number>1</number>
+            </property>
+            <property name="maximum">
+             <number>16</number>
+            </property>
+            <property name="value">
+             <number>6</number>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="3">
+           <spacer name="horizontalSpacer">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item row="1" column="2">
+           <widget class="QToolButton" name="toolButtonDecimalPrecisionReset">
+            <property name="toolTip">
+             <string>Reset value to the default decimal precision value.</string>
+            </property>
+            <property name="text">
+             <string>...</string>
+            </property>
+            <property name="icon">
+             <iconset theme="chokusen-undo">
+              <normaloff>.</normaloff>.</iconset>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </widget>
+       </item>
+       <item row="3" column="0" colspan="2">
+        <spacer name="verticalSpacer">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>0</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+   </item>
+   <item>
+    <layout class="QHBoxLayout" name="horizontalLayout">
+     <property name="topMargin">
+      <number>9</number>
+     </property>
+     <item>
+      <widget class="QCheckBox" name="checkBoxAlwaysShowDialog">
+       <property name="text">
+        <string>Always show dialog</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer name="horizontalSpacerButtons">
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>40</width>
+         <height>20</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="pushButtonCancel">
+       <property name="text">
+        <string>Cancel</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="pushButtonOk">
+       <property name="text">
+        <string>OK</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <tabstops>
+  <tabstop>pushButtonOk</tabstop>
+  <tabstop>pushButtonCancel</tabstop>
+  <tabstop>scrollArea</tabstop>
+  <tabstop>radioButtonColorsModel</tabstop>
+  <tabstop>radioButtonColorsNone</tabstop>
+  <tabstop>radioButtonColorsUseForAll</tabstop>
+  <tabstop>toolButtonColorsSelectedReset</tabstop>
+  <tabstop>toolButtonColorsSelected</tabstop>
+  <tabstop>radioButtonUnitMicron</tabstop>
+  <tabstop>radioButtonUnitMillimeter</tabstop>
+  <tabstop>radioButtonUnitCentimeter</tabstop>
+  <tabstop>radioButtonUnitMeter</tabstop>
+  <tabstop>radioButtonUnitInch</tabstop>
+  <tabstop>radioButtonUnitFoot</tabstop>
+  <tabstop>comboBoxMaterialType</tabstop>
+  <tabstop>spinBoxDecimalPrecision</tabstop>
+  <tabstop>toolButtonDecimalPrecisionReset</tabstop>
+  <tabstop>groupMetaData</tabstop>
+  <tabstop>lineEditMetaDataTitle</tabstop>
+  <tabstop>checkBoxMetaDataDesigner</tabstop>
+  <tabstop>lineEditMetaDataDesigner</tabstop>
+  <tabstop>checkBoxMetaDataDescription</tabstop>
+  <tabstop>lineEditMetaDataDescription</tabstop>
+  <tabstop>checkBoxMetaDataCopyright</tabstop>
+  <tabstop>lineEditMetaDataCopyright</tabstop>
+  <tabstop>checkBoxMetaDataLicenseTerms</tabstop>
+  <tabstop>lineEditMetaDataLicenseTerms</tabstop>
+  <tabstop>checkBoxMetaDataRating</tabstop>
+  <tabstop>lineEditMetaDataRating</tabstop>
+  <tabstop>checkBoxAlwaysShowDialog</tabstop>
+ </tabstops>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>pushButtonOk</sender>
+   <signal>clicked()</signal>
+   <receiver>Export3mfDialog</receiver>
+   <slot>accept()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>650</x>
+     <y>683</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>350</x>
+     <y>369</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>pushButtonCancel</sender>
+   <signal>clicked()</signal>
+   <receiver>Export3mfDialog</receiver>
+   <slot>reject()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>564</x>
+     <y>683</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>350</x>
+     <y>369</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+ <buttongroups>
+  <buttongroup name="buttonGroupUnit"/>
+  <buttongroup name="buttonGroupColors"/>
+ </buttongroups>
+</ui>
diff --git a/src/gui/ExportPdfDialog.cc b/src/gui/ExportPdfDialog.cc
index 8d75969321..1bb519bfa6 100644
--- a/src/gui/ExportPdfDialog.cc
+++ b/src/gui/ExportPdfDialog.cc
@@ -1,6 +1,6 @@
 /*
  *  OpenSCAD (www.openscad.org)
- *  Copyright (C) 2009-2019 Clifford Wolf <clifford@clifford.at> and
+ *  Copyright (C) 2009-2025 Clifford Wolf <clifford@clifford.at> and
  *                          Marius Kintel <marius@kintel.net>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -27,172 +27,79 @@
 #include "gui/ExportPdfDialog.h"
 
 #include <QString>
+#include <QDialog>
+
+#include "export.h"
+#include "Settings.h"
+#include "gui/SettingsWriter.h"
+
+using S = Settings::SettingsExportPdf;
 
 ExportPdfDialog::ExportPdfDialog()
 {
   setupUi(this);
-}
-// Getters
-
- 
-  double ExportPdfDialog::getGridSize() {
-  	//  5 values are coded:  2, 2.5, 4, 5, 10; All are integer divisors of 20.
-  	switch (gridButtonGroup->checkedId()) {
-  		case -2:
-			return 2.;
-			break;
-  		case -3:
-			return 2.5;
-			break;
-  		case -4:
-			return 4.;
-			break;
-		case -5:
-			return 5.;
-			break;
-		case -6:
-			return 10.;
-			break;
-		default:  // Always return a valid value.
-		  	//LOG(error);
-		  	return 5;
-			break;
-
-	}
-  	
-  }
+  this->checkBoxAlwaysShowDialog->setChecked(S::exportPdfAlwaysShowDialog.value());
 
-  
-  paperOrientations ExportPdfDialog::getOrientation() {
-  	  	switch (orientButtonGroup->checkedId()) {
-  		case -2:
-			return paperOrientations::PORTRAIT;
-			break;
-  		case -3:
-			return paperOrientations::LANDSCAPE;
-			break;
-  		case -4:
-			return paperOrientations::AUTO;
-			break;
-		  default:  // Always return a valid value.
-		  	//LOG(error);
-			return paperOrientations::AUTO;
-			break;
+  initButtonGroup(this->buttonGroupPaperSize, S::exportPdfPaperSize);
+  initButtonGroup(this->buttonGroupOrientation, S::exportPdfOrientation);
 
-	}
- }
-    		
-  paperSizes ExportPdfDialog::getPaperSize() {
-  	switch (sizeButtonGroup->checkedId()) {
-  		case -2:
-			return paperSizes::A4;
-			break;
-  		case -3:
-			return paperSizes::A3;
-			break;
-  		case -4:
-			return paperSizes::LETTER;
-			break;
-		  case -5:
-			return paperSizes::LEGAL;
-			break;
-		  case -6:
-			return paperSizes::TABLOID;
-			break;
-		  default:  // Always return a valid value.  Matches default.
-		  	//LOG(error);
-		  	return paperSizes::A4;
-			break;
+  // Get current settings or defaults modify the two enums (next two rows) to explicitly use default by lookup to string (see the later set methods).
+  this->checkBoxShowFilename->setChecked(S::exportPdfShowFilename.value());
+  this->groupScale->setChecked(S::exportPdfShowScale.value());
+  this->checkBoxShowScaleMessage->setChecked(S::exportPdfShowScaleMessage.value());
+  this->groupGrid->setChecked(S::exportPdfShowGrid.value());
+  this->setGridSize(S::exportPdfGridSize.value());
 
-	}
-  }
-    		
-  bool ExportPdfDialog::getShowScale()  {
-  	return groupScale->isChecked();
-  	}
-  bool ExportPdfDialog::getShowScaleMsg() {
-  	return cbScaleUsg->isChecked();
-  	}
-  bool ExportPdfDialog::getShowDesignFilename() {
-  	return cbDsnFn->isChecked();
-  	}
-  bool ExportPdfDialog::getShowGrid()  {
-  	return groupGrid->isChecked();
-  	}
+	groupMetaData->setChecked(S::exportPdfAddMetaData.value());
+	initMetaData(nullptr, this->lineEditMetaDataTitle, nullptr, S::exportPdfMetaDataTitle);
+	initMetaData(this->checkBoxMetaDataAuthor, this->lineEditMetaDataAuthor, &S::exportPdfAddMetaDataAuthor, S::exportPdfMetaDataAuthor);
+	initMetaData(this->checkBoxMetaDataSubject, this->lineEditMetaDataSubject, &S::exportPdfAddMetaDataSubject, S::exportPdfMetaDataSubject);
+	initMetaData(this->checkBoxMetaDataKeywords, this->lineEditMetaDataKeywords, &S::exportPdfAddMetaDataKeywords, S::exportPdfMetaDataKeywords);
+}
 
-// Setters
- void  ExportPdfDialog::setShowScale(bool state) {
-  	        groupScale->setChecked(state);
-  }
- void  ExportPdfDialog::setShowScaleMsg(bool state) {
-  	        cbScaleUsg->setChecked(state);
-  }
- void  ExportPdfDialog::setShowDesignFilename(bool state) {
-  	        cbDsnFn->setChecked(state);
-  }  
- void ExportPdfDialog::setShowGrid(bool state) {
-  	        groupGrid->setChecked(state);
+int ExportPdfDialog::exec()
+{
+  bool showDialog = this->checkBoxAlwaysShowDialog->isChecked();
+  if ((QApplication::keyboardModifiers() & Qt::ShiftModifier) != 0) {
+  	showDialog = true;
   }
 
- 
+  const auto result = showDialog ? QDialog::exec() : QDialog::Accepted;
 
-  void ExportPdfDialog::setPaperSize(paperSizes paper){
-      //setButtonInGroup(sizeButtonGroup, paper2buttons[paper]);
-      switch (paper) {
-  	case paperSizes::A4:
-		rbS_A4->setChecked(TRUE);
-		break;
-  	case paperSizes::A3:
-		rbS_A3->setChecked(TRUE);
-		break;
-  	case paperSizes::LETTER:
-		rbS_Ltr->setChecked(TRUE);
-		break;
-  	case paperSizes::LEGAL:
-		rbS_Leg->setChecked(TRUE);
-		break;
-  	case paperSizes::TABLOID:
-		rbS_Tab->setChecked(TRUE);
-		break;
-	default:   // provide a sane default.  Shouldn't execute, but needed at least to compile.
-		rbS_A4->setChecked(TRUE);
-		//  LOG(message_group::Export_Warning, "Export Paper Size Unknon( %1$8c )", paper);
-  	}	
+  if (result == QDialog::Accepted) {
+  	S::exportPdfAlwaysShowDialog.setValue(this->checkBoxAlwaysShowDialog->isChecked());
+    applyButtonGroup(this->buttonGroupPaperSize, S::exportPdfPaperSize);
+    applyButtonGroup(this->buttonGroupOrientation, S::exportPdfOrientation);
+    S::exportPdfShowFilename.setValue(this->checkBoxShowFilename->isChecked());
+    S::exportPdfShowScale.setValue(this->groupScale->isChecked());
+    S::exportPdfShowScaleMessage.setValue(this->checkBoxShowScaleMessage->isChecked());
+    S::exportPdfShowGrid.setValue(this->groupGrid->isChecked());
+    S::exportPdfGridSize.setValue(getGridSize());
+    S::exportPdfAddMetaData.setValue(this->groupMetaData->isChecked());
+    applyMetaData(nullptr, this->lineEditMetaDataTitle, nullptr, S::exportPdfMetaDataTitle);
+    applyMetaData(this->checkBoxMetaDataAuthor, this->lineEditMetaDataAuthor, &S::exportPdfAddMetaDataAuthor, S::exportPdfMetaDataAuthor);
+    applyMetaData(this->checkBoxMetaDataSubject, this->lineEditMetaDataSubject, &S::exportPdfAddMetaDataSubject, S::exportPdfMetaDataSubject);
+    applyMetaData(this->checkBoxMetaDataKeywords, this->lineEditMetaDataKeywords, &S::exportPdfAddMetaDataKeywords, S::exportPdfMetaDataKeywords);
+    Settings::Settings::visit(SettingsWriter());
   }
 
-  void ExportPdfDialog::setOrientation(paperOrientations orient){
-      switch (orient) {
-  	case paperOrientations::PORTRAIT:
-		rbOPort->setChecked(TRUE);
-		break;
-  	case paperOrientations::LANDSCAPE:
-		rbOLand->setChecked(TRUE);
-		break;
-  	case paperOrientations::AUTO:
-		rbOAuto->setChecked(TRUE);
-		break;
-	default:   // provide a sane default.  Shouldn't execute, but needed at least to compile.
-		//  LOG(message_group::Export_Warning, "Export Paper Size Unknon( %1$8c )", paper);
-		rbOAuto->setChecked(TRUE);
-		break;
-  	}	
-      
-  }
-  void ExportPdfDialog::setGridSize(double value){
-        //  need to bin to match enums, but tolerate numerical error.
-        //  5 values are coded:  2, 2.5, 4, 5, 10; All are integer divisors of 20.
-        if (value<2.24) {  // match 2
-        	rbGs_2mm->setChecked(TRUE);
-        } else if (value<3.1) { // match 2.5
-        	rbGs_2r5mm->setChecked(TRUE);     
-        } else if (value<4.4) { // match 4 
-		rbGs_4mm->setChecked(TRUE);
-	} else if (value<7.5) { // match 5
-		rbGs_5mm->setChecked(TRUE);
-	} else { // match 10
-		rbGs_10mm->setChecked(TRUE);
-	};
-  }
- 
+  return result;
+}
 
+double ExportPdfDialog::getGridSize() const
+{
+  const auto button = buttonGroupGridSize->checkedButton();
+  return button ? button->property(Settings::PROPERTY_SELECTED_VALUE).toDouble() : 10.0;
+}
 
+void ExportPdfDialog::setGridSize(double value)
+{
+  for (auto button : buttonGroupGridSize->buttons()) {
+    const auto buttonValue = button->property(Settings::PROPERTY_SELECTED_VALUE).toDouble();
+    if (std::abs(buttonValue - value) < 0.5) {
+      button->setChecked(true);
+      return;
+    }
+  }
+  rbGs_10mm->setChecked(true); // default
+}
diff --git a/src/gui/ExportPdfDialog.h b/src/gui/ExportPdfDialog.h
index 8b9ec78f51..dbc5d9bb64 100644
--- a/src/gui/ExportPdfDialog.h
+++ b/src/gui/ExportPdfDialog.h
@@ -26,35 +26,32 @@
 
 #pragma once
 
-#include "gui/qtgettext.h"
+#include <memory>
 #include <QDialog>
+
+#include "gui/qtgettext.h" // IWYU pragma: keep
 #include "io/export.h"
 #include "ui_ExportPdfDialog.h"
+#include "gui/InitConfigurator.h"
 
-class ExportPdfDialog : public QDialog, public Ui::ExportPdfDialog
+class ExportPdfDialog : public QDialog, public Ui::ExportPdfDialog, public InitConfigurator
 {
   Q_OBJECT;
 
 public:
   ExportPdfDialog();
-  
-  double getGridSize();
-  paperSizes getPaperSize();
-  paperOrientations getOrientation();
-  bool getShowScale();
-  bool getShowScaleMsg();
-  bool getShowDesignFilename();
-  bool getShowGrid();
-  
-  void setShowScale(bool state);
-  void setShowScaleMsg(bool state); 
-  void setShowDesignFilename(bool state); 
-  void setShowGrid(bool state);
-  
-  void setPaperSize(paperSizes paper);  
-  void setOrientation(paperOrientations orient);  
+
+  int exec() override;
+
+  double getGridSize() const;
   void setGridSize(double value);
-  
+
+  std::shared_ptr<const ExportPdfOptions> getOptions() const {
+    return ExportPdfOptions::fromSettings();
+  }
+
+private:
+  ExportPdfOptions options;
 };
 
 
diff --git a/src/gui/ExportPdfDialog.ui b/src/gui/ExportPdfDialog.ui
index d070cca06f..c152cff7ef 100644
--- a/src/gui/ExportPdfDialog.ui
+++ b/src/gui/ExportPdfDialog.ui
@@ -6,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>462</width>
-    <height>546</height>
+    <width>798</width>
+    <height>680</height>
    </rect>
   </property>
   <property name="minimumSize">
@@ -19,354 +19,638 @@
   <property name="windowTitle">
    <string>Export PDF Options</string>
   </property>
-  <layout class="QVBoxLayout" name="verticalLayout">
+  <layout class="QVBoxLayout" name="verticalLayout" stretch="0,0">
    <item>
-    <widget class="QGroupBox" name="groupPage">
-     <property name="title">
-      <string>Page Layout</string>
+    <widget class="QScrollArea" name="scrollArea">
+     <property name="widgetResizable">
+      <bool>true</bool>
      </property>
-     <widget class="QGroupBox" name="groupSize">
-      <property name="geometry">
-       <rect>
-        <x>10</x>
-        <y>30</y>
-        <width>188</width>
-        <height>181</height>
-       </rect>
-      </property>
-      <property name="toolTip">
-       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Set the PDF page (paper) size.  &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-      </property>
-      <property name="title">
-       <string>Size</string>
-      </property>
-      <widget class="QWidget" name="layoutWidgetSize">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>30</y>
-         <width>148</width>
-         <height>141</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="vLayoutSize">
-        <item>
-         <widget class="QRadioButton" name="rbS_A4">
-          <property name="text">
-           <string>A4 (210x297 mm)</string>
-          </property>
-          <property name="checked">
-           <bool>true</bool>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">sizeButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-        <item>
-         <widget class="QRadioButton" name="rbS_A3">
-          <property name="text">
-           <string>A3 (297x420 mm)</string>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">sizeButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-        <item>
-         <widget class="QRadioButton" name="rbS_Ltr">
-          <property name="text">
-           <string>Letter (8.5x11 in)</string>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">sizeButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-        <item>
-         <widget class="QRadioButton" name="rbS_Leg">
-          <property name="text">
-           <string>Legal (8.5x14 in)</string>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">sizeButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-        <item>
-         <widget class="QRadioButton" name="rbS_Tab">
-          <property name="text">
-           <string>Tabloid (11x17 in)</string>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">sizeButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QGroupBox" name="groupOrientation">
+     <widget class="QWidget" name="scrollAreaWidgetContents">
       <property name="geometry">
        <rect>
-        <x>230</x>
-        <y>60</y>
-        <width>204</width>
-        <height>121</height>
+        <x>0</x>
+        <y>0</y>
+        <width>778</width>
+        <height>617</height>
        </rect>
       </property>
-      <property name="toolTip">
-       <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Set the direction of the largest page dimension.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-      </property>
-      <property name="title">
-       <string>Orientation</string>
-      </property>
-      <widget class="QWidget" name="layoutWidgetOrientation">
-       <property name="geometry">
-        <rect>
-         <x>10</x>
-         <y>30</y>
-         <width>184</width>
-         <height>83</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="vLayoutOrient">
-        <item>
-         <widget class="QRadioButton" name="rbOPort">
-          <property name="text">
-           <string>Portrait (Vertical)</string>
-          </property>
-          <property name="checked">
-           <bool>true</bool>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">orientButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-        <item>
-         <widget class="QRadioButton" name="rbOLand">
-          <property name="text">
-           <string>Landscape (Horizontal)</string>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">orientButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-        <item>
-         <widget class="QRadioButton" name="rbOAuto">
-          <property name="toolTip">
-           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Determine best orientation based on maximum geometry dimension.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-          <property name="text">
-           <string>Auto</string>
-          </property>
-          <attribute name="buttonGroup">
-           <string notr="true">orientButtonGroup</string>
-          </attribute>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-    </widget>
-   </item>
-   <item>
-    <widget class="QGroupBox" name="groupAnnotations">
-     <property name="title">
-      <string>Annotations</string>
-     </property>
-     <widget class="QWidget" name="layoutWidgetAnnotations">
-      <property name="geometry">
-       <rect>
-        <x>10</x>
-        <y>30</y>
-        <width>421</width>
-        <height>211</height>
-       </rect>
-      </property>
-      <layout class="QVBoxLayout" name="vLayoutAnnot">
-       <item>
-        <widget class="QCheckBox" name="cbDsnFn">
+      <layout class="QGridLayout" name="gridLayout" columnstretch="1,1">
+       <item row="0" column="0" rowspan="2">
+        <widget class="QGroupBox" name="groupSize">
          <property name="toolTip">
-          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include design filename on page.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Set the PDF page (paper) size.  &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
-         <property name="text">
-          <string>Show Design Filename</string>
-         </property>
-         <property name="checked">
-          <bool>true</bool>
+         <property name="title">
+          <string>Page Size</string>
          </property>
+         <layout class="QVBoxLayout" name="verticalLayout_3">
+          <item>
+           <layout class="QVBoxLayout" name="vLayoutSize">
+            <item>
+             <widget class="QRadioButton" name="radioButtonA6">
+              <property name="text">
+               <string>A6 (105 x 148 mm)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>0</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonA5">
+              <property name="text">
+               <string>A5 (148 x 210 mm)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>1</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonA4">
+              <property name="text">
+               <string>A4 (210x297 mm)</string>
+              </property>
+              <property name="checked">
+               <bool>true</bool>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>2</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonA3">
+              <property name="text">
+               <string>A3 (297x420 mm)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>3</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonLetter">
+              <property name="text">
+               <string>Letter (8.5x11 in)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>4</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonLegal">
+              <property name="text">
+               <string>Legal (8.5x14 in)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>5</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="radioButtonTabloid">
+              <property name="text">
+               <string>Tabloid (11x17 in)</string>
+              </property>
+              <property name="Tabloid" stdset="0">
+               <string/>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>6</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupPaperSize</string>
+              </attribute>
+             </widget>
+            </item>
+           </layout>
+          </item>
+          <item>
+           <spacer name="verticalSpacer">
+            <property name="orientation">
+             <enum>Qt::Vertical</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>20</width>
+              <height>40</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
         </widget>
        </item>
-       <item>
-        <widget class="QGroupBox" name="groupScale">
-         <property name="toolTip">
-          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include rulers on page to confirm 1:1 printing scale.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
+       <item row="3" column="0" colspan="2">
+        <widget class="QGroupBox" name="groupMetaData">
          <property name="title">
-          <string>Show Scale</string>
+          <string>Meta data</string>
          </property>
          <property name="checkable">
           <bool>true</bool>
          </property>
-         <widget class="QCheckBox" name="cbScaleUsg">
-          <property name="geometry">
-           <rect>
-            <x>10</x>
-            <y>40</y>
-            <width>161</width>
-            <height>23</height>
-           </rect>
-          </property>
-          <property name="toolTip">
-           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include text describing usage of scale.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-          <property name="text">
-           <string>Show Scale Usage</string>
-          </property>
-          <property name="checked">
-           <bool>true</bool>
-          </property>
-         </widget>
+         <property name="checked">
+          <bool>true</bool>
+         </property>
+         <layout class="QVBoxLayout" name="verticalLayout_7">
+          <item>
+           <widget class="QLabel" name="label_3">
+            <property name="text">
+             <string>The fields Title, Creator and CreateDate are always filled in the exported file when meta data is enabled.</string>
+            </property>
+            <property name="wordWrap">
+             <bool>true</bool>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <layout class="QGridLayout" name="gridLayoutMetaData">
+            <property name="horizontalSpacing">
+             <number>16</number>
+            </property>
+            <property name="verticalSpacing">
+             <number>8</number>
+            </property>
+            <item row="3" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataSubject">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>A description of the document</string>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item row="1" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataTitle">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>Title, leave empty to use the file name</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="3" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataSubject">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>Subject</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="4" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataKeywords">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>A copyright associated with this document</string>
+              </property>
+              <property name="placeholderText">
+               <string>Keywords</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataAuthor">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="toolTip">
+               <string>A name for a designer of this document</string>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="1">
+             <widget class="QLineEdit" name="lineEditMetaDataAuthor">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="placeholderText">
+               <string>Author</string>
+              </property>
+              <property name="clearButtonEnabled">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item row="4" column="0">
+             <widget class="QCheckBox" name="checkBoxMetaDataKeywords">
+              <property name="enabled">
+               <bool>true</bool>
+              </property>
+              <property name="text">
+               <string/>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
         </widget>
        </item>
-       <item>
-        <widget class="QGroupBox" name="groupGrid">
+       <item row="0" column="1">
+        <widget class="QGroupBox" name="groupOrientation">
          <property name="toolTip">
-          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include a grid of the selected size on the page.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Set the direction of the largest page dimension.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="title">
-          <string>Show Grid</string>
+          <string>Page Orientation</string>
          </property>
-         <property name="checkable">
-          <bool>true</bool>
-         </property>
-         <property name="checked">
-          <bool>false</bool>
+         <layout class="QVBoxLayout" name="verticalLayout_4">
+          <item>
+           <layout class="QVBoxLayout" name="vLayoutOrient">
+            <item>
+             <widget class="QRadioButton" name="rbOPort">
+              <property name="text">
+               <string>Portrait (Vertical)</string>
+              </property>
+              <property name="checked">
+               <bool>true</bool>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>1</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupOrientation</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="rbOLand">
+              <property name="text">
+               <string>Landscape (Horizontal)</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>2</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupOrientation</string>
+              </attribute>
+             </widget>
+            </item>
+            <item>
+             <widget class="QRadioButton" name="rbOAuto">
+              <property name="toolTip">
+               <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Determine best orientation based on maximum geometry dimension.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+              </property>
+              <property name="text">
+               <string>Auto</string>
+              </property>
+              <property name="_settings_value" stdset="0">
+               <UInt>0</UInt>
+              </property>
+              <attribute name="buttonGroup">
+               <string notr="true">buttonGroupOrientation</string>
+              </attribute>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
+        </widget>
+       </item>
+       <item row="1" column="1">
+        <widget class="QGroupBox" name="groupAnnotations">
+         <property name="title">
+          <string>Annotations</string>
          </property>
-         <widget class="QWidget" name="layoutWidgetGrid">
-          <property name="geometry">
-           <rect>
-            <x>10</x>
-            <y>30</y>
-            <width>398</width>
-            <height>25</height>
-           </rect>
-          </property>
-          <layout class="QHBoxLayout" name="hLayoutGrid">
-           <item>
-            <widget class="QRadioButton" name="rbGs_2mm">
-             <property name="text">
-              <string>2mm</string>
-             </property>
-             <attribute name="buttonGroup">
-              <string notr="true">gridButtonGroup</string>
-             </attribute>
-            </widget>
-           </item>
-           <item>
-            <widget class="QRadioButton" name="rbGs_2r5mm">
-             <property name="text">
-              <string>2.5mm</string>
-             </property>
-             <attribute name="buttonGroup">
-              <string notr="true">gridButtonGroup</string>
-             </attribute>
-            </widget>
-           </item>
-           <item>
-            <widget class="QRadioButton" name="rbGs_4mm">
-             <property name="text">
-              <string>4mm</string>
-             </property>
-             <attribute name="buttonGroup">
-              <string notr="true">gridButtonGroup</string>
-             </attribute>
-            </widget>
-           </item>
-           <item>
-            <widget class="QRadioButton" name="rbGs_5mm">
-             <property name="text">
-              <string>5mm</string>
-             </property>
-             <property name="checked">
-              <bool>true</bool>
-             </property>
-             <attribute name="buttonGroup">
-              <string notr="true">gridButtonGroup</string>
-             </attribute>
-            </widget>
-           </item>
-           <item>
-            <widget class="QRadioButton" name="rbGs_10mm">
-             <property name="text">
-              <string>10mm</string>
-             </property>
-             <attribute name="buttonGroup">
-              <string notr="true">gridButtonGroup</string>
-             </attribute>
-            </widget>
-           </item>
-          </layout>
-         </widget>
+         <layout class="QVBoxLayout" name="verticalLayout_2">
+          <item>
+           <layout class="QVBoxLayout" name="vLayoutAnnot">
+            <item>
+             <widget class="QCheckBox" name="checkBoxShowFilename">
+              <property name="toolTip">
+               <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include design filename on page.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+              </property>
+              <property name="text">
+               <string>Show Design Filename</string>
+              </property>
+              <property name="checked">
+               <bool>true</bool>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QGroupBox" name="groupScale">
+              <property name="toolTip">
+               <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include rulers on page to confirm 1:1 printing scale.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+              </property>
+              <property name="title">
+               <string>Show Scale</string>
+              </property>
+              <property name="checkable">
+               <bool>true</bool>
+              </property>
+              <layout class="QVBoxLayout" name="verticalLayout_6">
+               <property name="topMargin">
+                <number>0</number>
+               </property>
+               <property name="bottomMargin">
+                <number>6</number>
+               </property>
+               <item>
+                <widget class="QCheckBox" name="checkBoxShowScaleMessage">
+                 <property name="enabled">
+                  <bool>true</bool>
+                 </property>
+                 <property name="toolTip">
+                  <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include text describing usage of scale.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+                 </property>
+                 <property name="text">
+                  <string>Show Scale Usage</string>
+                 </property>
+                 <property name="checked">
+                  <bool>true</bool>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </widget>
+            </item>
+            <item>
+             <widget class="QGroupBox" name="groupGrid">
+              <property name="toolTip">
+               <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Include a grid of the selected size on the page.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+              </property>
+              <property name="title">
+               <string>Show Grid</string>
+              </property>
+              <property name="checkable">
+               <bool>true</bool>
+              </property>
+              <property name="checked">
+               <bool>false</bool>
+              </property>
+              <layout class="QVBoxLayout" name="verticalLayout_5">
+               <property name="topMargin">
+                <number>0</number>
+               </property>
+               <property name="bottomMargin">
+                <number>6</number>
+               </property>
+               <item>
+                <layout class="QHBoxLayout" name="hLayoutGrid">
+                 <item>
+                  <widget class="QRadioButton" name="rbGs_2mm">
+                   <property name="text">
+                    <string>2mm</string>
+                   </property>
+                   <property name="_selected_value" stdset="0">
+                    <double>2.000000000000000</double>
+                   </property>
+                   <attribute name="buttonGroup">
+                    <string notr="true">buttonGroupGridSize</string>
+                   </attribute>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class="QRadioButton" name="rbGs_2r5mm">
+                   <property name="text">
+                    <string>2.5mm</string>
+                   </property>
+                   <property name="_selected_value" stdset="0">
+                    <double>2.500000000000000</double>
+                   </property>
+                   <attribute name="buttonGroup">
+                    <string notr="true">buttonGroupGridSize</string>
+                   </attribute>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class="QRadioButton" name="rbGs_4mm">
+                   <property name="text">
+                    <string>4mm</string>
+                   </property>
+                   <property name="_selected_value" stdset="0">
+                    <double>4.000000000000000</double>
+                   </property>
+                   <attribute name="buttonGroup">
+                    <string notr="true">buttonGroupGridSize</string>
+                   </attribute>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class="QRadioButton" name="rbGs_5mm">
+                   <property name="text">
+                    <string>5mm</string>
+                   </property>
+                   <property name="checked">
+                    <bool>true</bool>
+                   </property>
+                   <property name="_selected_value" stdset="0">
+                    <double>5.000000000000000</double>
+                   </property>
+                   <attribute name="buttonGroup">
+                    <string notr="true">buttonGroupGridSize</string>
+                   </attribute>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class="QRadioButton" name="rbGs_10mm">
+                   <property name="text">
+                    <string>10mm</string>
+                   </property>
+                   <property name="_selected_value" stdset="0">
+                    <double>10.000000000000000</double>
+                   </property>
+                   <attribute name="buttonGroup">
+                    <string notr="true">buttonGroupGridSize</string>
+                   </attribute>
+                  </widget>
+                 </item>
+                 <item>
+                  <spacer name="horizontalSpacer">
+                   <property name="orientation">
+                    <enum>Qt::Horizontal</enum>
+                   </property>
+                   <property name="sizeHint" stdset="0">
+                    <size>
+                     <width>40</width>
+                     <height>20</height>
+                    </size>
+                   </property>
+                  </spacer>
+                 </item>
+                </layout>
+               </item>
+              </layout>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
         </widget>
        </item>
+       <item row="4" column="0" colspan="2">
+        <spacer name="verticalSpacerPdfDialog">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>0</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
       </layout>
      </widget>
     </widget>
    </item>
    <item>
-    <widget class="QDialogButtonBox" name="buttonBox">
-     <property name="orientation">
-      <enum>Qt::Horizontal</enum>
-     </property>
-     <property name="standardButtons">
-      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
+    <layout class="QHBoxLayout" name="horizontalLayoutDialogButtons">
+     <property name="topMargin">
+      <number>9</number>
      </property>
-    </widget>
+     <item>
+      <widget class="QCheckBox" name="checkBoxAlwaysShowDialog">
+       <property name="text">
+        <string>Always show dialog</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer name="horizontalSpacerDialogButtons">
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>40</width>
+         <height>20</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="pushButtonCancel">
+       <property name="text">
+        <string>Cancel</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="pushButtonOk">
+       <property name="text">
+        <string>OK</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
    </item>
   </layout>
  </widget>
+ <tabstops>
+  <tabstop>pushButtonOk</tabstop>
+  <tabstop>pushButtonCancel</tabstop>
+  <tabstop>scrollArea</tabstop>
+  <tabstop>radioButtonA6</tabstop>
+  <tabstop>radioButtonA5</tabstop>
+  <tabstop>radioButtonA4</tabstop>
+  <tabstop>radioButtonA3</tabstop>
+  <tabstop>radioButtonLetter</tabstop>
+  <tabstop>radioButtonLegal</tabstop>
+  <tabstop>radioButtonTabloid</tabstop>
+  <tabstop>rbOPort</tabstop>
+  <tabstop>rbOLand</tabstop>
+  <tabstop>rbOAuto</tabstop>
+  <tabstop>checkBoxShowFilename</tabstop>
+  <tabstop>groupScale</tabstop>
+  <tabstop>checkBoxShowScaleMessage</tabstop>
+  <tabstop>groupGrid</tabstop>
+  <tabstop>rbGs_2mm</tabstop>
+  <tabstop>rbGs_2r5mm</tabstop>
+  <tabstop>rbGs_4mm</tabstop>
+  <tabstop>rbGs_5mm</tabstop>
+  <tabstop>rbGs_10mm</tabstop>
+  <tabstop>groupMetaData</tabstop>
+  <tabstop>lineEditMetaDataTitle</tabstop>
+  <tabstop>checkBoxMetaDataAuthor</tabstop>
+  <tabstop>lineEditMetaDataAuthor</tabstop>
+  <tabstop>checkBoxMetaDataSubject</tabstop>
+  <tabstop>lineEditMetaDataSubject</tabstop>
+  <tabstop>checkBoxMetaDataKeywords</tabstop>
+  <tabstop>lineEditMetaDataKeywords</tabstop>
+  <tabstop>checkBoxAlwaysShowDialog</tabstop>
+ </tabstops>
  <resources/>
  <connections>
   <connection>
-   <sender>buttonBox</sender>
-   <signal>accepted()</signal>
+   <sender>pushButtonOk</sender>
+   <signal>clicked()</signal>
    <receiver>ExportPdfDialog</receiver>
    <slot>accept()</slot>
    <hints>
     <hint type="sourcelabel">
-     <x>248</x>
-     <y>254</y>
+     <x>484</x>
+     <y>522</y>
     </hint>
     <hint type="destinationlabel">
-     <x>157</x>
-     <y>274</y>
+     <x>267</x>
+     <y>272</y>
     </hint>
    </hints>
   </connection>
   <connection>
-   <sender>buttonBox</sender>
-   <signal>rejected()</signal>
+   <sender>pushButtonCancel</sender>
+   <signal>clicked()</signal>
    <receiver>ExportPdfDialog</receiver>
    <slot>reject()</slot>
    <hints>
     <hint type="sourcelabel">
-     <x>316</x>
-     <y>260</y>
+     <x>398</x>
+     <y>522</y>
     </hint>
     <hint type="destinationlabel">
-     <x>286</x>
-     <y>274</y>
+     <x>267</x>
+     <y>272</y>
     </hint>
    </hints>
   </connection>
  </connections>
  <buttongroups>
-  <buttongroup name="orientButtonGroup"/>
-  <buttongroup name="sizeButtonGroup"/>
-  <buttongroup name="gridButtonGroup"/>
+  <buttongroup name="buttonGroupPaperSize"/>
+  <buttongroup name="buttonGroupOrientation"/>
+  <buttongroup name="buttonGroupGridSize"/>
  </buttongroups>
 </ui>
diff --git a/src/gui/ExternalToolInterface.cc b/src/gui/ExternalToolInterface.cc
index 747b6e8488..95266c92ae 100644
--- a/src/gui/ExternalToolInterface.cc
+++ b/src/gui/ExternalToolInterface.cc
@@ -40,18 +40,10 @@
 bool ExternalToolInterface::exportTemporaryFile(const std::shared_ptr<const Geometry>& rootGeometry, 
   const QString& sourceFileName, const Camera *const camera)
 {
-  const ExportInfo exportInfo = {
-      .format = exportFormat_,
-      .title = sourceFileName.toStdString(),
-      .sourceFilePath = sourceFileName.toStdString(),
-      .camera = camera,
-      .defaultColor = { 0xf9, 0xd7, 0x2c, 255 } // Cornfield: CGAL_FACE_FRONT_COLOR
-  };
-
   // FIXME: Remove original suffix first
   QTemporaryFile exportFile{getTempDir().filePath(
     QString("%1.XXXXXX.%2").
-      arg(QString::fromStdString(exportInfo.sourceFilePath)).
+      arg(QString::fromStdString(sourceFileName.toStdString())).
       arg(QString::fromStdString(fileformat::toSuffix(exportFormat_))))};
   // FIXME: When is it safe to remove the file?
   // * Octoprint: After uploading?
@@ -66,6 +58,7 @@ bool ExternalToolInterface::exportTemporaryFile(const std::shared_ptr<const Geom
 
   sourceFilename_ = sourceFileName.toStdString();
   exportedFilename_ = exportFileName.toStdString();
+  ExportInfo exportInfo = createExportInfo(exportFormat_, fileformat::info(exportFormat_), sourceFileName.toStdString(), camera, {});
   const bool ok = exportFileByName(rootGeometry, exportedFilename_, exportInfo);
   LOG("Exported temporary file %1$s", exportedFilename_);
   return ok;
@@ -118,7 +111,7 @@ bool LocalProgramService::process(const std::string& displayName, std::function<
 
   QStringList args;
   const auto info = QFileInfo(QString::fromStdString(exportedFilename_));
-  for (const auto& arg : Settings::Settings::localAppParameterList.items()) {
+  for (const auto& arg : Settings::Settings::localAppParameterList.value()) {
     switch (arg.type) {
     case Settings::LocalAppParameterType::string:
       args.append(QString::fromStdString(arg.value));
diff --git a/src/gui/ExternalToolInterface.h b/src/gui/ExternalToolInterface.h
index 4ab16d86cb..ca2d25001b 100644
--- a/src/gui/ExternalToolInterface.h
+++ b/src/gui/ExternalToolInterface.h
@@ -33,7 +33,7 @@
 
 #include "gui/PrintService.h"
 #include "geometry/Geometry.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "io/export.h"
 
 class ExternalToolInterface
diff --git a/src/gui/FontList.cc b/src/gui/FontList.cc
index 6e4d0c3d82..f5596f2145 100644
--- a/src/gui/FontList.cc
+++ b/src/gui/FontList.cc
@@ -1,5 +1,10 @@
 #include "gui/FontList.h"
 
+#include <array>
+#include <cstdint>
+#include <string>
+#include <vector>
+
 #include <QAbstractItemView>
 #include <QApplication>
 #include <QModelIndex>
@@ -11,12 +16,7 @@
 #include <QString>
 #include <QStyledItemDelegate>
 #include <QStyleOptionViewItem>
-#include <array>
-#include <cstdint>
-#include <qitemselectionmodel.h>
-#include <string>
-#include <vector>
-
+#include <QItemSelectionModel>
 #include <QClipboard>
 #include <QRegularExpression>
 #include <QFileInfo>
diff --git a/src/gui/InitConfigurator.cc b/src/gui/InitConfigurator.cc
index f5f9db9d65..f51d999254 100644
--- a/src/gui/InitConfigurator.cc
+++ b/src/gui/InitConfigurator.cc
@@ -1,16 +1,19 @@
 
 #include "gui/InitConfigurator.h"
-#include <QListWidget>
 
+#include <QListWidget>
 #include <QCheckBox>
 #include <QComboBox>
 #include <QDoubleSpinBox>
+#include <QRadioButton>
 #include <QSpinBox>
 #include <QString>
 #include <QSettings>
-#include "Preferences.h"
-#include "gui/Settings.h"
-#include "printutils.h"
+#include <QLineEdit>
+#include <QGroupBox>
+
+#include "core/Settings.h"
+#include "gui/Preferences.h"
 
 #include <string>
 
@@ -40,20 +43,11 @@ void InitConfigurator::initUpdateDoubleSpinBox(QDoubleSpinBox *spinBox, const Se
   spinBox->blockSignals(false);
 }
 
-void InitConfigurator::initComboBox(QComboBox *comboBox, const Settings::SettingsEntryEnum& entry)
-{
-  comboBox->clear();
-  for (const auto& item : entry.items()) {
-    comboBox->addItem(QString::fromStdString(item.description), QString::fromStdString(item.value));
-  }
-  updateComboBox(comboBox, entry);
-}
-
 void InitConfigurator::initListBox(QListWidget *listBox, const Settings::SettingsEntryList<Settings::LocalAppParameter>& list)
 {
   listBox->blockSignals(true);
   listBox->clear();
-  for (const auto& listitem : list.items()) {
+  for (const auto& listitem : list.value()) {
     if (listitem.type == Settings::LocalAppParameterType::string) {
       const auto item = Preferences::inst()->createListItem(Settings::LocalAppParameterType(Settings::LocalAppParameterType::string), QString::fromStdString(listitem.value));
       listBox->insertItem(listBox->count(), item);
@@ -78,11 +72,6 @@ void InitConfigurator::initListBox(QListWidget *listBox, const Settings::Setting
   listBox->blockSignals(false);
 }
 
-void InitConfigurator::updateComboBox(const BlockSignals<QComboBox *>& comboBox, const Settings::SettingsEntryEnum& entry)
-{
-  comboBox->setCurrentIndex(entry.index());
-}
-
 void InitConfigurator::updateComboBox(const BlockSignals<QComboBox *>& comboBox, const std::string& value)
 {
   int index = comboBox->findData(QString::fromStdString(value));
@@ -92,3 +81,19 @@ void InitConfigurator::updateComboBox(const BlockSignals<QComboBox *>& comboBox,
     comboBox->setCurrentIndex(0);
   }
 }
+
+void InitConfigurator::initMetaData(QCheckBox *checkBox, QLineEdit *lineEdit, Settings::SettingsEntryBool *settingsEntryFlag, Settings::SettingsEntryString& settingsEntry) {
+	lineEdit->setText(QString::fromStdString(settingsEntry.value()));
+	if (checkBox && settingsEntryFlag) {
+	    checkBox->setChecked(settingsEntryFlag->value());
+	}
+}
+
+void InitConfigurator::applyMetaData(const QCheckBox *checkBox, const QLineEdit *lineEdit, Settings::SettingsEntryBool *settingsEntryFlag, Settings::SettingsEntryString& settingsEntry) {
+	if (checkBox && settingsEntryFlag) {
+		settingsEntryFlag->setValue(checkBox->isChecked());
+	}
+	const auto value = lineEdit->text().trimmed().toStdString();
+	settingsEntry.setValue(value);
+	return;
+}
\ No newline at end of file
diff --git a/src/gui/InitConfigurator.h b/src/gui/InitConfigurator.h
index 211202d852..d8fd4d3016 100644
--- a/src/gui/InitConfigurator.h
+++ b/src/gui/InitConfigurator.h
@@ -1,14 +1,17 @@
 #pragma once
+
 #include <QSettings>
 #include <QObject>
-#include "gui/Settings.h"
 #include <QComboBox>
 #include <QSpinBox>
 #include <QCheckBox>
 #include <QListWidget>
-
+#include <QButtonGroup>
+#include <cstdint>
 #include <string>
 
+#include "core/Settings.h"
+
 template <class WidgetPtr>
 class BlockSignals
 {
@@ -35,12 +38,60 @@ class InitConfigurator
   void updateIntSpinBox(const BlockSignals<QSpinBox *>& spinBox, const Settings::SettingsEntryInt& entry);
   /** Set spinbox value and min/max/step from the settings value */
   void initUpdateDoubleSpinBox(QDoubleSpinBox *spinBox, const Settings::SettingsEntryDouble& entry);
-  /** Initialize combobox list values from the settings range values */
-  void initComboBox(QComboBox *comboBox, const Settings::SettingsEntryEnum& entry);
   /** Initialize specialized list box */
   void initListBox(QListWidget *listBox, const Settings::SettingsEntryList<Settings::LocalAppParameter>& list);
+  /** Initialize combobox list values from the settings range values */
+  template<typename enum_type>
+  void initComboBox(QComboBox *comboBox, const Settings::SettingsEntryEnum<enum_type>& entry);
   /** Update combobox from current settings */
-  void updateComboBox(const BlockSignals<QComboBox *>& comboBox, const Settings::SettingsEntryEnum& entry);
+  template<typename enum_type>
+  void updateComboBox(const BlockSignals<QComboBox *>& comboBox, const Settings::SettingsEntryEnum<enum_type>& entry);
   /** Update combobox from current settings */
   void updateComboBox(const BlockSignals<QComboBox *>& comboBox, const std::string& value);
+  /** Init a button group with an enum setting, this needs a custom property on the radio buttons */
+  template<typename enum_type>
+  void initButtonGroup(const BlockSignals<QButtonGroup *>& buttonGroup, const Settings::SettingsEntryEnum<enum_type>& entry);
+  /** Apply selected value from button to settings, this needs a custom property on the radio buttons */
+  template<typename enum_type>
+  void applyButtonGroup(const BlockSignals<QButtonGroup *>& buttonGroup, Settings::SettingsEntryEnum<enum_type>& entry);
+
+  void initMetaData(QCheckBox *, QLineEdit *, Settings::SettingsEntryBool *, Settings::SettingsEntryString&);
+  void applyMetaData(const QCheckBox *, const QLineEdit *, Settings::SettingsEntryBool *, Settings::SettingsEntryString&);
 };
+
+template<typename enum_type>
+void InitConfigurator::initComboBox(QComboBox *comboBox, const Settings::SettingsEntryEnum<enum_type>& entry)
+{
+  comboBox->clear();
+  for (const auto& item : entry.items()) {
+    comboBox->addItem(QString::fromStdString(item.description), QString::fromStdString(item.name));
+  }
+  updateComboBox(comboBox, entry);
+}
+
+template<typename enum_type>
+void InitConfigurator::updateComboBox(const BlockSignals<QComboBox *>& comboBox, const Settings::SettingsEntryEnum<enum_type>& entry)
+{
+  comboBox->setCurrentIndex(entry.index());
+}
+
+template<typename enum_type>
+void InitConfigurator::initButtonGroup(const BlockSignals<QButtonGroup *>& buttonGroup, const Settings::SettingsEntryEnum<enum_type>& entry)
+{
+  for (const auto button : buttonGroup->buttons()) {
+    const auto settingsValue = button->property(Settings::PROPERTY_NAME).toString().toStdString();
+    if (settingsValue == entry.item().name) {
+      button->setChecked(true);
+    }
+  }
+}
+
+template<typename enum_type>
+void InitConfigurator::applyButtonGroup(const BlockSignals<QButtonGroup *>& buttonGroup, Settings::SettingsEntryEnum<enum_type>& entry)
+{
+  const auto button = buttonGroup->checkedButton();
+  if (button) {
+      const auto settingsValue = button->property(Settings::PROPERTY_NAME).toString().toStdString();
+      entry.setValue(entry.decode(settingsValue));
+  }
+}
diff --git a/src/gui/MainWindow.cc b/src/gui/MainWindow.cc
index dfb96294f3..4b674d539c 100644
--- a/src/gui/MainWindow.cc
+++ b/src/gui/MainWindow.cc
@@ -23,8 +23,23 @@
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  *
  */
+
 #include "gui/MainWindow.h"
 
+#include <deque>
+#include <cassert>
+#include <array>
+#include <functional>
+#include <exception>
+#include <sstream>
+#include <iostream>
+#include <memory>
+#include <string>
+#include <vector>
+#include <cstdio>
+#include <memory>
+#include <utility>
+
 #include <QApplication>
 #include <QDialog>
 #include <QElapsedTimer>
@@ -42,16 +57,7 @@
 #include <QTextEdit>
 #include <QToolBar>
 #include <QWidget>
-#include <deque>
-#include <cassert>
-#include <array>
-#include <functional>
-#include <exception>
-#include <sstream>
-#include <iostream>
-#include <memory>
-#include <string>
-#include <vector>
+
 #include "openscad_gui.h"
 
 #ifdef ENABLE_MANIFOLD
@@ -70,13 +76,14 @@
 #include "gui/Preferences.h"
 #include "utils/printutils.h"
 #include "core/node.h"
+#include "core/ColorUtil.h"
 #include "core/CSGNode.h"
 #include "core/Expression.h"
 #include "core/ScopeContext.h"
 #include "core/progress.h"
 #include "io/dxfdim.h"
 #include "io/fileutils.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "gui/AboutDialog.h"
 #include "gui/FontListDialog.h"
 #include "gui/LibraryInfoDialog.h"
@@ -190,15 +197,11 @@ std::string SHA256HashString(std::string aString){
 #include "geometry/GeometryEvaluator.h"
 
 #include "gui/PrintInitDialog.h"
-//#include "gui/ExportPdfDialog.h"
+#include "gui/ExportPdfDialog.h"
+#include "gui/Export3mfDialog.h"
 #include "gui/input/InputDriverEvent.h"
 #include "gui/input/InputDriverManager.h"
-#include <cstdio>
-#include <memory>
 #include <QtNetwork>
-#include <utility>
-
-#include "gui/qt-obsolete.h" // IWYU pragma: keep
 
 static const int autoReloadPollingPeriodMS = 200;
 
@@ -237,8 +240,8 @@ QAction *findAction(const QList<QAction *>& actions, const std::string& name)
   return nullptr;
 }
 
-void fileExportedMessage(const char *format, const QString& filename) {
-  LOG("%1$s export finished: %2$s", format, filename.toUtf8().constData());
+void fileExportedMessage(const QString& format, const QString& filename) {
+  LOG("%1$s export finished: %2$s", format.toUtf8().constData(), filename.toUtf8().constData());
 }
 
 void removeExportActions(QToolBar *toolbar, QAction *action) {
@@ -2704,13 +2707,11 @@ bool MainWindow::canExport(unsigned int dim)
   return true;
 }
 
-void MainWindow::actionExport(FileFormat format, const char *type_name, const char *suffix, unsigned int dim) {
-  ExportPdfOptions *empty = nullptr;
-  actionExport(format, type_name, suffix, dim, empty);
-}
-
-void MainWindow::actionExport(FileFormat format, const char *type_name, const char *suffix, unsigned int dim, ExportPdfOptions *options)
+void MainWindow::actionExport(unsigned int dim, ExportInfo& exportInfo)
 {
+  const auto type_name = QString::fromStdString(exportInfo.info.description);
+  const auto suffix = QString::fromStdString(exportInfo.info.suffix);
+
   //Setting filename skips the file selection dialog and uses the path provided instead.
   if (GuiLocker::isLocked()) return;
   GuiLocker lock;
@@ -2729,16 +2730,6 @@ void MainWindow::actionExport(FileFormat format, const char *type_name, const ch
   }
   this->export_paths[suffix] = exportFilename;
 
-  ExportInfo exportInfo = {
-    .format = format,
-    .title = std::filesystem::path(activeEditor->filepath.toStdString()).filename().string(),
-    .sourceFilePath = activeEditor->filepath.toStdString(),
-    .camera = &qglview->cam,
-    .defaultColor = { 0xf9, 0xd7, 0x2c, 255 } // Cornfield: CGAL_FACE_FRONT_COLOR
-  };
-  // Add options
-  exportInfo.options = options;
-
   bool exportResult = exportFileByName(this->root_geom, exportFilename.toStdString(), exportInfo);
 
   if (exportResult) fileExportedMessage(type_name, exportFilename);
@@ -2747,55 +2738,35 @@ void MainWindow::actionExport(FileFormat format, const char *type_name, const ch
 
 void MainWindow::actionExportFileFormat(int fmt)
 {
-  const FileFormat format = static_cast<FileFormat>(fmt);
+  const auto format = static_cast<FileFormat>(fmt);
   const FileFormatInfo &info = fileformat::info(format);
-  const std::string suffix = "." + info.suffix;
-  switch (format) {
-    case FileFormat::PDF:
-{
-
-  ExportPdfOptions exportPdfOptions;
-  QSettingsCached settings;
-
-// Prepopulated with default values in export.h
-  auto exportPdfDialog = new ExportPdfDialog();
-
-// Get current settings or defaults
-//  modify the two enums (next two rows) to explicitly use default by lookup to string (see the later set methods).
-  exportPdfDialog->setPaperSize(sizeString2Enum(settings.value("exportPdfOpts/paperSize",
-                                                               QString::fromStdString(paperSizeStrings[static_cast<int>(exportPdfOptions.paperSize)])).toString())); // enum map
-  exportPdfDialog->setOrientation(orientationsString2Enum(settings.value("exportPdfOpts/orientation",
-                                                                         QString::fromStdString(paperOrientationsStrings[static_cast<int>(exportPdfOptions.Orientation)])).toString())); // enum map
-  exportPdfDialog->setShowDesignFilename(settings.value("exportPdfOpts/showDsgnFN", exportPdfOptions.showDesignFilename).toBool());
-  exportPdfDialog->setShowScale(settings.value("exportPdfOpts/showScale", exportPdfOptions.showScale).toBool());
-  exportPdfDialog->setShowScaleMsg(settings.value("exportPdfOpts/showScaleMsg", exportPdfOptions.showScaleMsg).toBool());
-  exportPdfDialog->setShowGrid(settings.value("exportPdfOpts/showGrid", exportPdfOptions.showGrid).toBool());
-  exportPdfDialog->setGridSize(settings.value("exportPdfOpts/gridSize", exportPdfOptions.gridSize).toDouble());
-
-
-  if (exportPdfDialog->exec() == QDialog::Rejected) {
-    return;
-  }
 
-  exportPdfOptions.paperSize = exportPdfDialog->getPaperSize();
-  exportPdfOptions.Orientation = exportPdfDialog->getOrientation();
-  exportPdfOptions.showDesignFilename = exportPdfDialog->getShowDesignFilename();
-  exportPdfOptions.showScale = exportPdfDialog->getShowScale();
-  exportPdfOptions.showScaleMsg = exportPdfDialog->getShowScaleMsg();
-  exportPdfOptions.showGrid = exportPdfDialog->getShowGrid();
-  exportPdfOptions.gridSize = exportPdfDialog->getGridSize();
+  ExportInfo exportInfo = createExportInfo(format, info, activeEditor->filepath.toStdString(), &qglview->cam, {});
 
-  settings.setValue("exportPdfOpts/paperSize", QString::fromStdString(paperSizeStrings[static_cast<int>(exportPdfDialog->getPaperSize())]));
-  settings.setValue("exportPdfOpts/orientation", QString::fromStdString(paperOrientationsStrings[static_cast<int>(exportPdfDialog->getOrientation())]));
-  settings.setValue("exportPdfOpts/showDsgnFN", exportPdfDialog->getShowDesignFilename());
-  settings.setValue("exportPdfOpts/showScale", exportPdfDialog->getShowScale());
-  settings.setValue("exportPdfOpts/showScaleMsg", exportPdfDialog->getShowScaleMsg());
-  settings.setValue("exportPdfOpts/showGrid", exportPdfDialog->getShowGrid());
-  settings.setValue("exportPdfOpts/gridSize", exportPdfDialog->getGridSize());
+  switch (format) {
+    case FileFormat::PDF:
+      {
+        auto exportPdfDialog = new ExportPdfDialog();
+        exportPdfDialog->deleteLater();
+        if (exportPdfDialog->exec() == QDialog::Rejected) {
+          return;
+        }
 
-  actionExport(FileFormat::PDF, "PDF", ".pdf", 2, &exportPdfOptions);
+        exportInfo.optionsPdf = exportPdfDialog->getOptions();
+        actionExport(2, exportInfo);
+      }
+      break;
+    case FileFormat::_3MF:
+      {
+        auto export3mfDialog = new Export3mfDialog();
+        export3mfDialog->deleteLater();
+        if (export3mfDialog->exec() == QDialog::Rejected) {
+          return;
+        }
 
-}
+        exportInfo.options3mf = export3mfDialog->getOptions();
+        actionExport(3, exportInfo);
+      }
       break;
     case FileFormat::CSG:
 {
@@ -2806,7 +2777,7 @@ void MainWindow::actionExportFileFormat(int fmt)
     clearCurrentOutput();
     return;
   }
-  const auto suffix = ".csg";
+  const QString suffix = "csg";
   auto csg_filename = QFileDialog::getSaveFileName(this,
                                                    _("Export CSG File"), exportPath(suffix), _("CSG Files (*.csg)"));
 
@@ -2831,7 +2802,7 @@ void MainWindow::actionExportFileFormat(int fmt)
 {
   // Grab first to make sure dialog box isn't part of the grabbed image
   qglview->grabFrame();
-  const auto suffix = ".png";
+  const QString suffix = "png";
   auto img_filename = QFileDialog::getSaveFileName(this,
                                                    _("Export Image"), exportPath(suffix), _("PNG Files (*.png)"));
   if (!img_filename.isEmpty()) {
@@ -2848,7 +2819,7 @@ void MainWindow::actionExportFileFormat(int fmt)
 }
       break;
     default:
-      actionExport(info.format, info.description.c_str(), suffix.c_str(), fileformat::is3D(format) ? 3 : fileformat::is2D(format) ? 2 : 0);
+      actionExport(fileformat::is3D(format) ? 3 : fileformat::is2D(format) ? 2 : 0, exportInfo);
   }
 }
 
@@ -3692,38 +3663,21 @@ void MainWindow::processEvents()
   if (this->procevents) QApplication::processEvents();
 }
 
-QString MainWindow::exportPath(const char *suffix) {
-  QString path;
-  auto path_it = this->export_paths.find(suffix);
+QString MainWindow::exportPath(const QString& suffix) {
+  const auto path_it = this->export_paths.find(suffix);
+  const auto basename = activeEditor->filepath.isEmpty() ? "Untitled" : QFileInfo(activeEditor->filepath).completeBaseName();
+  QString dir;
   if (path_it != export_paths.end()) {
-    path = QFileInfo(path_it->second).absolutePath() + QString("/");
-    if (activeEditor->filepath.isEmpty()) path += QString(_("Untitled")) + suffix;
-    else path += QFileInfo(activeEditor->filepath).completeBaseName() + suffix;
+    dir = QFileInfo(path_it->second).absolutePath();
+  } else if (activeEditor->filepath.isEmpty()) {
+    dir = QString::fromStdString(PlatformUtils::userDocumentsPath());
   } else {
-    if (activeEditor->filepath.isEmpty()) path = QString(PlatformUtils::userDocumentsPath().c_str()) + QString("/") + QString(_("Untitled")) + suffix;
-    else {
-      auto info = QFileInfo(activeEditor->filepath);
-      path = info.absolutePath() + QString("/") + info.completeBaseName() + suffix;
-    }
+    dir = QFileInfo(activeEditor->filepath).absolutePath();
   }
-  return path;
+  return QString("%1/%2.%3").arg(dir, basename, suffix);
 }
 
 void MainWindow::jumpToLine(int line, int col)
 {
   this->activeEditor->setCursorPosition(line, col);
 }
-
-paperSizes MainWindow::sizeString2Enum(const QString& current){
-   for(size_t i = 0; i < paperSizeStrings.size(); i++){
-       if (current.toStdString()==paperSizeStrings[i]) return static_cast<paperSizes>(i);
-   };
-   return paperSizes::A4;
-};
-
-paperOrientations MainWindow::orientationsString2Enum(const QString& current){
-   for(size_t i = 0; i < paperOrientationsStrings.size(); i++){
-       if (current.toStdString()==paperOrientationsStrings[i]) return static_cast<paperOrientations>(i);
-   };
-   return paperOrientations::PORTRAIT;
-};
diff --git a/src/gui/MainWindow.h b/src/gui/MainWindow.h
index 17ffad039b..b975741b55 100644
--- a/src/gui/MainWindow.h
+++ b/src/gui/MainWindow.h
@@ -1,16 +1,10 @@
 #pragma once
 
-#include "gui/Editor.h"
-#include "geometry/Geometry.h"
-#include "io/export.h"
-#include "gui/ExportPdfDialog.h"
-#include "gui/Measurement.h"
-#include "RenderStatistic.h"
-#include "gui/TabManager.h"
-#include "core/Tree.h"
-#include "gui/UIUtils.h"
-#include "gui/qtgettext.h" // IWYU pragma: keep
-#include "ui_MainWindow.h"
+#include <ctime>
+#include <unordered_map>
+#include <memory>
+#include <string>
+#include <vector>
 
 #include <QAction>
 #include <QCloseEvent>
@@ -29,11 +23,6 @@
 #include <QTimer>
 #include <QUrl>
 #include <QWidget>
-#include <ctime>
-#include <unordered_map>
-#include <memory>
-#include <string>
-#include <vector>
 #include <QMainWindow>
 #include <QElapsedTimer>
 #include <QIcon>
@@ -43,6 +32,18 @@
 #include <QTime>
 #include <QSignalMapper>
 
+#include "gui/Editor.h"
+#include "geometry/Geometry.h"
+#include "io/export.h"
+#include "gui/Measurement.h"
+#include "RenderStatistic.h"
+#include "gui/TabManager.h"
+#include "core/Tree.h"
+#include "gui/UIUtils.h"
+#include "gui/qtgettext.h" // IWYU pragma: keep
+#include "gui/qt-obsolete.h" // IWYU pragma: keep
+#include "ui_MainWindow.h"
+
 #ifdef STATIC_QT_SVG_PLUGIN
 #include <QtPlugin>
 Q_IMPORT_PLUGIN(QSvgPlugin)
@@ -276,8 +277,7 @@ private slots:
   void actionDisplayCSGTree();
   void actionDisplayCSGProducts();
   bool canExport(unsigned int dim);
-  void actionExport(FileFormat format, const char *type_name, const char *suffix, unsigned int dim);
-  void actionExport(FileFormat format, const char *type_name, const char *suffix, unsigned int dim, ExportPdfOptions *options);
+  void actionExport(unsigned int dim, ExportInfo& exportInfo);
   void actionExportFileFormat(int fmt);
   void actionCopyViewport();
   void actionFlushCaches();
@@ -396,12 +396,12 @@ public slots:
   EditorInterface *renderedEditor; // stores pointer to editor which has been most recently rendered
   time_t includes_mtime{0}; // latest include mod time
   time_t deps_mtime{0}; // latest dependency mod time
-  std::unordered_map<std::string, QString> export_paths; // for each file type, where it was exported to last
-  QString exportPath(const char *suffix); // look up the last export path and generate one if not found
+  std::unordered_map<QString, QString> export_paths; // for each file type, where it was exported to last
+  QString exportPath(const QString& suffix); // look up the last export path and generate one if not found
   int last_parser_error_pos{-1}; // last highlighted error position
   int tabCount = 0;
-  paperSizes sizeString2Enum(const QString& current);
-  paperOrientations orientationsString2Enum(const QString& current);
+  ExportPdfPaperSize sizeString2Enum(const QString& current);
+  ExportPdfPaperOrientation orientationsString2Enum(const QString& current);
 
   QSoundEffect *renderCompleteSoundEffect;
   std::vector<std::unique_ptr<QTemporaryFile>> allTempFiles;
diff --git a/src/gui/OctoPrint.cc b/src/gui/OctoPrint.cc
index 4f5349179c..c2ce5a0a3e 100644
--- a/src/gui/OctoPrint.cc
+++ b/src/gui/OctoPrint.cc
@@ -26,7 +26,7 @@
 
 #include "gui/OctoPrint.h"
 
-#include "gui/Settings.h"
+#include "core/Settings.h"
 
 #include <QHttpMultiPart>
 #include <QHttpPart>
diff --git a/src/gui/Preferences.cc b/src/gui/Preferences.cc
index 1ed2b67dee..dda1a87005 100644
--- a/src/gui/Preferences.cc
+++ b/src/gui/Preferences.cc
@@ -55,7 +55,7 @@
 #include "geometry/GeometryCache.h"
 #include "gui/AutoUpdater.h"
 #include "Feature.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "printutils.h"
 #ifdef ENABLE_CGAL
 #include "geometry/cgal/CGALCache.h"
@@ -79,12 +79,12 @@ class SettingsReader : public Settings::SettingsVisitor
 {
   QSettingsCached settings;
 
-  void handle(Settings::SettingsEntry& entry) const override
+  void handle(Settings::SettingsEntryBase& entry) const override
   {
     if (settings.contains(QString::fromStdString(entry.key()))) {
       std::string value = settings.value(QString::fromStdString(entry.key())).toString().toStdString();
       PRINTDB("SettingsReader R: %s = '%s'", entry.key() % value);
-      entry.decode(value);
+      entry.set(value);
     }
   }
 };
@@ -173,6 +173,7 @@ void Preferences::init() {
   addPrefPage(group, prefsActionInput, pageInput);
   addPrefPage(group, prefsActionInputButton, pageInputButton);
   addPrefPage(group, prefsActionAdvanced, pageAdvanced);
+  addPrefPage(group, prefsActionDialogs, pageDialogs);
 
   connect(group, SIGNAL(triggered(QAction*)), this, SLOT(actionTriggered(QAction*)));
 
@@ -252,6 +253,9 @@ void Preferences::init() {
     this->comboBoxOctoPrintSlicingProfile->addItem(profileDesc, QVariant{profile});
   }
 
+  this->checkBoxAlwaysShowExportPdfDialog->setChecked(Settings::SettingsExportPdf::exportPdfAlwaysShowDialog.value());
+  this->checkBoxAlwaysShowExport3mfDialog->setChecked(Settings::SettingsExport3mf::export3mfAlwaysShowDialog.value());
+
   emit editorConfigChanged();
 }
 
@@ -992,7 +996,7 @@ void Preferences::updateLocalAppParams()
       items.emplace_back(Settings::LocalAppParameterType::sourcedir, std::string{});
     }
   }
-  Settings::Settings::localAppParameterList.setItems(items);
+  Settings::Settings::localAppParameterList.setValue(items);
   writeSettings();
 }
 
@@ -1115,6 +1119,18 @@ void Preferences::on_comboBoxOctoPrintSlicingProfile_activated(int val)
   writeSettings();
 }
 
+void Preferences::on_checkBoxAlwaysShowExportPdfDialog_toggled(bool state)
+{
+  Settings::SettingsExportPdf::exportPdfAlwaysShowDialog.setValue(state);
+  writeSettings();
+}
+
+void Preferences::on_checkBoxAlwaysShowExport3mfDialog_toggled(bool state)
+{
+  Settings::SettingsExport3mf::export3mfAlwaysShowDialog.setValue(state);
+  writeSettings();
+}
+
 void Preferences::writeSettings()
 {
   Settings::Settings::visit(SettingsWriter());
@@ -1281,7 +1297,7 @@ void Preferences::updateGUI()
   updateComboBox(this->comboBoxOctoPrintSlicingProfile, Settings::Settings::octoPrintSlicerProfile.value());
 }
 
-void Preferences::applyComboBox(QComboBox * /*comboBox*/, int val, Settings::SettingsEntryEnum& entry)
+void Preferences::applyComboBox(QComboBox * /*comboBox*/, int val, Settings::SettingsEntryEnum<std::string>& entry)
 {
   entry.setIndex(val);
   writeSettings();
diff --git a/src/gui/Preferences.h b/src/gui/Preferences.h
index 2d91028d33..6bd17cd3d3 100644
--- a/src/gui/Preferences.h
+++ b/src/gui/Preferences.h
@@ -15,11 +15,12 @@
 #include <QWidget>
 #include <QMainWindow>
 #include <QSettings>
+#include <string>
 
 #include "gui/qtgettext.h" // IWYU pragma: keep
 #include "openscad_gui.h"
 #include "ui_Preferences.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "gui/InitConfigurator.h"
 
 class Preferences : public QMainWindow, public Ui::Preferences, public InitConfigurator
@@ -159,6 +160,10 @@ public slots:
   void on_actionLocalAppParameterSourceDir_triggered();
   void listWidgetLocalAppParamsModelDataChanged();
 
+  // Dialogs
+  void on_checkBoxAlwaysShowExportPdfDialog_toggled(bool);
+  void on_checkBoxAlwaysShowExport3mfDialog_toggled(bool);
+
 signals:
   void requestRedraw() const;
   void updateUndockMode(bool undockMode) const;
@@ -202,7 +207,7 @@ private slots:
   void moveListBoxRow(QListWidget *listBox, int offset);
 
   /** Set value from combobox to settings */
-  void applyComboBox(QComboBox *comboBox, int val, Settings::SettingsEntryEnum& entry);
+  void applyComboBox(QComboBox *comboBox, int val, Settings::SettingsEntryEnum<std::string>& entry);
 
   QSettings::SettingsMap defaultmap;
   QHash<const QAction *, QWidget *> prefPages;
diff --git a/src/gui/Preferences.ui b/src/gui/Preferences.ui
index 39d484be2c..24818ecfb6 100644
--- a/src/gui/Preferences.ui
+++ b/src/gui/Preferences.ui
@@ -6,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>841</width>
-    <height>843</height>
+    <width>643</width>
+    <height>636</height>
    </rect>
   </property>
   <property name="sizePolicy">
@@ -27,7 +27,7 @@
     <item row="0" column="0">
      <widget class="QStackedWidget" name="stackedWidget">
       <property name="currentIndex">
-       <number>4</number>
+       <number>8</number>
       </property>
       <widget class="QWidget" name="page3DView">
        <layout class="QVBoxLayout" name="verticalLayout_4">
@@ -1359,8 +1359,8 @@
             <rect>
              <x>0</x>
              <y>0</y>
-             <width>821</width>
-             <height>753</height>
+             <width>584</width>
+             <height>679</height>
             </rect>
            </property>
            <layout class="QVBoxLayout" name="verticalLayout_9">
@@ -1730,7 +1730,8 @@
                     <string/>
                    </property>
                    <property name="icon">
-                    <iconset theme="chokusen-down"/>
+                    <iconset theme="chokusen-down">
+                     <normaloff>.</normaloff>.</iconset>
                    </property>
                   </widget>
                  </item>
@@ -1740,7 +1741,8 @@
                     <string/>
                    </property>
                    <property name="icon">
-                    <iconset theme="chokusen-add"/>
+                    <iconset theme="chokusen-add">
+                     <normaloff>.</normaloff>.</iconset>
                    </property>
                   </widget>
                  </item>
@@ -1759,7 +1761,8 @@
                     <string/>
                    </property>
                    <property name="icon">
-                    <iconset theme="chokusen-up"/>
+                    <iconset theme="chokusen-up">
+                     <normaloff>.</normaloff>.</iconset>
                    </property>
                   </widget>
                  </item>
@@ -1778,7 +1781,8 @@
                     <string/>
                    </property>
                    <property name="icon">
-                    <iconset theme="chokusen-remove"/>
+                    <iconset theme="chokusen-remove">
+                     <normaloff>.</normaloff>.</iconset>
                    </property>
                   </widget>
                  </item>
@@ -2731,6 +2735,58 @@
         </item>
        </layout>
       </widget>
+      <widget class="QWidget" name="pageDialogs">
+       <layout class="QVBoxLayout" name="verticalLayout_18">
+        <property name="leftMargin">
+         <number>0</number>
+        </property>
+        <property name="topMargin">
+         <number>0</number>
+        </property>
+        <property name="rightMargin">
+         <number>0</number>
+        </property>
+        <property name="bottomMargin">
+         <number>0</number>
+        </property>
+        <item>
+         <widget class="QGroupBox" name="groupBox">
+          <property name="title">
+           <string>Dialog visibility</string>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_19">
+           <item>
+            <widget class="QCheckBox" name="checkBoxAlwaysShowExportPdfDialog">
+             <property name="text">
+              <string>Always show PDF export dialog</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QCheckBox" name="checkBoxAlwaysShowExport3mfDialog">
+             <property name="text">
+              <string>Always show 3MF export dialog</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <spacer name="verticalSpacer">
+             <property name="orientation">
+              <enum>Qt::Vertical</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>20</width>
+               <height>40</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </widget>
+        </item>
+       </layout>
+      </widget>
      </widget>
     </item>
    </layout>
@@ -2768,6 +2824,7 @@
    <addaction name="prefsActionAdvanced"/>
    <addaction name="prefsActionInput"/>
    <addaction name="prefsActionInputButton"/>
+   <addaction name="prefsActionDialogs"/>
   </widget>
   <action name="prefsAction3DView">
    <property name="checkable">
@@ -2874,9 +2931,22 @@
     <string>3D Printing Services</string>
    </property>
   </action>
+  <action name="prefsActionDialogs">
+   <property name="checkable">
+    <bool>true</bool>
+   </property>
+   <property name="icon">
+    <iconset resource="../../resources/common.qrc">
+     <normaloff>:/icons/prefsDialogs.png</normaloff>:/icons/prefsDialogs.png</iconset>
+   </property>
+   <property name="text">
+    <string>Dialogs</string>
+   </property>
+  </action>
   <action name="actionLocalAppParameterDir">
    <property name="icon">
-    <iconset theme="chokusen-folder"/>
+    <iconset theme="chokusen-folder">
+     <normaloff>.</normaloff>.</iconset>
    </property>
    <property name="text">
     <string>Directory of the output file</string>
@@ -2884,7 +2954,8 @@
   </action>
   <action name="actionLocalAppParameterExtension">
    <property name="icon">
-    <iconset theme="chokusen-parameter"/>
+    <iconset theme="chokusen-parameter">
+     <normaloff>.</normaloff>.</iconset>
    </property>
    <property name="text">
     <string>Extension of the output file without leading dot</string>
@@ -2892,7 +2963,8 @@
   </action>
   <action name="actionLocalAppParameterSource">
    <property name="icon">
-    <iconset theme="chokusen-file"/>
+    <iconset theme="chokusen-file">
+     <normaloff>.</normaloff>.</iconset>
    </property>
    <property name="text">
     <string>Full path to the main source file</string>
@@ -2900,7 +2972,8 @@
   </action>
   <action name="actionLocalAppParameterSourceDir">
    <property name="icon">
-    <iconset theme="chokusen-folder"/>
+    <iconset theme="chokusen-folder">
+     <normaloff>.</normaloff>.</iconset>
    </property>
    <property name="text">
     <string>Directory of the main source file</string>
@@ -2908,7 +2981,8 @@
   </action>
   <action name="actionLocalAppParameterFile">
    <property name="icon">
-    <iconset theme="chokusen-orthogonal"/>
+    <iconset theme="chokusen-orthogonal">
+     <normaloff>.</normaloff>.</iconset>
    </property>
    <property name="text">
     <string>Full path to the output file</string>
diff --git a/src/gui/PrintInitDialog.cc b/src/gui/PrintInitDialog.cc
index 72e18c4d79..93dd8f42e3 100644
--- a/src/gui/PrintInitDialog.cc
+++ b/src/gui/PrintInitDialog.cc
@@ -32,7 +32,7 @@
 #include "export.h"
 #include "gui/PrintService.h"
 #include "gui/QSettingsCached.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 
 namespace {
 
diff --git a/src/gui/ScintillaEditor.cc b/src/gui/ScintillaEditor.cc
index 832f8785bb..e16e45670a 100644
--- a/src/gui/ScintillaEditor.cc
+++ b/src/gui/ScintillaEditor.cc
@@ -27,7 +27,7 @@
 
 #include "gui/Preferences.h"
 #include "platform/PlatformUtils.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "gui/ScadLexer.h"
 
 #include <QWheelEvent>
diff --git a/src/gui/Settings.cc b/src/gui/Settings.cc
deleted file mode 100644
index 415c15635b..0000000000
--- a/src/gui/Settings.cc
+++ /dev/null
@@ -1,317 +0,0 @@
-#include "gui/Settings.h"
-#include "io/export.h"
-#include "glview/RenderSettings.h"
-#include "utils/printutils.h"
-#include "gui/input/InputEventMapper.h"
-#include <cassert>
-#include <array>
-#include <boost/algorithm/string.hpp>
-#include <boost/lexical_cast.hpp>
-#include <boost/range/adaptors.hpp>
-#include <cstddef>
-#include <cstdint>
-#include <istream>
-#include <iterator>
-#include <string>
-#include <utility>
-#include <vector>
-
-#include "json/json.hpp"
-
-using json = nlohmann::json;
-
-namespace Settings {
-
-namespace {
-
-std::vector<SettingsEntryEnum::Item> createFileFormatItems(std::vector<FileFormat> formats) {
-  std::vector<SettingsEntryEnum::Item> items;
-  std::transform(formats.begin(), formats.end(), std::back_inserter(items),
-                 [](const FileFormat& format){
-    const FileFormatInfo &info = fileformat::info(format);
-    return SettingsEntryEnum::Item{info.identifier, info.description};
-    });
-  return items;
-}
-
-}  // namespace
-
-static std::vector<SettingsEntry *> entries;
-
-void Settings::visit(const SettingsVisitor& visitor)
-{
-  for (SettingsEntry *entry : entries) {
-    visitor.handle(*entry);
-  }
-}
-
-SettingsEntry::SettingsEntry(std::string category, std::string name) :
-  _category(std::move(category)), _name(std::move(name))
-{
-  entries.push_back(this);
-}
-
-std::string SettingsEntryBool::encode() const
-{
-  return _value ? "true" : "false";
-}
-
-void SettingsEntryBool::decode(const std::string& encoded)
-{
-  std::string trimmed = boost::algorithm::trim_copy(encoded);
-  if (trimmed == "true") {
-    _value = true;
-  } else if (trimmed == "false") {
-    _value = false;
-  } else {
-    try {
-      _value = boost::lexical_cast<bool>(trimmed);
-    } catch (const boost::bad_lexical_cast&) {}
-  }
-}
-
-std::string SettingsEntryInt::encode() const
-{
-  return STR(_value);
-}
-
-void SettingsEntryInt::decode(const std::string& encoded)
-{
-  try {
-    _value = boost::lexical_cast<int>(boost::algorithm::trim_copy(encoded));
-  } catch (const boost::bad_lexical_cast&) {}
-}
-
-std::string SettingsEntryDouble::encode() const
-{
-  return STR(_value);
-}
-
-void SettingsEntryDouble::decode(const std::string& encoded)
-{
-  try {
-    _value = boost::lexical_cast<double>(boost::algorithm::trim_copy(encoded));
-  } catch (const boost::bad_lexical_cast&) {}
-}
-
-void SettingsEntryEnum::setValue(const std::string& value)
-{
-  for (size_t i = 0; i < _items.size(); ++i) {
-    if (_items[i].value == value) {
-      _index = i;
-      return;
-    }
-  }
-}
-
-static std::vector<SettingsEntryEnum::Item> axisValues() {
-  std::vector<SettingsEntryEnum::Item> output;
-  output.push_back({"None", _("None")});
-  for (size_t i = 0; i < InputEventMapper::getMaxAxis(); ++i) {
-    const auto userData = (boost::format("+%d") % (i + 1)).str();
-    const auto text = (boost::format(_("Axis %d")) % i).str();
-    output.push_back({userData, text});
-
-    const auto userDataInv = (boost::format("-%d") % (i + 1)).str();
-    const auto textInv = (boost::format(_("Axis %d (inverted)")) % i).str();
-    output.push_back({userDataInv, textInv});
-  }
-  return output;
-}
-
-std::ostream& operator<<(std::ostream& stream, const LocalAppParameter& param)
-{
-  json data;
-  data["type"] = static_cast<int>(param.type);
-  if (!param.value.empty()) {
-    data["value"] = param.value;
-  }
-  stream << data.dump();
-  return stream;
-}
-
-std::istream& operator>>(std::istream& stream, LocalAppParameter& param)
-{
-  try {
-    json data;
-    stream >> data;
-    param.type = static_cast<LocalAppParameterType>(data["type"]);
-    if (data.contains("value")) {
-      param.value = data["value"];
-    }
-  } catch (const json::exception& e) {
-    param.type = LocalAppParameterType::invalid;
-    param.value = "";
-  }
-  return stream;
-}
-
-SettingsEntryBool Settings::showWarningsIn3dView("3dview", "showWarningsIn3dView", true);
-SettingsEntryBool Settings::mouseCentricZoom("3dview", "mouseCentricZoom", true);
-SettingsEntryBool Settings::mouseSwapButtons("3dview", "mouseSwapButtons", false);
-SettingsEntryInt Settings::indentationWidth("editor", "indentationWidth", 1, 16, 4);
-SettingsEntryInt Settings::tabWidth("editor", "tabWidth", 1, 16, 4);
-SettingsEntryEnum Settings::lineWrap("editor", "lineWrap", {{"None", _("None")}, {"Char", _("Wrap at character boundaries")}, {"Word", _("Wrap at word boundaries")}}, "Word");
-SettingsEntryEnum Settings::lineWrapIndentationStyle("editor", "lineWrapIndentationStyle", {{"Fixed", _("Fixed")}, {"Same", _("Same")}, {"Indented", _("Indented")}}, "Fixed");
-SettingsEntryInt Settings::lineWrapIndentation("editor", "lineWrapIndentation", 0, 999, 4);
-SettingsEntryEnum Settings::lineWrapVisualizationBegin("editor", "lineWrapVisualizationBegin", {{"None", _("None")}, {"Text", _("Text")}, {"Border", _("Border")}, {"Margin", _("Margin")}}, "None");
-SettingsEntryEnum Settings::lineWrapVisualizationEnd("editor", "lineWrapVisualizationEnd", {{"None", _("None")}, {"Text", _("Text")}, {"Border", _("Border")}, {"Margin", _("Margin")}}, "Border");
-SettingsEntryEnum Settings::showWhitespace("editor", "showWhitespaces", {{"Never", _("Never")}, {"Always", _("Always")}, {"AfterIndentation", _("After indentation")}}, "Never");
-SettingsEntryInt Settings::showWhitespaceSize("editor", "showWhitespacesSize", 1, 16, 2);
-SettingsEntryBool Settings::autoIndent("editor", "autoIndent", true);
-SettingsEntryBool Settings::backspaceUnindents("editor", "backspaceUnindents", false);
-SettingsEntryEnum Settings::indentStyle("editor", "indentStyle", {{"Spaces", _("Spaces")}, {"Tabs", _("Tabs")}}, "Spaces");
-SettingsEntryEnum Settings::tabKeyFunction("editor", "tabKeyFunction", {{"Indent", _("Indent")}, {"InsertTab", _("Insert Tab")}}, "Indent");
-SettingsEntryBool Settings::highlightCurrentLine("editor", "highlightCurrentLine", true);
-SettingsEntryBool Settings::enableBraceMatching("editor", "enableBraceMatching", true);
-SettingsEntryBool Settings::enableLineNumbers("editor", "enableLineNumbers", true);
-SettingsEntryBool Settings::enableNumberScrollWheel("editor", "enableNumberScrollWheel", true);
-SettingsEntryEnum Settings::modifierNumberScrollWheel("editor", "modifierNumberScrollWheel", {{"Alt", _("Alt")}, {"Left Mouse Button", _("Left Mouse Button")}, {"Either", _("Either")}}, "Alt");
-
-SettingsEntryString Settings::defaultPrintService("printing", "printService", "NONE");
-
-SettingsEntryString Settings::printServiceName("printing", "printServiceName", "");
-SettingsEntryString Settings::printServiceFileFormat("printing", "printServiceFileFormat", "stl");
-
-SettingsEntryString Settings::octoPrintUrl("printing", "octoPrintUrl", "");
-SettingsEntryString Settings::octoPrintApiKey("printing", "octoPrintApiKey", "");
-SettingsEntryEnum Settings::octoPrintAction("printing", "octoPrintAction", {{"upload", _("Upload only")}, {"slice", _("Upload & Slice")}, {"select", _("Upload, Slice & Select for printing")}, {"print", _("Upload, Slice & Start printing")}}, "upload");
-SettingsEntryString Settings::octoPrintSlicerEngine("printing", "octoPrintSlicerEngine", "");
-SettingsEntryString Settings::octoPrintSlicerEngineDesc("printing", "octoPrintSlicerEngineDesc", "");
-SettingsEntryString Settings::octoPrintSlicerProfile("printing", "octoPrintSlicerProfile", "");
-SettingsEntryString Settings::octoPrintSlicerProfileDesc("printing", "octoPrintSlicerProfileDesc", "");
-SettingsEntryEnum Settings::octoPrintFileFormat(
-    "printing", "octoPrintFileFormat",
-    createFileFormatItems({FileFormat::ASCII_STL, FileFormat::BINARY_STL, FileFormat::_3MF, FileFormat::OFF}),
-    fileformat::info(FileFormat::ASCII_STL).description);
-
-SettingsEntryString Settings::localAppExecutable("printing", "localAppExecutable", "");
-SettingsEntryString Settings::localAppTempDir("printing", "localAppTempDir", "");
-SettingsEntryEnum Settings::localAppFileFormat(
-    "printing", "localAppFileFormat", createFileFormatItems(fileformat::all3D()),
-    fileformat::info(FileFormat::ASCII_STL).description);
-SettingsEntryList<LocalAppParameter> Settings::localAppParameterList("printing", "localAppParameterList");
-
-SettingsEntryEnum Settings::renderBackend3D("advanced", "renderBackend3D", {{"CGAL", "CGAL (old/slow)"}, {"Manifold", "Manifold (new/fast)"}}, "CGAL");
-
-SettingsEntryEnum Settings::toolbarExport3D("advanced", "toolbarExport3D",
-  createFileFormatItems(fileformat::all3D()), fileformat::info(FileFormat::ASCII_STL).description);
-
-SettingsEntryEnum Settings::toolbarExport2D("advanced", "toolbarExport2D",
-  createFileFormatItems(fileformat::all2D()), fileformat::info(FileFormat::DXF).description);
-
-SettingsEntryBool Settings::summaryCamera("summary", "camera", false);
-SettingsEntryBool Settings::summaryArea("summary", "measurementArea", false);
-SettingsEntryBool Settings::summaryBoundingBox("summary", "boundingBox", false);
-
-SettingsEntryBool Settings::inputEnableDriverHIDAPI("input", "enableDriverHIDAPI", false);
-SettingsEntryBool Settings::inputEnableDriverHIDAPILog("input", "enableDriverHIDAPILog", false);
-SettingsEntryBool Settings::inputEnableDriverSPNAV("input", "enableDriverSPNAV", false);
-SettingsEntryBool Settings::inputEnableDriverJOYSTICK("input", "enableDriverJOYSTICK", false);
-SettingsEntryBool Settings::inputEnableDriverQGAMEPAD("input", "enableDriverQGAMEPAD", false);
-SettingsEntryBool Settings::inputEnableDriverDBUS("input", "enableDriverDBUS", false);
-
-SettingsEntryEnum Settings::inputTranslationX("input", "translationX", axisValues(), "+1");
-SettingsEntryEnum Settings::inputTranslationY("input", "translationY", axisValues(), "-2");
-SettingsEntryEnum Settings::inputTranslationZ("input", "translationZ", axisValues(), "-3");
-SettingsEntryEnum Settings::inputTranslationXVPRel("input", "translationXVPRel", axisValues(), "None");
-SettingsEntryEnum Settings::inputTranslationYVPRel("input", "translationYVPRel", axisValues(), "None");
-SettingsEntryEnum Settings::inputTranslationZVPRel("input", "translationZVPRel", axisValues(), "None");
-SettingsEntryEnum Settings::inputRotateX("input", "rotateX", axisValues(), "+4");
-SettingsEntryEnum Settings::inputRotateY("input", "rotateY", axisValues(), "-5");
-SettingsEntryEnum Settings::inputRotateZ("input", "rotateZ", axisValues(), "-6");
-SettingsEntryEnum Settings::inputRotateXVPRel("input", "rotateXVPRel", axisValues(), "None");
-SettingsEntryEnum Settings::inputRotateYVPRel("input", "rotateYVPRel", axisValues(), "None");
-SettingsEntryEnum Settings::inputRotateZVPRel("input", "rotateZVPRel", axisValues(), "None");
-SettingsEntryEnum Settings::inputZoom("input", "zoom", axisValues(), "None");
-SettingsEntryEnum Settings::inputZoom2("input", "zoom2", axisValues(), "None");
-
-SettingsEntryDouble Settings::inputTranslationGain("input", "translationGain", 0.01, 0.01, 9.99, 1.00);
-SettingsEntryDouble Settings::inputTranslationVPRelGain("input", "translationVPRelGain", 0.01, 0.01, 9.99, 1.00);
-SettingsEntryDouble Settings::inputRotateGain("input", "rotateGain", 0.01, 0.01, 9.99, 1.00);
-SettingsEntryDouble Settings::inputRotateVPRelGain("input", "rotateVPRelGain", 0.01, 0.01, 9.99, 1.00);
-SettingsEntryDouble Settings::inputZoomGain("input", "zoomGain", 0.1, 0.1, 99.9, 1.0);
-
-SettingsEntryString Settings::inputButton0("input", "button0", "");
-SettingsEntryString Settings::inputButton1("input", "button1", "");
-SettingsEntryString Settings::inputButton2("input", "button2", "");
-SettingsEntryString Settings::inputButton3("input", "button3", "");
-SettingsEntryString Settings::inputButton4("input", "button4", "");
-SettingsEntryString Settings::inputButton5("input", "button5", "");
-SettingsEntryString Settings::inputButton6("input", "button6", "");
-SettingsEntryString Settings::inputButton7("input", "button7", "");
-SettingsEntryString Settings::inputButton8("input", "button8", "");
-SettingsEntryString Settings::inputButton9("input", "button9", "");
-SettingsEntryString Settings::inputButton10("input", "button10", "");
-SettingsEntryString Settings::inputButton11("input", "button11", "");
-SettingsEntryString Settings::inputButton12("input", "button12", "");
-SettingsEntryString Settings::inputButton13("input", "button13", "");
-SettingsEntryString Settings::inputButton14("input", "button14", "");
-SettingsEntryString Settings::inputButton15("input", "button15", "");
-SettingsEntryString Settings::inputButton16("input", "button16", "");
-SettingsEntryString Settings::inputButton17("input", "button17", "");
-SettingsEntryString Settings::inputButton18("input", "button18", "");
-SettingsEntryString Settings::inputButton19("input", "button19", "");
-SettingsEntryString Settings::inputButton20("input", "button20", "");
-SettingsEntryString Settings::inputButton21("input", "button21", "");
-SettingsEntryString Settings::inputButton22("input", "button22", "");
-SettingsEntryString Settings::inputButton23("input", "button23", "");
-SettingsEntryDouble Settings::axisTrim0("input", "axisTrim0", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim1("input", "axisTrim1", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim2("input", "axisTrim2", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim3("input", "axisTrim3", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim4("input", "axisTrim4", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim5("input", "axisTrim5", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim6("input", "axisTrim6", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim7("input", "axisTrim7", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisTrim8("input", "axisTrim8", -1.0, 0.01, 1.0, 0.0);
-SettingsEntryDouble Settings::axisDeadzone0("input", "axisDeadzone0", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone1("input", "axisDeadzone1", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone2("input", "axisDeadzone2", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone3("input", "axisDeadzone3", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone4("input", "axisDeadzone4", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone5("input", "axisDeadzone5", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone6("input", "axisDeadzone6", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone7("input", "axisDeadzone7", 0.0, 0.01, 1.0, 0.10);
-SettingsEntryDouble Settings::axisDeadzone8("input", "axisDeadzone8", 0.0, 0.01, 1.0, 0.10);
-
-SettingsEntryInt Settings::joystickNr("input", "joystickNr", 0, 9, 0);
-
-
-SettingsEntryString& Settings::inputButton(size_t id)
-{
-  const std::array<SettingsEntryString *, InputDriver::max_buttons> entries {
-    &inputButton0,  &inputButton1,  &inputButton2,  &inputButton3,
-    &inputButton4,  &inputButton5,  &inputButton6,  &inputButton7,
-    &inputButton8,  &inputButton9,  &inputButton10, &inputButton11,
-    &inputButton12, &inputButton13, &inputButton14, &inputButton15,
-    &inputButton16, &inputButton17, &inputButton18, &inputButton19,
-    &inputButton20, &inputButton21, &inputButton22, &inputButton23
-  };
-  assert(id >= 0 && id < entries.size());
-  return *entries[id];
-}
-
-SettingsEntryDouble& Settings::axisTrim(size_t id)
-{
-  const std::array<SettingsEntryDouble *, InputDriver::max_axis> entries {
-    &axisTrim0, &axisTrim1, &axisTrim2,
-    &axisTrim3, &axisTrim4, &axisTrim5,
-    &axisTrim6, &axisTrim7, &axisTrim8
-  };
-  assert(id >= 0 && id < entries.size());
-  return *entries[id];
-}
-
-SettingsEntryDouble& Settings::axisDeadzone(size_t id)
-{
-  const std::array<SettingsEntryDouble *, InputDriver::max_axis> entries {
-    &axisDeadzone0, &axisDeadzone1, &axisDeadzone2,
-    &axisDeadzone3, &axisDeadzone4, &axisDeadzone5,
-    &axisDeadzone6, &axisDeadzone7, &axisDeadzone8
-  };
-  assert(id >= 0 && id < entries.size());
-  return *entries[id];
-}
-
-} // namespace Settings
diff --git a/src/gui/Settings.h b/src/gui/Settings.h
deleted file mode 100644
index bf2eb914d8..0000000000
--- a/src/gui/Settings.h
+++ /dev/null
@@ -1,390 +0,0 @@
-#pragma once
-
-#include <cstddef>
-#include <cstdint>
-#include <string>
-#include <utility>
-#include <vector>
-#include <sstream>
-
-namespace Settings {
-
-class SettingsEntry
-{
-public:
-  const std::string& category() const { return _category; }
-  const std::string& name() const { return _name; }
-  const std::string key() const { return category() + "/" + name(); }
-
-  virtual bool isDefault() const = 0;
-  virtual std::string encode() const = 0;
-  virtual void decode(const std::string& encoded) = 0;
-
-protected:
-  SettingsEntry(std::string category, std::string name);
-  virtual ~SettingsEntry() = default;
-
-private:
-  std::string _category;
-  std::string _name;
-};
-
-class SettingsEntryBool : public SettingsEntry
-{
-public:
-  SettingsEntryBool(const std::string& category, const std::string& name, bool defaultValue) :
-    SettingsEntry(category, name),
-    _value(defaultValue),
-    _defaultValue(defaultValue)
-  {}
-
-  bool value() const { return _value; }
-  void setValue(bool value) { _value = value; }
-  bool isDefault() const override { return _value == _defaultValue; }
-  std::string encode() const override;
-  void decode(const std::string& encoded) override;
-
-private:
-  bool _value;
-  bool _defaultValue;
-};
-
-class SettingsEntryInt : public SettingsEntry
-{
-public:
-  SettingsEntryInt(const std::string& category, const std::string& name, int minimum, int maximum, int defaultValue) :
-    SettingsEntry(category, name),
-    _value(defaultValue),
-    _defaultValue(defaultValue),
-    _minimum(minimum),
-    _maximum(maximum)
-  {}
-
-  int value() const { return _value; }
-  void setValue(int value) { _value = value; }
-  int minimum() const { return _minimum; }
-  int maximum() const { return _maximum; }
-  bool isDefault() const override { return _value == _defaultValue; }
-  std::string encode() const override;
-  void decode(const std::string& encoded) override;
-
-private:
-  int _value;
-  int _defaultValue;
-  int _minimum;
-  int _maximum;
-};
-
-class SettingsEntryDouble : public SettingsEntry
-{
-public:
-  SettingsEntryDouble(const std::string& category, const std::string& name, double minimum, double step, double maximum, double defaultValue) :
-    SettingsEntry(category, name),
-    _value(defaultValue),
-    _defaultValue(defaultValue),
-    _minimum(minimum),
-    _step(step),
-    _maximum(maximum)
-  {}
-
-  double value() const { return _value; }
-  void setValue(double value) { _value = value; }
-  double minimum() const { return _minimum; }
-  double step() const { return _step; }
-  double maximum() const { return _maximum; }
-  bool isDefault() const override { return _value == _defaultValue; }
-  std::string encode() const override;
-  void decode(const std::string& encoded) override;
-
-private:
-  double _value;
-  double _defaultValue;
-  double _minimum;
-  double _step;
-  double _maximum;
-};
-
-class SettingsEntryString : public SettingsEntry
-{
-public:
-  SettingsEntryString(const std::string& category, const std::string& name, const std::string& defaultValue) :
-    SettingsEntry(category, name),
-    _value(defaultValue),
-    _defaultValue(defaultValue)
-  {}
-
-  const std::string& value() const { return _value; }
-  void setValue(const std::string& value) { _value = value; }
-  bool isDefault() const override { return _value == _defaultValue; }
-  std::string encode() const override { return value(); }
-  void decode(const std::string& encoded) override { setValue(encoded); }
-
-private:
-  std::string _value;
-  std::string _defaultValue;
-};
-
-class SettingsEntryEnum : public SettingsEntry
-{
-public:
-  struct Item {
-    std::string value;
-    std::string description;
-  };
-  SettingsEntryEnum(const std::string& category, const std::string& name, std::vector<Item> items, std::string defaultValue) :
-    SettingsEntry(category, name),
-    _items(std::move(items)),
-    _defaultValue(std::move(defaultValue))
-  {
-    setValue(_defaultValue);
-  }
-
-  const std::string& value() const { return _items[_index].value; }
-  size_t index() const { return _index; }
-  void setValue(const std::string& value);
-  void setIndex(size_t index) { if (index < _items.size()) _index = index; }
-  const std::vector<Item>& items() const { return _items; }
-  bool isDefault() const override { return value() == _defaultValue; }
-  std::string encode() const override { return value(); }
-  void decode(const std::string& encoded) override { setValue(encoded); }
-
-private:
-  std::vector<Item> _items;
-  size_t _index{0};
-  std::string _defaultValue;
-};
-
-class LocalAppParameterType
-{
-public:
-  enum Value : uint8_t
-  {
-    invalid,
-    string,
-    file,
-    dir,
-    extension,
-    source,
-    sourcedir
-  };
-
-  LocalAppParameterType() = default;
-  constexpr LocalAppParameterType(Value v) : value(v) { }
-  constexpr operator Value() const { return value; }
-  explicit operator bool() const = delete;
-
-  std::string icon() const {
-    switch (value) {
-      case string: return "chokusen-parameter";
-      case file: return "chokusen-orthogonal";
-      case dir: return "chokusen-folder";
-      case extension: return "chokusen-parameter";
-      case source: return "chokusen-file";
-      case sourcedir: return "chokusen-folder";
-      default: return "*invalid*";
-    }
-  }
-
-  std::string description() const {
-    switch (value) {
-      case string: return "";
-      case file: return "<full path to the output file>";
-      case dir: return "<directory of the output file>";
-      case extension: return "<extension of the output file without leading dot>";
-      case source: return "<full path to the main source file>";
-      case sourcedir: return "<directory of the main source file>";
-      default: return "*invalid*";
-    }
-  }
-
-private:
-  Value value;
-};
-
-struct LocalAppParameter {
-  LocalAppParameterType type;
-  std::string value;
-
-  LocalAppParameter() : type(LocalAppParameterType::string), value("") {}
-  LocalAppParameter(const LocalAppParameterType t, std::string v) : type(t), value(std::move(v)) {}
-  operator bool() const { return type != LocalAppParameterType::invalid; }
-};
-
-template<typename item_type>
-class SettingsEntryList : public SettingsEntry
-{
-public:
-  SettingsEntryList(const std::string& category, const std::string& name) :
-    SettingsEntry(category, name)
-  {
-  }
-
-  const std::vector<item_type>& items() const { return _items; }
-  void setItems(std::vector<item_type>& items) { _items = items; }
-  bool isDefault() const override { return _items.empty(); }
-  std::string encode() const override {
-    std::ostringstream oss;
-    for (const auto& item : _items) {
-      oss << item;
-    }
-    return oss.str();
-  }
-  void decode(const std::string& encoded) override {
-    std::vector<item_type> items;
-    std::stringstream ss;
-    ss << encoded;
-    while (ss.good()) {
-      item_type item;
-      ss >> item;
-      if (item) {
-        items.push_back(item);
-      }
-    }
-    setItems(items);
-  }
-
-private:
-  std::vector<item_type> _items;
-};
-
-class SettingsVisitor;
-
-class Settings
-{
-public:
-  static SettingsEntryBool showWarningsIn3dView;
-  static SettingsEntryBool mouseCentricZoom;
-  static SettingsEntryBool mouseSwapButtons;
-  static SettingsEntryInt indentationWidth;
-  static SettingsEntryInt tabWidth;
-  static SettingsEntryEnum lineWrap;
-  static SettingsEntryEnum lineWrapIndentationStyle;
-  static SettingsEntryInt lineWrapIndentation;
-  static SettingsEntryEnum lineWrapVisualizationBegin;
-  static SettingsEntryEnum lineWrapVisualizationEnd;
-  static SettingsEntryEnum showWhitespace;
-  static SettingsEntryInt showWhitespaceSize;
-  static SettingsEntryBool autoIndent;
-  static SettingsEntryBool backspaceUnindents;
-  static SettingsEntryEnum indentStyle;
-  static SettingsEntryEnum tabKeyFunction;
-  static SettingsEntryBool highlightCurrentLine;
-  static SettingsEntryBool enableBraceMatching;
-  static SettingsEntryBool enableLineNumbers;
-  static SettingsEntryBool enableNumberScrollWheel;
-  static SettingsEntryEnum modifierNumberScrollWheel;
-
-  static SettingsEntryString defaultPrintService;
-  static SettingsEntryString printServiceName;
-  static SettingsEntryString printServiceFileFormat;
-
-  static SettingsEntryString octoPrintUrl;
-  static SettingsEntryString octoPrintApiKey;
-  static SettingsEntryEnum octoPrintFileFormat;
-  static SettingsEntryEnum octoPrintAction;
-  static SettingsEntryString octoPrintSlicerEngine;
-  static SettingsEntryString octoPrintSlicerEngineDesc;
-  static SettingsEntryString octoPrintSlicerProfile;
-  static SettingsEntryString octoPrintSlicerProfileDesc;
-
-  static SettingsEntryString localAppExecutable;
-  static SettingsEntryString localAppTempDir;
-  static SettingsEntryList<LocalAppParameter> localAppParameterList;
-  static SettingsEntryEnum localAppFileFormat;
-
-  static SettingsEntryBool manifoldEnabled;
-  static SettingsEntryEnum renderBackend3D;
-  static SettingsEntryEnum toolbarExport3D;
-  static SettingsEntryEnum toolbarExport2D;
-
-  static SettingsEntryBool summaryCamera;
-  static SettingsEntryBool summaryArea;
-  static SettingsEntryBool summaryBoundingBox;
-
-  static SettingsEntryBool inputEnableDriverHIDAPI;
-  static SettingsEntryBool inputEnableDriverHIDAPILog;
-  static SettingsEntryBool inputEnableDriverSPNAV;
-  static SettingsEntryBool inputEnableDriverJOYSTICK;
-  static SettingsEntryBool inputEnableDriverQGAMEPAD;
-  static SettingsEntryBool inputEnableDriverDBUS;
-
-  static SettingsEntryEnum inputTranslationX;
-  static SettingsEntryEnum inputTranslationY;
-  static SettingsEntryEnum inputTranslationZ;
-  static SettingsEntryEnum inputTranslationXVPRel;
-  static SettingsEntryEnum inputTranslationYVPRel;
-  static SettingsEntryEnum inputTranslationZVPRel;
-  static SettingsEntryEnum inputRotateX;
-  static SettingsEntryEnum inputRotateY;
-  static SettingsEntryEnum inputRotateZ;
-  static SettingsEntryEnum inputRotateXVPRel;
-  static SettingsEntryEnum inputRotateYVPRel;
-  static SettingsEntryEnum inputRotateZVPRel;
-  static SettingsEntryEnum inputZoom;
-  static SettingsEntryEnum inputZoom2;
-  static SettingsEntryDouble inputTranslationGain;
-  static SettingsEntryDouble inputTranslationVPRelGain;
-  static SettingsEntryDouble inputRotateGain;
-  static SettingsEntryDouble inputRotateVPRelGain;
-  static SettingsEntryDouble inputZoomGain;
-  static SettingsEntryString inputButton0;
-  static SettingsEntryString inputButton1;
-  static SettingsEntryString inputButton2;
-  static SettingsEntryString inputButton3;
-  static SettingsEntryString inputButton4;
-  static SettingsEntryString inputButton5;
-  static SettingsEntryString inputButton6;
-  static SettingsEntryString inputButton7;
-  static SettingsEntryString inputButton8;
-  static SettingsEntryString inputButton9;
-  static SettingsEntryString inputButton10;
-  static SettingsEntryString inputButton11;
-  static SettingsEntryString inputButton12;
-  static SettingsEntryString inputButton13;
-  static SettingsEntryString inputButton14;
-  static SettingsEntryString inputButton15;
-  static SettingsEntryString inputButton16;
-  static SettingsEntryString inputButton17;
-  static SettingsEntryString inputButton18;
-  static SettingsEntryString inputButton19;
-  static SettingsEntryString inputButton20;
-  static SettingsEntryString inputButton21;
-  static SettingsEntryString inputButton22;
-  static SettingsEntryString inputButton23;
-  static SettingsEntryDouble axisTrim0;
-  static SettingsEntryDouble axisTrim1;
-  static SettingsEntryDouble axisTrim2;
-  static SettingsEntryDouble axisTrim3;
-  static SettingsEntryDouble axisTrim4;
-  static SettingsEntryDouble axisTrim5;
-  static SettingsEntryDouble axisTrim6;
-  static SettingsEntryDouble axisTrim7;
-  static SettingsEntryDouble axisTrim8;
-  static SettingsEntryDouble axisDeadzone0;
-  static SettingsEntryDouble axisDeadzone1;
-  static SettingsEntryDouble axisDeadzone2;
-  static SettingsEntryDouble axisDeadzone3;
-  static SettingsEntryDouble axisDeadzone4;
-  static SettingsEntryDouble axisDeadzone5;
-  static SettingsEntryDouble axisDeadzone6;
-  static SettingsEntryDouble axisDeadzone7;
-  static SettingsEntryDouble axisDeadzone8;
-  static SettingsEntryInt joystickNr;
-
-  static SettingsEntryString& inputButton(size_t id);
-  static SettingsEntryDouble& axisTrim(size_t id);
-  static SettingsEntryDouble& axisDeadzone(size_t id);
-
-  static void visit(const SettingsVisitor& visitor);
-};
-
-class SettingsVisitor
-{
-public:
-  SettingsVisitor() = default;
-  virtual ~SettingsVisitor() = default;
-
-  virtual void handle(SettingsEntry& entry) const = 0;
-};
-
-} // namespace Settings
diff --git a/src/gui/SettingsWriter.cc b/src/gui/SettingsWriter.cc
index 987dd69a29..6eaf51cb5a 100644
--- a/src/gui/SettingsWriter.cc
+++ b/src/gui/SettingsWriter.cc
@@ -24,12 +24,13 @@
  *
  */
 #include "gui/SettingsWriter.h"
+#include "Settings.h"
 #include "gui/QSettingsCached.h"
 
 #include <QString>
 #include <string>
 
-void SettingsWriter::handle(Settings::SettingsEntry& entry) const {
+void SettingsWriter::handle(Settings::SettingsEntryBase& entry) const {
   QSettingsCached settings;
   std::string key = entry.category() + "/" + entry.name();
   if (entry.isDefault()) {
diff --git a/src/gui/SettingsWriter.h b/src/gui/SettingsWriter.h
index ce9a2699d4..25e7e3d99f 100644
--- a/src/gui/SettingsWriter.h
+++ b/src/gui/SettingsWriter.h
@@ -25,10 +25,10 @@
  */
 #pragma once
 
-#include "gui/Settings.h"
+#include "core/Settings.h"
 
 class SettingsWriter : public Settings::SettingsVisitor
 {
 public:
-  void handle(Settings::SettingsEntry& entry) const override;
+  void handle(Settings::SettingsEntryBase& entry) const override;
 };
diff --git a/src/gui/UIUtils.cc b/src/gui/UIUtils.cc
index f56bf7ca2c..a060591a96 100644
--- a/src/gui/UIUtils.cc
+++ b/src/gui/UIUtils.cc
@@ -236,11 +236,16 @@ void UIUtils::openOfflineCheatSheet()
   }
 }
 
+QString UIUtils::getBackgroundColorStyleSheet(const QColor &color)
+{
+  return QString("background-color:%1;").arg(color.toRgb().name());
+}
+
 QString UIUtils::blendForBackgroundColorStyleSheet(const QColor& input, const QColor& blend, float transparency)
 {
   const auto result = QColor(
     255.0 * (transparency * blend.redF() + (1 - transparency) * input.redF()),
     255.0 * (transparency * blend.greenF() + (1 - transparency) * input.greenF()),
     255.0 * (transparency * blend.blueF() + (1 - transparency) * input.blueF()));
-  return QString("background-color:%1;").arg(result.toRgb().name());
+  return getBackgroundColorStyleSheet(result);
 }
diff --git a/src/gui/UIUtils.h b/src/gui/UIUtils.h
index 677863054c..ab5ce88131 100644
--- a/src/gui/UIUtils.h
+++ b/src/gui/UIUtils.h
@@ -25,6 +25,7 @@
  */
 #pragma once
 
+#include <QColor>
 #include <QString>
 #include <QWidget>
 #include <QStringList>
@@ -66,6 +67,8 @@ bool hasOfflineCheatSheet();
 
 void openOfflineCheatSheet();
 
+QString getBackgroundColorStyleSheet(const QColor &color);
+
 QString blendForBackgroundColorStyleSheet(const QColor& input, const QColor& blend, float transparency = 0.2);
 
 } // namespace UIUtils
diff --git a/src/gui/input/AxisConfigWidget.cc b/src/gui/input/AxisConfigWidget.cc
index 8baea1574a..12799552be 100644
--- a/src/gui/input/AxisConfigWidget.cc
+++ b/src/gui/input/AxisConfigWidget.cc
@@ -36,11 +36,12 @@
 #include <string>
 
 
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "gui/input/InputDriverManager.h"
 #include "gui/SettingsWriter.h"
 #include "gui/IgnoreWheelWhenNotFocused.h"
 #include "gui/InitConfigurator.h"
+#include "input/InputEventMapper.h"
 
 AxisConfigWidget::AxisConfigWidget(QWidget *parent) : QWidget(parent)
 {
@@ -141,11 +142,11 @@ void AxisConfigWidget::init() {
   for (size_t i = 0; i < InputEventMapper::getMaxAxis(); ++i) {
     auto spinTrim = this->findChild<QDoubleSpinBox *>(QString("doubleSpinBoxTrim%1").arg(i));
     if (spinTrim) {
-      initUpdateDoubleSpinBox(spinTrim, Settings::Settings::axisTrim(i));
+      initUpdateDoubleSpinBox(spinTrim, InputEventMapper::axisTrimSettings(i));
     }
     auto spinDeadZone = this->findChild<QDoubleSpinBox *>(QString("doubleSpinBoxDeadzone%1").arg(i));
     if (spinDeadZone) {
-      initUpdateDoubleSpinBox(spinDeadZone, Settings::Settings::axisDeadzone(i));
+      initUpdateDoubleSpinBox(spinDeadZone, InputEventMapper::axisDeadzoneSettings(i));
     }
   }
 
@@ -422,7 +423,7 @@ void AxisConfigWidget::on_AxisTrim()
   for (size_t i = 0; i < InputEventMapper::getMaxAxis(); ++i) {
     auto spin = this->findChild<QDoubleSpinBox *>(QString("doubleSpinBoxTrim%1").arg(i));
     if (spin) {
-      spin->setValue(Settings::Settings::axisTrim(i).value());
+      spin->setValue(InputEventMapper::axisTrimSettings(i).value());
     }
   }
   emit inputCalibrationChanged();
@@ -435,7 +436,7 @@ void AxisConfigWidget::on_AxisTrimReset()
   for (size_t i = 0; i < InputEventMapper::getMaxAxis(); ++i) {
     auto spin = this->findChild<QDoubleSpinBox *>(QString("doubleSpinBoxTrim%1").arg(i));
     if (spin) {
-      Settings::Settings::axisTrim(i).setValue(0.00);
+      InputEventMapper::axisTrimSettings(i).setValue(0.00);
       spin->setValue(0.00);
     }
   }
@@ -499,7 +500,7 @@ void AxisConfigWidget::on_checkBoxDBus_toggled(bool val)
   }
 }
 
-void AxisConfigWidget::applyComboBox(QComboBox * /*comboBox*/, int val, Settings::SettingsEntryEnum& entry)
+void AxisConfigWidget::applyComboBox(QComboBox * /*comboBox*/, int val, Settings::SettingsEntryEnum<std::string>& entry)
 {
   entry.setIndex(val);
   writeSettings();
diff --git a/src/gui/input/AxisConfigWidget.h b/src/gui/input/AxisConfigWidget.h
index 3ceec1e9a4..4282937210 100644
--- a/src/gui/input/AxisConfigWidget.h
+++ b/src/gui/input/AxisConfigWidget.h
@@ -3,7 +3,8 @@
 #include "gui/qtgettext.h"
 #include <QComboBox>
 #include <QWidget>
-#include "gui/Settings.h"
+#include <string>
+#include "core/Settings.h"
 #include "ui_AxisConfigWidget.h"
 #include "gui/InitConfigurator.h"
 
@@ -77,7 +78,7 @@ public slots:
 
 private:
   /** Set value from combobox to settings */
-  void applyComboBox(QComboBox *comboBox, int val, Settings::SettingsEntryEnum& entry);
+  void applyComboBox(QComboBox *comboBox, int val, Settings::SettingsEntryEnum<std::string>& entry);
   void writeSettings();
 
   bool initialized = false;
diff --git a/src/gui/input/ButtonConfigWidget.cc b/src/gui/input/ButtonConfigWidget.cc
index 64700d5bac..44331d956d 100644
--- a/src/gui/input/ButtonConfigWidget.cc
+++ b/src/gui/input/ButtonConfigWidget.cc
@@ -32,10 +32,11 @@
 #include <QString>
 #include <QWidget>
 #include <cstddef>
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "gui/input/InputDriverManager.h"
 #include "gui/SettingsWriter.h"
 #include "gui/IgnoreWheelWhenNotFocused.h"
+#include "input/InputEventMapper.h"
 
 ButtonConfigWidget::ButtonConfigWidget(QWidget *parent) : QWidget(parent)
 {
@@ -54,7 +55,7 @@ void ButtonConfigWidget::init() {
   for (size_t i = 0; i < InputEventMapper::getMaxButtons(); ++i) {
     auto box = this->findChild<QComboBox *>(QString("comboBoxButton%1").arg(i));
     if (box) {
-      initActionComboBox(box, Settings::Settings::inputButton(i));
+      initActionComboBox(box, InputEventMapper::inputButtonSettings(i));
     }
   }
 
diff --git a/src/gui/input/ButtonConfigWidget.h b/src/gui/input/ButtonConfigWidget.h
index 43e1a51d4d..d811b2b6bf 100644
--- a/src/gui/input/ButtonConfigWidget.h
+++ b/src/gui/input/ButtonConfigWidget.h
@@ -4,7 +4,7 @@
 #include <QComboBox>
 #include <QWidget>
 #include "ui_ButtonConfigWidget.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 
 class ButtonConfigWidget : public QWidget, public Ui::Button
 {
diff --git a/src/gui/input/HidApiInputDriver.cc b/src/gui/input/HidApiInputDriver.cc
index 9c9b17bdc5..b89b60d417 100644
--- a/src/gui/input/HidApiInputDriver.cc
+++ b/src/gui/input/HidApiInputDriver.cc
@@ -43,7 +43,7 @@
 #include <iomanip>
 #include <string>
 
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "platform/PlatformUtils.h"
 #include "gui/input/InputDriverEvent.h"
 #include "gui/input/InputDriverManager.h"
diff --git a/src/gui/input/HidApiInputDriver.h b/src/gui/input/HidApiInputDriver.h
index c64d896968..7bb8171c29 100644
--- a/src/gui/input/HidApiInputDriver.h
+++ b/src/gui/input/HidApiInputDriver.h
@@ -30,6 +30,7 @@
 #include <string>
 #include <hidapi.h>
 
+#include "core/Settings.h"
 #include "gui/input/InputDriver.h"
 
 class HidApiInputDriver : public InputDriver
@@ -54,10 +55,10 @@ class HidApiInputDriver : public InputDriver
   void hidapi_decode_button(const unsigned char *buf, unsigned int len);
 
   size_t getButtonCount() const override {
-    return InputDriver::max_buttons;
+    return Settings::max_buttons;
   }
   size_t getAxisCount() const override {
-    return InputDriver::max_axis;
+    return Settings::max_axis;
   }
 
 private:
diff --git a/src/gui/input/InputDriver.h b/src/gui/input/InputDriver.h
index f619d66fe6..cccde19d32 100644
--- a/src/gui/input/InputDriver.h
+++ b/src/gui/input/InputDriver.h
@@ -31,13 +31,6 @@
 
 class InputDriver : public QThread
 {
-public:
-  // Note that those 2 values also relate to the currently
-  // static list of fields in the preferences GUI, so updating
-  // here needs a change in the UI definition!
-  const static size_t max_axis = 9;
-  const static size_t max_buttons = 24;
-
 public:
   InputDriver() = default;
 
diff --git a/src/gui/input/InputEventMapper.cc b/src/gui/input/InputEventMapper.cc
index 826a559447..76c2a344e2 100644
--- a/src/gui/input/InputEventMapper.cc
+++ b/src/gui/input/InputEventMapper.cc
@@ -25,7 +25,7 @@
  */
 #include "gui/input/InputEventMapper.h"
 #include "gui/input/InputDriverManager.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "gui/Preferences.h"
 #include "gui/input/AxisConfigWidget.h"
 #include "gui/input/ButtonConfigWidget.h"
@@ -36,18 +36,20 @@
 #include <cmath>
 #include <QSettings>
 
+using S = Settings::Settings;
+
 InputEventMapper *InputEventMapper::self = nullptr;
 
 InputEventMapper::InputEventMapper()
 {
   stopRequest = false;
 
-  for (size_t a = 0; a < InputDriver::max_axis; ++a) {
+  for (size_t a = 0; a < getMaxAxis(); ++a) {
     axisRawValue[a] = 0.0;
     axisTrimValue[a] = 0.0;
     axisDeadzone[a] = 0.1;
   }
-  for (size_t a = 0; a < InputDriver::max_buttons; ++a) {
+  for (size_t a = 0; a < getMaxButtons(); ++a) {
     button_state[a] = false;
     button_state_last[a] = false;
   }
@@ -77,14 +79,6 @@ InputEventMapper *InputEventMapper::instance()
   return self;
 }
 
-size_t InputEventMapper::getMaxButtons(){
-  return InputDriver::max_buttons;
-}
-
-size_t InputEventMapper::getMaxAxis(){
-  return InputDriver::max_axis;
-}
-
 /*
     -1 -> 0.196
     0 -> 0
@@ -178,13 +172,13 @@ void InputEventMapper::onTimer()
   bool generated_any_events = generateDeferredEvents();
 
   //update the UI on time, NOT on event as a joystick can fire a high rate of events
-  for (size_t i = 0; i < InputDriver::max_buttons; ++i) {
+  for (size_t i = 0; i < getMaxButtons(); ++i) {
     if (button_state[i] != button_state_last[i]) {
       button_state_last[i] = button_state[i];
       Preferences::inst()->ButtonConfig->updateButtonState(i, button_state[i]);
     }
   }
-  for (size_t i = 0; i < InputDriver::max_axis; ++i) {
+  for (size_t i = 0; i < getMaxAxis(); ++i) {
     Preferences::inst()->AxisConfig->AxesChanged(i, axisRawValue[i] + axisTrimValue[i]);
   }
 
@@ -205,7 +199,7 @@ void InputEventMapper::onButtonChanged(InputEventButtonChanged *event)
 {
   unsigned int button = event->button;
 
-  if (button < InputDriver::max_buttons) {
+  if (button < getMaxButtons()) {
     if (event->down) {
       this->button_state[button] = true;
     } else {
@@ -260,8 +254,8 @@ int InputEventMapper::parseSettingValue(const std::string& val)
 
 void InputEventMapper::onInputMappingUpdated()
 {
-  for (size_t i = 0; i < InputDriver::max_buttons; ++i) {
-    actions[i] = QString::fromStdString(Settings::Settings::inputButton(i).value());
+  for (size_t i = 0; i < getMaxButtons(); ++i) {
+    actions[i] = QString::fromStdString(inputButtonSettings(i).value());
   }
 
   translate[0] = parseSettingValue(Settings::Settings::inputTranslationX.value());
@@ -294,27 +288,27 @@ void InputEventMapper::onInputGainUpdated()
 
 void InputEventMapper::onInputCalibrationUpdated()
 {
-  for (size_t i = 0; i < InputDriver::max_axis; ++i) {
-    axisTrimValue[i] = Settings::Settings::axisTrim(i).value();
-    axisDeadzone[i] = Settings::Settings::axisDeadzone(i).value();
+  for (size_t i = 0; i < getMaxAxis(); ++i) {
+    axisTrimValue[i] = axisTrimSettings(i).value();
+    axisDeadzone[i] = axisDeadzoneSettings(i).value();
   }
   considerGeneratingDeferredEvents();
 }
 
 void InputEventMapper::onAxisAutoTrim()
 {
-  for (size_t i = 0; i < InputDriver::max_axis; ++i) {
+  for (size_t i = 0; i < getMaxAxis(); ++i) {
     axisTrimValue[i] = -axisRawValue[i];
-    Settings::Settings::axisTrim(i).setValue(axisTrimValue[i]);
+    axisTrimSettings(i).setValue(axisTrimValue[i]);
   }
   considerGeneratingDeferredEvents();
 }
 
 void InputEventMapper::onAxisTrimReset()
 {
-  for (size_t i = 0; i < InputDriver::max_axis; ++i) {
+  for (size_t i = 0; i < getMaxAxis(); ++i) {
     axisTrimValue[i] = 0.00;
-    Settings::Settings::axisTrim(i).setValue(axisTrimValue[i]);
+    axisTrimSettings(i).setValue(axisTrimValue[i]);
   }
   considerGeneratingDeferredEvents();
 }
@@ -323,3 +317,40 @@ void InputEventMapper::stop(){
   stopRequest = true;
   timer->stop();
 }
+
+Settings::SettingsEntryString& InputEventMapper::inputButtonSettings(size_t id)
+{
+  const std::array<Settings::SettingsEntryString *, getMaxButtons()> entries {
+    &S::inputButton0,  &S::inputButton1,  &S::inputButton2,  &S::inputButton3,
+    &S::inputButton4,  &S::inputButton5,  &S::inputButton6,  &S::inputButton7,
+    &S::inputButton8,  &S::inputButton9,  &S::inputButton10, &S::inputButton11,
+    &S::inputButton12, &S::inputButton13, &S::inputButton14, &S::inputButton15,
+    &S::inputButton16, &S::inputButton17, &S::inputButton18, &S::inputButton19,
+    &S::inputButton20, &S::inputButton21, &S::inputButton22, &S::inputButton23
+  };
+  assert(id >= 0 && id < entries.size());
+  return *entries[id];
+}
+
+Settings::SettingsEntryDouble& InputEventMapper::axisTrimSettings(size_t id)
+{
+  const std::array<Settings::SettingsEntryDouble *, getMaxAxis()> entries {
+    &S::axisTrim0, &S::axisTrim1, &S::axisTrim2,
+    &S::axisTrim3, &S::axisTrim4, &S::axisTrim5,
+    &S::axisTrim6, &S::axisTrim7, &S::axisTrim8
+  };
+  assert(id >= 0 && id < entries.size());
+  return *entries[id];
+}
+
+Settings::SettingsEntryDouble& InputEventMapper::axisDeadzoneSettings(size_t id)
+{
+  const std::array<Settings::SettingsEntryDouble *, getMaxAxis()> entries {
+    &S::axisDeadzone0, &S::axisDeadzone1, &S::axisDeadzone2,
+    &S::axisDeadzone3, &S::axisDeadzone4, &S::axisDeadzone5,
+    &S::axisDeadzone6, &S::axisDeadzone7, &S::axisDeadzone8
+  };
+  assert(id >= 0 && id < entries.size());
+  return *entries[id];
+}
+
diff --git a/src/gui/input/InputEventMapper.h b/src/gui/input/InputEventMapper.h
index bc0bf70ebd..6d53613a52 100644
--- a/src/gui/input/InputEventMapper.h
+++ b/src/gui/input/InputEventMapper.h
@@ -30,19 +30,23 @@
 
 #include <cstddef>
 #include <string>
-#include "gui/input/InputDriver.h"
+#include "core/Settings.h"
 #include "gui/input/InputDriverEvent.h"
 
 class InputEventMapper : public QObject, public InputEventHandler
 {
   Q_OBJECT
 
+public:
+  constexpr static inline size_t getMaxButtons() { return Settings::max_buttons; }
+  constexpr static inline size_t getMaxAxis() { return Settings::max_axis; }
+
 private:
   QTimer *timer;
-  double axisRawValue[InputDriver::max_axis];
-  double axisTrimValue[InputDriver::max_axis];
-  double axisDeadzone[InputDriver::max_axis];
-  QString actions[InputDriver::max_buttons];
+  double axisRawValue[Settings::max_axis];
+  double axisTrimValue[Settings::max_axis];
+  double axisDeadzone[Settings::max_axis];
+  QString actions[Settings::max_buttons];
   int translate[6];
   int rotate[6];
   int zoom;
@@ -54,8 +58,8 @@ class InputEventMapper : public QObject, public InputEventHandler
   int parseSettingValue(const std::string& val);
   bool generateDeferredEvents();
   void considerGeneratingDeferredEvents();
-  bool button_state[InputDriver::max_buttons];
-  bool button_state_last[InputDriver::max_buttons];
+  bool button_state[Settings::max_buttons];
+  bool button_state_last[Settings::max_buttons];
 
   static InputEventMapper *self;
 
@@ -87,8 +91,10 @@ class InputEventMapper : public QObject, public InputEventHandler
   void onAxisTrimReset();
 
   static InputEventMapper *instance();
-  static size_t getMaxButtons();
-  static size_t getMaxAxis();
+
+  static Settings::SettingsEntryString& inputButtonSettings(size_t id);
+  static Settings::SettingsEntryDouble& axisTrimSettings(size_t id);
+  static Settings::SettingsEntryDouble& axisDeadzoneSettings(size_t id);
 
 private slots:
   void onTimer();
diff --git a/src/gui/input/QGamepadInputDriver.h b/src/gui/input/QGamepadInputDriver.h
index 30726b0071..a41fd425f4 100644
--- a/src/gui/input/QGamepadInputDriver.h
+++ b/src/gui/input/QGamepadInputDriver.h
@@ -25,6 +25,7 @@
  */
 #pragma once
 
+#include "core/Settings.h"
 #include "gui/input/InputDriver.h"
 
 #include <cstddef>
@@ -44,10 +45,10 @@ class QGamepadInputDriver : public InputDriver
   std::string get_info() const override;
 
   size_t getButtonCount() const override {
-    return InputDriver::max_buttons;
+    return Settings::max_buttons;
   }
   size_t getAxisCount() const override {
-    return InputDriver::max_axis;
+    return Settings::max_axis;
   }
 
 private:
diff --git a/src/gui/input/SpaceNavInputDriver.h b/src/gui/input/SpaceNavInputDriver.h
index f9b4f68c8b..58eca0585a 100644
--- a/src/gui/input/SpaceNavInputDriver.h
+++ b/src/gui/input/SpaceNavInputDriver.h
@@ -28,6 +28,7 @@
 
 #include <cstddef>
 #include <string>
+#include "core/Settings.h"
 #include "gui/input/InputDriver.h"
 
 class SpaceNavInputDriver : public InputDriver
@@ -45,10 +46,10 @@ class SpaceNavInputDriver : public InputDriver
   std::string get_info() const override;
 
   size_t getButtonCount() const override {
-    return InputDriver::max_buttons;
+    return Settings::max_buttons;
   }
   size_t getAxisCount() const override {
-    return InputDriver::max_axis;
+    return Settings::max_axis;
   }
 
 private:
diff --git a/src/gui/qt-obsolete.h b/src/gui/qt-obsolete.h
index 787a97b04b..a07d8d322b 100644
--- a/src/gui/qt-obsolete.h
+++ b/src/gui/qt-obsolete.h
@@ -5,3 +5,13 @@
 #else
 #define Q_WHEEL_EVENT_POSITION(e) ((e)->position())
 #endif
+
+#if (QT_VERSION < QT_VERSION_CHECK(5, 15, 0))
+namespace std {
+  template<> struct hash<QString> {
+    std::size_t operator()(const QString& s) const noexcept {
+      return (size_t) qHash(s);
+    }
+  };
+}
+#endif
diff --git a/src/io/export.cc b/src/io/export.cc
index b17f37e107..e6794d5159 100644
--- a/src/io/export.cc
+++ b/src/io/export.cc
@@ -25,9 +25,13 @@
  */
 
 #include "io/export.h"
+#include "ColorMap.h"
+#include "core/ColorUtil.h"
+#include "export_enums.h"
 #include "geometry/PolySet.h"
 #include "utils/printutils.h"
 #include "geometry/Geometry.h"
+#include "glview/RenderSettings.h"
 
 #include <algorithm>
 #include <functional>
@@ -37,6 +41,7 @@
 #include <memory>
 #include <cstddef>
 #include <fstream>
+#include <string>
 #include <vector>
 #include <filesystem>
 #include <iostream>
@@ -175,6 +180,28 @@ bool is2D(FileFormat format) {
 
 }  // namespace FileFormat
 
+ExportInfo createExportInfo(const FileFormat& format, const FileFormatInfo& info, const std::string& filepath, const Camera *camera, const CmdLineExportOptions& cmdLineOptions)
+{
+  const auto colorScheme = ColorMap::inst()->findColorScheme(RenderSettings::inst()->colorscheme);
+  auto exportInfo = ExportInfo{
+    .format = format,
+    .info = info,
+    .title = std::filesystem::path(filepath).filename().string(),
+    .sourceFilePath = filepath,
+    .camera = camera,
+    .defaultColor = ColorMap::getColor(*colorScheme, RenderColor::CGAL_FACE_FRONT_COLOR),
+    .colorScheme = colorScheme,
+  };
+
+  if (format == FileFormat::_3MF) {
+    exportInfo.options3mf = Export3mfOptions::withOptions(cmdLineOptions);
+  } else if (format == FileFormat::PDF) {
+    exportInfo.optionsPdf = ExportPdfOptions::withOptions(cmdLineOptions);
+  }
+
+  return exportInfo;
+}
+
 void exportFile(const std::shared_ptr<const Geometry>& root_geom, std::ostream& output, const ExportInfo& exportInfo)
 {
   switch (exportInfo.format) {
@@ -300,7 +327,7 @@ struct LexographicLess {
 std::string get_current_iso8601_date_time_utc() {
   auto now = std::chrono::system_clock::now();
   auto time = std::chrono::system_clock::to_time_t(now);
-  return STR(std::put_time(gmtime(&time), "%FT%TZ"));
+  return STR(std::put_time(gmtime(&time), "%Y-%m-%dT%H:%M:%SZ")); // %F/%T not fully supported everywhere
 }
 
 std::unique_ptr<PolySet> createSortedPolySet(const PolySet& ps)
@@ -360,4 +387,4 @@ std::unique_ptr<PolySet> createSortedPolySet(const PolySet& ps)
     }
   }
   return out;
-}
+}
\ No newline at end of file
diff --git a/src/io/export.h b/src/io/export.h
index f10cc5e0d6..9219560f0d 100644
--- a/src/io/export.h
+++ b/src/io/export.h
@@ -11,10 +11,17 @@
 #include <boost/range/algorithm.hpp>
 #include <boost/range/adaptor/map.hpp>
 
+#include "Settings.h"
 #include "core/Tree.h"
 #include "glview/Camera.h"
+#include "glview/ColorMap.h"
 #include "linalg.h"
 
+#include "io/export_enums.h"
+
+using SPDF = Settings::SettingsExportPdf;
+using S3MF = Settings::SettingsExport3mf;
+
 class PolySet;
 
 enum class FileFormat {
@@ -63,41 +70,7 @@ bool is2D(FileFormat format);
 
 }  // namespace FileFormat
 
-// Paper Data used by ExportPDF
-enum class paperSizes {
- A4,A3,LETTER,LEGAL,TABLOID
-};
-// Note:  the enum could be moved to GUI, which would pass the dimensions.
-
-// for gui, but declared here to keep it aligned with the enum.
-// can't use Qt mechanism in the IO code.
-// needs to match number of sizes
-const std::array<std::string,5> paperSizeStrings{
-"A4","A3","Letter","Legal","Tabloid"
-};
-
-
-// Dimensions in pts per PDF standard, used by ExportPDF
-// rows map to paperSizes enums
-// columns are Width, Height
-const int paperDimensions[5][2]={
-{595,842},
-{842,1190},
-{612,792},
-{612,1008},
-{792,1224}
-};
-
-enum class paperOrientations {
-PORTRAIT,LANDSCAPE,AUTO
-};
-
-// for gui, but declared here to keep it aligned with the enum.
-// can't use Qt mechanism in the IO code.
-// needs to match number of orientations
-const std::array<std::string,3> paperOrientationsStrings{
-"Portrait","Landscape","Auto"
-};
+using CmdLineExportOptions = std::unordered_map<std::string, std::unordered_map<std::string, std::string>>;
 
 // include defaults to use without dialog or direction.
 // Defaults match values used prior to incorporation of options.
@@ -107,19 +80,119 @@ struct ExportPdfOptions {
     bool showGrid = false;
     double gridSize = 10.0;
     bool showDesignFilename = false;
-    paperOrientations Orientation = paperOrientations::PORTRAIT;
-    paperSizes paperSize = paperSizes::A4;
+    ExportPdfPaperOrientation orientation = ExportPdfPaperOrientation::PORTRAIT;
+    ExportPdfPaperSize paperSize = ExportPdfPaperSize::A4;
+    bool addMetaData = SPDF::exportPdfAddMetaData.defaultValue();
+    std::string metaDataTitle;
+    std::string metaDataAuthor;
+    std::string metaDataSubject;
+    std::string metaDataKeywords;
+
+  static std::shared_ptr<const ExportPdfOptions> withOptions(const CmdLineExportOptions& cmdLineOptions) {
+    ExportPdfOptions options;
+    if (cmdLineOptions.count(Settings::SECTION_EXPORT_PDF) > 0) {
+      //const auto& o = cmdLineOptions.at(Settings::SECTION_EXPORT_PDF);
+    }
+    return std::make_shared<const ExportPdfOptions>(options);
+  }
+
+  static const std::shared_ptr<const ExportPdfOptions> fromSettings() {
+    return std::make_shared<const ExportPdfOptions>(ExportPdfOptions{
+      .showScale = SPDF::exportPdfShowScale.value(),
+      .showScaleMsg = SPDF::exportPdfShowScaleMessage.value(),
+      .showGrid = SPDF::exportPdfShowGrid.value(),
+      .gridSize = SPDF::exportPdfGridSize.value(),
+      .showDesignFilename = SPDF::exportPdfShowFilename.value(),
+      .orientation = SPDF::exportPdfOrientation.value(),
+      .paperSize = SPDF::exportPdfPaperSize.value(),
+      .addMetaData = SPDF::exportPdfAddMetaData.value(),
+      .metaDataTitle = SPDF::exportPdfMetaDataTitle.value(),
+      .metaDataAuthor = SPDF::exportPdfAddMetaDataAuthor.value() ? SPDF::exportPdfMetaDataAuthor.value() : "",
+      .metaDataSubject = SPDF::exportPdfAddMetaDataSubject.value() ? SPDF::exportPdfMetaDataSubject.value() : "",
+      .metaDataKeywords = SPDF::exportPdfAddMetaDataKeywords.value() ? SPDF::exportPdfMetaDataKeywords.value() : "",
+    });
+  }
+};
+
+template<typename settings_entry_type>
+auto set_cmd_line_option(const CmdLineExportOptions& cmdLineOptions, const std::string& section, const settings_entry_type& se)
+{
+  if (cmdLineOptions.count(section) == 0) {
+    return se.defaultValue();
+  }
+
+  const auto& o = cmdLineOptions.at(Settings::SECTION_EXPORT_3MF);
+  if (o.count(se.name()) == 0) {
+    return se.defaultValue();
+  }
+
+  return se.decode(o.at(se.name()));
+}
+
+struct Export3mfOptions {
+  Export3mfColorMode colorMode;
+  Export3mfUnit unit;
+  std::string color;
+  Export3mfMaterialType materialType;
+  int decimalPrecision;
+  bool addMetaData;
+  std::string metaDataTitle;
+  std::string metaDataDesigner;
+  std::string metaDataDescription;
+  std::string metaDataCopyright;
+  std::string metaDataLicenseTerms;
+  std::string metaDataRating;
+
+  static const std::shared_ptr<const Export3mfOptions> withOptions(const CmdLineExportOptions& cmdLineOptions) {
+    return std::make_shared<const Export3mfOptions>(Export3mfOptions{
+      .colorMode = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfColorMode),
+      .unit = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfUnit),
+      .color = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfColor),
+      .materialType = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMaterialType),
+      .decimalPrecision = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfDecimalPrecision),
+      .addMetaData = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfAddMetaData),
+      .metaDataTitle = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMetaDataTitle),
+      .metaDataDesigner = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMetaDataDesigner),
+      .metaDataDescription = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMetaDataDescription),
+      .metaDataCopyright = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMetaDataCopyright),
+      .metaDataLicenseTerms = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMetaDataLicenseTerms),
+      .metaDataRating = set_cmd_line_option(cmdLineOptions, Settings::SECTION_EXPORT_3MF, Settings::SettingsExport3mf::export3mfMetaDataRating),
+    });
+  }
+
+  static const std::shared_ptr<const Export3mfOptions> fromSettings() {
+    return std::make_shared<const Export3mfOptions>(Export3mfOptions{
+      .colorMode = S3MF::export3mfColorMode.value(),
+      .unit = S3MF::export3mfUnit.value(),
+      .color = S3MF::export3mfColor.value(),
+      .materialType = S3MF::export3mfMaterialType.value(),
+      .decimalPrecision = S3MF::export3mfDecimalPrecision.value(),
+      .addMetaData = S3MF::export3mfAddMetaData.value(),
+      .metaDataTitle = S3MF::export3mfMetaDataTitle.value(),
+      .metaDataDesigner = S3MF::export3mfAddMetaDataDesigner.value() ? S3MF::export3mfMetaDataDesigner.value() : "",
+      .metaDataDescription = S3MF::export3mfAddMetaDataDescription.value() ? S3MF::export3mfMetaDataDescription.value() : "",
+      .metaDataCopyright = S3MF::export3mfAddMetaDataCopyright.value() ? S3MF::export3mfMetaDataCopyright.value() : "",
+      .metaDataLicenseTerms = S3MF::export3mfAddMetaDataLicenseTerms.value() ? S3MF::export3mfMetaDataLicenseTerms.value() : "",
+      .metaDataRating = S3MF::export3mfAddMetaDataRating.value() ? S3MF::export3mfMetaDataRating.value() : "",
+    });
+  }
 };
 
 struct ExportInfo {
   FileFormat format;
+  FileFormatInfo info;
   std::string title;
   std::string sourceFilePath; // Full path to the OpenSCAD source file
-  ExportPdfOptions *options;
   const Camera *camera;
-  Color4f defaultColor; // CGAL_FACE_FRONT_COLOR, should later come from active color scheme
+  const Color4f defaultColor;
+  const ColorScheme *colorScheme;
+
+  std::shared_ptr<const ExportPdfOptions> optionsPdf;
+  std::shared_ptr<const Export3mfOptions> options3mf;
 };
 
+ExportInfo createExportInfo(const FileFormat& format, const FileFormatInfo& info, const std::string& filepath, const Camera *camera, const CmdLineExportOptions& cmdLineOptions);
+
 bool exportFileByName(const std::shared_ptr<const class Geometry>& root_geom, const std::string& filename, const ExportInfo& exportInfo);
 bool exportFileStdOut(const std::shared_ptr<const class Geometry>& root_geom, const ExportInfo& exportInfo);
 
diff --git a/src/io/export_3mf_v1.cc b/src/io/export_3mf_v1.cc
index 3322223fe9..654dc6f2a3 100644
--- a/src/io/export_3mf_v1.cc
+++ b/src/io/export_3mf_v1.cc
@@ -24,14 +24,8 @@
  *
  */
 
-#include "geometry/GeometryUtils.h"
+#include "export_enums.h"
 #include "io/export.h"
-#include "geometry/PolySet.h"
-#include "geometry/PolySetUtils.h"
-#include "utils/printutils.h"
-#ifdef ENABLE_MANIFOLD
-#include "geometry/manifold/ManifoldGeometry.h"
-#endif
 
 #include <cassert>
 #include <ostream>
@@ -39,24 +33,18 @@
 #include <memory>
 #include <string>
 #include <algorithm>
-
-static uint32_t lib3mf_write_callback(const char *data, uint32_t bytes, std::ostream *stream)
-{
-  stream->write(data, bytes);
-  return !(*stream);
-}
-
-static uint32_t lib3mf_seek_callback(uint64_t pos, std::ostream *stream)
-{
-  stream->seekp(pos);
-  return !(*stream);
-}
-
+#include <Common/Platform/NMR_WinTypes.h>
 #include <Model/COM/NMR_DLLInterfaces.h>
-#undef BOOL
-using namespace NMR;
 
-#include <algorithm>
+#include "ColorUtil.h"
+#include "geometry/GeometryUtils.h"
+#include "geometry/PolySet.h"
+#include "geometry/PolySetUtils.h"
+#include "utils/printutils.h"
+
+#ifdef ENABLE_MANIFOLD
+#include "geometry/manifold/ManifoldGeometry.h"
+#endif
 
 #ifdef ENABLE_CGAL
 #include "geometry/cgal/cgal.h"
@@ -64,8 +52,38 @@ using namespace NMR;
 #include "geometry/cgal/CGAL_Nef_polyhedron.h"
 #endif
 
+#undef BOOL
+using namespace NMR;
+
+using S = Settings::SettingsExport3mf;
+
 namespace {
 
+struct ExportContext {
+  PLib3MFModel *model = nullptr;
+  PLib3MFModelBaseMaterial *basematerial = nullptr;
+  DWORD basematerialid = 0;
+  bool usecolors = false;
+  int modelcount = 0;
+  Color4f defaultColor;
+  DWORD defaultColorId = 0;
+  std::vector<DWORD> materialids;
+  const ExportInfo& info;
+  const std::shared_ptr<const Export3mfOptions> options;
+};
+
+uint32_t lib3mf_write_callback(const char *data, uint32_t bytes, std::ostream *stream)
+{
+  stream->write(data, bytes);
+  return !(*stream);
+}
+
+uint32_t lib3mf_seek_callback(uint64_t pos, std::ostream *stream)
+{
+  stream->seekp(pos);
+  return !(*stream);
+}
+
 void export_3mf_error(std::string msg, PLib3MFModel *& model)
 {
   LOG(message_group::Export_Error, std::move(msg));
@@ -101,31 +119,59 @@ int count_mesh_objects(PLib3MFModel *& model) {
     return count;
 }
 
-} // namespace
+bool handle_triangle_color(PLib3MFPropertyHandler *propertyhandler, const std::unique_ptr<PolySet>& ps, int triangle_index, int color_index, ExportContext& ctx)
+{
+  if (color_index < 0) {
+    return true;
+  }
+  if (ps->colors.empty()) {
+    return true;
+  }
+  if (!ctx.basematerial && !ctx.usecolors) {
+    return true;
+  }
+  if (ctx.options->colorMode == Export3mfColorMode::selected_only) {
+    return true;
+  }
+
+  if (ctx.basematerial) {
+    if (lib3mf_propertyhandler_setbasematerial(propertyhandler, triangle_index, ctx.basematerialid, ctx.materialids[color_index]) != LIB3MF_OK) {
+      export_3mf_error("Can't set triangle base material.", ctx.model);
+      return false;
+    }
+  } else if (ctx.usecolors) {
+    const auto& col = ps->colors[color_index];
+    if (lib3mf_propertyhandler_setsinglecolorfloatrgba(propertyhandler, triangle_index, col.r(), col.g(), col.b(), col.a()) != LIB3MF_OK) {
+      export_3mf_error("Can't set triangle color.", ctx.model);
+      return false;
+    }
+  }
+
+  return true;
+}
+
 
 /*
  * PolySet must be triangulated.
  */
-static bool append_polyset(std::shared_ptr<const PolySet> ps, PLib3MFModelMeshObject *& model, PLib3MFModelBaseMaterial *basematerial, int count)
+bool append_polyset(const std::shared_ptr<const PolySet>& ps, ExportContext& ctx)
 {
   PLib3MFModelMeshObject *mesh = nullptr;
-  PLib3MFPropertyHandler *propertyhandler = nullptr;
-  PLib3MFPropertyHandler *defaultpropertyhandler = nullptr;
-  if (lib3mf_model_addmeshobject(model, &mesh) != LIB3MF_OK) {
-    export_3mf_error("Can't add mesh to 3MF model.", model);
+  if (lib3mf_model_addmeshobject(ctx.model, &mesh) != LIB3MF_OK) {
+    export_3mf_error("Can't add mesh to 3MF model.", ctx.model);
     return false;
   }
 
   std::string name = "OpenSCAD Model";
   std::string partname = "";
 
-  if (count > 1) {
-    int mesh_count = count_mesh_objects(model);
+  if (ctx.modelcount > 1) {
+    int mesh_count = count_mesh_objects(ctx.model);
     name += " " + std::to_string(mesh_count);
     partname += "Part " + std::to_string(mesh_count);
   }
   if (lib3mf_object_setnameutf8(mesh, name.c_str()) != LIB3MF_OK) {
-    export_3mf_error("Can't set name for 3MF model.", model);
+    export_3mf_error("Can't set name for 3MF model.", ctx.model);
     return false;
   }
   
@@ -144,7 +190,7 @@ static bool append_polyset(std::shared_ptr<const PolySet> ps, PLib3MFModelMeshOb
     const auto colname = "Color " + std::to_string(idx);
 
     DWORD id = 0;
-    lib3mf_basematerial_addmaterialutf8(basematerial,
+    lib3mf_basematerial_addmaterialutf8(ctx.basematerial,
       colname.c_str(),
       get_color_channel(col, 0),
       get_color_channel(col, 1),
@@ -157,93 +203,101 @@ static bool append_polyset(std::shared_ptr<const PolySet> ps, PLib3MFModelMeshOb
 
   for (const auto &v : sorted_ps->vertices) {
     if (!vertexFunc(v)) {
-      export_3mf_error("Can't add vertex to 3MF model.", model);
+      export_3mf_error("Can't add vertex to 3MF model.", ctx.model);
       return false;
     }
   }
 
   for (const auto& poly : sorted_ps->indices) {
     if (!triangleFunc(poly)) {
-      export_3mf_error("Can't add triangle to 3MF model.", model);
+      export_3mf_error("Can't add triangle to 3MF model.", ctx.model);
       return false;
     }
   }
 
-	if (lib3mf_meshobject_createpropertyhandler(mesh, &propertyhandler) != LIB3MF_OK) {
-    export_3mf_error("Can't create property handler for 3MF model.", model);
-    return false;
-  }
-
-  DWORD basematerialid = 0;
-  if (lib3mf_resource_getresourceid(basematerial, &basematerialid) != LIB3MF_OK) {
-    export_3mf_error("Can't get base material resource id.", model);
-    return false;
-  }
-
   DWORD materials = 0;
-  PLib3MFModelResourceIterator *it;
-  if (lib3mf_model_getbasematerials(model, &it) == LIB3MF_OK) {
-    while (true) {
-      BOOL hasNext = false;
-      if (lib3mf_resourceiterator_movenext(it, &hasNext) != LIB3MF_OK) {
-        export_3mf_error("Can't move to next base material iterator value.", model);
-        return false;
-      }
-      if (!hasNext) {
-        break;
-      }
+  if (ctx.basematerial) {
+    PLib3MFModelResourceIterator *it;
+    if (lib3mf_model_getbasematerials(ctx.model, &it) == LIB3MF_OK) {
+      while (true) {
+        BOOL hasNext = false;
+        if (lib3mf_resourceiterator_movenext(it, &hasNext) != LIB3MF_OK) {
+          export_3mf_error("Can't move to next base material iterator value.", ctx.model);
+          return false;
+        }
+        if (!hasNext) {
+          break;
+        }
+
+        PLib3MFModelResource *resource = nullptr;
+        if (lib3mf_resourceiterator_getcurrent(it, &resource) != LIB3MF_OK) {
+          export_3mf_error("Can't get current value from base material iterator.", ctx.model);
+          return false;
+        } else {
+          DWORD count = 0;
+          lib3mf_basematerial_getcount(resource, &count);
+          materials = count;
+        }
+      };
+    }
 
-      PLib3MFModelResource *resource = nullptr;
-      if (lib3mf_resourceiterator_getcurrent(it, &resource) != LIB3MF_OK) {
-        export_3mf_error("Can't get current value from base material iterator.", model);
-        return false;
-      } else {
-        DWORD count = 0;
-        lib3mf_basematerial_getcount(resource, &count);
-        materials = count;
-      }
-    };
+    ctx.materialids.reserve(sorted_ps->colors.size());
+    for (int i = 0;i < sorted_ps->colors.size();i++) {
+      ctx.materialids.push_back(materialFunc(materials + i, sorted_ps->colors[i]));
+    }
   }
 
-  std::vector<DWORD> materialids;
-  materialids.reserve(sorted_ps->colors.size());
-  for (int i = 0;i < sorted_ps->colors.size();i++) {
-    materialids.push_back(materialFunc(materials + i, sorted_ps->colors[i]));
+  PLib3MFPropertyHandler *propertyhandler = nullptr;
+	if (lib3mf_meshobject_createpropertyhandler(mesh, &propertyhandler) != LIB3MF_OK) {
+    export_3mf_error("Can't create property handler for 3MF model.", ctx.model);
+    return false;
   }
 
-  if (materialids.size() > 0) {
-    for(int i = 0;i < sorted_ps->color_indices.size();i++) {
-      int32_t idx = sorted_ps->color_indices[i];
-      if (idx < 0)
-        continue;
-      lib3mf_propertyhandler_setbasematerial(propertyhandler, i, basematerialid, materialids[idx]);
+  for (int i = 0;i < sorted_ps->color_indices.size();++i) {
+    const int32_t idx = sorted_ps->color_indices[i];
+    if (!handle_triangle_color(propertyhandler, sorted_ps, i, idx, ctx)) {
+      return false;
     }
   }
 
   lib3mf_release(propertyhandler);
 
+  PLib3MFPropertyHandler *defaultpropertyhandler = nullptr;
 	if (lib3mf_object_createdefaultpropertyhandler(mesh, &defaultpropertyhandler) != LIB3MF_OK) {
-    export_3mf_error("Can't create default property handler for 3MF model.", model);
+    export_3mf_error("Can't create default property handler for 3MF model.", ctx.model);
     return false;
   }
-	lib3mf_defaultpropertyhandler_setbasematerial(defaultpropertyhandler, basematerialid, 0);
+
+  if (ctx.basematerial) {
+    lib3mf_defaultpropertyhandler_setbasematerial(defaultpropertyhandler, ctx.basematerialid, ctx.defaultColorId);
+  } else if (ctx.usecolors) {
+    lib3mf_defaultpropertyhandler_setcolorrgba(defaultpropertyhandler,
+        get_color_channel(ctx.defaultColor, 0),
+        get_color_channel(ctx.defaultColor, 1),
+        get_color_channel(ctx.defaultColor, 2),
+        get_color_channel(ctx.defaultColor, 3));
+  }
+
   lib3mf_release(defaultpropertyhandler);
 
   PLib3MFModelBuildItem *builditem = nullptr;
-  if (lib3mf_model_addbuilditem(model, mesh, nullptr, &builditem) != LIB3MF_OK) {
-    export_3mf_error("Can't add build item to 3MF model.", model);
+  if (lib3mf_model_addbuilditem(ctx.model, mesh, nullptr, &builditem) != LIB3MF_OK) {
+    export_3mf_error("Can't add build item to 3MF model.", ctx.model);
     return false;
   }
   if (!partname.empty() && lib3mf_builditem_setpartnumberutf8(builditem, partname.c_str()) != LIB3MF_OK) {
-    export_3mf_error("Can't set part name of build item.", model);
+    export_3mf_error("Can't set part name of build item.", ctx.model);
     return false;
   }
 
+  lib3mf_release(mesh);
+  lib3mf_release(builditem);
+
   return true;
 }
 
 #ifdef ENABLE_CGAL
-static bool append_nef(const CGAL_Nef_polyhedron& root_N, PLib3MFModelMeshObject *& model, PLib3MFModelBaseMaterial *basematerial, int count)
+bool append_nef(const CGAL_Nef_polyhedron& root_N, ExportContext& ctx)
 {
   if (!root_N.p3) {
     LOG(message_group::Export_Error, "Export failed, empty geometry.");
@@ -256,30 +310,31 @@ static bool append_nef(const CGAL_Nef_polyhedron& root_N, PLib3MFModelMeshObject
 
 
   if (std::shared_ptr<PolySet> ps = CGALUtils::createPolySetFromNefPolyhedron3(*root_N.p3)) {
-    return append_polyset(ps, model, basematerial, count);
+    return append_polyset(ps, ctx);
   }
 
-  export_3mf_error("Error converting NEF Polyhedron.", model);
+  export_3mf_error("Error converting NEF Polyhedron.", ctx.model);
   return false;
 }
 #endif
 
-static bool append_3mf(const std::shared_ptr<const Geometry>& geom, PLib3MFModelMeshObject *& model, PLib3MFModelBaseMaterial *basematerial, int count)
+static bool append_3mf(const std::shared_ptr<const Geometry>& geom, ExportContext& ctx)
 {
   if (const auto geomlist = std::dynamic_pointer_cast<const GeometryList>(geom)) {
+    ctx.modelcount = geomlist->getChildren().size();
     for (const auto& item : geomlist->getChildren()) {
-      if (!append_3mf(item.second, model, basematerial, geomlist->getChildren().size())) return false;
+      if (!append_3mf(item.second, ctx)) return false;
     }
 #ifdef ENABLE_CGAL
   } else if (const auto N = std::dynamic_pointer_cast<const CGAL_Nef_polyhedron>(geom)) {
-    return append_nef(*N, model, basematerial, count);
+    return append_nef(*N, ctx);
 #endif
 #ifdef ENABLE_MANIFOLD
   } else if (const auto mani = std::dynamic_pointer_cast<const ManifoldGeometry>(geom)) {
-    return append_polyset(mani->toPolySet(), model, basematerial, count);
+    return append_polyset(mani->toPolySet(), ctx);
 #endif
   } else if (const auto ps = std::dynamic_pointer_cast<const PolySet>(geom)) {
-    return append_polyset(PolySetUtils::tessellate_faces(*ps), model, basematerial, count);
+    return append_polyset(PolySetUtils::tessellate_faces(*ps), ctx);
   } else if (std::dynamic_pointer_cast<const Polygon2d>(geom)) { // NOLINT(bugprone-branch-clone)
     assert(false && "Unsupported file format");
   } else { // NOLINT(bugprone-branch-clone)
@@ -289,6 +344,17 @@ static bool append_3mf(const std::shared_ptr<const Geometry>& geom, PLib3MFModel
   return true;
 }
 
+void add_meta_data(PLib3MFModelMeshObject *& model, const std::string& name, const std::string& value, const std::string& value2 = "") {
+  const std::string v = value.empty() ? value2 : value;
+  if (v.empty()) {
+    return;
+  }
+
+  lib3mf_model_addmetadatautf8(model, name.c_str(), v.c_str());
+}
+
+} // namespace
+
 /*!
     Saves the current 3D Geometry as 3MF to the given file.
     The file must be open.
@@ -314,33 +380,92 @@ void export_3mf(const std::shared_ptr<const Geometry>& geom, std::ostream& outpu
     return;
   }
 
-  PLib3MFModelBaseMaterial *basematerial = nullptr;
-  if (lib3mf_model_addbasematerialgroup(model, &basematerial) != LIB3MF_OK) {
-    export_3mf_error("Can't create base material group.", model);
-    return;
+  const auto& options3mf = exportInfo.options3mf ? exportInfo.options3mf : std::make_shared<Export3mfOptions>();
+  switch (options3mf->unit) {
+    case Export3mfUnit::micron:
+      lib3mf_model_setunit(model, eModelUnit::MODELUNIT_MICROMETER);
+      break;
+    case Export3mfUnit::centimeter:
+      lib3mf_model_setunit(model, eModelUnit::MODELUNIT_CENTIMETER);
+      break;
+    case Export3mfUnit::meter:
+      lib3mf_model_setunit(model, eModelUnit::MODELUNIT_METER);
+      break;
+    case Export3mfUnit::inch:
+      lib3mf_model_setunit(model, eModelUnit::MODELUNIT_INCH);
+      break;
+    case Export3mfUnit::foot:
+      lib3mf_model_setunit(model, eModelUnit::MODELUNIT_FOOT);
+      break;
+    default:
+      lib3mf_model_setunit(model, eModelUnit::MODELUNIT_MILLIMETER);
+      break;
   }
 
-  DWORD id = 0;
-  const auto dc = exportInfo.defaultColor;
-  if (lib3mf_basematerial_addmaterialutf8(basematerial, "Default",
-    get_color_channel(exportInfo.defaultColor, 0),
-    get_color_channel(exportInfo.defaultColor, 1),
-    get_color_channel(exportInfo.defaultColor, 2),
-    &id) != LIB3MF_OK) {
-    export_3mf_error("Can't add default material color.", model);
-    return;
+  Color4f defaultColor;
+  DWORD defaultColorId = 0;
+  const auto settingsColor = OpenSCAD::parse_hex_color(options3mf->color);
+
+  bool usecolors = false;
+  DWORD basematerialid = 0;
+  PLib3MFModelBaseMaterial *basematerial = nullptr;
+  if (options3mf->colorMode != Export3mfColorMode::none) {
+    if (options3mf->colorMode == Export3mfColorMode::model) {
+      // use default color that ultimately should come from the color scheme
+      defaultColor = exportInfo.defaultColor;
+    } else {
+      if (!settingsColor) {
+      // use color selected in the export dialog and stored in settings (if valid)
+        LOG(message_group::Warning, "Default color in settings is invalid ('%1$s'), using default from model.", options3mf->color);
+      }
+      defaultColor = settingsColor.value_or(exportInfo.defaultColor);
+    }
+    if (options3mf->materialType == Export3mfMaterialType::basematerial) {
+      if (lib3mf_model_addbasematerialgroup(model, &basematerial) != LIB3MF_OK) {
+        export_3mf_error("Can't create base material group.", model);
+        return;
+      }
+      if (lib3mf_resource_getresourceid(basematerial, &basematerialid) != LIB3MF_OK) {
+        export_3mf_error("Can't get base material resource id.", model);
+        return;
+      }
+      if (lib3mf_basematerial_addmaterialutf8(basematerial, "Default",
+        get_color_channel(defaultColor, 0),
+        get_color_channel(defaultColor, 1),
+        get_color_channel(defaultColor, 2),
+        &defaultColorId) != LIB3MF_OK) {
+        export_3mf_error("Can't add default material color.", model);
+        return;
+      }
+    } else if (options3mf->materialType == Export3mfMaterialType::color) {
+      usecolors = true;
+    }
   }
 
-  const std::array<std::array<std::string, 2>, 3> meta_data_list = {{
-    {{ "Title", exportInfo.title }},
-    {{ "Application", EXPORT_CREATOR }},
-    {{ "CreationDate", get_current_iso8601_date_time_utc() }}
-  }};
-  for (const auto& meta_data : meta_data_list) {
-    lib3mf_model_addmetadatautf8(model, meta_data[0].c_str(), meta_data[1].c_str());
+  if (options3mf->addMetaData) {
+    add_meta_data(model, "Title", options3mf->metaDataTitle, exportInfo.title);
+    add_meta_data(model, "Application", EXPORT_CREATOR);
+    add_meta_data(model, "CreationDate", get_current_iso8601_date_time_utc());
+    add_meta_data(model, "Designer", options3mf->metaDataDesigner);
+    add_meta_data(model, "Description", options3mf->metaDataDescription);
+    add_meta_data(model, "Copyright", options3mf->metaDataCopyright);
+    add_meta_data(model, "LicenseTerms", options3mf->metaDataLicenseTerms);
+    add_meta_data(model, "Rating", options3mf->metaDataRating);
   }
 
-  if (!append_3mf(geom, model, basematerial, 1)) {
+  ExportContext ctx{
+    .model = model,
+    .basematerial = basematerial,
+    .basematerialid = basematerialid,
+    .usecolors = usecolors,
+    .modelcount = 1,
+    .defaultColor = defaultColor,
+    .defaultColorId = defaultColorId,
+    .info = exportInfo,
+    .options = options3mf
+  };
+
+  if (!append_3mf(geom, ctx)) {
     if (model) lib3mf_release(model);
     return;
   }
diff --git a/src/io/export_3mf_v2.cc b/src/io/export_3mf_v2.cc
index 79430b16b4..b51db5159b 100644
--- a/src/io/export_3mf_v2.cc
+++ b/src/io/export_3mf_v2.cc
@@ -1,6 +1,6 @@
 /*
  *  OpenSCAD (www.openscad.org)
- *  Copyright (C) 2009-2016 Clifford Wolf <clifford@clifford.at> and
+ *  Copyright (C) 2009-2025 Clifford Wolf <clifford@clifford.at> and
  *                          Marius Kintel <marius@kintel.net>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -25,11 +25,13 @@
  */
 
 #include <unordered_map>
+#include "export_enums.h"
 #include "geometry/GeometryUtils.h"
 #include "io/export.h"
 #include "geometry/PolySet.h"
 #include "geometry/PolySetUtils.h"
 #include "linalg.h"
+#include "core/ColorUtil.h"
 #include "utils/printutils.h"
 #ifdef ENABLE_CGAL
 #include "geometry/cgal/cgalutils.h"
@@ -47,27 +49,20 @@
 #include <string>
 #include <lib3mf_implicit.hpp>
 
-template<> struct std::hash<Color4f> {
-    std::size_t operator()(Color4f const& c) const noexcept {
-      std::size_t hash = 0;
-      for (int idx = 0;idx < 4;idx++) {
-        std::size_t h = std::hash<float>{}(c[idx]);
-        hash = h ^ (hash << 1);
-      }
-      return hash;
-    }
-};
-
-using ColorMap = std::unordered_map<Color4f, Lib3MF_uint32>;
+using ExportColorMap = std::unordered_map<Color4f, Lib3MF_uint32>;
 
 namespace {
 
 struct ExportContext {
   Lib3MF::PWrapper wrapper;
   Lib3MF::PModel model;
+  Lib3MF::PColorGroup colorgroup;
   Lib3MF::PBaseMaterialGroup basematerialgroup;
   int modelcount;
-  ColorMap colors;
+  ExportColorMap colors;
+  Color4f selectedColor;
+  const ExportInfo& info;
+  const std::shared_ptr<const Export3mfOptions> options;
 };
 
 uint32_t lib3mf_write_callback(const char *data, uint32_t bytes, std::ostream *stream)
@@ -99,10 +94,64 @@ int count_mesh_objects(const Lib3MF::PModel& model) {
     return count;
 }
 
+void handle_triangle_color(const std::shared_ptr<const PolySet>& ps, ExportContext& ctx, Lib3MF::PMeshObject& mesh, Lib3MF_uint32 triangle, int color_index) {
+  if (color_index < 0) {
+    return;
+  }
+  if (ps->colors.empty()) {
+    return;
+  }
+  if (!ctx.basematerialgroup && !ctx.colorgroup) {
+    return;
+  }
+  if (ctx.options->colorMode == Export3mfColorMode::selected_only) {
+    return;
+  }
+
+  const Color4f col = ps->colors[color_index];
+  const auto col_it = ctx.colors.find(col);
+
+  Lib3MF_uint32 col_idx = 0;
+  if (col_it == ctx.colors.end()) {
+    const Lib3MF::sColor materialcolor{
+      .m_Red = get_color_channel(col, 0),
+      .m_Green = get_color_channel(col, 1),
+      .m_Blue = get_color_channel(col, 2),
+      .m_Alpha = get_color_channel(col, 3)
+    };
+    if (ctx.basematerialgroup) {
+      col_idx = ctx.basematerialgroup->AddMaterial("Color " + std::to_string(ctx.basematerialgroup->GetCount()), materialcolor);
+    } else if (ctx.colorgroup) {
+      col_idx = ctx.colorgroup->AddColor(materialcolor);
+    }
+    ctx.colors[col] = col_idx;
+  } else {
+    col_idx = (*col_it).second;
+  }
+
+  Lib3MF_uint32 res_id = 0;
+  if (ctx.basematerialgroup) {
+    res_id = ctx.basematerialgroup->GetUniqueResourceID();
+  } else if (ctx.colorgroup) {
+    res_id = ctx.colorgroup->GetUniqueResourceID();
+  }
+
+  if (res_id > 0) {
+    mesh->SetTriangleProperties(triangle, {
+      res_id,
+      {
+        col_idx,
+        col_idx,
+        col_idx
+      }
+    });
+  }
+}
+
 /*
  * PolySet must be triangulated.
  */
-static bool append_polyset(const std::shared_ptr<const PolySet> & ps, ExportContext& ctx)
+bool append_polyset(const std::shared_ptr<const PolySet>& ps, ExportContext& ctx)
 {
   try {
     auto mesh = ctx.model->AddMeshObject();
@@ -112,7 +161,11 @@ static bool append_polyset(const std::shared_ptr<const PolySet> & ps, ExportCont
     const auto modelname = ctx.modelcount == 1 ? "OpenSCAD Model" : "OpenSCAD Model " + std::to_string(mesh_count);
     const auto partname = ctx.modelcount == 1 ? "" : "Part " + std::to_string(mesh_count);
     mesh->SetName(modelname);
-    mesh->SetObjectLevelProperty(ctx.basematerialgroup->GetUniqueResourceID(), 1);
+    if (ctx.basematerialgroup) {
+      mesh->SetObjectLevelProperty(ctx.basematerialgroup->GetUniqueResourceID(), 1);
+    } else if (ctx.colorgroup) {
+      mesh->SetObjectLevelProperty(ctx.colorgroup->GetUniqueResourceID(), 1);
+    }
 
     auto vertexFunc = [&](const Vector3d& coords) -> bool {
       const auto f = coords.cast<float>();
@@ -134,31 +187,7 @@ static bool append_polyset(const std::shared_ptr<const PolySet> & ps, ExportCont
           static_cast<Lib3MF_uint32>(indices[2])
         });
 
-        if (!ps->colors.empty()) {
-          const auto col = ps->colors[color_index];
-          const auto col_it = ctx.colors.find(col);
-          Lib3MF_uint32 col_idx;
-          if (col_it == ctx.colors.end()) {
-            const Lib3MF::sColor materialcolor{
-              .m_Red = get_color_channel(col, 0),
-              .m_Green = get_color_channel(col, 1),
-              .m_Blue = get_color_channel(col, 2),
-              .m_Alpha = get_color_channel(col, 3)
-            };
-            col_idx = ctx.basematerialgroup->AddMaterial("Color " + std::to_string(ctx.basematerialgroup->GetCount()), materialcolor);
-            ctx.colors[col] = col_idx;
-          } else {
-            col_idx = (*col_it).second;
-          }
-          mesh->SetTriangleProperties(triangle, {
-            ctx.basematerialgroup->GetUniqueResourceID(),
-            {
-              col_idx,
-              col_idx,
-              col_idx
-            }
-          });
-        }
+        handle_triangle_color(ps, ctx, mesh, triangle, color_index);
       } catch (Lib3MF::ELib3MFException& e) {
         export_3mf_error(e.what());
         return false;
@@ -203,7 +232,7 @@ static bool append_polyset(const std::shared_ptr<const PolySet> & ps, ExportCont
 }
 
 #ifdef ENABLE_CGAL
-static bool append_nef(const CGAL_Nef_polyhedron& root_N, ExportContext& ctx)
+bool append_nef(const CGAL_Nef_polyhedron& root_N, ExportContext& ctx)
 {
   if (!root_N.p3) {
     LOG(message_group::Export_Error, "Export failed, empty geometry.");
@@ -222,7 +251,7 @@ static bool append_nef(const CGAL_Nef_polyhedron& root_N, ExportContext& ctx)
 }
 #endif
 
-static bool append_3mf(const std::shared_ptr<const Geometry>& geom, ExportContext& ctx)
+bool append_3mf(const std::shared_ptr<const Geometry>& geom, ExportContext& ctx)
 {
   if (const auto geomlist = std::dynamic_pointer_cast<const GeometryList>(geom)) {
     ctx.modelcount = geomlist->getChildren().size();
@@ -248,6 +277,15 @@ static bool append_3mf(const std::shared_ptr<const Geometry>& geom, ExportContex
   return true;
 }
 
+void add_meta_data(Lib3MF::PMetaDataGroup& metadatagroup, const std::string& name, const std::string& value, const std::string& value2 = "") {
+  const std::string v = value.empty() ? value2 : value;
+  if (v.empty()) {
+    return;
+  }
+
+  metadatagroup->AddMetaData("", name, v, "xs:string", true);
+}
+
 } // namespace
 
 /*!
@@ -290,20 +328,85 @@ void export_3mf(const std::shared_ptr<const Geometry>& geom, std::ostream& outpu
     return;
   }
 
-  auto basematerialgroup = model->AddBaseMaterialGroup();
-  basematerialgroup->AddMaterial("Default", {
-    .m_Red = get_color_channel(exportInfo.defaultColor, 0),
-    .m_Green = get_color_channel(exportInfo.defaultColor, 1),
-    .m_Blue = get_color_channel(exportInfo.defaultColor, 2),
-    .m_Alpha = 0xff
-  });
+  const auto& options3mf = exportInfo.options3mf ? exportInfo.options3mf : std::make_shared<Export3mfOptions>();
+  switch (options3mf->unit) {
+  case Export3mfUnit::micron:
+    model->SetUnit(Lib3MF::eModelUnit::MicroMeter);
+    break;
+  case Export3mfUnit::centimeter:
+    model->SetUnit(Lib3MF::eModelUnit::CentiMeter);
+    break;
+  case Export3mfUnit::meter:
+    model->SetUnit(Lib3MF::eModelUnit::Meter);
+    break;
+  case Export3mfUnit::inch:
+    model->SetUnit(Lib3MF::eModelUnit::Inch);
+    break;
+  case Export3mfUnit::foot:
+    model->SetUnit(Lib3MF::eModelUnit::Foot);
+    break;
+  default:
+    model->SetUnit(Lib3MF::eModelUnit::MilliMeter);
+    break;
+  }
+
+  const auto settingsColor = OpenSCAD::parse_hex_color(options3mf->color);
 
-  const auto metadatagroup = model->GetMetaDataGroup();
-  metadatagroup->AddMetaData("", "Title", exportInfo.title, "xs:string", true);
-  metadatagroup->AddMetaData("", "Application", EXPORT_CREATOR, "xs:string", true);
-  metadatagroup->AddMetaData("", "CreationDate", get_current_iso8601_date_time_utc(), "xs:string", true);
+  Lib3MF::PColorGroup colorgroup;
+  Lib3MF::PBaseMaterialGroup basematerialgroup;
+  if (options3mf->colorMode != Export3mfColorMode::none) {
+    Color4f color;
+    if (options3mf->colorMode == Export3mfColorMode::model) {
+      // use default color that ultimately should come from the color scheme
+      color = exportInfo.defaultColor;
+    } else {
+      // use color selected in the export dialog and stored in settings (if valid)
+      if (!settingsColor) {
+        LOG(message_group::Warning, "Default color in settings is invalid ('%1$s'), using default from model.", options3mf->color);
+      }
+      color = settingsColor.value_or(exportInfo.defaultColor);
+    }
+    if (options3mf->materialType == Export3mfMaterialType::basematerial) {
+      basematerialgroup = model->AddBaseMaterialGroup();
+      basematerialgroup->AddMaterial("Default", {
+        .m_Red = get_color_channel(color, 0),
+        .m_Green = get_color_channel(color, 1),
+        .m_Blue = get_color_channel(color, 2),
+        .m_Alpha = 0xff
+      });
+    } else if (options3mf->materialType == Export3mfMaterialType::color) {
+      colorgroup = model->AddColorGroup();
+      colorgroup->AddColor({
+        .m_Red = get_color_channel(color, 0),
+        .m_Green = get_color_channel(color, 1),
+        .m_Blue = get_color_channel(color, 2),
+        .m_Alpha = get_color_channel(color, 3)
+      });
+    }
+  }
 
-  ExportContext ctx{wrapper, model, basematerialgroup, 1};
+  if (options3mf->addMetaData) {
+    auto metadatagroup = model->GetMetaDataGroup();
+    add_meta_data(metadatagroup, "Title", options3mf->metaDataTitle, exportInfo.title);
+    add_meta_data(metadatagroup, "Application", EXPORT_CREATOR);
+    add_meta_data(metadatagroup, "CreationDate", get_current_iso8601_date_time_utc());
+    add_meta_data(metadatagroup, "Designer", options3mf->metaDataDesigner);
+    add_meta_data(metadatagroup, "Description", options3mf->metaDataDescription);
+    add_meta_data(metadatagroup, "Copyright", options3mf->metaDataCopyright);
+    add_meta_data(metadatagroup, "LicenseTerms", options3mf->metaDataLicenseTerms);
+    add_meta_data(metadatagroup, "Rating", options3mf->metaDataRating);
+  }
+
+  ExportContext ctx{
+    .wrapper = wrapper,
+    .model = model,
+    .colorgroup = colorgroup,
+    .basematerialgroup = basematerialgroup,
+    .modelcount = 1,
+    .selectedColor = settingsColor.value_or(exportInfo.defaultColor),
+    .info = exportInfo,
+    .options = options3mf
+  };
 
   if (!append_3mf(geom, ctx)) {
     return;
@@ -321,6 +424,12 @@ void export_3mf(const std::shared_ptr<const Geometry>& geom, std::ostream& outpu
     return;
   }
 
+  try {
+    writer->SetDecimalPrecision(ctx.options->decimalPrecision);
+  } catch (Lib3MF::ELib3MFException& e) {
+    LOG(message_group::Export_Error, "Error setting decimal precision for export: %1$s", e.what());
+  }
+
   try {
     writer->WriteToCallback((Lib3MF::WriteCallback)lib3mf_write_callback, (Lib3MF::SeekCallback)lib3mf_seek_callback, &output);
   } catch (Lib3MF::ELib3MFException& e) {
diff --git a/src/io/export_enums.h b/src/io/export_enums.h
new file mode 100644
index 0000000000..774a6e39f8
--- /dev/null
+++ b/src/io/export_enums.h
@@ -0,0 +1,41 @@
+#pragma once
+
+#include <cstdint>
+
+enum class ExportPdfPaperSize : std::uint8_t {
+  A6,
+  A5,
+  A4,
+  A3,
+  LETTER,
+  LEGAL,
+  TABLOID,
+};
+
+enum class ExportPdfPaperOrientation : std::uint8_t {
+  AUTO,
+  PORTRAIT,
+  LANDSCAPE,
+};
+
+enum class Export3mfColorMode : std::uint8_t {
+  model,
+  none,
+  selected_only,
+};
+
+// https://github.com/3MFConsortium/spec_core/blob/master/3MF%20Core%20Specification.md:
+// micron, millimeter, centimeter, inch, foot, and meter
+enum class Export3mfUnit : std::uint8_t {
+  micron,
+  millimeter,
+  centimeter,
+  meter,
+  inch,
+  foot,
+};
+
+enum class Export3mfMaterialType : std::uint8_t {
+  color,
+  basematerial,
+};
\ No newline at end of file
diff --git a/src/io/export_pdf.cc b/src/io/export_pdf.cc
index 4b740c6f42..7f8ff95b96 100644
--- a/src/io/export_pdf.cc
+++ b/src/io/export_pdf.cc
@@ -1,8 +1,6 @@
 #include "io/export.h"
 #include "geometry/PolySet.h"
-// #include "geometry/PolySetUtils.h"
 #include "utils/printutils.h"
-// #include "version.h"
 #include "utils/version_helper.h"
 
 #include <cassert>
@@ -16,39 +14,50 @@
 #include <cairo.h>
 #include <cairo-pdf.h>
 
+constexpr inline auto FONT = "Liberation Sans";
+constexpr double MARGIN = 30.0;
+constexpr double PTS_IN_MM = 2.834645656693;
 
-#define FONT "Liberation Sans"
-
-
-#define MARGIN 30.
-
-// void export_pdf(const std::shared_ptr<const Geometry>& geom, std::ostream& output, const ExportInfo& exportInfo, const ExportPdfOptions  exportPdfOptions);
- 
 const std::string get_cairo_version() {
   return OpenSCAD::get_version(CAIRO_VERSION_STRING, cairo_version_string());
 }
 
-void draw_text(const char *text, cairo_t *cr, double x, double y, double fontSize){
+namespace {
+
+// Dimensions in pts per PDF standard, used by ExportPDF
+// See also: https://www.prepressure.com/library/paper-size
+// rows map to paperSizes enums
+// columns are Width, Height
+const int paperDimensions[7][2] = {
+  {298,  420}, // A6
+  {420,  595}, // A5
+  {595,  842}, // A4
+  {842, 1190}, // A3
+  {612,  792}, // Letter
+  {612, 1008}, // Legal
+  {792, 1224}, // Tabloid
+};
 
+void draw_text(const char *text, cairo_t *cr, double x, double y, double fontSize)
+{
   cairo_select_font_face(cr, FONT, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
   cairo_set_font_size(cr, fontSize);
   cairo_move_to(cr, x, y);
   cairo_show_text(cr, text);
-
 }
 
-#define PTS_IN_MM 2.834645656693;
-
-double mm_to_points(double mm){
+double mm_to_points(double mm)
+{
   return mm * PTS_IN_MM;
 }
 
-double points_to_mm(double pts){
+double points_to_mm(double pts)
+{
   return pts / PTS_IN_MM;
 }
 
-void draw_grid(cairo_t *cr, double left, double right, double bottom, double top, double gridSize ){
-  // gridSize>1.
+void draw_grid(cairo_t *cr, double left, double right, double bottom, double top, double gridSize )
+{
   if (gridSize<1.) gridSize=2.;
   double darkerLine=0.36;
   double lightLine=0.24;
@@ -143,8 +152,6 @@ void draw_axes(cairo_t *cr, double left, double right, double bottom, double top
       }
   };
 }  
-  
-
 
 // Draws a single 2D polygon.
 void draw_geom(const Polygon2d& poly, cairo_t *cr ){
@@ -168,7 +175,6 @@ void draw_geom(const Polygon2d& poly, cairo_t *cr ){
   }
 }
 
-
 // Main entry:  draw geometry that consists of 2D polygons.  Walks the tree...
 void draw_geom(const std::shared_ptr<const Geometry>& geom, cairo_t *cr){
   if (const auto geomlist = std::dynamic_pointer_cast<const GeometryList>(geom)) { // iterate
@@ -184,27 +190,37 @@ void draw_geom(const std::shared_ptr<const Geometry>& geom, cairo_t *cr){
   }
 }
 
-static cairo_status_t export_pdf_write(void *closure, const unsigned char *data, unsigned int length)
+cairo_status_t export_pdf_write(void *closure, const unsigned char *data, unsigned int length)
 {
   std::ostream *stream = static_cast<std::ostream *>(closure);
   stream->write(reinterpret_cast<const char *>(data), length);
   return !(*stream) ? CAIRO_STATUS_WRITE_ERROR : CAIRO_STATUS_SUCCESS;
 }
 
+void add_meta_data(cairo_surface_t *surface, const cairo_pdf_metadata_t metadata, const std::string& value, const std::string& value2 = "") {
+  const std::string v = value.empty() ? value2 : value;
+  if (v.empty()) {
+    return;
+  }
+
+  cairo_pdf_surface_set_metadata(surface, metadata, v.c_str());
+}
+
+} // namespace
 
 void export_pdf(const std::shared_ptr<const Geometry>& geom, std::ostream& output, const ExportInfo& exportInfo)
 {
-// Extract the options.  This will change when options becomes a variant.
-ExportPdfOptions *exportPdfOptions;
-ExportPdfOptions defaultPdfOptions;
-// could use short-circuit short-form, but will need to grow.
-if (exportInfo.options==nullptr) {
-	exportPdfOptions=&defaultPdfOptions;
-} else {
-	exportPdfOptions=exportInfo.options;
-};
+  // Extract the options.  This will change when options becomes a variant.
+  const ExportPdfOptions *options;
+  ExportPdfOptions defaultPdfOptions;
+  // could use short-circuit short-form, but will need to grow.
+  if (exportInfo.optionsPdf) {
+    options = exportInfo.optionsPdf.get();
+  } else {
+    options = &defaultPdfOptions;
+  };
 
-  int pdfX,pdfY;  // selected paper size for export.
+  int pdfX, pdfY;  // selected paper size for export.
   // Fit geometry to page
   // Get dims in mm.
   BoundingBox bbox = geom->getBoundingBox();
@@ -217,17 +233,14 @@ if (exportInfo.options==nullptr) {
   int spanY = mm_to_points(maxy-miny);
   int centerX = mm_to_points(minx)+spanX/2;
   int centerY = mm_to_points(miny)+spanY/2;
-  // Temporary Log
-//  LOG(message_group::Export_Warning, "min( %1$6d , %2$6d ), max( %3$6d , %4$6d )", minx, miny, maxx, maxy);
-//  LOG(message_group::Export_Warning, "span( %1$6d , %2$6d ), center ( %3$6d , %4$6d )", spanX, spanY,  centerX, centerY);
   
   // Set orientation and paper size
-  if ((exportPdfOptions->Orientation==paperOrientations::AUTO && spanX>spanY)||(exportPdfOptions->Orientation==paperOrientations::LANDSCAPE)) {
-  	pdfX=paperDimensions[static_cast<int>(exportPdfOptions->paperSize)][1];
-  	pdfY=paperDimensions[static_cast<int>(exportPdfOptions->paperSize)][0];
+  if ((options->orientation==ExportPdfPaperOrientation::AUTO && spanX>spanY)||(options->orientation==ExportPdfPaperOrientation::LANDSCAPE)) {
+  	pdfX = paperDimensions[static_cast<int>(options->paperSize)][1];
+  	pdfY = paperDimensions[static_cast<int>(options->paperSize)][0];
   } else {
-    	pdfX=paperDimensions[static_cast<int>(exportPdfOptions->paperSize)][0];
-    	pdfY=paperDimensions[static_cast<int>(exportPdfOptions->paperSize)][1];
+    pdfX = paperDimensions[static_cast<int>(options->paperSize)][0];
+    pdfY = paperDimensions[static_cast<int>(options->paperSize)][1];
   }; 
   
   // Does it fit? (in points)	
@@ -235,7 +248,6 @@ if (exportInfo.options==nullptr) {
   if (!inpaper) {
     LOG(message_group::Export_Warning, "Geometry is too large to fit into selected size.");
   }
-  //      LOG(message_group::Export_Warning, "pdfX, pdfY %1$6d %2$6d ", pdfX, pdfY);
         
   //  Center on page.  Still in points.
   // Note Cairo inverts the Y axis, with zero at the top, positive going down.
@@ -247,9 +259,6 @@ if (exportInfo.options==nullptr) {
   double Mrx=centerX+pdfX/2-MARGIN;  // Right margin, X axis
   double Mty=-(centerY-pdfY/2+MARGIN);  // INVERTED Top margin, Y axis
   double Mby=-(centerY+pdfY/2-MARGIN);  // INVERTED Bottom margin, Y axis
-    // Temporary Log
-    // LOG(message_group::Export_Warning, "tcX, tcY %1$6d , %2$6d", tcX, tcY);
-    // LOG(message_group::Export_Warning, "Mlx, Mry %1$6d %2$6d Mtx, Mty %3$6d %4$6d", Mlx, Mrx, Mty, Mby);
   
   // Initialize Cairo Surface and PDF
   cairo_surface_t *surface = cairo_pdf_surface_create_for_stream(export_pdf_write, &output, pdfX, pdfY);
@@ -258,12 +267,16 @@ if (exportInfo.options==nullptr) {
     return;
   }
 
-
 #if CAIRO_VERSION >= CAIRO_VERSION_ENCODE(1, 16, 0)
-  cairo_pdf_surface_set_metadata(surface, CAIRO_PDF_METADATA_TITLE, exportInfo.title.c_str());
-  cairo_pdf_surface_set_metadata(surface, CAIRO_PDF_METADATA_CREATOR, EXPORT_CREATOR);
-  cairo_pdf_surface_set_metadata(surface, CAIRO_PDF_METADATA_CREATE_DATE, get_current_iso8601_date_time_utc().c_str());
-  cairo_pdf_surface_set_metadata(surface, CAIRO_PDF_METADATA_MOD_DATE, "");
+  if (options->addMetaData) {
+    add_meta_data(surface, CAIRO_PDF_METADATA_TITLE, options->metaDataTitle, exportInfo.title);
+    add_meta_data(surface, CAIRO_PDF_METADATA_CREATOR, EXPORT_CREATOR);
+    add_meta_data(surface, CAIRO_PDF_METADATA_CREATE_DATE, get_current_iso8601_date_time_utc());
+    add_meta_data(surface, CAIRO_PDF_METADATA_MOD_DATE, "");
+    add_meta_data(surface, CAIRO_PDF_METADATA_AUTHOR, options->metaDataAuthor);
+    add_meta_data(surface, CAIRO_PDF_METADATA_SUBJECT, options->metaDataSubject);
+    add_meta_data(surface, CAIRO_PDF_METADATA_KEYWORDS, options->metaDataKeywords);
+  }
 #endif
 
   cairo_t *cr = cairo_create(surface);
@@ -279,32 +292,33 @@ if (exportInfo.options==nullptr) {
       std::string about = "Scale is to calibrate actual printed dimension. Check both X and Y. Measure between tick 0 and last tick";
     cairo_set_source_rgba(cr, 0., 0., 0., 0.48);
     // Design Filename
-    if (exportPdfOptions->showDesignFilename) draw_text(exportInfo.sourceFilePath.c_str(), cr, Mlx, Mby, 10.);
+    if (options->showDesignFilename) draw_text(exportInfo.sourceFilePath.c_str(), cr, Mlx, Mby, 10.);
     // Scale
-    if (exportPdfOptions->showScale) {
+    if (options->showScale) {
     	draw_axes(cr, Mlx,Mrx,Mty,Mby);
     	// Scale Message
-    	if (exportPdfOptions->showScaleMsg) draw_text(about.c_str(), cr, Mlx+1, Mty-1, 5.);
+    	if (options->showScaleMsg) draw_text(about.c_str(), cr, Mlx+1, Mty-1, 5.);
     }
     // Grid
-    if (exportPdfOptions->showGrid) draw_grid(cr, Mlx,Mrx,Mty,Mby, exportPdfOptions->gridSize);
+    if (options->showGrid) draw_grid(cr, Mlx,Mrx,Mty,Mby, options->gridSize);
 
   cairo_show_page(cr);
   cairo_surface_destroy(surface);
   cairo_destroy(cr);
 
 }
+
 #else //ENABLE_CAIRO
 
-const std::string get_cairo_version() {
+const std::string get_cairo_version()
+{
   const std::string cairo_version = "(not enabled)";
   return cairo_version;
 }
 
-void export_pdf(const std::shared_ptr<const Geometry>&, std::ostream&, const ExportInfo&) {
-
+void export_pdf(const std::shared_ptr<const Geometry>&, std::ostream&, const ExportInfo&)
+{
   LOG(message_group::Error, "Export to PDF format was not enabled when building the application.");
-
 }
 
 #endif //ENABLE_CAIRO
diff --git a/src/openscad.cc b/src/openscad.cc
index 4d7ec6d81f..71f5bffb7f 100644
--- a/src/openscad.cc
+++ b/src/openscad.cc
@@ -29,6 +29,12 @@
 #include <chrono>
 #include <iomanip>
 #include <fstream>
+#include <string>
+#include <tuple>
+#include <unordered_map>
+#include "ColorUtil.h"
+#include "Context.h"
+#include "Settings.h"
 
 #ifdef _WIN32
 #include <io.h>
@@ -76,6 +82,7 @@ std::string evaluatePython(const std::string &code, double time);
 bool python_active = false;
 bool python_trusted = false;
 #endif
+
 namespace po = boost::program_options;
 namespace fs = std::filesystem;
 
@@ -110,6 +117,9 @@ class Echostream
 
 namespace {
 
+#define STRINGIFY(x) #x
+#define TOSTRING(x) STRINGIFY(x)
+
 #ifndef OPENSCAD_NOGUI
 bool useGUI()
 {
@@ -127,8 +137,7 @@ bool useGUI()
 #endif // OPENSCAD_NOGUI
 
 bool checkAndExport(const std::shared_ptr<const Geometry>& root_geom, unsigned dimensions,
-                    FileFormat format, const bool is_stdout, const std::string& filename,
-		    const Camera *const camera, const std::string& input_filename)
+                    ExportInfo& exportInfo, const bool is_stdout, const std::string& filename)
 {
   if (root_geom->getDimension() != dimensions) {
     LOG("Current top level object is not a %1$dD object.", dimensions);
@@ -138,13 +147,7 @@ bool checkAndExport(const std::shared_ptr<const Geometry>& root_geom, unsigned d
     LOG("Current top level object is empty.");
     return false;
   }
-  ExportInfo exportInfo = {
-    .format = format,
-    .title = std::filesystem::path(input_filename).filename().string(),
-    .sourceFilePath = input_filename,
-    .camera = camera,
-    .defaultColor = { 0xf9, 0xd7, 0x2c, 255 } // Cornfield: CGAL_FACE_FRONT_COLOR
-  };
+
   if (is_stdout) {
     exportFileStdOut(root_geom, exportInfo);
   }
@@ -161,8 +164,27 @@ void help(const char *arg0, const po::options_description& desc, bool failure =
   exit(failure ? 1 : 0);
 }
 
-#define STRINGIFY(x) #x
-#define TOSTRING(x) STRINGIFY(x)
+template<std::size_t size>
+void help_export(const std::array<const Settings::SettingsEntryBase *, size>& options) {
+  LOG("Section '%1$s':", options.at(0)->category());
+
+  for (const auto option : options) {
+    const auto [type, values] = option->help();
+    LOG("  - %1$s (%2$s): %3$s", option->name(), type, values);
+  }
+}
+
+void help_export()
+{
+  LOG("OpenSCAD version %1$s\n", TOSTRING(OPENSCAD_VERSION));
+  LOG("List of settings that can be given using the -O option using the");
+  LOG("format '<section>/<key>=value', e.g.:");
+  LOG("openscad -O export-pdf/paper-size=a6 -O export-pdf/show-grid=false\n");
+  help_export(Settings::SettingsExportPdf::cmdline);
+  help_export(Settings::SettingsExport3mf::cmdline);
+  exit(0);
+}
+
 void version()
 {
   LOG("OpenSCAD version %1$s", TOSTRING(OPENSCAD_VERSION));
@@ -265,6 +287,7 @@ struct CommandLine
   const ViewOptions& viewOptions;
   const Camera& camera;
   const boost::optional<FileFormat> export_format;
+  const CmdLineExportOptions& exportOptions;
   const AnimateArgs animate;
   const std::vector<std::string> summaryOptions;
   const std::string summaryFile;
@@ -486,7 +509,8 @@ int do_export(const CommandLine& cmd, const RenderVariables& render_variables, F
 
     const std::string input_filename = cmd.is_stdin ? "<stdin>" : cmd.filename;
     const int dim = fileformat::is3D(export_format) ? 3 : fileformat::is2D(export_format) ? 2 : 0;
-    if (dim > 0 && !checkAndExport(root_geom, dim, export_format, cmd.is_stdout, filename_str, &cmd.camera, input_filename)) {
+    ExportInfo exportInfo = createExportInfo(export_format, fileformat::info(export_format), input_filename, &cmd.camera, cmd.exportOptions);
+    if (dim > 0 && !checkAndExport(root_geom, dim, exportInfo, cmd.is_stdout, filename_str)) {
       return 1;
     }
 
@@ -693,6 +717,32 @@ bool flagConvert(const std::string& str){
   return false;
 }
 
+std::tuple<std::string, std::string> simple_split(const std::string& str, const char c)
+{
+  const auto idx = str.find_first_of(c);
+  if (idx == std::string::npos)
+    return {};
+  const auto first = str.substr(0, idx);
+  const auto second = str.substr(idx + 1);
+  return {first, second};
+}
+
+CmdLineExportOptions convert_export_options(const po::variables_map& vm)
+{
+  if (vm.count("O") == 0) {
+    return {};
+  }
+
+  CmdLineExportOptions map;
+  const auto& options = vm["O"].as<std::vector<std::string>>();
+  for (const auto& option : options) {
+    const auto [key, value] = simple_split(option, '=');
+    const auto [section, name] = simple_split(key, '/');
+    map[section][name] = value;
+  }
+  return map;
+}
+
 // OpenSCAD
 int main(int argc, char **argv)
 {
@@ -739,6 +789,7 @@ int main(int argc, char **argv)
   desc.add_options()
     ("export-format", po::value<std::string>(), "overrides format of exported scad file when using option '-o', arg can be any of its supported file extensions.  For ascii stl export, specify 'asciistl', and for binary stl export, specify 'binstl'.  Ascii export is the current stl default, but binary stl is planned as the future default so asciistl should be explicitly specified in scripts when needed.\n")
     ("o,o", po::value<std::vector<std::string>>(), "output specified file instead of running the GUI, the file extension specifies the type: stl, off, wrl, amf, 3mf, csg, dxf, svg, pdf, png, echo, ast, term, nef3, nefdbg (May be used multiple time for different exports). Use '-' for stdout\n")
+    ("O,O", po::value<std::vector<std::string>>(), "pass settings value to the file export using the format section/key=value, e.g export-pdf/paper-size=a3. Use --help-export to list all available settings.")
     ("D,D", po::value<std::vector<std::string>>(), "var=val -pre-define variables")
     ("p,p", po::value<std::string>(), "customizer parameter file")
     ("P,P", po::value<std::string>(), "customizer parameter set")
@@ -750,7 +801,8 @@ int main(int argc, char **argv)
   }) +
                                            "\n").c_str())
 #endif
-  ("help,h", "print this help message and exit")
+    ("help,h", "print this help message and exit")
+    ("help-export", "print list of export parameters and values that can be set via -O")
     ("version,v", "print the version")
     ("info", "print information about the build process\n")
 
@@ -850,6 +902,7 @@ int main(int argc, char **argv)
   }
 
   if (vm.count("help")) help(argv[0], desc);
+  if (vm.count("help-export")) help_export();
   if (vm.count("version")) version();
   if (vm.count("info")) arg_info = true;
   if (vm.count("backend")) {
@@ -993,6 +1046,7 @@ int main(int argc, char **argv)
           const std::string input_file = is_stdin ? "<stdin>" : inputFiles[0];
           const bool is_stdout = filename == "-";
           const std::string output_file = is_stdout ? "<stdout>" : filename;
+          const auto export_options = convert_export_options(vm);
           const CommandLine cmd{
             is_stdin,
             input_file,
@@ -1004,6 +1058,7 @@ int main(int argc, char **argv)
             viewOptions,
             camera,
             export_format,
+            export_options,
             animate,
             vm.count("summary") ? vm["summary"].as<std::vector<std::string>>() : std::vector<std::string>{},
             vm.count("summary-file") ? vm["summary-file"].as<std::string>() : ""
diff --git a/src/openscad_gui.cc b/src/openscad_gui.cc
index 71f10a0f30..91b9035a29 100644
--- a/src/openscad_gui.cc
+++ b/src/openscad_gui.cc
@@ -43,7 +43,7 @@
 #include "gui/MainWindow.h"
 #include "gui/OpenSCADApp.h"
 #include "gui/QSettingsCached.h"
-#include "gui/Settings.h"
+#include "core/Settings.h"
 #include "openscad.h"
 #include "utils/printutils.h"
 
