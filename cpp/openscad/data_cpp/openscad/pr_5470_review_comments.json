[
    {
        "title": "Resolved Issues With Corrupted STL Files When Exporting to stdout"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "@tomasf\r\n@kintel\r\n\r\n## Intro\r\n\r\nAs per issue [#5380](https://github.com/openscad/openscad/issues/5380), this PR includes changes that are aimed at improving the `export_stl` function to address issues with exporting binary STL files to non-seekable output streams (e.g., `stdout`).  I made some resaerch into the issue and from the description and external sources learned that the problem revolved around attempting to write a binary STL to `stdout` while relying on seek operations to update the triangle count. Since seeking isn't supported on a non-seekable stream like `stdout`, the previous approach led to corrupted STL files. With that in mind, my main updates include:\r\n\r\n### Buffered Writing for Binary STL\r\n- I introduced a `std::ostringstream` buffer to temporarily store the binary STL data.\r\n- The buffer allows updating the triangle count at the correct offset (80 bytes) without relying on seek operations on the `output` stream.\r\n\r\n### Header and Placeholder Management\r\n- I made sure it writes a placeholder for the triangle count immediately after the header.\r\n- I made sure too that it updates the actual triangle count in the buffer after calculating it.\r\n\r\n### Logging for Exceeded Triangle Count\r\n- I added a check to log an error if the triangle count exceeds the maximum allowable value for a 32-bit unsigned integer (4,294,967,295).\r\n\r\n### ASCII Mode Handling\r\n- I ensured ASCII STL data is directly written to the output stream, maintaining the existing behavior.\r\n\r\n### Compatibility with `stdout`\r\n- I made it ensure that binary STL files written to `stdout` or other non-seekable streams are consistent and valid by fully preparing the output in the buffer before flushing it to the stream.\r\n\r\nPlease have a review and provide further guidance on what I need to do.\r\nThank You!"
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": ""
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "Could take a look at what it would take to add automated tests for stdio export?"
    },
    {
        "author": {
            "login": "IamLRBA"
        },
        "body": "> Could take a look at what it would take to add automated tests for stdio export?\r\n\r\n@kintel I did some digging, and in order to add automated tests for the `stdout` export functionality, the best suggestion would be setting up a framework where the program's output can be captured and verified. For OpenSCAD, where binary and ASCII STL exports to `stdout` are involved, the key steps i could think of might include:\r\n\r\n1. Identifying the Test Framework.\r\n2. Capturing and Verifying `stdout` Output: I think that any automated tests to solve the issue should - Redirect `stdout` to a temporary file, execute the export command for binary and ASCII formats and verify the content of the captured output.\r\n\r\n3. Adding Test Cases for Different Scenarios: such as Binary STL export to stdout, ASCII STL export to stdout, large models with many triangles to ensure no memory issues and Edge cases like zero triangles or maximum triangle counts.\r\n\r\nThat's all I can think of, though I am handicapped as most likely the test script would have to be written in Python or Bash as the best options or another supported scripting language. And I am not yet well acquainted with those languages."
    },
    {
        "author": {
            "login": "kintel"
        },
        "body": "FYI: Added tests, mostly as an example of how this is done in OpenSCAD, in case you plan on picking up more issues.\r\n"
    }
]