[
    {
        "title": "Fixed the problem of static layer not restoring old map values for footprint "
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "<!-- Please fill out the following pull request template for non-trivial changes to help us process your PR faster and more efficiently.-->\r\n\r\n---\r\n\r\n## Basic Info\r\n\r\n| Info | Please fill out this column |\r\n| ------ | ----------- |\r\n| Ticket(s) this addresses   | https://github.com/ros-navigation/navigation2/issues/4825 |\r\n| Primary OS tested on | Ubuntu |\r\n| Robotic platform tested on | gazebo simulation of turtlebot |\r\n| Does this PR contain AI generated software? | No |\r\n\r\n---\r\n\r\n## Description of contribution in a few bullet points\r\n\r\n* I have removed clearing the `map_buffer` just after The method `processMap` is run so we can utilize `map_buffer` to restore the region cleared before.\r\n* I have removed `map_received_in_update_bounds_` because seems we really don't need to. \r\n* I have left to lock with mutex inside `processMap` method because now we are using lock in parts we use `processMap`\r\n<!--\r\n* I added this neat new feature\r\n* Also fixed a typo in a parameter name in nav2_costmap_2d\r\n-->\r\n\r\n## Description of documentation updates required from your changes\r\n\r\nWe have added some methods to Costmap2d. So we may need to update Costmap2D API documentation.\r\n<!--\r\n* Added new parameter, so need to add that to default configs and documentation page\r\n* I added some capabilities, need to document them\r\n-->\r\n\r\n---\r\n\r\n## Future work that may be required in bullet points\r\n\r\n* We can add some methods to Costmap2d. For example, we can should pass the lambda function setConvexPolygonCost in order to implement dynamically how the cost is set.\r\n<!--\r\n* I think there might be some optimizations to be made from STL vector\r\n* I see alot of redundancy in this package, we might want to add a function `bool XYZ()` to reduce clutter\r\n* I tested on a differential drive robot, but there might be issues turning near corners on an omnidirectional platform\r\n-->\r\n\r\n#### For Maintainers: <!-- DO NOT EDIT OR REMOVE -->\r\n- [ ] Check that any new parameters added are updated in docs.nav2.org\r\n- [ ] Check that any significant change is added to the migration guide\r\n- [ ] Check that any new features **OR** changes to existing behaviors are reflected in the tuning guide\r\n- [ ] Check that any new functions have Doxygen added\r\n- [ ] Check that any new features have test coverage\r\n- [ ] Check that any new plugins is added to the plugins page\r\n- [ ] If BT Node, Additionally: add to BT's XML index of nodes for groot, BT package's readme table, and BT library lists\r\n"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "I didn't carefully review this yet (Saturday afternoon over coffee!), but wouldn't it be possible for us to simply remove the `setConvexPolygonCost` from the internal static layer grid and apply it to the master grid update (`master_grid.setConvexPolygonCost())`)? \r\n\r\nThat would apply it more globally however which might not be wanted in some cases (though I find that generally hard to believe _some_ layers would be set for that and others are not, practically speaking).\r\n\r\nAlternatively, you could have `setConvexPolygonCost` split into 2 stages. Stage 1 is getting the cells that belong to the footprint \r\n\r\n```\r\n  // we assume the polygon is given in the global_frame...\r\n  // we need to transform it to map coordinates\r\n  std::vector<MapLocation> map_polygon;\r\n  for (unsigned int i = 0; i < polygon.size(); ++i) {\r\n    MapLocation loc;\r\n    if (!worldToMap(polygon[i].x, polygon[i].y, loc.x, loc.y)) {\r\n      // (\"Polygon lies outside map bounds, so we can't fill it\");\r\n      return false;\r\n    }\r\n    map_polygon.push_back(loc);\r\n  }\r\n\r\n  std::vector<MapLocation> polygon_cells;\r\n\r\n  // get the cells that fill the polygon\r\n  convexFillCells(map_polygon, polygon_cells);\r\n\r\n  // NEW: Now return this!\r\n```\r\n\r\nAnd return those. The second step would be to obtain their values in the loop, store them, and set the new values for FREE. After we do the master grid update, use the originally obtained values to repopulate the static layer. You'd basically just break the `setConvexPolygonCost` into 3 methods: (1) get the cells that belong to a convex shape, (2)  sets its value for a fixed value (for free), and (3) sets its value to using a vector of input of values stored originally (to reset). \r\n\r\nI think that's similar to what you did, but I think this would require alot less changes. "
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "Please revert changes to the workflows of the node, I think it creates a number of regressions. I think you should only need to adjust the `updateCosts` portion of the implementation. I can see why you did this, wanting to `restore` from the previous iteration's stored values, but I think you can do this much more easily by just restoring a given iteration's costs at the end of the `updateCosts` method. "
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": ""
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "I think what this currently does is clear the footprint on the master grid after update, but that would bypass the set `updateWithXYZ()` policies that users can set in order to set how they want updates to be performed (i.e. use max value or have it overwrite). This would lose information like having non-zero costs due to sensor measurements, even if removing the static map values, which wouldn't be a solution without introducing a regression.\r\n\r\nThis was a good thought / nice clean way to do this while minimizing code changes,  but  I think we need to do what we discussed previously unless there's another way around that issue. Break up `setConvexPolygonCost` into a few methods inside of `costmap2d`, use those methods here to obtain the cost values originally in the layer's internal costmap, clear the costmap, update the master grid, then revert the layer's internal costmap. \r\n\r\nMaybe: Is there a way to apply the `updateWithXYZ()` policies for the following block? That would reduce the number of localized grid operations back to the same we do now (just each one has an extra couple of checks, which should be minimal in terms of computational cost)\r\n\r\n```\r\n if (footprint_clearing_enabled_) {\r\n    master_grid.setConvexPolygonCost(transformed_footprint_, nav2_costmap_2d::FREE_SPACE);\r\n  }\r\n```\r\n\r\nI also don't understand why `updateFootprint` as a method was updated. I think the footprint must be transformed into the current frame before `touch`-ing the points to expand the bounds. I also don't think that updateFootprint should be completed if not updating its bounds. Can/should these be reverted?\r\n\r\n\r\n"
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "Almost perfect, just a couple of architectural changes to make these more portable for other applications, but then good to go! Thanks for your time and effort prototyping this a few ways! "
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "Small nitpicks, but otherwise this is perfect and ready! "
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": ""
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": ""
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "Set the footprint clearing enabled and restore cleared footprint in https://github.com/ros-navigation/navigation2/blob/main/nav2_system_tests/src/system/nav2_system_params.yaml#L196-L198 so that we can have this exercised in a system test, then I can merge! "
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": ""
    },
    {
        "author": {
            "login": "mergify"
        },
        "body": "@CihatAltiparmak, your PR has failed to build. Please check CI outputs and resolve issues.\nYou may need to rebase or pull in `main` due to API changes (or your contribution genuinely fails)."
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Thank you for give a feedback in a light speed. \r\n\r\n> wouldn't it be possible for us to simply remove the setConvexPolygonCost from the internal static layer grid and apply it to the master grid update (master_grid.setConvexPolygonCost()))?\r\n\r\nOf course, I can. I just wondered your idea about whether adding new method would be useful for future. For instance, I wanna use setConvexCost in such a way that I can update with max value (`updateWithMax`). I got my answer.\r\n\r\n> That would apply it more globally however which might not be wanted in some cases (though I find that generally hard to believe some layers would be set for that and others are not, practically speaking).\r\n\r\nI agree with you. I could not get any chance to take a look at other layers, however I can see where this issue comes from. (#4282 )\r\n"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "Ah, that is pretty recent. Yeah I think doing the second thing I recommended on splitting up the functions would be the best move here. Then, parameterize if you want to repopulate (see comment in the issue ticket)"
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Hi @SteveMacenski , If you get a chance, would you take a look at my modifications, I've tried to minimize diffs to ease your work. Btw, I can consider to add the test cases to increase code coverage if you want. Additionaly, I will take a look at the other layers."
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Firstly, my apologies for long delay due to my exams so on. \r\n\r\n> I think what this currently does is clear the footprint on the master grid after update, but that would bypass the set updateWithXYZ() policies that users can set in order to set how they want updates to be performed (i.e. use max value or have it overwrite). This would lose information like having non-zero costs due to sensor measurements, even if removing the static map values, which wouldn't be a solution without introducing a regression.\r\n\r\nI have a question here. why do we have to update the areas with max value or overwrite after clearing the footprint area? Doesn't `footprint_clearing_enabled` lose its meaning here? But if you still haven't changed your idea, I will try to fix it in no time.\r\n\r\n> I also don't understand why updateFootprint as a method was updated. I think the footprint must be transformed into the current frame before touch-ing the points to expand the bounds. I also don't think that updateFootprint should be completed if not updating its bounds. Can/should these be reverted?\r\n\r\nI commented on [one of your reviews](https://github.com/ros-navigation/navigation2/pull/4824#discussion_r1931192674), but I saw this later. You are right. Ignore my comments in [that review](https://github.com/ros-navigation/navigation2/pull/4824#discussion_r1931192674).\r\n\r\nI will figure out all of them.\r\n"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "No need for apologies, life happens :wink: \r\n\r\n> I have a question here. why do we have to update the areas with max value or overwrite after clearing the footprint area? Doesn't footprint_clearing_enabled lose its meaning here? But if you still haven't changed your idea, I will try to fix it in no time.\r\n\r\nThere's a setting `use_max_` that users set for each layer about how to combine the various costmap layer plugins into a single master costmap that's used by the planning/control algorithms. They include updating with max value (i.e. from the existing master costmap, which may have been partially updated by other layers, is this cost greater than the existing one?) or override value (i.e. this value always takes priority, no matter what is already in the master costmap or inserted from other layers before this one).\r\n\r\nThe behavior that this PR currently implements is overriding of values. The master costmap is always cleared fully under footprint, rather than having the option to combine using the max value that could already exist in the costmap from another layer or a previous update. Imagine you had a laser scan layer below this one - the measurements from the laser scan would be deleted which represent real data being lost by overriding them. The obstacle layer that processes the laser scan has itself a clear under footprint parameter that would need to be also enabled to deal with that. There could be situations where you might not set clear under footprint for all layers -- so deleting the footprint's costs for the full master grid without consulting its combination policy is important. \r\n\r\nThe clear under footprint is specific to each layer, not to the master costmap itself. The combination policy that the user selected the layer to run at should be respected :-) \r\n\r\nif the combination policy is 'override', then what you have is exactly the same as doing the footprint clearing on the local internal costmap to the layer. However, if the policy is 'use maximum', then its not the same. Before this PR, the cleared values under the footprint in the static layer would contribute `0` cost areas, so that maximum value already in from other layers would be retained. The current implementation would clear the values in the master to `0`, overriding other layers which previously it just wouldn't update in those areas. "
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Hello, I tried to apply your suggestion. But I have some concerns. I found out that updateFootprint is only executed when clear costmap entirely service is called. This bring about the costmap is updated only when no plan is found. Of course, this depends on how behavior tree is implemented. I need to do some brain storming about it. It is hard to see this issue in `Obstacle Layer`. Because, obstacle layer takes into account the obstacles and updates bounds frequently.\r\n\r\nI wonder your feedbacks. If I am in the right way, I will continue by adding `restore_cleared_map_region` parameter. Then I will create a PR about this changes in nav2 docs. \r\n\r\n(From this comment https://github.com/ros-navigation/navigation2/pull/4824#pullrequestreview-2576510280)\r\n> I also don't understand why updateFootprint as a method was updated. I think the footprint must be transformed into the current frame before touch-ing the points to expand the bounds. I also don't think that updateFootprint should be completed if not updating its bounds. Can/should these be reverted?\r\n\r\nI thought a lot about whether updating bounds for footprint was good or bad. I also understand your concern. The unexpected behaviours may occur. Imagine that you don't use inflation layer. mppi may enter the occupied area. So I wanted to do brain-storming here through this channel.\r\n\r\nAdditionally, I used `for (const auto & x : list)` method for some parts. If you don't like them, I can revert it quickly."
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Hello, It took some time because  I think your suggested names for the methods sounds awkward. In other methods, cell stands only for the locations of cell. So, I decided to use `map_region` word instead. Unfortunately, I couldn't find a way to keep `setConvexPolygonCost` method optimized. But if you want, I can revert it(`setConvexPolygonCost`), which gives rise to keep similar code blocks in the costmap2d class.\r\n\r\nSecondly, I've created the PR about the parameter we added in this PR. [You can find it here.](https://github.com/ros-navigation/docs.nav2.org/pull/640)\r\n\r\nFinally, `restore_outdated_map` depends on `footprint_clearing_enabled`. Is it strictly necessary to check it in dynamic parameter updates?"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "> I couldn't find a way to keep setConvexPolygonCost method optimized. But if you want, I can revert it(setConvexPolygonCost), which gives rise to keep similar code blocks in the costmap2d class.\r\n\r\nIn what way? Is this significantly slower now? \r\n\r\nSomething you can do is in `getMapRegionOccupiedByPolygon`, you don't need the 2x loops. In the first loop where we populate `map_polygon`, you can directly populate the `polygon_map_region` if you simply `getCost` at that point. \r\n\r\n> Finally, restore_outdated_map depends on footprint_clearing_enabled. Is it strictly necessary to check it in dynamic parameter updates?\r\n\r\nThat might be good yes. Only set the dynamic param if `footprint_clearing_enabled_ == true`"
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "> In what way? Is this significantly slower now?\r\n\r\nIn the latest implementation, the vector consists of the pairs instead of only location. so this will increase the storage size of the vector. When we leave `setConvexPolygonCost` as it is, `getMapRegionOccupiedByPolygon` and `setConvexPolygonCost` will have similar code block. That's what i say. But, I did not measure it. It is just my hypothesis. I will measure it and will give feedback.\r\n\r\n> Something you can do is in getMapRegionOccupiedByPolygon, you don't need the 2x loops. In the first loop where we populate map_polygon, you can directly populate the polygon_map_region if you simply getCost at that point.\r\n\r\nWe cannot handle this in the first loop. It's because the first loop only handles the lines of the polygon. To do that, we need to modify `convexFillCells`. Maybe, I can modify `PolygonOutlineCells` class which is passed as action to `bresenham2D` method. On the other hand, I am trying to modify as less method as possible. What is your opinion here?\r\n\r\nBtw, I will apply your feedbacks today.\r\n\r\n\r\n"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "Ok great! \r\n\r\n> We cannot handle this in the first loop. It's because the first loop only handles the lines of the polygon. To do that, we need to modify convexFillCells. Maybe, I can modify PolygonOutlineCells class which is passed as action to bresenham2D method. On the other hand, I am trying to modify as less method as possible. What is your opinion here?\r\n\r\nYou are right, ignore that :smile: "
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Hello, \r\n\r\nI conducted a basic benchmark to measure the effect of our changes. The execution time of my `setConvexPolygonCost` approximatelly is 1.34 times slower than previous one. \r\n\r\nThe mean of the default implementation's execution time :  ~20000ns\r\nThe mean of the new implementation's execution time :  ~27000ns\r\n\r\nYou can take a look at how i conducted [this benchmark](https://gist.github.com/CihatAltiparmak/03a465b72a1c2ce30897266d9a37df2d#file-static_layer-cpp) if you want.\r\n\r\nAs you said, I added checks in dynamic parameter update. But I wanna say that setting `restore_cleared_footprint` as true will change the default behaviour of the software stack. We should either inform the users about this change or set `restore_cleared_footprint` as false in default. \r\n\r\n> You are right, ignore that \ud83d\ude04\r\n\r\nI think let's not ignore that. You know the better one, but it can be opened some follow-up issues for that. I feel like the architecture side turned out little bit bad. Anyway."
    },
    {
        "author": {
            "login": "codecov"
        },
        "body": "## [Codecov](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?dropdown=coverage&src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation) Report\nAttention: Patch coverage is `88.46154%` with `3 lines` in your changes missing coverage. Please review.\n\n| [Files with missing lines](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation) | Patch % | Lines |\n|---|---|---|\n| [nav2\\_costmap\\_2d/plugins/static\\_layer.cpp](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?src=pr&el=tree&filepath=nav2_costmap_2d%2Fplugins%2Fstatic_layer.cpp&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation#diff-bmF2Ml9jb3N0bWFwXzJkL3BsdWdpbnMvc3RhdGljX2xheWVyLmNwcA==) | 72.72% | [3 Missing :warning: ](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation) |\n\n| [Files with missing lines](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?dropdown=coverage&src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation) | Coverage \u0394 | |\n|---|---|---|\n| [...\\_costmap\\_2d/include/nav2\\_costmap\\_2d/costmap\\_2d.hpp](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?src=pr&el=tree&filepath=nav2_costmap_2d%2Finclude%2Fnav2_costmap_2d%2Fcostmap_2d.hpp&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation#diff-bmF2Ml9jb3N0bWFwXzJkL2luY2x1ZGUvbmF2Ml9jb3N0bWFwXzJkL2Nvc3RtYXBfMmQuaHBw) | `100.00% <100.00%> (\u00f8)` | |\n| [...ostmap\\_2d/include/nav2\\_costmap\\_2d/static\\_layer.hpp](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?src=pr&el=tree&filepath=nav2_costmap_2d%2Finclude%2Fnav2_costmap_2d%2Fstatic_layer.hpp&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation#diff-bmF2Ml9jb3N0bWFwXzJkL2luY2x1ZGUvbmF2Ml9jb3N0bWFwXzJkL3N0YXRpY19sYXllci5ocHA=) | `100.00% <\u00f8> (\u00f8)` | |\n| [nav2\\_costmap\\_2d/src/costmap\\_2d.cpp](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?src=pr&el=tree&filepath=nav2_costmap_2d%2Fsrc%2Fcostmap_2d.cpp&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation#diff-bmF2Ml9jb3N0bWFwXzJkL3NyYy9jb3N0bWFwXzJkLmNwcA==) | `88.00% <100.00%> (+0.44%)` | :arrow_up: |\n| [nav2\\_costmap\\_2d/plugins/static\\_layer.cpp](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824?src=pr&el=tree&filepath=nav2_costmap_2d%2Fplugins%2Fstatic_layer.cpp&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation#diff-bmF2Ml9jb3N0bWFwXzJkL3BsdWdpbnMvc3RhdGljX2xheWVyLmNwcA==) | `75.22% <72.72%> (+1.67%)` | :arrow_up: |\n\n... and [7 files with indirect coverage changes](https://app.codecov.io/gh/ros-navigation/navigation2/pull/4824/indirect-changes?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=ros-navigation)\n"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "> But I wanna say that setting restore_cleared_footprint as true will change the default behaviour of the software stack\r\n\r\nI agree, but this is a good thing. The migration guide is the right place for that https://docs.nav2.org/migration/Jazzy.html. You can add in an entry about the new parameter and default value \r\n\r\n\r\n"
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "\r\n\r\n>  The execution time of my setConvexPolygonCost approximatelly is 1.34 times slower than previous one.\r\n\r\nWhat if you reserve in polygon_map_region there as well? I'm guessing most of those are the vector resizings since std::vector initializes with size of 0 and each time it resizes, it doubles and copies things over. For 100, that would remove ~6-7 copies."
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "Seems it speeds up when reserved the vector. But the new rate is ~1.31. I had to wait to get rid of the spikes in the benchmark. \r\n\r\n(I am also trying the 2^7 :) :man_shrugging: )\r\n\r\nThe mean of the new implementation's execution time : ~26500ns\r\n\r\nEDIT: turtlebot occupies 125 cells and I tried 2^7. It is ~25700ns because of allocations."
    },
    {
        "author": {
            "login": "SteveMacenski"
        },
        "body": "What are you measuring, the static layer update time or `setConvexPolygonCost`? We don't actually use `setConvexPolygonCost` in the static layer anymore (only in the obstacle layer now). It might be good to check where that time is coming from so we understand at least. \r\n\r\nBut, it might be worth keeping that version optimized if need be (if measuring `setConvexPolygonCost`). "
    },
    {
        "author": {
            "login": "CihatAltiparmak"
        },
        "body": "> What are you measuring, the static layer update time or setConvexPolygonCost?\r\n\r\nI measured the execution time of the `setConvexPolygonCost`. I have realized that I was benchmarking on balanced mode of the CPU. Instead, I benchmarked on performance mode of CPU. The benchamark results changed significantly. \r\n\r\nThe execution time of `setConvexPolygonCost` (default implementation): ~4000ns\r\nThe execution time of `setConvexPolygonCost` (my latest implementation): ~4350ns\r\n\r\nConsequently, It increases the computational time by ~8%."
    }
]