[
    {
        "title": "fix: input function does not allow tailing spaces"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "this fix #147 \r\n\r\nalso add test case for it\r\n\r\npassed CI can check: https://github.com/yihong0618/pgvector/actions/runs/5209060111"
    },
    {
        "author": {
            "login": "jkatz"
        },
        "body": "This aligns with current PostgreSQL behavior with arrays, e.g.:\r\n\r\n```\r\npostgres=# SELECT '{1   , 2   }'::int[];\r\n int4  \r\n-------\r\n {1,2}\r\n(1 row)\r\n```\r\n\r\nHowever, I'd recommend following the convention that PostgreSQL has with the `array_isspace` function for the character checking (which would have to be reimplemented, as it's static):\r\n\r\nhttps://github.com/postgres/postgres/blob/378d73ef204d0dcbeab834d52478e8cb90578ab7/src/backend/utils/adt/arrayfuncs.c#L438\r\n\r\nHere is an example of how it is used in the `array_in` code:\r\n\r\nhttps://github.com/postgres/postgres/blob/378d73ef204d0dcbeab834d52478e8cb90578ab7/src/backend/utils/adt/arrayfuncs.c#L257"
    },
    {
        "author": {
            "login": "ankane"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ankane"
        },
        "body": "Hi @yihong0618, thanks for reporting and the PR! Looks great. Added a few comments inline (accidentally submitted the first review early)."
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": ""
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": ""
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": ""
    },
    {
        "author": {
            "login": "ankane"
        },
        "body": ""
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": ""
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": "> This aligns with current PostgreSQL behavior with arrays, e.g.:\r\n> \r\n> ```\r\n> postgres=# SELECT '{1   , 2   }'::int[];\r\n>  int4  \r\n> -------\r\n>  {1,2}\r\n> (1 row)\r\n> ```\r\n> \r\n> However, I'd recommend following the convention that PostgreSQL has with the `array_isspace` function for the character checking (which would have to be reimplemented, as it's static):\r\n> \r\n> https://github.com/postgres/postgres/blob/378d73ef204d0dcbeab834d52478e8cb90578ab7/src/backend/utils/adt/arrayfuncs.c#L438\r\n> \r\n> Here is an example of how it is used in the `array_in` code:\r\n> \r\n> https://github.com/postgres/postgres/blob/378d73ef204d0dcbeab834d52478e8cb90578ab7/src/backend/utils/adt/arrayfuncs.c#L257\r\n\r\nthanks will use `array_isspace`\r\n\r\n@jkatz \r\nfixed thanks for the info, and add front  and end spaces support like `pg array` passed CI: https://github.com/yihong0618/pgvector/actions/runs/5217272065"
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": "@ankane thanks very much for the review, the comments has been fixed now, and one CI on ubuntu seems failed, \r\nI am not sure its flaky test will check: https://github.com/yihong0618/pgvector/actions/runs/5217584573/jobs/9417561780  \r\n\r\n---\r\nrerun and passed"
    },
    {
        "author": {
            "login": "ankane"
        },
        "body": "Awesome, big thanks @yihong0618!"
    },
    {
        "author": {
            "login": "yihong0618"
        },
        "body": "@ankane thanks for your great repo~"
    },
    {
        "data": {
            "repository": {
                "issue": {
                    "title": "Input function does not allow tailing spaces",
                    "body": "```\r\n# select '[0.24    ]'::vector(1);\r\nERROR:  invalid input syntax for type vector: \"0.24    ]\"\r\nLINE 1: select '[0.24    ]'::vector(1);\r\n               ^\r\n# select '[0.24]'::vector(1);\r\n vector \r\n--------\r\n [0.24]\r\n(1 row)\r\n```",
                    "state": "CLOSED",
                    "comments": {
                        "nodes": []
                    }
                }
            }
        }
    }
]