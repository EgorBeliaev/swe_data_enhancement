[
    {
        "title": "Add OSM search provider"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "Closes #606 \r\n"
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": ""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": ""
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "I've seen that you are working on a plugin system. Is that affecting what I am doing right now?"
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": "> I've seen that you are working on a plugin system. Is that affecting what I am doing right now?\r\n\r\nI have only superficially reviewed your changes so far, but it shouldn't affect anything. I plan to add a plugin API for every type of search result (app, shortcut, file, calendar event, contact, website, article, and, after your PR is merged, location), but for now I'm focusing on files.\r\nThe important thing is, that we have a generic interface in `:core:base` and that the UI only ever references that interface, no specific implementations of it. That way we can later easily add other implementations for plugins. But at least from what I've seen so far, you have done that correctly."
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "Okay so I'd say this is ready for comments. \r\n\r\nThe UI is still totally botched of course, but I am sure you have some suggestions how to do that anyway. :) It should get my point across what I originally wanted to do:\r\n\r\n- Display a icon specific to `LocationCategory` if set, else use a default icon\r\n- Show the label of the location\r\n- When details are not shown:\r\n  - just display name \r\n  - address\r\n  - distance \r\n  - and if the location is open.\r\n- When details are shown:\r\n  - say until when the location has opened (if applicable) \r\n  - show the next opening day with time (if applicable)\r\n  - show distance with direction\r\n  - (maybe also show address again)\r\n  - show toolbar with icons to launch geo-intent and browser to website (if url is known)\r\n\r\nAdditionally, I still have some UI ideas that could use some debating:\r\n\r\n- [x] Add an Image in the search result when details are shown that displays a static map section, with the location in it's center? This would mean wrapping another API though. ([Mapbox](https://docs.mapbox.com/playground/static/)) And probably one with access tokens.\r\n- [x] Add a small tooltip when opening-hour information is displayed that shows something like \"not accurate? consider changing the entry in OSM\" upon tapping\r\n\r\nApart from the UI, the back-end should be mostly done though.\r\nHowever, remaining questions I have are:\r\n\r\n- [x] the HTTP-client that Retrofit uses does not have timeouts set currently, since Overpass requires quite a long time for queries with high radii (which makes sense, since the area of interest increases with `radius**2`\r\n- [x] whether to save locations to database and add the ability to add the results to favourites. For this to work properly, the OverpassAPI would probably have to be queried independently of the users current location, just with the location ID (which is unique for every node)\r\n- [x] whether to filter the results further (Should we include results that have no information besides coordinates and label)\r\n- [x] whether to use more fallbacks when determining the label of the OsmLocation (there are many tags that could be used potentially)\r\n- [x] whether to sort the location search results by closest to furthest. But since the distances are calculated close to the front-end, the search logic (SearchVM) doesn't know about them. And calculating the distance so early didn't seem right to me.\r\n\r\nAlso, about the issue of adding more web-search providers; What about adding disclaimers to each of them in the settings, stating something like \"Enabling this will send queries to abc.xyz\""
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": "Thanks, I will review/test it tomorrow. As for your questions:\r\n\r\n> Add an Image in the search result when details are shown that displays a static map section, with the location in it's center? This would mean wrapping another API though. ([Mapbox](https://docs.mapbox.com/playground/static/)) And probably one with access tokens.\r\n\r\nMaybe we could grab the correct tile from the OSM tile server? (https://tile.openstreetmap.org/${z}/${x}/${y}.png). Wouldn't be centered, but maybe close enough.\r\n\r\n>Add a small tooltip when opening-hour information is displayed that shows something like \"not accurate? consider changing the entry in OSM\" upon tapping\r\n\r\nThe UI shouldn't assume that the data is from OSM, so it would need to be implemented in a way that is independent from OSM.\r\n\r\n> the HTTP-client that Retrofit uses does not have timeouts set currently, since Overpass requires quite a long time for queries with high radii (which makes sense, since the area of interest increases with radius**2\r\n\r\nwhat order of magnitudes are we talking about? I think the max search radius should be chosen in a way that these timeouts don't happen. Or is that unrealistic?\r\n\r\n> whether to save locations to database and add the ability to add the results to favourites. For this to work properly, the OverpassAPI would probably have to be queried independently of the users current location, just with the location ID (which is unique for every node)\r\n\r\nSerializers / Deserializers shouldn't make network calls. You should store all data that you can't retrieve offline in the database (see Wikipedia and cloud file serializers). However, I see that this isn't optimal either since opening hours might change and users might rely on them to be correct. I have to think this through.\r\n\r\n>whether to filter the results further (Should we include results that have no information besides coordinates and label)\r\n\r\nNeed to test this. Depends on how many of these results are useless.\r\n\r\n> whether to use more fallbacks when determining the label of the OsmLocation (there are many tags that could be used potentially)\r\n\r\nI'd say if we have the data downlonaded anyway, there is no harm in using them? Or are these alternative labels incorrect or misleading?\r\n\r\n> whether to sort the location search results by closest to furthest. But since the distances are calculated close to the front-end, the search logic (SearchVM) doesn't know about them. And calculating the distance so early didn't seem right to me.\r\n\r\nIf we have to calculate them early in order to sort by them, I think it is fine to do so. But does the API not have any options to customize the order when making the request?\r\n"
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "> Maybe we could grab the correct tile from the OSM tile server? ([https://tile.openstreetmap.org/${z}/${x}/${y}.png](https://tile.openstreetmap.org/$%7Bz%7D/$%7Bx%7D/$%7By%7D.png)). Wouldn't be centered, but maybe close enough.\r\n\r\nThat's a good idea! And I think it would also be easier to accomplish. Their [usage policy](https://operations.osmfoundation.org/policies/tiles/) specifies some requiremets though we should obey, e.g. caching some tiles locally as long as their HTTP-header specifies. The question then is how to display an image that was rendered as 256x256 on screen, while remaining legibility of labels.\r\nAlso, we should then start to think about what [zoom level](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Zoom_levels) to use. There are [some examples](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Implementations) how to convert `lat,lon,zoom` to tile indices.\r\n\r\n\r\n> The UI shouldn't assume that the data is from OSM, so it would need to be implemented in a way that is independent from OSM.\r\n\r\nWell, I guess that's object orientation. An easy \"hack\" would be to define some method like `getErrorReportUrl()` in the `Location` interface. For OSM, it would be https://www.openstreetmap.org/fixthemap.\r\n\r\nI really think that this is something we should add, especially when then kvaesitso users will start using the location functionality, as a way to give back to the OSM project.\r\n\r\n\r\n> what order of magnitudes are we talking about? I think the max search radius should be chosen in a way that these timeouts don't happen. Or is that unrealistic?\r\n\r\nAFAIK there are some default values set when constructing a retrofit instance, and currently they seem fine. The latency will probably depend on the current user location, since every node in the radius is matched against the query. Currently in W\u00fcrzburg, I get around 3-4 seconds for radius values higher than 1.5km, which seems to be the sweetspot.\r\n\r\nYou can try how it works at your location.\r\n\r\n\r\n> Serializers / Deserializers shouldn't make network calls. You should store all data that you can't retrieve offline in the database (see Wikipedia and cloud file serializers). However, I see that this isn't optimal either since opening hours might change and users might rely on them to be correct. I have to think this through.\r\n\r\nFor OSM, they return a unique ID that can later be used to query the exact node again, as I understood. If we need to cache the tiles, we should then keep track of what node introduced a new tile anyway (or something alike).\r\n\r\n> I'd say if we have the data downlonaded anyway, there is no harm in using them? Or are these alternative labels incorrect or misleading?\r\n\r\nIt seems like there are no concrete standards for osm data, so some values present under some tag might not necessarily be trying to describe the same thing on a different node under the same tag. Missing information like \"name\" is unusual though, especially for shops and restaurants.\r\n\r\n> If we have to calculate them early in order to sort by them, I think it is fine to do so. But does the API not have any options to customize the order when making the request?\r\n\r\nNo, I couldn't find how to do this with OverpassQL.\r\n\r\n"
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": "> Also, about the issue of adding more web-search providers; What about adding disclaimers to each of them in the settings, stating something like \"Enabling this will send queries to abc.xyz\"\r\n\r\nYes, with a link to OSM's privacy policy.\r\n\r\n> The question then is how to display an image that was rendered as 256x256 on screen, while remaining legibility of labels\r\n\r\nOh true, I didn't consider that. We might need 6 images and stitch them together.\r\n\r\n> AFAIK there are some default values set when constructing a retrofit instance, and currently they seem fine. The latency will probably depend on the current user location, since every node in the radius is matched against the query. Currently in W\u00fcrzburg, I get around 3-4 seconds for radius values higher than 1.5km, which seems to be the sweetspot.\r\n\r\nDo we actually need a timeout? Or can we just cancel the previous request once another one comes in? I think this is what I did in Wikipedia search.\r\n\r\n> Well, I guess that's object orientation. An easy \"hack\" would be to define some method like getErrorReportUrl() in the Location interface. For OSM, it would be https://www.openstreetmap.org/fixthemap.\r\n\r\n> I really think that this is something we should add, especially when then kvaesitso users will start using the location functionality, as a way to give back to the OSM project.\r\n\r\nOkay, agreed.\r\n\r\n> For OSM, they return a unique ID that can later be used to query the exact node again, as I understood. If we need to cache the tiles, we should then keep track of what node introduced a new tile anyway (or something alike).\r\n\r\nWhat for? Shouldn't it be enough to store the URL of the tile and when it expires? And just rely on [Coil's built-in cache mechanism](https://coil-kt.github.io/coil/image_loaders/#caching).\r\n\r\n"
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": "I tested it now, looks good so far. Some things I noticed:\r\n\r\n- the default value for search radius was 0 after I upgraded to this debug build. Seems like a preference migration is missing\r\n- search is pretty slow for 5 km radius, but with 1.5 km it's fine. I'd say we make 1.5 km the default value, and maybe we should add a notice that a greater search radius leads to slower search results\r\n- i think would be better if it would show the complete opening hours, not just the next time it opens\r\n- do you have any idea what this is:\r\n![Screenshot_20231110-130750_Kvaesitso Debug](https://github.com/MM2-0/Kvaesitso/assets/15646950/1a7449c2-3eb3-4ce9-9975-61ce3842475d)\r\nThe numbers seem to be counting down. This only occured for one search result, others were fine. Maybe because it opens in less than an hour?\r\n\r\nI will start working on a design for the UI now."
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "> i think would be better if it would show the complete opening hours, not just the next time it opens\r\n\r\nSure, if things don't get too crowded.\r\n\r\n> The numbers seem to be counting down. This only occured for one search result, others were fine. Maybe because it opens in less than an hour?\r\n\r\nIf the location is closed but opens later on the current day, a \"countdown\" until opening up is displayed.\r\nThe seconds should be left out of course, and the sign should be changed also."
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "I've added some \"live-sorting via distance\" by implementing some callbacks. Do you think this is a good idea? You can test this rather easily in the emulator by changing the gps-location and observing the results reordering themselves.\r\n\r\nIf we choose to stick with this, there are two more issues to consider:\r\n- [x] how to order the location results, if the best match (determined deeper in the backend by SearchVM) is also a location result. I've implemented it such that this best match gets shown first anyway, even if there is a result that has a lower distance.\r\n- [x] add some animation when the results reorder themselves, to make it clear to the user (is this possible?)"
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "Backend should be done. Feel free to take a look at the current UI, whether you like the way how I currently show the map tiles. There are a couple of things about it where I am not sure:\r\n- I apply `ColorFilter.tint(MaterialTheme.colorScheme..., BlendMode.Saturation)` to the tiles because otherwise, the map renderer of the default tile instance (tile.openstreetmaps.org) looks out of place. The tint doesn't really make the image look like it is supposed to be there, though. (Especially in darkmode.) Maybe you have a different idea how to do this? For users configuring different tile servers, I left the option to disable this theming in the settings. (Since other tile renderers may fit better into the UI, without any tinting.)\r\n- How to display the opening hours. I still prefer (and will probably implement) this \"Opens in ...\"/\"Open now, until ...\"/\"Open next ... from ...\" summary. Otherwise, I consider just showing the whole table of opening hours \"information dumping\". To consider my usecase, I'd just like to know the next opening hours. If I'm interested, I can still tap the map and then look up the details in my actual maps app. (But that's me, of course.)\r\n- Whether to render the user-location (in it's current form) on the tiles, when the location falls into that area.\r\n- Whether (and how) to highlight the location on the tile map. (otherwise, it is arguably hard to find, especially with tinting.) You will notice that currently, the highlighting \"pulse\" is off center of the actual location center; I've double checked the calculations and there should be no issue in this code. It may be some problem of the tile-server rendering engine, but at this point this is only educated guessing.\r\n- if the dedup-radius of 100 meters is enough, or too much?"
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "Also, I came across this issue using the vertical pager layout:\r\n\r\nhttps://github.com/MM2-0/Kvaesitso/assets/47949835/b3e2bbac-447d-45c9-91f4-8c8c84aa3bd2\r\n\r\nthe search-bar doesn't seem to \"stick\" to the top of the search results properly."
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "What's your status on this? Do you need some input from me?"
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": "> What's your status on this? Do you need some input from me?\r\n\r\nI think I'll take it from here. I will get back to you if I have any questions."
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "Okay so I incorporated the changes that I suggested. \r\nI also added a subscript icon to the location result view when it is in its expanded view that is displayed on non-success. What do you think?\r\n\r\nSince now we discriminate between `UpdateResult.{Success, TemporarilyUnavailable, PermanentlyUnavailable}` it is possible to retry on `TemporarilyUnavailable` -- as the name implies. There is one issue though: `Deferred<T>` does not facilitate retrying; At least I could not find any API enabling me to do so. This way, re-opening a pinned item will not actually execute the deferred block passed to the `DeferredSearchable` again, so we are stuck with the `TemporarilyUnavailable` from its first execution. Do you have a solution for this, from the top of your head?\r\n\r\nWhat about changing `updatedSelf` from `Deferred<UpdateResult<T>>?` to just `(suspend () -> UpdateResult<T>)?`? `updatedSelf.await()` is called in a CouroutineScope right now anyway, isn't it?\r\n\r\nWhether we keep the out-of-date icon or not doesn't change the fact that retrying on a network connection that was offline but might have come online in the meantime is probably the right thing to do.\r\n\r\nMaybe, it would also make sense to show some popup to the user in case we encounter `PermanentlyUnavailable`? Otherwise, I could imagine some issues being opened up here on github saying \"muy fav place iz gone!\".\r\n\r\nAnyway, If you want to make changes yourself again, go ahead."
    },
    {
        "author": {
            "login": "MM2-0"
        },
        "body": "> Since now we discriminate between UpdateResult.{Success, TemporarilyUnavailable, PermanentlyUnavailable} it is possible to retry on TemporarilyUnavailable -- as the name implies. There is one issue though: Deferred<T> does not facilitate retrying; At least I could not find any API enabling me to do so. This way, re-opening a pinned item will not actually execute the deferred block passed to the DeferredSearchable again, so we are stuck with the TemporarilyUnavailable from its first execution. Do you have a solution for this, from the top of your head?\r\n\r\nTrue. Also, we might want to refresh some items again at a later point. After all, searchables can live pretty long (several days), if they are in favorites.\r\n\r\n> What about changing updatedSelf from Deferred<UpdateResult<T>>? to just (suspend () -> UpdateResult<T>)?? updatedSelf.await() is called in a CouroutineScope right now anyway, isn't it?\r\n\r\nIn that case I would make it a regular member function of the interface, not a property. And there's the question of at what level we implement the caching. Do we just leave it to each implementation and let it decide by its own whether and for how long to cache updated data?\r\n\r\n> Maybe, it would also make sense to show some popup to the user in case we encounter PermanentlyUnavailable? Otherwise, I could imagine some issues being opened up here on github saying \"muy fav place iz gone!\".\r\n\r\nMaybe show a toast or something. There are other occurences where this would be helpful as well, for example when someone tries to launch an app or shortcut that is no longer available."
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "> Also, we might want to refresh some items again at a later point. After all, searchables can live pretty long (several days), if they are in favorites.\r\n\r\n> And there's the question of at what level we implement the caching. Do we just leave it to each implementation and let it decide by its own whether and for how long to cache updated data?\r\n\r\nRight now every time the details of a `{Grid, List}Item` are shown, values are refreshed if the closure of `UpdatableSearchable` is not null, and if its `timestamp` is older than one hour. So the whether-to-refresh-or-not logic is kept only in `SearchableItemVM`. \r\n\r\nAlso, I've changed it such that every location created by `updatedSelf` will also have this closure set; In other words: \"descendants\" of deserialized locations will always be able to update themselves.\r\n\r\n> In that case I would make it a regular member function of the interface, not a property.\r\n\r\nI'm pretty sure that we need to capture `osmRepository` of `OsmLocationDeserializer` in a closure since otherwise we would have to inject it into `data class OsmLocation`.\r\n\r\n"
    },
    {
        "author": {
            "login": "shtrophic"
        },
        "body": "Some screenshots of osm search results with varying settings:\r\n\r\n<details>\r\n<summary>General result view</summary>\r\n\r\n![2024-01-27_10:18:06](https://github.com/MM2-0/Kvaesitso/assets/47949835/3c9d8331-40d5-4169-ac78-9f2728f2bd13)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Map view, light mode, unthemed</summary>\r\n\r\n- User location is marked green (altonaer stra\u00dfe) and POI is marked with orange outline, if enabled in settings\r\n- both indicators are pulsating\r\n\r\n![2024-01-27_10:18:19](https://github.com/MM2-0/Kvaesitso/assets/47949835/41ba866a-72ad-4c54-ac61-8113ad26ce80)\r\n\r\n![2024-01-27_10:19:02](https://github.com/MM2-0/Kvaesitso/assets/47949835/9b8c85d0-497a-4d69-aed9-b292df4454aa)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Map view, dark mode, unthemed</summary>\r\n\r\n![2024-01-27_10:20:32](https://github.com/MM2-0/Kvaesitso/assets/47949835/22cd1ae3-93a0-46c3-82cb-c5f6e3f8d3fd)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Map view, light mode, themed</summary>\r\n\r\n![2024-01-27_10:22:28](https://github.com/MM2-0/Kvaesitso/assets/47949835/984fab3b-9217-4dd6-ab9e-577141f66133)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Map view, dark mode, themed</summary>\r\n\r\n![2024-01-27_10:21:17](https://github.com/MM2-0/Kvaesitso/assets/47949835/50447d98-08f1-4e5f-b5c3-72238dfdeb1d)\r\n\r\n</details>\r\n\r\nAny comments on the UI part? Right now, I am not really satisfied with the \"theming\" (when activated), since it really messes up the color palette of the map instead of actually making it look good w.r.t. the current material you theme. But there is only so much you can do with color matrices, and in the end, it is optional and looks fine with some color combinations IMO.\r\n\r\nI keep the option to show user location in order to set the POI into context; Otherwise, it just shows the POI close up with no information on where in a region it is. The map view dynamically redraws its tiles if a closer zoom can be applied.\r\n\r\n"
    },
    {
        "data": {
            "repository": {
                "issue": {
                    "title": "[Feature proposal] Location Search Provider",
                    "body": "I've got an idea for another search provider: maps!\r\n\r\nConsider this use case: I want to get the current opening-hours for my favorite caf\u00e9.\r\nFor this, it would be pretty handy to just enter the name which then displays a short card with information about the place, like name, address and opening hours (and, if it is open at the moment). Additionally, you could display a small static map image that shows the place on the map.\r\n\r\nThe [Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API) provides functionality to query a given string, at a given location, within a given radius.\r\n\r\nConsider this snippet: \r\n\r\n```python\r\nimport requests\r\n\r\n# 1000 meter radius around lat,lon\r\nquery = \"\"\"[out:json];\r\nnode(around:1000,49.792,9.932)[\"name\"~\"pizza\",i];\r\nout;\r\n\"\"\"\r\n\r\nresponse = requests.get(\"https://overpass-api.de/api/interpreter\", params={'data':query})\r\n\r\nelements = response.json()['elements']\r\nfor element in elements:\r\n    tags = element['tags']\r\n    print(tags['name'], tags['addr:street'], tags['addr:housenumber'], tags['opening_hours'])\r\n```\r\n\r\nIt should output something like:\r\n```\r\nPizza Hut Dominikanerplatz 3b Mo-Th 11:30-21:00; Fr,Sa 11:30-22:00; PH,Su 12:00-21:00\r\nPizza King W\u00fcrzburg Eichendorffstra\u00dfe 12 Mo-Sa 11:00-14:00, 17:00-23:00; Su 11:00-23:00\r\nPizza Classico Am Exerzierplatz 6 Mo-Fr 11:00-14:00\r\nPizzamore Eichhornstra\u00dfe 23 Mo-Sa 11:00-21:00; PH,Su off\r\nMain D\u00f6ner & Pizza Theaterstra\u00dfe 4b Mo-Th 10:00-24:00, Fr,Sa 10:00-05:00, PH,Su 12:00-22:00\r\n480grad neapolitan Pizza & Bar Juliuspromenade 16 Mo-Th 17:00-22:00; Fr 17:00-23:00; Sa 13:00-23:00, Su 13:00-22:00\r\n```\r\n\r\nAdditionally, if adding a small static image would contribute to UX, there are services like [Mapbox](https://docs.mapbox.com/playground/static/) that provide an API for that. (And also, a library: https://github.com/mapbox/mapbox-java/) Things like rate-limits with one API-Key probably still have to be figured out then though.\r\n\r\nFinally, a user quick-launching or tapping on the search result could launch an intent that opens up their preferred maps app. (Google Maps, Organic Maps, ...)\r\n\r\nWhat do you think about this?",
                    "state": "CLOSED",
                    "comments": {
                        "nodes": [
                            {
                                "author": {
                                    "login": "MM2-0"
                                },
                                "body": "I'm hesitant as to whether more online services should be added. I think the Wikipedia integration (in its current form) was a mistake. It generates way too many unnecessary requests, and that's neither great for the user's privacy, nor for the operators of these web servers.\r\nOn the other hand, I think it would make a pretty useful feature. So my proposal is this: we add this, but first we need an \"on-demand\" mechanism for online results. A button \"show results from Wikipedia\", \"show results from OSM\". Or maybe even just a single button \"show online results\". Only after a user presses this button, an online search would be performed.\r\n\r\nWould you be interested in implementing this or was this just a proposal?"
                            },
                            {
                                "author": {
                                    "login": "shtrophic"
                                },
                                "body": ">  It generates way too many unnecessary requests\r\n\r\nYeah, Wikipedia is a little random right now.\r\n\r\n> but first we need an \"on-demand\" mechanism for online results. A button \"show results from Wikipedia\", \"show results from OSM\"\r\n\r\nYou mean, instead of the on/off-toggles in the settings? My suggestion would have been to just add another one like \"Wikipedia\", \"Files\", \"Contacts\", and disable it by default.\r\n\r\nDo you think the privacy-concerns are justified with OSM? I mean, it is literally the open alternative to google maps. (Which is even better, because if people complain about the map search results, they can go and either 1. improve their search query, or 2. improve OSM!)\r\n\r\n> Would you be interested in implementing this or was this just a proposal?\r\n\r\nSure, I'll start tinkering with this. There are other search-providers, where I can take some inspiration from, anyway. My plan was to open up a draft PR once stuff can start to be critiqued :)\r\n\r\n"
                            },
                            {
                                "author": {
                                    "login": "MM2-0"
                                },
                                "body": "> You mean, instead of the on/off-toggles in the settings? My suggestion would have been to just add another one like \"Wikipedia\", \"Files\", \"Contacts\", and disable it by default.\r\n\r\nNo, I would leave the toggle there. But instead of always sending a request to Wikipedia and OSM, i would show a button \"load online results\" that users would have to tap to confirm that they intent to make an online search.\r\n\r\n> Do you think the privacy-concerns are justified with OSM? I mean, it is literally the open alternative to google maps. \r\n\r\nWikipedia and OSM certainly are some of the more trustworthy webservices there are out there, but it still feels kinda weird to send all your search requests to an external server, especially when most of the time you just want to filter for an app. Plus these services are funded by donations and with the increasing popularity of this launcher, this could add up to a lot of unnecessary traffic.\r\n\r\nBut don't worry about it for now. I can add that later.\r\n\r\n> Sure, I'll start tinkering with this. There are other search-providers, where I can take some inspiration from, anyway.\r\n\r\nJust make sure that you are working with an up-to-date copy, I did some refactoring in the past week."
                            },
                            {
                                "author": {
                                    "login": "Nitrousoxide"
                                },
                                "body": "> I'm hesitant as to whether more online services should be added. I think the Wikipedia integration (in its current form) was a mistake. It generates way too many unnecessary requests, and that's neither great for the user's privacy, nor for the operators of these web servers. On the other hand, I think it would make a pretty useful feature. So my proposal is this: we add this, but first we need an \"on-demand\" mechanism for online results. A button \"show results from Wikipedia\", \"show results from OSM\". Or maybe even just a single button \"show online results\". Only after a user presses this button, an online search would be performed.\r\n> \r\n> Would you be interested in implementing this or was this just a proposal?\r\n\r\nSomething like DDG's [Bangs](https://duckduckgo.com/bangs) might be useful here too. if you want to avoid cluttering up the UI."
                            },
                            {
                                "author": {
                                    "login": "TheSmilingTurtle"
                                },
                                "body": "> Something like DDG's [Bangs](https://duckduckgo.com/bangs) might be useful here too. if you want to avoid cluttering up the UI.\r\n\r\nI absolutely love this idea, I feel like it solves all the issues with unnecessary results/requests and at the same time superpowers the search bar. "
                            },
                            {
                                "author": {
                                    "login": "MM2-0"
                                },
                                "body": "> > Something like DDG's [Bangs](https://duckduckgo.com/bangs) might be useful here too. if you want to avoid cluttering up the UI.\r\n> \r\n> I absolutely love this idea, I feel like it solves all the issues with unnecessary results/requests and at the same time superpowers the search bar.\r\n\r\nGood idea. For now my solution is a button \"show online results\" that restarts the search process but includes online results, but I'm not very happy with how that adds the need of pressing an extra button (especially since that button would be positioned in or close to the search bar, so pretty far up on the screen).\r\nSo this might be worth pursuing:\r\n- prefix your query with `!` to enable online results in general\r\n- prefix it with type specific prefixes (i.e. `!f` for files) to search only that type (including online results)\r\n\r\nThoughts?"
                            },
                            {
                                "author": {
                                    "login": "Nitrousoxide"
                                },
                                "body": "I like that idea.  having a !help or something like that to give a list of the available commands would be nice too since I'm sure people won't initially remember all the possible ways they could search.\r\n\r\nIt may be helpful as well to flag the new query search type the first time someone does a search in the bar so a new user knows how to find the !help (or whatever) to get the list in the future.\r\n\r\nYou could even integrate quick searches to parts of your app too like !changelog to get the recent updates to the app directly from the search bar, or !ksettings (or whatever) to jump to the settings quickly."
                            },
                            {
                                "author": {
                                    "login": "shtrophic"
                                },
                                "body": "> But I'm not very happy with how that adds the need of pressing an extra button \r\n\r\nYou could argue that switching between keyboard layers for '!' or any special non-letter is also an extra step. To me adding some special character feels like a TUI move.\r\n\r\n> (especially since that button would be positioned in or close to the search bar, so pretty far up on the screen)\r\n\r\nRemember, not everyone has their search bar on the top ;)\r\n\r\nAnyway, shouldn't this issue be about OSM? I think the webservice-search-button discussion warrants another issue.\r\n\r\n"
                            },
                            {
                                "author": {
                                    "login": "MM2-0"
                                },
                                "body": "> Anyway, shouldn't this issue be about OSM? I think the webservice-search-button discussion warrants another issue.\r\n\r\nTrue, I will post my response in the other issue (#675)"
                            },
                            {
                                "author": {
                                    "login": "shtrophic"
                                },
                                "body": "If you run into OSM specific issues in the future, feel free to ping or assign me @MM2-0 \u270c\ud83c\udffc"
                            }
                        ]
                    }
                }
            }
        }
    }
]