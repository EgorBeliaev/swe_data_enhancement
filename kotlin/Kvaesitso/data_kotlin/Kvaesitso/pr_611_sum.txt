### Instructions for OSM Search Provider Implementation

1. **OSM Search Provider Basics:**
   - Implement a search provider using the OpenStreetMap (OSM) API, specifically the Overpass API, to fetch location data based on user queries.

2. **Display Logic and UI Improvements:**
   - Show custom icons specific to `LocationCategory` when displaying results.
   - Conditionally display location details (name, address, distance, and open status) and additional details when expanded (opening hours, next opening day/time, distance with direction, and tool icons).
   - Consider adding a static map image in the search results using Mapbox or similar service, ensure this is optional due to potential API key requirements.
   - Evaluate and potentially implement a small tooltip, particularly for opening hours to suggest users contribute to OSM data accuracy.

3. **Backend and Data Management:**
   - Define outcomes for search result updates with states: `Success`, `TemporarilyUnavailable`, `PermanentlyUnavailable`.
   - Set up a system to retry fetching data if a previous attempt resulted in `TemporarilyUnavailable`.
   - Treat `updatedSelf` as a member function for better caching and refreshing strategy.
   - Store OSM node unique IDs for offline retrieval.

4. **Sorting and Filtering:**
   - Enable sorting location search results by proximity, implement this with existing search result logic.
   - Discuss the merits of filtering out results with minimal data, such as those only having coordinates and labels.
   - Address duplicate results by setting a de-duplication radius, initially suggested at 100 meters.

5. **Search Radius and Performance:**
   - Set a default search radius of 1.5 km, with a notice about performance impact beyond this range.
   - Include logic to handle larger search radii optimally, without degrading performance.

6. **UI Dynamic Elements:**
   - Implement live sorting via distance, and ensure the user is aware of reordering through possible animations.
   - Deal with UI issues like the search bar sticking problem in the vertical pager layout.

7. **Caching and Data Updates:**
   - Employ a refresh strategy for SearchableItems, ensuring accurate and up-to-date information.
   - For potentially unavailable items, consider user notification or retry logic to improve user experience.

### Additional Considerations:
- Develop a mechanism to include disclaimers for web-search providers in the settings to inform users about potential data sharing.
- Address potential UI issues with map theming, especially when switching between light and dark modes, striving for a balance between information visibility and aesthetic integration.
- Integrate options to highlight user and point of interest locations on the map, considering map themes and server render quality. 

Implement the above considerations within the repository to handle current issues and add the new OSM search provider functionalities.