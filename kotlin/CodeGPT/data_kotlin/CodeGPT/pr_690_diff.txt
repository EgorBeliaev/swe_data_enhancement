diff --git a/src/main/java/ee/carlrobert/codegpt/Icons.java b/src/main/java/ee/carlrobert/codegpt/Icons.java
index fb680fac2..ce9e6ed44 100644
--- a/src/main/java/ee/carlrobert/codegpt/Icons.java
+++ b/src/main/java/ee/carlrobert/codegpt/Icons.java
@@ -30,5 +30,9 @@ public final class Icons {
       IconLoader.getIcon("/icons/greenCheckmark.svg", Icons.class);
   public static final Icon SendToTheLeft =
       IconLoader.getIcon("/icons/sendToTheLeft.svg", Icons.class);
+  public static final Icon OpenNewTab =
+      IconLoader.getIcon("/icons/openNewTab.svg", Icons.class);
+  public static final Icon AddFile =
+      IconLoader.getIcon("/icons/addFile.svg", Icons.class);
   public static final Icon StatusBarCompletionInProgress = new AnimatedIcon.Default();
 }
diff --git a/src/main/java/ee/carlrobert/codegpt/actions/IncludeFilesInContextAction.java b/src/main/java/ee/carlrobert/codegpt/actions/IncludeFilesInContextAction.java
index 924d24ec3..d8bb3bc32 100644
--- a/src/main/java/ee/carlrobert/codegpt/actions/IncludeFilesInContextAction.java
+++ b/src/main/java/ee/carlrobert/codegpt/actions/IncludeFilesInContextAction.java
@@ -6,9 +6,9 @@
 import static ee.carlrobert.codegpt.settings.IncludedFilesSettingsState.DEFAULT_REPEATABLE_CONTEXT;
 import static java.lang.String.format;
 
+import com.intellij.icons.AllIcons;
 import com.intellij.openapi.actionSystem.AnAction;
 import com.intellij.openapi.actionSystem.AnActionEvent;
-import com.intellij.openapi.actionSystem.CommonDataKeys;
 import com.intellij.openapi.actionSystem.DataContext;
 import com.intellij.openapi.diagnostic.Logger;
 import com.intellij.openapi.project.Project;
@@ -26,11 +26,11 @@
 import ee.carlrobert.codegpt.CodeGPTBundle;
 import ee.carlrobert.codegpt.CodeGPTKeys;
 import ee.carlrobert.codegpt.EncodingManager;
+import ee.carlrobert.codegpt.Icons;
 import ee.carlrobert.codegpt.ReferencedFile;
 import ee.carlrobert.codegpt.settings.IncludedFilesSettings;
 import ee.carlrobert.codegpt.ui.UIUtil;
 import ee.carlrobert.codegpt.ui.checkbox.FileCheckboxTree;
-import ee.carlrobert.codegpt.ui.checkbox.PsiElementCheckboxTree;
 import ee.carlrobert.codegpt.ui.checkbox.VirtualFileCheckboxTree;
 import ee.carlrobert.codegpt.util.file.FileUtil;
 import java.awt.Dimension;
@@ -49,11 +49,7 @@ public class IncludeFilesInContextAction extends AnAction {
   private static final Logger LOG = Logger.getInstance(IncludeFilesInContextAction.class);
 
   public IncludeFilesInContextAction() {
-    this("action.includeFilesInContext.title");
-  }
-
-  public IncludeFilesInContextAction(String customTitleKey) {
-    super(CodeGPTBundle.get(customTitleKey));
+    super(Icons.AddFile);
   }
 
   @Override
diff --git a/src/main/java/ee/carlrobert/codegpt/actions/editor/CustomPromptAction.java b/src/main/java/ee/carlrobert/codegpt/actions/editor/AskQuestionAction.java
similarity index 92%
rename from src/main/java/ee/carlrobert/codegpt/actions/editor/CustomPromptAction.java
rename to src/main/java/ee/carlrobert/codegpt/actions/editor/AskQuestionAction.java
index 6d00fbd4c..eeaa16c3e 100644
--- a/src/main/java/ee/carlrobert/codegpt/actions/editor/CustomPromptAction.java
+++ b/src/main/java/ee/carlrobert/codegpt/actions/editor/AskQuestionAction.java
@@ -2,7 +2,7 @@
 
 import static java.lang.String.format;
 
-import com.intellij.icons.AllIcons;
+import com.intellij.icons.ExpUiIcons;
 import com.intellij.openapi.editor.Editor;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.ui.DialogWrapper;
@@ -20,13 +20,12 @@
 import javax.swing.SwingUtilities;
 import org.jetbrains.annotations.Nullable;
 
-public class CustomPromptAction extends BaseEditorAction {
+public class AskQuestionAction extends BaseEditorAction {
 
   private static String previousUserPrompt = "";
 
-  CustomPromptAction() {
-    super("Custom Prompt", "Custom prompt description", AllIcons.Actions.Run_anything);
-    EditorActionsUtil.registerAction(this);
+  AskQuestionAction() {
+    super(ExpUiIcons.General.QuestionMark);
   }
 
   @Override
diff --git a/src/main/java/ee/carlrobert/codegpt/actions/editor/BaseEditorAction.java b/src/main/java/ee/carlrobert/codegpt/actions/editor/BaseEditorAction.java
index 8f075ae9b..6fecdf5af 100644
--- a/src/main/java/ee/carlrobert/codegpt/actions/editor/BaseEditorAction.java
+++ b/src/main/java/ee/carlrobert/codegpt/actions/editor/BaseEditorAction.java
@@ -13,6 +13,10 @@
 
 public abstract class BaseEditorAction extends AnAction {
 
+  BaseEditorAction(@Nullable Icon icon) {
+    super(icon);
+  }
+
   BaseEditorAction(
       @Nullable @NlsActions.ActionText String text,
       @Nullable @NlsActions.ActionDescription String description,
diff --git a/src/main/java/ee/carlrobert/codegpt/actions/editor/EditorActionsUtil.java b/src/main/java/ee/carlrobert/codegpt/actions/editor/EditorActionsUtil.java
index 58e3c60d9..096844585 100644
--- a/src/main/java/ee/carlrobert/codegpt/actions/editor/EditorActionsUtil.java
+++ b/src/main/java/ee/carlrobert/codegpt/actions/editor/EditorActionsUtil.java
@@ -43,14 +43,9 @@ public static String[][] toArray(Map<String, String> actionsMap) {
 
   public static void refreshActions() {
     AnAction actionGroup =
-        ActionManager.getInstance().getAction("action.editor.group.EditorActionGroup");
+        ActionManager.getInstance().getAction("CodeGPT.MyEditorActionsGroup");
     if (actionGroup instanceof DefaultActionGroup group) {
       group.removeAll();
-      group.add(new AskAction());
-      group.add(new EditCodeAction(Actions.EditSource));
-      group.add(new CustomPromptAction());
-      group.addSeparator();
-
       var configuredActions = ConfigurationSettings.getState().getTableData();
       configuredActions.forEach((label, prompt) -> {
         // using label as action description to prevent com.intellij.diagnostic.PluginException
@@ -77,8 +72,6 @@ protected void actionPerformed(Project project, Editor editor, String selectedTe
         };
         group.add(action);
       });
-      group.addSeparator();
-      group.add(new IncludeFilesInContextAction("action.includeFileInContext.title"));
     }
   }
 
diff --git a/src/main/java/ee/carlrobert/codegpt/actions/editor/AskAction.java b/src/main/java/ee/carlrobert/codegpt/actions/editor/OpenNewChatAction.java
similarity index 90%
rename from src/main/java/ee/carlrobert/codegpt/actions/editor/AskAction.java
rename to src/main/java/ee/carlrobert/codegpt/actions/editor/OpenNewChatAction.java
index b83f4b888..1a5c283d0 100644
--- a/src/main/java/ee/carlrobert/codegpt/actions/editor/AskAction.java
+++ b/src/main/java/ee/carlrobert/codegpt/actions/editor/OpenNewChatAction.java
@@ -8,10 +8,10 @@
 import ee.carlrobert.codegpt.toolwindow.chat.ChatToolWindowContentManager;
 import org.jetbrains.annotations.NotNull;
 
-public class AskAction extends AnAction {
+public class OpenNewChatAction extends AnAction {
 
-  public AskAction() {
-    super("New Chat", "Chat with CodeGPT", Icons.Sparkle);
+  public OpenNewChatAction() {
+    super(Icons.OpenNewTab);
     EditorActionsUtil.registerAction(this);
   }
 
diff --git a/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowContentManager.java b/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowContentManager.java
index c1f265f01..0dcab1fa2 100644
--- a/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowContentManager.java
+++ b/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowContentManager.java
@@ -50,6 +50,10 @@ public void sendMessage(Message message, ConversationType conversationType) {
         .sendMessage(message, conversationType);
   }
 
+  public Optional<ChatToolWindowTabPanel> tryFindActiveChatTabPanel() {
+    return tryFindChatTabbedPane().flatMap(ChatToolWindowTabbedPane::tryFindActiveTabPanel);
+  }
+
   public void displayConversation(@NotNull Conversation conversation) {
     displayChatTab();
     tryFindChatTabbedPane()
diff --git a/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowTabPanel.java b/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowTabPanel.java
index 108958628..94e5d3152 100644
--- a/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowTabPanel.java
+++ b/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/ChatToolWindowTabPanel.java
@@ -7,6 +7,8 @@
 import com.intellij.openapi.Disposable;
 import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.diagnostic.Logger;
+import com.intellij.openapi.editor.Editor;
+import com.intellij.openapi.editor.SelectionModel;
 import com.intellij.openapi.project.Project;
 import com.intellij.ui.JBColor;
 import com.intellij.util.ui.JBUI;
@@ -30,6 +32,8 @@
 import ee.carlrobert.codegpt.toolwindow.ui.ChatToolWindowLandingPanel;
 import ee.carlrobert.codegpt.ui.OverlayUtil;
 import ee.carlrobert.codegpt.ui.textarea.AppliedActionInlay;
+import ee.carlrobert.codegpt.ui.textarea.AppliedCodeActionInlay;
+import ee.carlrobert.codegpt.ui.textarea.AppliedSuggestionActionInlay;
 import ee.carlrobert.codegpt.ui.textarea.UserInputPanel;
 import ee.carlrobert.codegpt.ui.textarea.suggestion.item.CreateDocumentationActionItem;
 import ee.carlrobert.codegpt.ui.textarea.suggestion.item.DocumentationActionItem;
@@ -266,7 +270,7 @@ public void handleTokensExceededPolicyAccepted() {
     requestHandler.call(callParameters);
   }
 
-  private Unit handleSubmit(String text, List<AppliedActionInlay> appliedInlayActions) {
+  private Unit handleSubmit(String text, List<? extends AppliedActionInlay> appliedInlayActions) {
     var message = new Message(text);
     var editor = EditorUtil.getSelectedEditor(project);
     String highlightedText = null;
@@ -281,28 +285,107 @@ private Unit handleSubmit(String text, List<AppliedActionInlay> appliedInlayActi
       }
     }
     message.setUserMessage(text);
-    message.setWebSearchIncluded(appliedInlayActions.stream()
-        .anyMatch(it -> it.getSuggestion() instanceof WebSearchActionItem));
+    processAppliedInlayActions(message, appliedInlayActions, text, editor);
+    sendMessage(message, ConversationType.DEFAULT, highlightedText);
+    return Unit.INSTANCE;
+  }
 
+  private void processAppliedInlayActions(
+      Message message,
+      List<? extends AppliedActionInlay> appliedInlayActions,
+      String text,
+      Editor editor) {
+    for (var action : appliedInlayActions) {
+      if (action instanceof AppliedSuggestionActionInlay) {
+        processSuggestionActions(
+            message,
+            filterActions(appliedInlayActions, AppliedSuggestionActionInlay.class));
+      } else if (action instanceof AppliedCodeActionInlay) {
+        processCodeActions(
+            message,
+            filterActions(appliedInlayActions, AppliedCodeActionInlay.class),
+            text,
+            editor);
+      }
+    }
+  }
+
+  private <T extends AppliedActionInlay> List<T> filterActions(
+      List<? extends AppliedActionInlay> actions,
+      Class<T> actionClass) {
+    return actions.stream()
+        .filter(actionClass::isInstance)
+        .map(actionClass::cast)
+        .toList();
+  }
+
+  private boolean containsWebSearchActionInlay(List<AppliedSuggestionActionInlay> actions) {
+    return actions.stream().anyMatch(it -> it.getSuggestion() instanceof WebSearchActionItem);
+  }
+
+  private void processSuggestionActions(
+      Message message,
+      List<AppliedSuggestionActionInlay> actions) {
+    message.setWebSearchIncluded(containsWebSearchActionInlay(actions));
+    processDocumentationAction(message, actions);
+    processPersonaAction(message, actions);
+  }
+
+  private void processDocumentationAction(
+      Message message,
+      List<AppliedSuggestionActionInlay> actions) {
     var addedDocumentation = CodeGPTKeys.ADDED_DOCUMENTATION.get(project);
-    var appliedInlayExists = appliedInlayActions.stream()
-        .anyMatch(it -> it.getSuggestion() instanceof DocumentationActionItem
-            || it.getSuggestion() instanceof CreateDocumentationActionItem);
+    var appliedInlayExists = actions.stream().anyMatch(it -> {
+      var suggestion = it.getSuggestion();
+      return suggestion instanceof DocumentationActionItem
+          || suggestion instanceof CreateDocumentationActionItem;
+    });
+
     if (addedDocumentation != null && appliedInlayExists) {
       message.setDocumentationDetails(addedDocumentation);
       CodeGPTKeys.ADDED_DOCUMENTATION.set(project, null);
     }
+  }
 
+  private void processPersonaAction(Message message, List<AppliedSuggestionActionInlay> actions) {
     var addedPersona = CodeGPTKeys.ADDED_PERSONA.get(project);
-    var personaInlayExists = appliedInlayActions.stream()
+    var personaInlayExists = actions.stream()
         .anyMatch(it -> it.getSuggestion() instanceof PersonaActionItem);
+
     if (addedPersona != null && personaInlayExists) {
       message.setPersonaDetails(addedPersona);
       CodeGPTKeys.ADDED_PERSONA.set(project, null);
     }
+  }
 
-    sendMessage(message, ConversationType.DEFAULT, highlightedText);
-    return Unit.INSTANCE;
+  private void processCodeActions(Message message, List<AppliedCodeActionInlay> actions,
+      String text, Editor editor) {
+    var stringBuilder = new StringBuilder(text);
+    var resultStringBuilder = new StringBuilder();
+    int lastProcessedIndex = 0;
+
+    for (var actionInlay : actions) {
+      var inlayOffset = actionInlay.getInlay().getOffset();
+      var fileExtension = FileUtil.getFileExtension(editor.getVirtualFile().getName());
+
+      resultStringBuilder
+          .append(stringBuilder, lastProcessedIndex, Math.min(stringBuilder.length(), inlayOffset))
+          .append('\n')
+          .append(formatCodeBlock(fileExtension, actionInlay.getCode()))
+          .append('\n');
+
+      lastProcessedIndex = inlayOffset;
+    }
+
+    resultStringBuilder.append(stringBuilder, lastProcessedIndex, stringBuilder.length());
+
+    var result = resultStringBuilder.toString();
+    message.setUserMessage(result);
+    message.setPrompt(result);
+  }
+
+  private String formatCodeBlock(String fileExtension, String code) {
+    return String.format("```%s\n%s\n```", fileExtension, code);
   }
 
   private Unit handleCancel() {
@@ -375,4 +458,8 @@ private JPanel createRootPanel() {
     rootPanel.add(createUserPromptPanel(), BorderLayout.SOUTH);
     return rootPanel;
   }
+
+  public void addSelection(String fileName, SelectionModel selectionModel) {
+    userInputPanel.addSelection(fileName, selectionModel);
+  }
 }
diff --git a/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/editor/ResponseEditorPanel.java b/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/editor/ResponseEditorPanel.java
index f259ddf0a..6e7643e4e 100644
--- a/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/editor/ResponseEditorPanel.java
+++ b/src/main/java/ee/carlrobert/codegpt/toolwindow/chat/editor/ResponseEditorPanel.java
@@ -133,19 +133,21 @@ private void configureEditor(
     editorEx.setVerticalScrollbarVisible(false);
     editorEx.getContentComponent().setBorder(JBUI.Borders.emptyLeft(4));
     editorEx.setBorder(IdeBorderFactory.createBorder(ColorUtil.fromHex("#48494b")));
-    editorEx.setPermanentHeaderComponent(createHeaderComponent(editorEx, extension));
+    editorEx.setPermanentHeaderComponent(createHeaderComponent(editorEx, extension, readOnly));
     editorEx.setHeaderComponent(null);
   }
 
-  private JPanel createHeaderComponent(EditorEx editorEx, String extension) {
+  private JPanel createHeaderComponent(EditorEx editorEx, String extension, boolean readOnly) {
     var headerComponent = new JPanel(new BorderLayout());
     headerComponent.setBorder(
         JBUI.Borders.compound(
             JBUI.Borders.customLine(ColorUtil.fromHex("#48494b"), 1, 1, 0, 1),
             JBUI.Borders.empty(4)));
     headerComponent.add(createExpandLink(editorEx), BorderLayout.LINE_START);
-    headerComponent.add(createHeaderActions(extension, editorEx).getComponent(),
-        BorderLayout.LINE_END);
+    if (!readOnly) {
+      headerComponent.add(
+          createHeaderActions(extension, editorEx).getComponent(), BorderLayout.LINE_END);
+    }
     return headerComponent;
   }
 
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/AddSelectionToContextAction.kt b/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/AddSelectionToContextAction.kt
new file mode 100644
index 000000000..463423096
--- /dev/null
+++ b/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/AddSelectionToContextAction.kt
@@ -0,0 +1,18 @@
+package ee.carlrobert.codegpt.actions.editor
+
+import com.intellij.icons.AllIcons
+import com.intellij.openapi.components.service
+import com.intellij.openapi.editor.Editor
+import com.intellij.openapi.project.Project
+import ee.carlrobert.codegpt.toolwindow.chat.ChatToolWindowContentManager
+
+class AddSelectionToContextAction : BaseEditorAction(AllIcons.General.Add) {
+
+    override fun actionPerformed(project: Project, editor: Editor, selectedText: String) {
+        val chatToolWindowContentManager = project.service<ChatToolWindowContentManager>()
+        val chatTabPanel = chatToolWindowContentManager
+            .tryFindActiveChatTabPanel()
+            .orElseThrow()
+        chatTabPanel.addSelection(editor.virtualFile.name, editor.selectionModel)
+    }
+}
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/EditCodeAction.kt b/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/EditCodeAction.kt
index 4c9220e77..acbfa3305 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/EditCodeAction.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/actions/editor/EditCodeAction.kt
@@ -1,36 +1,12 @@
 package ee.carlrobert.codegpt.actions.editor
 
-import com.intellij.openapi.actionSystem.CustomShortcutSet
 import com.intellij.openapi.application.runInEdt
 import com.intellij.openapi.editor.Editor
 import com.intellij.openapi.project.Project
 import ee.carlrobert.codegpt.Icons
 import ee.carlrobert.codegpt.ui.EditCodePopover
-import java.awt.event.InputEvent
-import java.awt.event.KeyEvent
-import javax.swing.Icon
-import javax.swing.KeyStroke
-
-class EditCodeAction : BaseEditorAction {
-
-    constructor() : this(Icons.Sparkle)
-
-    constructor(icon: Icon) : super(
-        "Edit Code",
-        "Allow LLM to edit code directly in your editor",
-        icon
-    ) {
-        registerCustomShortcutSet(
-            CustomShortcutSet(
-                KeyStroke.getKeyStroke(
-                    KeyEvent.VK_E,
-                    InputEvent.SHIFT_DOWN_MASK or InputEvent.META_DOWN_MASK
-                )
-            ), null
-        )
-        EditorActionsUtil.registerAction(this)
-    }
 
+class EditCodeAction : BaseEditorAction(Icons.Sparkle) {
     override fun actionPerformed(project: Project, editor: Editor, selectedText: String) {
         runInEdt {
             EditCodePopover(editor).show()
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/CodePreviewTooltipContent.kt b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/CodePreviewTooltipContent.kt
new file mode 100644
index 000000000..bccfdac8e
--- /dev/null
+++ b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/CodePreviewTooltipContent.kt
@@ -0,0 +1,100 @@
+package ee.carlrobert.codegpt.ui.textarea
+
+import com.intellij.openapi.application.PathManager
+import com.intellij.openapi.application.runUndoTransparentWriteAction
+import com.intellij.openapi.components.service
+import com.intellij.openapi.editor.Document
+import com.intellij.openapi.editor.EditorFactory
+import com.intellij.openapi.editor.colors.EditorColorsManager
+import com.intellij.openapi.editor.ex.EditorEx
+import com.intellij.openapi.fileEditor.FileDocumentManager
+import com.intellij.openapi.fileTypes.FileTypeManager
+import com.intellij.openapi.project.Project
+import com.intellij.testFramework.LightVirtualFile
+import com.intellij.ui.JBColor
+import ee.carlrobert.codegpt.settings.configuration.ConfigurationSettings
+import ee.carlrobert.codegpt.util.EditorUtil.reformatDocument
+import java.awt.BorderLayout
+import java.awt.Dimension
+import java.time.LocalDateTime
+import java.time.format.DateTimeFormatter
+import javax.swing.JComponent
+import javax.swing.JPanel
+
+class CodePreviewTooltipContent(
+    private val project: Project,
+    fileName: String,
+    fileContent: String
+) : JPanel() {
+
+    private val fileType = service<FileTypeManager>().getFileTypeByFileName(fileName)
+    private val editor: EditorEx
+
+    init {
+        layout = BorderLayout()
+        background = JBColor.background()
+
+        val document = createDocument(fileName, fileContent)
+        editor = createEditor(document)
+
+        add(editor.component, BorderLayout.CENTER)
+
+        // TODO
+        val minHeight = 80
+        val contentHeight = calculateContentHeight(editor) + 56 // Popup header height?
+        val editorHeight = maxOf(minHeight, contentHeight)
+
+        preferredSize = Dimension(400, editorHeight)
+    }
+
+    fun getFocusableComponent(): JComponent {
+        return editor.component
+    }
+
+    private fun createEditor(document: Document): EditorEx {
+        val editor =
+            (service<EditorFactory>()
+                .createEditor(document, project, fileType, true) as EditorEx)
+                .apply {
+                    colorsScheme = EditorColorsManager.getInstance().schemeForCurrentUITheme
+                    setVerticalScrollbarVisible(true)
+                    setHorizontalScrollbarVisible(true)
+                    settings.apply {
+                        isLineNumbersShown = false
+                        isLineMarkerAreaShown = false
+                        isFoldingOutlineShown = false
+                        additionalColumnsCount = 0
+                        additionalLinesCount = 0
+                        isRightMarginShown = false
+                        isShowIntentionBulb = false
+                        setGutterIconsShown(false)
+                    }
+                }
+
+        if (service<ConfigurationSettings>().state.autoFormattingEnabled) {
+            runUndoTransparentWriteAction {
+                reformatDocument(project, document, 0, document.textLength)
+            }
+        }
+
+        return editor
+    }
+
+    private fun calculateContentHeight(editor: EditorEx): Int {
+        return editor.lineHeight * editor.document.lineCount
+    }
+
+    fun dispose() {
+        service<EditorFactory>().releaseEditor(editor)
+    }
+
+    private fun createDocument(fileName: String, fileContent: String): Document {
+        val timestamp = DateTimeFormatter.ofPattern("yyyyMMddHHmmss").format(LocalDateTime.now())
+        val lightVirtualFile = LightVirtualFile(
+            "${PathManager.getTempPath()}/${timestamp}_$fileName",
+            fileContent
+        )
+        val existingDocument = service<FileDocumentManager>().getDocument(lightVirtualFile)
+        return existingDocument ?: service<EditorFactory>().createDocument(fileContent)
+    }
+}
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextField.kt b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextField.kt
index 7864b3976..d2b1ffad2 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextField.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextField.kt
@@ -27,10 +27,19 @@ import java.awt.event.KeyEvent
 import java.awt.event.MouseEvent
 import java.util.*
 
-data class AppliedActionInlay(
-    val suggestion: SuggestionItem,
-    val inlay: Inlay<PromptTextFieldInlayRenderer?>,
-)
+interface AppliedActionInlay {
+    val inlay: Inlay<PromptTextFieldInlayRenderer?>
+}
+
+data class AppliedSuggestionActionInlay(
+    override val inlay: Inlay<PromptTextFieldInlayRenderer?>,
+    val suggestion: SuggestionItem?,
+) : AppliedActionInlay
+
+data class AppliedCodeActionInlay(
+    override val inlay: Inlay<PromptTextFieldInlayRenderer?>,
+    val code: String
+) : AppliedActionInlay
 
 const val AT_CHAR = '@'
 
@@ -61,28 +70,66 @@ class PromptTextField(
         )
     }
 
-    fun addInlayElement(actionPrefix: String, text: String?, actionItem: SuggestionActionItem) {
+    fun addInlayElement(actionPrefix: String, text: String?, actionItem: SuggestionActionItem?) {
         editor?.let {
             val startOffset = it.document.text.lastIndexOf(AT_CHAR)
             if (startOffset == -1) {
                 throw IllegalStateException("No '@' symbol found in the text")
             }
 
-            runUndoTransparentWriteAction {
-                it.document.deleteString(startOffset, it.document.textLength)
-                it.document.setText(it.document.text + " ")
-                appliedInlays.add(
-                    AppliedActionInlay(
-                        actionItem,
-                        it.inlayModel.addInlineElement(
-                            startOffset,
-                            true,
-                            PromptTextFieldInlayRenderer(actionPrefix, text) { inlay ->
-                                inlay.dispose()
-                            })!!,
-                    )
-                )
-                it.caretModel.moveToOffset(it.document.textLength)
+            addInlayElement(startOffset, actionPrefix, text, actionItem)
+        }
+    }
+
+    fun addInlayElement(
+        actionPrefix: String,
+        text: String,
+        fileName: String? = null,
+        tooltipText: String? = null
+    ) {
+        editor?.let {
+            addInlayElement(
+                it.caretModel.offset,
+                actionPrefix,
+                text,
+                fileName = fileName,
+                tooltipText = tooltipText
+            )
+        }
+    }
+
+    private fun addInlayElement(
+        startOffset: Int,
+        actionPrefix: String,
+        text: String?,
+        actionItem: SuggestionActionItem? = null,
+        fileName: String? = null,
+        tooltipText: String? = null
+    ) {
+        runUndoTransparentWriteAction {
+            document.deleteString(startOffset, document.textLength)
+            document.setText(document.text + " ")
+            val inlay = editor?.inlayModel?.addInlineElement(
+                startOffset,
+                true,
+                PromptTextFieldInlayRenderer(
+                    project,
+                    actionPrefix,
+                    text,
+                    fileName ?: "",
+                    tooltipText
+                ) { inlay ->
+                    appliedInlays.removeIf { appliedInlay -> appliedInlay.inlay == inlay }
+                    inlay.dispose()
+                })
+            if (inlay != null) {
+                // TODO
+                if (tooltipText == null) {
+                    appliedInlays.add(AppliedSuggestionActionInlay(inlay, actionItem))
+                } else {
+                    appliedInlays.add(AppliedCodeActionInlay(inlay, tooltipText))
+                }
+                editor?.caretModel?.moveToOffset(document.textLength)
             }
         }
     }
@@ -102,8 +149,10 @@ class PromptTextField(
     }
 
     private fun clear() {
-        runInEdt { text = "" }
-        clearInlays()
+        runInEdt {
+            text = ""
+            clearInlays()
+        }
     }
 
     private fun clearInlays() {
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextFieldInlayRenderer.kt b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextFieldInlayRenderer.kt
index 8d14e90ab..7be2f76c7 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextFieldInlayRenderer.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/PromptTextFieldInlayRenderer.kt
@@ -12,27 +12,39 @@ import com.intellij.openapi.editor.event.EditorMouseEvent
 import com.intellij.openapi.editor.event.EditorMouseListener
 import com.intellij.openapi.editor.event.EditorMouseMotionListener
 import com.intellij.openapi.editor.markup.TextAttributes
+import com.intellij.openapi.project.Project
+import com.intellij.openapi.ui.popup.JBPopup
+import com.intellij.openapi.ui.popup.JBPopupFactory
 import com.intellij.ui.JBColor
+import com.intellij.ui.awt.RelativePoint
 import com.intellij.util.ui.JBUI
 import java.awt.Cursor
+import java.awt.Dimension
 import java.awt.Graphics2D
+import java.awt.Point
 import java.awt.event.MouseEvent
 import java.awt.geom.Rectangle2D
 
 class PromptTextFieldInlayRenderer(
+    private val project: Project,
     private val actionPrefix: String,
     private val text: String?,
+    private val fileName: String,
+    private val tooltipText: String?,
     private val onClose: (Inlay<*>) -> Unit
 ) : EditorCustomElementRenderer {
 
     private val closeIcon = AllIcons.Actions.Close
+    private val helpIcon = AllIcons.General.ContextHelp
+
+    private var tooltip: JBPopup? = null
 
     override fun calcWidthInPixels(inlay: Inlay<*>): Int {
         val editor = inlay.editor
         val font = editor.colorsScheme.getFont(EditorFontType.PLAIN)
         val textWidth = editor.component.getFontMetrics(font)
             .stringWidth(actionPrefix + (if (text != null) ":$text" else ""))
-        return textWidth + closeIcon.iconWidth + JBUI.scale(10)
+        return textWidth + closeIcon.iconWidth + JBUI.scale(10) + helpIcon.iconWidth + JBUI.scale(10)
     }
 
     override fun paint(
@@ -51,6 +63,9 @@ class PromptTextFieldInlayRenderer(
         drawBorder(g, target)
         drawText(g, target, editor, currentTextAttributes)
         drawCloseIcon(g, target)
+        if (tooltipText != null) {
+            drawHelpIcon(g, target)
+        }
 
         addMouseListeners(editor, inlay, target)
     }
@@ -98,20 +113,90 @@ class PromptTextFieldInlayRenderer(
         closeIcon.paintIcon(null, g, iconX, iconY)
     }
 
+    private fun drawHelpIcon(g: Graphics2D, target: Rectangle2D) {
+        val iconX =
+            (target.x + target.width - closeIcon.iconWidth - helpIcon.iconWidth - JBUI.scale(10)).toInt()
+        val iconY = (target.y + (target.height - helpIcon.iconHeight) / 2).toInt()
+        helpIcon.paintIcon(null, g, iconX, iconY)
+    }
+
+    private fun showTooltip(inlay: Inlay<*>) {
+        if (tooltipText != null) {
+            hideTooltip()
+
+            val tooltipContent = CodePreviewTooltipContent(project, fileName, tooltipText)
+            tooltip = JBPopupFactory.getInstance()
+                .createComponentPopupBuilder(
+                    tooltipContent,
+                    tooltipContent.getFocusableComponent()
+                )
+                .setTitle("Code Preview")
+                .setResizable(true)
+                .setMovable(true)
+                .setStretchToOwnerHeight(true)
+                .setStretchToOwnerWidth(true)
+                .setMinSize(
+                    Dimension(
+                        tooltipContent.preferredSize?.width ?: 240,
+                        (tooltipContent.preferredSize?.height ?: 0)
+                    )
+                )
+                .createPopup()
+            tooltip?.show(
+                RelativePoint(
+                    inlay.editor.contentComponent,
+                    calculatePopupPoint(inlay, tooltipContent)
+                )
+            )
+        }
+    }
+
+    private fun calculatePopupPoint(
+        inlay: Inlay<*>,
+        tooltipContent: CodePreviewTooltipContent
+    ): Point {
+        val visibleArea = inlay.editor.scrollingModel.visibleArea
+        val inlayBounds = inlay.bounds
+        if (inlayBounds != null) {
+            val x = inlayBounds.x
+            val tooltipHeight = tooltipContent.preferredSize?.height ?: 0
+            val y = inlayBounds.y - tooltipHeight
+            return Point(x, y)
+        }
+        return Point(visibleArea.x, visibleArea.y)
+    }
+
+    private fun hideTooltip() {
+        tooltip?.dispose()
+    }
+
     private fun addMouseListeners(editor: Editor, inlay: Inlay<*>, target: Rectangle2D) {
-        fun isWithinIconBounds(e: MouseEvent): Boolean {
-            val iconX = (target.x + target.width - closeIcon.iconWidth - JBUI.scale(5)).toInt()
-            val iconY = (target.y + (target.height - closeIcon.iconHeight) / 2).toInt()
-            return e.x >= iconX && e.x <= iconX + closeIcon.iconWidth &&
-                    e.y >= iconY && e.y <= iconY + closeIcon.iconHeight
+        fun isWithinIconBounds(e: MouseEvent, icon: javax.swing.Icon, offsetX: Int): Boolean {
+            val iconX = when (icon) {
+                closeIcon -> (target.x + target.width - closeIcon.iconWidth - JBUI.scale(5)).toInt()
+                helpIcon -> (target.x + target.width - closeIcon.iconWidth - helpIcon.iconWidth - JBUI.scale(
+                    10
+                )).toInt()
+
+                else -> return false
+            }
+            val iconY = (target.y + (target.height - icon.iconHeight) / 2).toInt()
+            return e.x >= iconX && e.x <= iconX + icon.iconWidth &&
+                    e.y >= iconY && e.y <= iconY + icon.iconHeight
         }
 
-        fun updateCursor(event: MouseEvent, inlay: Inlay<*>) {
+        fun updateCursor(event: EditorMouseEvent, inlay: Inlay<*>) {
             editor.contentComponent.let {
                 if (inlay.isValid) {
                     val inlayBounds = inlay.bounds
-                    if (inlayBounds != null && inlayBounds.contains(event.x, event.y)) {
-                        it.cursor = if (isWithinIconBounds(event)) {
+                    if (inlayBounds != null && inlayBounds.contains(
+                            event.mouseEvent.x,
+                            event.mouseEvent.y
+                        )
+                    ) {
+                        it.cursor = if (isWithinIconBounds(event.mouseEvent, closeIcon, 0) ||
+                            isWithinIconBounds(event.mouseEvent, helpIcon, 0)
+                        ) {
                             Cursor.getPredefinedCursor(Cursor.HAND_CURSOR)
                         } else {
                             Cursor.getDefaultCursor()
@@ -125,15 +210,26 @@ class PromptTextFieldInlayRenderer(
 
         editor.addEditorMouseMotionListener(object : EditorMouseMotionListener {
             override fun mouseMoved(event: EditorMouseEvent) {
-                updateCursor(event.mouseEvent, inlay)
+                updateCursor(event, inlay)
             }
         })
 
         editor.addEditorMouseListener(object : EditorMouseListener {
             override fun mouseClicked(event: EditorMouseEvent) {
-                if (isWithinIconBounds(event.mouseEvent)) {
-                    onClose(inlay)
-                    event.consume()
+                when {
+                    isWithinIconBounds(
+                        event.mouseEvent,
+                        closeIcon,
+                        JBUI.scale(helpIcon.iconWidth + 10)
+                    ) -> {
+                        onClose(inlay)
+                        event.consume()
+                    }
+
+                    isWithinIconBounds(event.mouseEvent, helpIcon, JBUI.scale(5)) -> {
+                        showTooltip(inlay)
+                        event.consume()
+                    }
                 }
             }
         })
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/UserInputPanel.kt b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/UserInputPanel.kt
index 7a46c353e..f28b5b07a 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/UserInputPanel.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/UserInputPanel.kt
@@ -5,6 +5,7 @@ import com.intellij.openapi.actionSystem.ActionPlaces
 import com.intellij.openapi.actionSystem.AnAction
 import com.intellij.openapi.actionSystem.AnActionEvent
 import com.intellij.openapi.components.service
+import com.intellij.openapi.editor.SelectionModel
 import com.intellij.openapi.observable.properties.AtomicBooleanProperty
 import com.intellij.openapi.project.Project
 import com.intellij.ui.components.AnActionLink
@@ -178,4 +179,15 @@ class UserInputPanel(
             else -> false
         }
     }
+
+    fun addSelection(fileName: String, selectionModel: SelectionModel) {
+        promptTextField.addInlayElement(
+            "code",
+            "$fileName (${selectionModel.selectionStartPosition?.line}:${selectionModel.selectionEndPosition?.line})",
+            fileName = fileName,
+            tooltipText = selectionModel.selectedText
+        )
+        promptTextField.requestFocusInWindow()
+        selectionModel.removeSelection()
+    }
 }
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/suggestion/item/SuggestionActionItems.kt b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/suggestion/item/SuggestionActionItems.kt
index 01ee46459..8a0db5fc5 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/suggestion/item/SuggestionActionItems.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/ui/textarea/suggestion/item/SuggestionActionItems.kt
@@ -7,6 +7,7 @@ import com.intellij.openapi.project.Project
 import com.intellij.openapi.vfs.VirtualFile
 import ee.carlrobert.codegpt.CodeGPTBundle
 import ee.carlrobert.codegpt.CodeGPTKeys
+import ee.carlrobert.codegpt.Icons
 import ee.carlrobert.codegpt.settings.GeneralSettings
 import ee.carlrobert.codegpt.settings.documentation.DocumentationSettings
 import ee.carlrobert.codegpt.settings.documentation.DocumentationsConfigurable
diff --git a/src/main/resources/META-INF/plugin.xml b/src/main/resources/META-INF/plugin.xml
index 6e6d2e8df..2022bb180 100644
--- a/src/main/resources/META-INF/plugin.xml
+++ b/src/main/resources/META-INF/plugin.xml
@@ -101,6 +101,43 @@
                 class="com.intellij.openapi.actionSystem.DefaultActionGroup"
                 popup="true"
                 icon="ee.carlrobert.codegpt.Icons.DefaultSmall">
+                <action
+                  id="CodeGPT.NewChat"
+                  class="ee.carlrobert.codegpt.actions.editor.OpenNewChatAction"
+                  text="New Chat"
+                  description="Creates a new chat session">
+                    <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt shift N" replace-all="true"/>
+                </action>
+                <action
+                  id="CodeGPT.AddSelectionToContext"
+                  class="ee.carlrobert.codegpt.actions.editor.AddSelectionToContextAction"
+                  text="Include Selection in Prompt"
+                  description="Adds the selected text to the CodeGPT context">
+                    <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift I" replace-all="true"/>
+                </action>
+                <action
+                  id="CodeGPT.EditCode"
+                  text="Edit Code"
+                  class="ee.carlrobert.codegpt.actions.editor.EditCodeAction">
+                    <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift K" replace-all="true"/>
+                </action>
+                <action
+                  id="CodeGPT.IncludeFileInContext"
+                  text="Include File In Prompt"
+                  class="ee.carlrobert.codegpt.actions.IncludeFilesInContextAction">
+                    <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt shift F" replace-all="true"/>
+                </action>
+                <action
+                  id="CodeGPT.AskQuestion"
+                  text="Ask Question"
+                  class="ee.carlrobert.codegpt.actions.editor.AskQuestionAction">
+                    <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt shift Q" replace-all="true"/>
+                </action>
+                <separator/>
+                <group id="CodeGPT.MyEditorActionsGroup"
+                  text="My Actions"
+                  class="com.intellij.openapi.actionSystem.DefaultActionGroup">
+                </group>
             </group>
             <add-to-group group-id="EditorPopupMenu1" anchor="first"/>
             <separator/>
@@ -118,6 +155,7 @@
               icon="ee.carlrobert.codegpt.Icons.DefaultSmall">
                 <action
                   id="CodeGPT.IncludeFilesInContextAction"
+                  text="Include Files In Prompt"
                   class="ee.carlrobert.codegpt.actions.IncludeFilesInContextAction" />
             </group>
             <add-to-group
@@ -130,7 +168,16 @@
         <group id="CodeGPT.FloatingCodeToolbarMenuRootGroup">
             <action
               id="CodeGPT.ModifySelectionAction"
-              class="ee.carlrobert.codegpt.actions.editor.EditCodeAction" />
+              text="CodeGPT: Edit Code"
+              class="ee.carlrobert.codegpt.actions.editor.EditCodeAction">
+                <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift K" replace-all="true"/>
+            </action>
+            <action
+              id="CodeGPT.AddSelectionToContextAction"
+              text="CodeGPT: Include Selection in Prompt"
+              class="ee.carlrobert.codegpt.actions.editor.AddSelectionToContextAction">
+                <keyboard-shortcut keymap="$default" first-keystroke="ctrl shift I" replace-all="true"/>
+            </action>
             <add-to-group
               group-id="Floating.CodeToolbar"
               relative-to-action="ProjectViewPopupMenuRefactoringGroup"
diff --git a/src/main/resources/icons/addFile.svg b/src/main/resources/icons/addFile.svg
new file mode 100644
index 000000000..c47513163
--- /dev/null
+++ b/src/main/resources/icons/addFile.svg
@@ -0,0 +1,5 @@
+<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->
+<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12.5 9C12.7761 9 13 9.22386 13 9.5V12H15.5C15.7761 12 16 12.2239 16 12.5C16 12.7761 15.7761 13 15.5 13H13V15.5C13 15.7761 12.7761 16 12.5 16C12.2239 16 12 15.7761 12 15.5V13H9.5C9.22386 13 9 12.7761 9 12.5C9 12.2239 9.22386 12 9.5 12H12V9.5C12 9.22386 12.2239 9 12.5 9Z" fill="#3574F0"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M3 13V5.82843C3 5.29799 3.21071 4.78929 3.58579 4.41421L6.41421 1.58579C6.78929 1.21071 7.29799 1 7.82843 1H11C12.1046 1 13 1.89543 13 3V8H12V3C12 2.44772 11.5523 2 11 2H8V4C8 5.10457 7.10457 6 6 6H4V13C4 13.5523 4.44772 14 5 14H8V15H5C3.89543 15 3 14.1046 3 13ZM4.41421 5L7 2.41421V4C7 4.55228 6.55228 5 6 5H4.41421Z" fill="#6C707E"/>
+</svg>
diff --git a/src/main/resources/icons/addFile_dark.svg b/src/main/resources/icons/addFile_dark.svg
new file mode 100644
index 000000000..843fd69c4
--- /dev/null
+++ b/src/main/resources/icons/addFile_dark.svg
@@ -0,0 +1,5 @@
+<!-- Copyright 2000-2024 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->
+<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12.5 9C12.7761 9 13 9.22386 13 9.5V12H15.5C15.7761 12 16 12.2239 16 12.5C16 12.7761 15.7761 13 15.5 13H13V15.5C13 15.7761 12.7761 16 12.5 16C12.2239 16 12 15.7761 12 15.5V13H9.5C9.22386 13 9 12.7761 9 12.5C9 12.2239 9.22386 12 9.5 12H12V9.5C12 9.22386 12.2239 9 12.5 9Z" fill="#548AF7"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M3 13V5.82843C3 5.29799 3.21071 4.78929 3.58579 4.41421L6.41421 1.58579C6.78929 1.21071 7.29799 1 7.82843 1H11C12.1046 1 13 1.89543 13 3V8H12V3C12 2.44772 11.5523 2 11 2H8V4C8 5.10457 7.10457 6 6 6H4V13C4 13.5523 4.44772 14 5 14H8V15H5C3.89543 15 3 14.1046 3 13ZM4.41421 5L7 2.41421V4C7 4.55228 6.55228 5 6 5H4.41421Z" fill="#CED0D6"/>
+</svg>
diff --git a/src/main/resources/icons/openNewTab.svg b/src/main/resources/icons/openNewTab.svg
new file mode 100644
index 000000000..432a9e515
--- /dev/null
+++ b/src/main/resources/icons/openNewTab.svg
@@ -0,0 +1,5 @@
+<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->
+<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M7 3H3C1.89543 3 1 3.89543 1 5V11C1 12.1046 1.89543 13 3 13H11C12.1046 13 13 12.1046 13 11V9H12V11C12 11.5523 11.5523 12 11 12H3C2.44772 12 2 11.5523 2 11V5C2 4.44772 2.44772 4 3 4H7V3Z" fill="#6C707E"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12.5 0C12.2239 0 12 0.223858 12 0.5V3H9.5C9.22386 3 9 3.22386 9 3.5C9 3.77614 9.22386 4 9.5 4H12V6.5C12 6.77614 12.2239 7 12.5 7C12.7761 7 13 6.77614 13 6.5V4H15.5C15.7761 4 16 3.77614 16 3.5C16 3.22386 15.7761 3 15.5 3H13V0.5C13 0.223858 12.7761 0 12.5 0Z" fill="#6C707E"/>
+</svg>
diff --git a/src/main/resources/icons/openNewTab_dark.svg b/src/main/resources/icons/openNewTab_dark.svg
new file mode 100644
index 000000000..cb15080ce
--- /dev/null
+++ b/src/main/resources/icons/openNewTab_dark.svg
@@ -0,0 +1,5 @@
+<!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. -->
+<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M7 3H3C1.89543 3 1 3.89543 1 5V11C1 12.1046 1.89543 13 3 13H11C12.1046 13 13 12.1046 13 11V9H12V11C12 11.5523 11.5523 12 11 12H3C2.44772 12 2 11.5523 2 11V5C2 4.44772 2.44772 4 3 4H7V3Z" fill="#CED0D6"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12.5 0C12.2239 0 12 0.223858 12 0.5V3H9.5C9.22386 3 9 3.22386 9 3.5C9 3.77614 9.22386 4 9.5 4H12V6.5C12 6.77614 12.2239 7 12.5 7C12.7761 7 13 6.77614 13 6.5V4H15.5C15.7761 4 16 3.77614 16 3.5C16 3.22386 15.7761 3 15.5 3H13V0.5C13 0.223858 12.7761 0 12.5 0Z" fill="#CED0D6"/>
+</svg>
