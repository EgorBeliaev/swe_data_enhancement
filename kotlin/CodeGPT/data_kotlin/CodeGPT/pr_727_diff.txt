diff --git a/src/main/kotlin/ee/carlrobert/codegpt/codecompletions/CodeCompletionService.kt b/src/main/kotlin/ee/carlrobert/codegpt/codecompletions/CodeCompletionService.kt
index bf1cf06d7..0c0c686a0 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/codecompletions/CodeCompletionService.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/codecompletions/CodeCompletionService.kt
@@ -17,6 +17,7 @@ import ee.carlrobert.codegpt.settings.service.custom.CustomServiceSettings
 import ee.carlrobert.codegpt.settings.service.llama.LlamaSettings
 import ee.carlrobert.codegpt.settings.service.ollama.OllamaSettings
 import ee.carlrobert.codegpt.settings.service.openai.OpenAISettings
+import ee.carlrobert.llm.client.openai.completion.OpenAIChatCompletionEventSourceListener
 import ee.carlrobert.llm.client.openai.completion.OpenAITextCompletionEventSourceListener
 import ee.carlrobert.llm.completion.CompletionEventListener
 import okhttp3.sse.EventSource
@@ -66,7 +67,11 @@ class CodeCompletionService {
                 CompletionClientProvider.getDefaultClientBuilder().build()
             ).newEventSource(
                 buildCustomRequest(requestDetails),
-                OpenAITextCompletionEventSourceListener(eventListener)
+                if (service<CustomServiceSettings>().state.codeCompletionSettings.parseResponseAsChatCompletions) {
+                    OpenAIChatCompletionEventSourceListener(eventListener)
+                } else {
+                    OpenAITextCompletionEventSourceListener(eventListener)
+                }
             )
 
             OLLAMA -> CompletionClientProvider.getOllamaClient()
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/CustomServiceSettings.kt b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/CustomServiceSettings.kt
index 4666838fe..8e07616d4 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/CustomServiceSettings.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/CustomServiceSettings.kt
@@ -65,6 +65,7 @@ class CustomServiceChatCompletionSettingsState : BaseState() {
 
 class CustomServiceCodeCompletionSettingsState : BaseState() {
     var codeCompletionsEnabled by property(true)
+    var parseResponseAsChatCompletions by property(false)
     var infillTemplate by enum(InfillPromptTemplate.OPENAI)
     var url by string(CustomServiceCodeCompletionTemplate.OPENAI.url)
     var headers by map<String, String>()
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceCodeCompletionForm.kt b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceCodeCompletionForm.kt
index 5a4115708..ec6fd0c52 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceCodeCompletionForm.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceCodeCompletionForm.kt
@@ -39,6 +39,10 @@ class CustomServiceCodeCompletionForm(
         CodeGPTBundle.get("codeCompletionsForm.enableFeatureText"),
         state.codeCompletionsEnabled
     )
+    private val parseResponseAsChatCompletionsCheckBox = JBCheckBox(
+        CodeGPTBundle.get("codeCompletionsForm.parseResponseAsChatCompletions"),
+        state.parseResponseAsChatCompletions
+    )
     private val promptTemplateComboBox =
         ComboBox(EnumComboBoxModel(InfillPromptTemplate::class.java)).apply {
             selectedItem = state.infillTemplate
@@ -65,6 +69,12 @@ class CustomServiceCodeCompletionForm(
             featureEnabledCheckBox.isSelected = enabled
         }
 
+    var parseResponseAsChatCompletions: Boolean
+        get() = parseResponseAsChatCompletionsCheckBox.isSelected
+        set(enabled) {
+            parseResponseAsChatCompletionsCheckBox.isSelected = enabled
+        }
+
     var infillTemplate: InfillPromptTemplate
         get() = promptTemplateComboBox.item
         set(template) {
@@ -94,6 +104,8 @@ class CustomServiceCodeCompletionForm(
             .addVerticalGap(8)
             .addComponent(featureEnabledCheckBox)
             .addVerticalGap(4)
+            .addComponent(parseResponseAsChatCompletionsCheckBox)
+            .addVerticalGap(4)
             .addLabeledComponent(
                 "FIM template:",
                 JPanel(FlowLayout(FlowLayout.LEADING, 0, 0)).apply {
@@ -140,6 +152,7 @@ class CustomServiceCodeCompletionForm(
 
     fun resetForm(settings: CustomServiceCodeCompletionSettingsState) {
         featureEnabledCheckBox.isSelected = settings.codeCompletionsEnabled
+        parseResponseAsChatCompletionsCheckBox.isSelected = settings.parseResponseAsChatCompletions
         promptTemplateComboBox.selectedItem = settings.infillTemplate
         urlField.text = settings.url
         tabbedPane.headers = settings.headers
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceForm.kt b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceForm.kt
index c56d46183..cbeb478b2 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceForm.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/form/CustomServiceForm.kt
@@ -63,6 +63,7 @@ class CustomServiceForm {
                     url = template.codeCompletionTemplate.url
                     headers = template.codeCompletionTemplate.headers
                     body = template.codeCompletionTemplate.body
+                    parseResponseAsChatCompletions = template.codeCompletionTemplate.parseResponseAsChatCompletions
                 }
                 tabbedPane.setEnabledAt(1, true)
             } else {
@@ -102,6 +103,7 @@ class CustomServiceForm {
                 || chatCompletionsForm.headers != chatCompletionSettings.headers
                 || chatCompletionsForm.body != chatCompletionSettings.body
                 || codeCompletionsForm.codeCompletionsEnabled != codeCompletionSettings.codeCompletionsEnabled
+                || codeCompletionsForm.parseResponseAsChatCompletions != codeCompletionSettings.parseResponseAsChatCompletions
                 || codeCompletionsForm.infillTemplate != codeCompletionSettings.infillTemplate
                 || codeCompletionsForm.url != codeCompletionSettings.url
                 || codeCompletionsForm.headers != codeCompletionSettings.headers
@@ -118,6 +120,7 @@ class CustomServiceForm {
             }
             codeCompletionSettings = CustomServiceCodeCompletionSettingsState().apply {
                 codeCompletionsEnabled = codeCompletionsForm.codeCompletionsEnabled
+                parseResponseAsChatCompletions = codeCompletionsForm.parseResponseAsChatCompletions
                 infillTemplate = codeCompletionsForm.infillTemplate
                 url = codeCompletionsForm.url
                 headers = codeCompletionsForm.headers
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceCodeCompletionTemplate.kt b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceCodeCompletionTemplate.kt
index 653caf9a8..7be244e1c 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceCodeCompletionTemplate.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceCodeCompletionTemplate.kt
@@ -3,7 +3,8 @@ package ee.carlrobert.codegpt.settings.service.custom.template
 enum class CustomServiceCodeCompletionTemplate(
     val url: String,
     val headers: MutableMap<String, String>,
-    val body: MutableMap<String, Any>
+    val body: MutableMap<String, Any>,
+    val parseResponseAsChatCompletions: Boolean = false
 ) {
     ANYSCALE(
         "https://api.endpoints.anyscale.com/v1/completions",
@@ -37,6 +38,19 @@ enum class CustomServiceCodeCompletionTemplate(
             "max_tokens" to 24
         )
     ),
+    MISTRAL_AI(
+        "https://api.mistral.ai/v1/fim/completions",
+        getDefaultHeaders("Authorization", "Bearer \$CUSTOM_SERVICE_API_KEY"),
+        mutableMapOf(
+            "stream" to true,
+            "prompt" to "\$PREFIX",
+            "suffix" to "\$SUFFIX",
+            "model" to "codestral-latest",
+            "temperature" to 0.7,
+            "max_tokens" to 1024
+        ),
+        true
+    ),
     TOGETHER(
         "https://api.together.xyz/v1/completions",
         getDefaultHeaders("Authorization", "Bearer \$CUSTOM_SERVICE_API_KEY"),
diff --git a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceTemplate.kt b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceTemplate.kt
index d1dc0b864..86f3e72f0 100644
--- a/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceTemplate.kt
+++ b/src/main/kotlin/ee/carlrobert/codegpt/settings/service/custom/template/CustomServiceTemplate.kt
@@ -65,7 +65,8 @@ enum class CustomServiceTemplate(
     MISTRAL_AI(
         "Mistral AI",
         "https://docs.mistral.ai/getting-started/quickstart",
-        CustomServiceChatCompletionTemplate.MISTRAL_AI
+        CustomServiceChatCompletionTemplate.MISTRAL_AI,
+        CustomServiceCodeCompletionTemplate.MISTRAL_AI
     ),
     OPEN_ROUTER(
         "OpenRouter",
diff --git a/src/main/resources/messages/codegpt.properties b/src/main/resources/messages/codegpt.properties
index 2ba257462..1835ead1a 100644
--- a/src/main/resources/messages/codegpt.properties
+++ b/src/main/resources/messages/codegpt.properties
@@ -240,6 +240,7 @@ shared.image=Image
 shared.chatCompletions=Chat Completions
 shared.codeCompletions=Code Completions
 codeCompletionsForm.enableFeatureText=Enable code completions
+codeCompletionsForm.parseResponseAsChatCompletions=Parse response as Chat Completions
 codeCompletionsForm.maxTokensLabel=Max tokens:
 codeCompletionsForm.maxTokensComment=The maximum number of tokens that will be generated in the code completion.
 editCodePopover.title=Edit Code
