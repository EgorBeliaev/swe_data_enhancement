[
    {
        "title": "Kotlin psi structure for FIM. "
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "I present the concept of collecting a class structure for dependencies. The structure analysis is currently implemented only for Kotlin and works using PSI tree analysis, without using the Kotlin compiler.\r\nThis approach increases the accuracy of prediction for auto-completion of the code.\r\n\r\nIt will also be useful to use the dependency structure collection when adding code to the chat, for more accurate answers.\r\n\r\nFor example, a simple structure of 3 classes is used.\r\n\r\n```\r\npackage org.example.package1\r\n\r\nimport org.example.package2.ClassInPackage2\r\n\r\nclass ClassInPackage1 {\r\n\r\n    fun someMethod1(classInPackage2: ClassInPackage2): String = classInPackage2.someMethod2()\r\n}\r\n```\r\n\r\n```\r\npackage org.example.package2\r\n\r\nclass ClassInPackage2 {\r\n\r\n    fun someMethod2(): String = \"Hello from $this\"\r\n}\r\n```\r\n```\r\n\r\npackage org.example\r\n\r\nimport org.example.package1.ClassInPackage1\r\nimport org.example.package2.ClassInPackage2\r\n\r\nclass Main(\r\n    private val classInPackage1:ClassInPackage1,\r\n    private val classInPackage2:ClassInPackage2,\r\n){\r\n\r\n    fun main() {\r\n        // autocomplete here\r\n        println(classInPackage1.someMethod1(classInPackage2))\r\n    }\r\n}\r\n```\r\n\r\nAs a result of the code analysis, the FIM request is transformed into the following format:\r\n\r\n```\r\n\r\n<|repo_name|>untitled\r\n\r\n<|file_sep|>org.example.Main\r\npackage org.example\r\n\r\nclass Main(private val classInPackage1: org.example.package1.ClassInPackage1, private val classInPackage2: org.example.package2.ClassInPackage2) {\r\n    fun main(): TypeUnknown\r\n}\r\n\r\n<|file_sep|>org.example.package1.ClassInPackage1\r\npackage org.example.package1\r\n\r\nclass ClassInPackage1 {\r\n    fun someMethod1( classInPackage2: org.example.package2.ClassInPackage2): String\r\n}\r\n\r\n<|file_sep|>org.example.package2.ClassInPackage2\r\npackage org.example.package2\r\n\r\nclass ClassInPackage2 {\r\n    fun someMethod2(): String\r\n}\r\nnull<|fim_prefix|> package org.example\r\n\r\nimport org.example.package1.ClassInPackage1\r\nimport org.example.package2.ClassInPackage2\r\n\r\nclass Main(\r\n    private val classInPackage1:ClassInPackage1,\r\n    private val classInPackage2:ClassInPackage2,\r\n){\r\n\r\n    fun main() {\r\n         <|fim_suffix|>\r\n        println(classInPackage1.someMethod1(classInPackage2))\r\n    }\r\n} <|fim_middle|>\r\n\r\n```"
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "In general, I like the fact that we're taking advantage of IntelliJ's PSI tree to extract important information. However, as you can see, it can get quite ugly quickly because you have to analyze the elements/modifiers separately and then put them all back together.\r\n\r\nI think `treesitter` would provide much help in scenarios where you need to query for methods, constructors, imports, package declarations, etc.\r\n\r\nA while ago, I did a POC for a similar feature but didn't proceed with it (can't remember why), but it can give you an idea of what I'm talking about: https://github.com/carlrobertoh/CodeGPT/commit/584a1cc059395d3b12212557e3b1330fcb08f23e#diff-cc18dd78aeb55a5c77b6baed61b6ee1e560828ab872c7e4dbcca94936a8204ecR75"
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": ""
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": ""
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": ""
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "This is cool, many thanks! I'll take a closer look sometime this week."
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": "> This is cool, many thanks! I'll take a closer look sometime this week.\r\n\r\nHaven't been able to watch the Merge request yet?"
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "Sorry, not yet. I'll release the pending stuff first and then take a look."
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": "> In general, I like the fact that we're taking advantage of IntelliJ's PSI tree to extract important information. However, as you can see, it can get quite ugly quickly because you have to analyze the elements/modifiers separately and then put them all back together.\r\n> \r\n> I think `treesitter` would provide much help in scenarios where you need to query for methods, constructors, imports, package declarations, etc.\r\n> \r\n> A while ago, I did a POC for a similar feature but didn't proceed with it (can't remember why), but it can give you an idea of what I'm talking about: [584a1cc#diff-cc18dd78aeb55a5c77b6baed61b6ee1e560828ab872c7e4dbcca94936a8204ecR75](https://github.com/carlrobertoh/CodeGPT/commit/584a1cc059395d3b12212557e3b1330fcb08f23e#diff-cc18dd78aeb55a5c77b6baed61b6ee1e560828ab872c7e4dbcca94936a8204ecR75)\r\n\r\nI looked at the possibility of analyzing using this library. Ultimately, we will have the same limitations as in the current parsing implementation. \r\nWe can say that static analysis is currently being used, which cannot give an accurate code structure for such a complex language as Kotlin, there is no information about the field type in this code:\r\n```Kotlin\r\n    companion object {\r\n        val myField = \"123\"\r\n    }\r\n```\r\n\r\nIf you like this approach, I plan to develop Kotlin analysis by connecting a compiler, which will make it possible to output types of complex constructions and generics.\r\nAs well as support Java, a cross-project with Java-Kotin, Kotlin-Java, and Python dependencies.\r\n\r\nLooking ahead, I have colleagues who can advise me on working with Go, TypeScript, PhP, and JS languages.\r\n\r\n\r\n"
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": "One more question, I wanted to add an analysis of the file structure when working in a chat. Should I do this through the setting or enable it by default?\r\n\r\nIn the next pull request."
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "> I looked at the possibility of analyzing using this library. Ultimately, we will have the same limitations as in the current parsing implementation. We can say that static analysis is currently being used, which cannot give an accurate code structure for such a complex language as Kotlin, there is no information about the field type in this code:\r\n> \r\n> ```kotlin\r\n>     companion object {\r\n>         val myField = \"123\"\r\n>     }\r\n> ```\r\n\r\nNot sure I follow. With proper Kotlin grammar rules, I believe it's possible to extract the necessary types and declarations. However, to correctly resolve declarations for specific references, you need to index the entire codebase first. I believe PSI trees provide an advantage over that, as IntelliJ handles this indexing automatically.\r\n\r\nFor example, you can explore Kotlin's AST structure using the Tree-sitter playground: https://fwcd.github.io/tree-sitter-kotlin/\r\n\r\n> \r\n> If you like this approach, I plan to develop Kotlin analysis by connecting a compiler, which will make it possible to output types of complex constructions and generics. As well as support Java, a cross-project with Java-Kotin, Kotlin-Java, and Python dependencies.\r\n> \r\n> Looking ahead, I have colleagues who can advise me on working with Go, TypeScript, PhP, and JS languages.\r\n\r\nYes, it looks good in general. If we have a clean interface for code analysis and post-processing/serialization, then we can easily replace the underlying logic with something else in later phases (if needed)."
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "> One more question, I wanted to add an analysis of the file structure when working in a chat. Should I do this through the setting or enable it by default?\r\n> \r\n> In the next pull request.\r\n\r\nHmm, how about creating a new chat action tag, similar to how \"Include Open Files\" is done?"
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": "> > One more question, I wanted to add an analysis of the file structure when working in a chat. Should I do this through the setting or enable it by default?\r\n> > In the next pull request.\r\n> \r\n> Hmm, how about creating a new chat action tag, similar to how \"Include Open Files\" is done?\r\n\r\nI think it's a good idea.\r\n\r\nDo I need any more actions for merge pull request?"
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "> Do I need any more actions for merge pull request?\r\n\r\nAre you able to merge the PR? If not, then I might need to configure something."
    },
    {
        "author": {
            "login": "aaudin90"
        },
        "body": "> > Do I need any more actions for merge pull request?\r\n> \r\n> Are you able to merge the PR? If not, then I might need to configure something.\r\n\r\nI can't"
    },
    {
        "author": {
            "login": "carlrobertoh"
        },
        "body": "> > > Do I need any more actions for merge pull request?\r\n> > \r\n> > \r\n> > Are you able to merge the PR? If not, then I might need to configure something.\r\n> \r\n> I can't\r\n\r\nI'll take a look at it later."
    }
]