diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 7c419b16bb..184f8de8ba 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -22,7 +22,7 @@ android {
     defaultConfig {
         applicationId = "xyz.jmir.tachiyomi.mi"
 
-        versionCode = 126
+        versionCode = 127
         versionName = "0.16.4.3"
 
         buildConfigField("String", "COMMIT_COUNT", "\"${getCommitCount()}\"")
@@ -189,6 +189,7 @@ dependencies {
     implementation(androidx.appcompat)
     implementation(androidx.biometricktx)
     implementation(androidx.constraintlayout)
+    implementation(androidx.compose.constraintlayout)
     implementation(androidx.corektx)
     implementation(androidx.splashscreen)
     implementation(androidx.recyclerview)
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 9458212ceb..64579fd7a4 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -193,13 +193,13 @@
         </activity>
         <activity
             android:name=".ui.player.PlayerActivity"
+            android:autoRemoveFromRecents="true"
+            android:configChanges="orientation|screenLayout|screenSize|smallestScreenSize|keyboardHidden|keyboard|uiMode"
+            android:exported="false"
             android:launchMode="singleTask"
-            android:screenOrientation="fullSensor"
-            android:configChanges="orientation|screenLayout|screenSize|smallestScreenSize|keyboardHidden|keyboard"
-            android:supportsPictureInPicture="true"
             android:resizeableActivity="true"
-            android:exported="false"
-            tools:targetApi="n">
+            android:supportsPictureInPicture="true"
+            android:theme="@style/Theme.Tachiyomi">
             <intent-filter>
                 <action android:name="com.samsung.android.support.REMOTE_ACTION" />
             </intent-filter>
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/AdvancedPlayerSettingsScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/AdvancedPlayerSettingsScreen.kt
deleted file mode 100644
index 7c5213c337..0000000000
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/AdvancedPlayerSettingsScreen.kt
+++ /dev/null
@@ -1,87 +0,0 @@
-package eu.kanade.presentation.more.settings.screen
-
-import android.content.Intent
-import android.net.Uri
-import android.os.Build
-import android.os.Environment
-import android.provider.Settings
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.rememberCoroutineScope
-import androidx.compose.ui.platform.LocalContext
-import eu.kanade.presentation.more.settings.Preference
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.viewer.VideoDebanding
-import kotlinx.collections.immutable.toImmutableMap
-import tachiyomi.core.common.i18n.stringResource
-import tachiyomi.i18n.MR
-import uy.kohesive.injekt.Injekt
-import uy.kohesive.injekt.api.get
-
-object AdvancedPlayerSettingsScreen : SearchableSettings {
-    @Composable
-    override fun getTitleRes() = MR.strings.pref_category_player_advanced
-
-    @Composable
-    override fun getPreferences(): List<Preference> {
-        val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
-        val scope = rememberCoroutineScope()
-        val context = LocalContext.current
-        val mpvConf = playerPreferences.mpvConf()
-        val mpvInput = playerPreferences.mpvInput()
-        val subSelectConf = playerPreferences.subSelectConf()
-
-        return listOf(
-            Preference.PreferenceItem.MPVConfPreference(
-                pref = mpvConf,
-                title = context.stringResource(MR.strings.pref_mpv_conf),
-                fileName = "mpv.conf",
-                scope = scope,
-                context = context,
-            ),
-            Preference.PreferenceItem.MPVConfPreference(
-                pref = mpvInput,
-                title = context.stringResource(MR.strings.pref_mpv_input),
-                fileName = "input.conf",
-                scope = scope,
-                context = context,
-            ),
-            Preference.PreferenceItem.MPVConfPreference(
-                pref = subSelectConf,
-                title = context.stringResource(MR.strings.pref_sub_select_conf),
-                scope = scope,
-                context = context,
-            ),
-            Preference.PreferenceItem.SwitchPreference(
-                title = context.stringResource(MR.strings.pref_gpu_next_title),
-                subtitle = context.stringResource(MR.strings.pref_gpu_next_subtitle),
-                pref = playerPreferences.gpuNext(),
-            ),
-            Preference.PreferenceItem.ListPreference(
-                title = context.stringResource(MR.strings.pref_debanding_title),
-                pref = playerPreferences.videoDebanding(),
-                entries = VideoDebanding.entries.associateWith {
-                    context.stringResource(
-                        it.stringRes,
-                    )
-                }.toImmutableMap(),
-            ),
-            Preference.PreferenceItem.SwitchPreference(
-                title = context.stringResource(MR.strings.pref_mpv_scripts),
-                subtitle = context.stringResource(MR.strings.pref_mpv_scripts_summary),
-                pref = playerPreferences.mpvScripts(),
-                onValueChanged = {
-                    // Ask for external storage permission
-                    if (it) {
-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && !Environment.isExternalStorageManager()) {
-                            val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)
-                            intent.data = Uri.fromParts("package", context.packageName, null)
-                            context.startActivity(intent)
-                        }
-                    }
-                    true
-                },
-            ),
-        )
-    }
-}
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/SettingsSearchScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/SettingsSearchScreen.kt
index 62b8522cb5..f7b1c754b0 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/SettingsSearchScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/SettingsSearchScreen.kt
@@ -331,7 +331,6 @@ private val settingScreens = listOf(
     SettingsDataScreen,
     SettingsSecurityScreen,
     SettingsAdvancedScreen,
-    AdvancedPlayerSettingsScreen,
 )
 
 private data class SettingsData(
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAdvancedScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAdvancedScreen.kt
index 29c1dd21b8..4c0e2d7d42 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAdvancedScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAdvancedScreen.kt
@@ -12,7 +12,7 @@ import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.platform.LocalContext
 import eu.kanade.presentation.more.settings.Preference
 import eu.kanade.presentation.more.settings.screen.SearchableSettings
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.AdvancedPlayerPreferences
 import tachiyomi.i18n.MR
 import tachiyomi.presentation.core.i18n.stringResource
 import uy.kohesive.injekt.Injekt
@@ -26,13 +26,13 @@ object PlayerSettingsAdvancedScreen : SearchableSettings {
 
     @Composable
     override fun getPreferences(): List<Preference> {
-        val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+        val advancedPlayerPreferences = remember { Injekt.get<AdvancedPlayerPreferences>() }
         val scope = rememberCoroutineScope()
         val context = LocalContext.current
 
-        val enableScripts = playerPreferences.mpvScripts()
-        val mpvConf = playerPreferences.mpvConf()
-        val mpvInput = playerPreferences.mpvInput()
+        val enableScripts = advancedPlayerPreferences.mpvScripts()
+        val mpvConf = advancedPlayerPreferences.mpvConf()
+        val mpvInput = advancedPlayerPreferences.mpvInput()
 
         return listOf(
             Preference.PreferenceItem.SwitchPreference(
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAudioScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAudioScreen.kt
index 85c3d6dce2..6d1810ab55 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAudioScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsAudioScreen.kt
@@ -6,8 +6,8 @@ import androidx.compose.runtime.getValue
 import androidx.compose.runtime.remember
 import eu.kanade.presentation.more.settings.Preference
 import eu.kanade.presentation.more.settings.screen.SearchableSettings
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.viewer.AudioChannels
+import eu.kanade.tachiyomi.ui.player.settings.AudioChannels
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
 import kotlinx.collections.immutable.toImmutableMap
 import tachiyomi.i18n.MR
 import tachiyomi.presentation.core.i18n.stringResource
@@ -23,15 +23,20 @@ object PlayerSettingsAudioScreen : SearchableSettings {
 
     @Composable
     override fun getPreferences(): List<Preference> {
-        val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+        val audioPreferences = remember { Injekt.get<AudioPreferences>() }
 
-        val prefLangs = playerPreferences.preferredAudioLanguages()
-        val pitchCorrection = playerPreferences.enablePitchCorrection()
-        val audioChannels = playerPreferences.audioChannels()
-        val boostCapPref = playerPreferences.volumeBoostCap()
+        val rememberDelay = audioPreferences.rememberAudioDelay()
+        val prefLangs = audioPreferences.preferredAudioLanguages()
+        val pitchCorrection = audioPreferences.enablePitchCorrection()
+        val audioChannels = audioPreferences.audioChannels()
+        val boostCapPref = audioPreferences.volumeBoostCap()
         val boostCap by boostCapPref.collectAsState()
 
         return listOf(
+            Preference.PreferenceItem.SwitchPreference(
+                pref = rememberDelay,
+                title = stringResource(MR.strings.player_audio_remember_delay),
+            ),
             Preference.PreferenceItem.EditTextInfoPreference(
                 pref = prefLangs,
                 title = stringResource(MR.strings.pref_player_audio_lang),
@@ -46,7 +51,7 @@ object PlayerSettingsAudioScreen : SearchableSettings {
                 pref = audioChannels,
                 title = stringResource(MR.strings.pref_player_audio_channels),
                 entries = AudioChannels.entries.associateWith {
-                    stringResource(it.textRes)
+                    stringResource(it.titleRes)
                 }.toImmutableMap(),
             ),
             Preference.PreferenceItem.SliderPreference(
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsDecoderScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsDecoderScreen.kt
index 95693a8bc2..c33169d5ca 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsDecoderScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsDecoderScreen.kt
@@ -5,8 +5,8 @@ import androidx.compose.runtime.ReadOnlyComposable
 import androidx.compose.runtime.remember
 import eu.kanade.presentation.more.settings.Preference
 import eu.kanade.presentation.more.settings.screen.SearchableSettings
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.viewer.VideoDebanding
+import eu.kanade.tachiyomi.ui.player.Debanding
+import eu.kanade.tachiyomi.ui.player.settings.DecoderPreferences
 import kotlinx.collections.immutable.toImmutableMap
 import tachiyomi.i18n.MR
 import tachiyomi.presentation.core.i18n.stringResource
@@ -21,12 +21,12 @@ object PlayerSettingsDecoderScreen : SearchableSettings {
 
     @Composable
     override fun getPreferences(): List<Preference> {
-        val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+        val decoderPreferences = remember { Injekt.get<DecoderPreferences>() }
 
-        val tryHw = playerPreferences.tryHWDecoding()
-        val useGpuNext = playerPreferences.gpuNext()
-        val debanding = playerPreferences.videoDebanding()
-        val yuv420p = playerPreferences.useYUV420P()
+        val tryHw = decoderPreferences.tryHWDecoding()
+        val useGpuNext = decoderPreferences.gpuNext()
+        val debanding = decoderPreferences.videoDebanding()
+        val yuv420p = decoderPreferences.useYUV420P()
 
         return listOf(
             Preference.PreferenceItem.SwitchPreference(
@@ -41,8 +41,9 @@ object PlayerSettingsDecoderScreen : SearchableSettings {
             Preference.PreferenceItem.ListPreference(
                 pref = debanding,
                 title = stringResource(MR.strings.pref_debanding_title),
-                entries = VideoDebanding.entries.associateWith {
-                    stringResource(it.stringRes)
+                entries = Debanding.entries.associateWith {
+                    it.name
+                    // stringResource(it.)
                 }.toImmutableMap(),
             ),
             Preference.PreferenceItem.SwitchPreference(
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsGesturesScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsGesturesScreen.kt
index 82829d707b..0778f3970e 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsGesturesScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsGesturesScreen.kt
@@ -18,8 +18,8 @@ import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import eu.kanade.presentation.more.settings.Preference
 import eu.kanade.presentation.more.settings.screen.SearchableSettings
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.viewer.SingleActionGesture
+import eu.kanade.tachiyomi.ui.player.SingleActionGesture
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
 import kotlinx.collections.immutable.persistentListOf
 import kotlinx.collections.immutable.persistentMapOf
 import kotlinx.collections.immutable.toImmutableList
@@ -39,23 +39,23 @@ object PlayerSettingsGesturesScreen : SearchableSettings {
 
     @Composable
     override fun getPreferences(): List<Preference> {
-        val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+        val gesturePreferences = remember { Injekt.get<GesturePreferences>() }
 
         return listOf(
-            getSeekingGroup(playerPreferences = playerPreferences),
-            getDoubleTapGroup(playerPreferences = playerPreferences),
-            getMediaControlsGroup(playerPreferences = playerPreferences),
+            getSeekingGroup(gesturePreferences = gesturePreferences),
+            getDoubleTapGroup(gesturePreferences = gesturePreferences),
+            getMediaControlsGroup(gesturePreferences = gesturePreferences),
         )
     }
 
     @Composable
-    private fun getSeekingGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
+    private fun getSeekingGroup(gesturePreferences: GesturePreferences): Preference.PreferenceGroup {
         val scope = rememberCoroutineScope()
-        val enableHorizontalSeekGesture = playerPreferences.gestureHorizontalSeek()
-        val defaultSkipIntroLength by playerPreferences.defaultIntroLength().stateIn(scope).collectAsState()
-        val skipLengthPreference = playerPreferences.skipLengthPreference()
-        val playerSmoothSeek = playerPreferences.playerSmoothSeek()
-        val mediaChapterSeek = playerPreferences.mediaChapterSeek()
+        val enableHorizontalSeekGesture = gesturePreferences.gestureHorizontalSeek()
+        val showSeekbar = gesturePreferences.showSeekBar()
+        val defaultSkipIntroLength by gesturePreferences.defaultIntroLength().stateIn(scope).collectAsState()
+        val skipLengthPreference = gesturePreferences.skipLengthPreference()
+        val playerSmoothSeek = gesturePreferences.playerSmoothSeek()
 
         var showDialog by rememberSaveable { mutableStateOf(false) }
         if (showDialog) {
@@ -63,17 +63,17 @@ object PlayerSettingsGesturesScreen : SearchableSettings {
                 initialSkipIntroLength = defaultSkipIntroLength,
                 onDismissRequest = { showDialog = false },
                 onValueChanged = { skipIntroLength ->
-                    playerPreferences.defaultIntroLength().set(skipIntroLength)
+                    gesturePreferences.defaultIntroLength().set(skipIntroLength)
                     showDialog = false
                 },
             )
         }
 
         // Aniskip
-        val enableAniSkip = playerPreferences.aniSkipEnabled()
-        val enableAutoAniSkip = playerPreferences.autoSkipAniSkip()
-        val enableNetflixAniSkip = playerPreferences.enableNetflixStyleAniSkip()
-        val waitingTimeAniSkip = playerPreferences.waitingTimeAniSkip()
+        val enableAniSkip = gesturePreferences.aniSkipEnabled()
+        val enableAutoAniSkip = gesturePreferences.autoSkipAniSkip()
+        val enableNetflixAniSkip = gesturePreferences.enableNetflixStyleAniSkip()
+        val waitingTimeAniSkip = gesturePreferences.waitingTimeAniSkip()
 
         val isAniSkipEnabled by enableAniSkip.collectAsState()
 
@@ -84,6 +84,10 @@ object PlayerSettingsGesturesScreen : SearchableSettings {
                     pref = enableHorizontalSeekGesture,
                     title = stringResource(MR.strings.enable_horizontal_seek_gesture),
                 ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = showSeekbar,
+                    title = stringResource(MR.strings.pref_show_seekbar),
+                ),
                 Preference.PreferenceItem.TextPreference(
                     title = stringResource(MR.strings.pref_default_intro_length),
                     subtitle = "${defaultSkipIntroLength}s",
@@ -106,11 +110,6 @@ object PlayerSettingsGesturesScreen : SearchableSettings {
                     title = stringResource(MR.strings.pref_player_smooth_seek),
                     subtitle = stringResource(MR.strings.pref_player_smooth_seek_summary),
                 ),
-                Preference.PreferenceItem.SwitchPreference(
-                    pref = mediaChapterSeek,
-                    title = stringResource(MR.strings.pref_media_control_chapter_seeking),
-                    subtitle = stringResource(MR.strings.pref_media_control_chapter_seeking_summary),
-                ),
                 Preference.PreferenceItem.InfoPreference(
                     title = stringResource(MR.strings.pref_category_player_aniskip_info),
                 ),
@@ -146,10 +145,10 @@ object PlayerSettingsGesturesScreen : SearchableSettings {
     }
 
     @Composable
-    private fun getDoubleTapGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
-        val leftDoubleTap = playerPreferences.leftDoubleTapGesture()
-        val centerDoubleTap = playerPreferences.centerDoubleTapGesture()
-        val rightDoubleTap = playerPreferences.rightDoubleTapGesture()
+    private fun getDoubleTapGroup(gesturePreferences: GesturePreferences): Preference.PreferenceGroup {
+        val leftDoubleTap = gesturePreferences.leftDoubleTapGesture()
+        val centerDoubleTap = gesturePreferences.centerDoubleTapGesture()
+        val rightDoubleTap = gesturePreferences.rightDoubleTapGesture()
 
         return Preference.PreferenceGroup(
             title = stringResource(MR.strings.pref_category_double_tap),
@@ -193,10 +192,10 @@ object PlayerSettingsGesturesScreen : SearchableSettings {
     }
 
     @Composable
-    private fun getMediaControlsGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
-        val mediaPrevious = playerPreferences.mediaPreviousGesture()
-        val mediaPlayPause = playerPreferences.mediaPlayPauseGesture()
-        val mediaNext = playerPreferences.mediaNextGesture()
+    private fun getMediaControlsGroup(gesturePreferences: GesturePreferences): Preference.PreferenceGroup {
+        val mediaPrevious = gesturePreferences.mediaPreviousGesture()
+        val mediaPlayPause = gesturePreferences.mediaPlayPauseGesture()
+        val mediaNext = gesturePreferences.mediaNextGesture()
 
         return Preference.PreferenceGroup(
             title = stringResource(MR.strings.pref_category_media_controls),
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsPlayerScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsPlayerScreen.kt
index cbd1ce3399..8a438faf7c 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsPlayerScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsPlayerScreen.kt
@@ -1,6 +1,5 @@
 package eu.kanade.presentation.more.settings.screen.player
 
-import android.content.pm.ActivityInfo
 import android.os.Build
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.ReadOnlyComposable
@@ -18,6 +17,7 @@ import eu.kanade.tachiyomi.ui.player.MX_PLAYER
 import eu.kanade.tachiyomi.ui.player.MX_PLAYER_FREE
 import eu.kanade.tachiyomi.ui.player.MX_PLAYER_PRO
 import eu.kanade.tachiyomi.ui.player.NEXT_PLAYER
+import eu.kanade.tachiyomi.ui.player.PlayerOrientation
 import eu.kanade.tachiyomi.ui.player.VLC_PLAYER
 import eu.kanade.tachiyomi.ui.player.WEB_VIDEO_CASTER
 import eu.kanade.tachiyomi.ui.player.X_PLAYER
@@ -30,6 +30,7 @@ import tachiyomi.presentation.core.i18n.stringResource
 import tachiyomi.presentation.core.util.collectAsState
 import uy.kohesive.injekt.Injekt
 import uy.kohesive.injekt.api.get
+import java.text.NumberFormat
 
 object PlayerSettingsPlayerScreen : SearchableSettings {
 
@@ -61,17 +62,15 @@ object PlayerSettingsPlayerScreen : SearchableSettings {
                 pref = playerPreferences.preserveWatchingPosition(),
                 title = stringResource(MR.strings.pref_preserve_watching_position),
             ),
-            Preference.PreferenceItem.SwitchPreference(
-                pref = playerPreferences.playerFullscreen(),
-                title = stringResource(MR.strings.pref_player_fullscreen),
-                enabled = Build.VERSION.SDK_INT >= Build.VERSION_CODES.P,
-            ),
-            Preference.PreferenceItem.SwitchPreference(
-                pref = playerPreferences.hideControls(),
-                title = stringResource(MR.strings.pref_player_hide_controls),
+            Preference.PreferenceItem.ListPreference(
+                pref = playerPreferences.defaultPlayerOrientationType(),
+                title = stringResource(MR.strings.pref_category_player_orientation),
+                entries = PlayerOrientation.entries.associateWith {
+                    stringResource(it.titleRes)
+                }.toPersistentMap(),
             ),
-            getVolumeAndBrightnessGroup(playerPreferences = playerPreferences),
-            getOrientationGroup(playerPreferences = playerPreferences),
+            getControlsGroup(playerPreferences = playerPreferences),
+            getDisplayGroup(playerPreferences = playerPreferences),
             if (deviceSupportsPip) getPipGroup(playerPreferences = playerPreferences) else null,
             getExternalPlayerGroup(
                 playerPreferences = playerPreferences,
@@ -81,18 +80,44 @@ object PlayerSettingsPlayerScreen : SearchableSettings {
     }
 
     @Composable
-    private fun getVolumeAndBrightnessGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
+    private fun getControlsGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
+        val allowGestures = playerPreferences.allowGestures()
+        val displayVol = playerPreferences.displayVolPer()
+        val swapVol = playerPreferences.swapVolumeBrightness()
+        val showLoading = playerPreferences.showLoadingCircle()
+        val showChapter = playerPreferences.showCurrentChapter()
         val enableVolumeBrightnessGestures = playerPreferences.gestureVolumeBrightness()
         val rememberPlayerBrightness = playerPreferences.rememberPlayerBrightness()
         val rememberPlayerVolume = playerPreferences.rememberPlayerVolume()
 
         return Preference.PreferenceGroup(
-            title = stringResource(MR.strings.pref_category_volume_brightness),
+            title = stringResource(MR.strings.pref_category_controls),
             preferenceItems = persistentListOf(
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = allowGestures,
+                    title = stringResource(MR.strings.pref_controls_allow_gestures_in_panels),
+                ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = showLoading,
+                    title = stringResource(MR.strings.pref_controls_show_loading),
+                ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = showChapter,
+                    title = stringResource(MR.strings.pref_controls_show_chapter_indicator),
+                    subtitle = stringResource(MR.strings.pref_controls_show_chapter_indicator_info),
+                ),
                 Preference.PreferenceItem.SwitchPreference(
                     pref = enableVolumeBrightnessGestures,
                     title = stringResource(MR.strings.enable_volume_brightness_gestures),
                 ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = displayVol,
+                    title = stringResource(MR.strings.pref_controls_display_volume_percentage),
+                ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = swapVol,
+                    title = stringResource(MR.strings.pref_controls_swap_vol_brightness),
+                ),
                 Preference.PreferenceItem.SwitchPreference(
                     pref = rememberPlayerBrightness,
                     title = stringResource(MR.strings.pref_remember_brightness),
@@ -106,75 +131,54 @@ object PlayerSettingsPlayerScreen : SearchableSettings {
     }
 
     @Composable
-    private fun getOrientationGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
-        val defaultPlayerOrientationType = playerPreferences.defaultPlayerOrientationType()
-        val adjustOrientationVideoDimensions = playerPreferences.adjustOrientationVideoDimensions()
-        val defaultPlayerOrientationPortrait = playerPreferences.defaultPlayerOrientationPortrait()
-        val defaultPlayerOrientationLandscape = playerPreferences.defaultPlayerOrientationLandscape()
+    private fun getDisplayGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup {
+        val fullScreen = playerPreferences.playerFullscreen()
+        val hideControls = playerPreferences.hideControls()
+        val showSystemBar = playerPreferences.showSystemStatusBar()
+        val reduceMotion = playerPreferences.reduceMotion()
+        val hideTime = playerPreferences.playerTimeToDisappear()
+
+        val panelOpacityPref = playerPreferences.panelOpacity()
+        val panelOpacity by panelOpacityPref.collectAsState()
+        val numberFormat = remember { NumberFormat.getPercentInstance() }
 
         return Preference.PreferenceGroup(
-            title = stringResource(MR.strings.pref_category_player_orientation),
+            title = stringResource(MR.strings.pref_category_display),
             preferenceItems = persistentListOf(
-                Preference.PreferenceItem.ListPreference(
-                    pref = defaultPlayerOrientationType,
-                    title = stringResource(MR.strings.pref_default_player_orientation),
-                    entries = persistentMapOf(
-                        ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR to stringResource(
-                            MR.strings.rotation_free,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_PORTRAIT to stringResource(
-                            MR.strings.rotation_portrait,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT to stringResource(
-                            MR.strings.rotation_reverse_portrait,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE to stringResource(
-                            MR.strings.rotation_landscape,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE to stringResource(
-                            MR.strings.rotation_reverse_landscape,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT to stringResource(
-                            MR.strings.rotation_sensor_portrait,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE to stringResource(
-                            MR.strings.rotation_sensor_landscape,
-                        ),
-                    ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = fullScreen,
+                    title = stringResource(MR.strings.pref_player_fullscreen),
+                    enabled = Build.VERSION.SDK_INT >= Build.VERSION_CODES.P,
                 ),
                 Preference.PreferenceItem.SwitchPreference(
-                    pref = adjustOrientationVideoDimensions,
-                    title = stringResource(MR.strings.pref_adjust_orientation_video_dimensions),
+                    pref = hideControls,
+                    title = stringResource(MR.strings.pref_player_hide_controls),
                 ),
-                Preference.PreferenceItem.ListPreference(
-                    pref = defaultPlayerOrientationPortrait,
-                    title = stringResource(MR.strings.pref_default_portrait_orientation),
-                    entries = persistentMapOf(
-                        ActivityInfo.SCREEN_ORIENTATION_PORTRAIT to stringResource(
-                            MR.strings.rotation_portrait,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT to stringResource(
-                            MR.strings.rotation_reverse_portrait,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT to stringResource(
-                            MR.strings.rotation_sensor_portrait,
-                        ),
-                    ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = showSystemBar,
+                    title = stringResource(MR.strings.pref_show_system_bar),
+                ),
+                Preference.PreferenceItem.SwitchPreference(
+                    pref = reduceMotion,
+                    title = stringResource(MR.strings.pref_reduce_motion),
                 ),
                 Preference.PreferenceItem.ListPreference(
-                    pref = defaultPlayerOrientationLandscape,
-                    title = stringResource(MR.strings.pref_default_landscape_orientation),
-                    entries = persistentMapOf(
-                        ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE to stringResource(
-                            MR.strings.rotation_landscape,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE to stringResource(
-                            MR.strings.rotation_reverse_landscape,
-                        ),
-                        ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE to stringResource(
-                            MR.strings.rotation_sensor_landscape,
-                        ),
-                    ),
+                    pref = hideTime,
+                    title = stringResource(MR.strings.pref_player_time_to_disappear),
+                    entries = listOf(500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000).associateWith {
+                        stringResource(MR.strings.pref_player_time_to_disappear_summary, it)
+                    }.toPersistentMap(),
+                ),
+                Preference.PreferenceItem.SliderPreference(
+                    value = panelOpacity,
+                    title = stringResource(MR.strings.pref_panel_opacity),
+                    subtitle = numberFormat.format(panelOpacity / 100f),
+                    min = 0,
+                    max = 100,
+                    onValueChanged = {
+                        panelOpacityPref.set(it)
+                        true
+                    },
                 ),
             ),
         )
diff --git a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsSubtitleScreen.kt b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsSubtitleScreen.kt
index cfc408ff2a..3469353837 100644
--- a/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsSubtitleScreen.kt
+++ b/app/src/main/java/eu/kanade/presentation/more/settings/screen/player/PlayerSettingsSubtitleScreen.kt
@@ -5,7 +5,7 @@ import androidx.compose.runtime.ReadOnlyComposable
 import androidx.compose.runtime.remember
 import eu.kanade.presentation.more.settings.Preference
 import eu.kanade.presentation.more.settings.screen.SearchableSettings
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
 import tachiyomi.i18n.MR
 import tachiyomi.presentation.core.i18n.stringResource
 import uy.kohesive.injekt.Injekt
@@ -19,13 +19,18 @@ object PlayerSettingsSubtitleScreen : SearchableSettings {
 
     @Composable
     override fun getPreferences(): List<Preference> {
-        val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+        val subtitlePreferences = remember { Injekt.get<SubtitlePreferences>() }
 
-        val langPref = playerPreferences.preferredSubLanguages()
-        val whitelist = playerPreferences.subtitleWhitelist()
-        val blacklist = playerPreferences.subtitleBlacklist()
+        val rememberDelay = subtitlePreferences.rememberSubtitlesDelay()
+        val langPref = subtitlePreferences.preferredSubLanguages()
+        val whitelist = subtitlePreferences.subtitleWhitelist()
+        val blacklist = subtitlePreferences.subtitleBlacklist()
 
         return listOf(
+            Preference.PreferenceItem.SwitchPreference(
+                pref = rememberDelay,
+                title = stringResource(MR.strings.player_subtitle_remember_delay),
+            ),
             Preference.PreferenceItem.EditTextInfoPreference(
                 pref = langPref,
                 title = stringResource(MR.strings.pref_player_subtitle_lang),
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/ExpandableCard.kt b/app/src/main/java/eu/kanade/presentation/player/components/ExpandableCard.kt
new file mode 100644
index 0000000000..5d6cf9bc8f
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/ExpandableCard.kt
@@ -0,0 +1,104 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import android.annotation.SuppressLint
+import androidx.compose.animation.animateContentSize
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.foundation.BorderStroke
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.ArrowDropDown
+import androidx.compose.material3.Card
+import androidx.compose.material3.CardColors
+import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.CardElevation
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.rotate
+import androidx.compose.ui.graphics.Shape
+import androidx.compose.ui.tooling.preview.Preview
+import tachiyomi.presentation.core.components.material.padding
+
+@SuppressLint("UnrememberedMutableState")
+@Composable
+fun ExpandableCard(
+    isExpanded: Boolean,
+    title: @Composable (Boolean) -> Unit,
+    onExpand: (Boolean) -> Unit,
+    modifier: Modifier = Modifier,
+    colors: CardColors = CardDefaults.cardColors(),
+    shape: Shape = CardDefaults.shape,
+    border: BorderStroke? = null,
+    elevation: CardElevation = CardDefaults.cardElevation(),
+    content: @Composable () -> Unit,
+) {
+    val rotationState by animateFloatAsState(if (isExpanded) 0f else 180f, label = "card_rotation")
+    Card(
+        modifier = modifier.animateContentSize(),
+        colors = colors,
+        shape = shape,
+        border = border,
+        elevation = elevation,
+    ) {
+        Row(
+            modifier = Modifier
+                .clickable(onClick = { onExpand(!isExpanded) })
+                .padding(start = MaterialTheme.padding.medium),
+            verticalAlignment = Alignment.CenterVertically,
+        ) {
+            title(isExpanded)
+            Spacer(Modifier.weight(1f))
+            IconButton(
+                modifier = Modifier.rotate(rotationState),
+                onClick = { onExpand(!isExpanded) },
+            ) {
+                Icon(Icons.Default.ArrowDropDown, null)
+            }
+        }
+        Box(Modifier.animateContentSize()) {
+            if (isExpanded) content()
+        }
+    }
+}
+
+@Composable
+@Preview
+private fun PreviewExpandableCard() {
+    var isExpanded by remember { mutableStateOf(true) }
+
+    ExpandableCard(
+        isExpanded,
+        title = { Text("Hello World") },
+        content = { Text("SPOjao;sjd") },
+        onExpand = { isExpanded = it },
+    )
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/ExposedTextDropDownMenu.kt b/app/src/main/java/eu/kanade/presentation/player/components/ExposedTextDropDownMenu.kt
new file mode 100644
index 0000000000..433d128119
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/ExposedTextDropDownMenu.kt
@@ -0,0 +1,79 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.material3.DropdownMenuItem
+import androidx.compose.material3.ExposedDropdownMenuBox
+import androidx.compose.material3.ExposedDropdownMenuDefaults
+import androidx.compose.material3.MenuAnchorType
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.OutlinedTextFieldDefaults
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import kotlinx.collections.immutable.ImmutableList
+
+@Composable
+fun ExposedTextDropDownMenu(
+    selectedValue: String,
+    options: ImmutableList<String>,
+    label: String,
+    onValueChangedEvent: (String) -> Unit,
+    modifier: Modifier = Modifier,
+    leadingIcon: (@Composable () -> Unit)? = null,
+) {
+    var expanded by remember { mutableStateOf(false) }
+
+    ExposedDropdownMenuBox(
+        expanded = expanded,
+        onExpandedChange = { expanded = !expanded },
+        modifier = modifier,
+    ) {
+        OutlinedTextField(
+            readOnly = true,
+            value = selectedValue,
+            onValueChange = {},
+            label = { Text(text = label) },
+            trailingIcon = {
+                ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded)
+            },
+            leadingIcon = leadingIcon,
+            colors = OutlinedTextFieldDefaults.colors(),
+            modifier = Modifier
+                .menuAnchor(MenuAnchorType.PrimaryEditable)
+                .fillMaxWidth(),
+        )
+
+        ExposedDropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
+            options.forEach { option: String ->
+                DropdownMenuItem(
+                    text = { Text(text = option) },
+                    onClick = {
+                        expanded = false
+                        onValueChangedEvent(option)
+                    },
+                )
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/OutlinedNumericChooser.kt b/app/src/main/java/eu/kanade/presentation/player/components/OutlinedNumericChooser.kt
new file mode 100644
index 0000000000..e73298bf54
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/OutlinedNumericChooser.kt
@@ -0,0 +1,151 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.AddCircle
+import androidx.compose.material.icons.filled.RemoveCircle
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.input.KeyboardType
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+
+@Composable
+fun OutlinedNumericChooser(
+    value: Int,
+    onChange: (Int) -> Unit,
+    max: Int,
+    step: Int,
+    modifier: Modifier = Modifier,
+    min: Int = 0,
+    suffix: (@Composable () -> Unit)? = null,
+    label: (@Composable () -> Unit)? = null,
+) {
+    assert(max > min) { "min can't be larger than max ($min > $max)" }
+    Row(
+        modifier = modifier,
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+    ) {
+        RepeatingIconButton(onClick = { onChange(value - step) }) {
+            Icon(Icons.Filled.RemoveCircle, null)
+        }
+        var valueString by remember { mutableStateOf("$value") }
+        LaunchedEffect(value) {
+            if (valueString.isBlank() && value == 0) return@LaunchedEffect
+            valueString = value.toString()
+        }
+        OutlinedTextField(
+            label = label,
+            value = valueString,
+            onValueChange = { newValue ->
+                if (newValue.isBlank()) {
+                    valueString = newValue
+                    onChange(0)
+                }
+                runCatching {
+                    val intValue = if (newValue.trimStart() == "-") -0 else newValue.toInt()
+                    onChange(intValue)
+                    valueString = newValue
+                }
+            },
+            isError = value > max || value < min,
+            supportingText = {
+                if (value > max) Text(stringResource(MR.strings.numeric_chooser_value_too_big))
+                if (value < min) Text(stringResource(MR.strings.numeric_chooser_value_too_small))
+            },
+            suffix = suffix,
+            modifier = Modifier.weight(1f),
+            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
+        )
+        RepeatingIconButton(onClick = { onChange(value + step) }) {
+            Icon(Icons.Filled.AddCircle, null)
+        }
+    }
+}
+
+@Composable
+fun OutlinedNumericChooser(
+    value: Float,
+    onChange: (Float) -> Unit,
+    max: Float,
+    step: Float,
+    modifier: Modifier = Modifier,
+    min: Float = 0f,
+    suffix: (@Composable () -> Unit)? = null,
+    label: (@Composable () -> Unit)? = null,
+) {
+    assert(max > min) { "min can't be larger than max ($min > $max)" }
+    Row(
+        modifier,
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+    ) {
+        RepeatingIconButton(onClick = { onChange(value - step) }) {
+            Icon(Icons.Filled.RemoveCircle, null)
+        }
+        var valueString by remember { mutableStateOf("$value") }
+        LaunchedEffect(value) {
+            if (valueString.isBlank() && value == 0f) return@LaunchedEffect
+            valueString = value.toString().dropLastWhile { it == '0' }.dropLastWhile { it == '.' }
+        }
+        OutlinedTextField(
+            value = valueString,
+            label = label,
+            onValueChange = { newValue ->
+                if (newValue.isBlank()) {
+                    valueString = newValue
+                    onChange(0f)
+                }
+                runCatching {
+                    if (newValue.startsWith('.')) return@runCatching
+                    val floatValue = if (newValue.trimStart() == "-") -0f else newValue.toFloat()
+                    onChange(floatValue)
+                    valueString = newValue
+                }
+            },
+            isError = value > max || value < min,
+            supportingText = {
+                if (value > max) Text(stringResource(MR.strings.numeric_chooser_value_too_big))
+                if (value < min) Text(stringResource(MR.strings.numeric_chooser_value_too_small))
+            },
+            modifier = Modifier.weight(1f),
+            maxLines = 1,
+            suffix = suffix,
+            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
+        )
+        RepeatingIconButton(onClick = { onChange(value + step) }) {
+            Icon(Icons.Filled.AddCircle, null)
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/OvalBox.kt b/app/src/main/java/eu/kanade/presentation/player/components/OvalBox.kt
new file mode 100644
index 0000000000..9fb1183e8a
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/OvalBox.kt
@@ -0,0 +1,103 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.geometry.Size
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.Outline
+import androidx.compose.ui.graphics.Path
+import androidx.compose.ui.graphics.Shape
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.Density
+import androidx.compose.ui.unit.LayoutDirection
+
+object RightSideOvalShape : Shape {
+    override fun createOutline(
+        size: Size,
+        layoutDirection: LayoutDirection,
+        density: Density,
+    ): Outline {
+        val path = Path().apply {
+            moveTo(size.width, size.height)
+            lineTo(size.width, 0f)
+            lineTo(size.width / 10, 0f)
+            cubicTo(
+                size.width / 10,
+                0f,
+                -30f,
+                size.height / 2,
+                size.width / 10,
+                size.height,
+            )
+            close()
+        }
+        return Outline.Generic(path)
+    }
+}
+
+object LeftSideOvalShape : Shape {
+    override fun createOutline(
+        size: Size,
+        layoutDirection: LayoutDirection,
+        density: Density,
+    ): Outline {
+        val path = Path().apply {
+            moveTo(0f, 0f)
+            lineTo(0f, size.height)
+            lineTo(size.width - size.width / 10, size.height)
+            cubicTo(
+                size.width - size.width / 10,
+                size.height,
+                size.width,
+                size.height / 2,
+                size.width - size.width / 10,
+                0f,
+            )
+            close()
+        }
+        return Outline.Generic(path)
+    }
+}
+
+@Preview
+@Composable
+private fun PreviewRightSideOvalBox() {
+    Box(
+        modifier = Modifier
+            .fillMaxSize()
+            .clip(RightSideOvalShape)
+            .background(Color.Red),
+    ) {}
+}
+
+@Preview
+@Composable
+private fun PreviewLeftSideOvalBox() {
+    Box(
+        modifier = Modifier
+            .fillMaxSize()
+            .clip(LeftSideOvalShape)
+            .background(Color.Red),
+    ) {}
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/PlayerSheet.kt b/app/src/main/java/eu/kanade/presentation/player/components/PlayerSheet.kt
new file mode 100644
index 0000000000..238394316a
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/PlayerSheet.kt
@@ -0,0 +1,250 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import android.content.res.Configuration.ORIENTATION_LANDSCAPE
+import androidx.activity.compose.BackHandler
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.animation.core.tween
+import androidx.compose.animation.rememberSplineBasedDecay
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.gestures.AnchoredDraggableState
+import androidx.compose.foundation.gestures.DraggableAnchors
+import androidx.compose.foundation.gestures.Orientation
+import androidx.compose.foundation.gestures.anchoredDraggable
+import androidx.compose.foundation.gestures.animateTo
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.WindowInsets
+import androidx.compose.foundation.layout.WindowInsetsSides
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.offset
+import androidx.compose.foundation.layout.only
+import androidx.compose.foundation.layout.sizeIn
+import androidx.compose.foundation.layout.systemBars
+import androidx.compose.foundation.layout.windowInsetsPadding
+import androidx.compose.foundation.shape.ZeroCornerSize
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Surface
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableFloatStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.rememberUpdatedState
+import androidx.compose.runtime.setValue
+import androidx.compose.runtime.snapshotFlow
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.geometry.Offset
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.input.nestedscroll.NestedScrollConnection
+import androidx.compose.ui.input.nestedscroll.NestedScrollSource
+import androidx.compose.ui.input.nestedscroll.nestedScroll
+import androidx.compose.ui.layout.onSizeChanged
+import androidx.compose.ui.platform.LocalConfiguration
+import androidx.compose.ui.platform.LocalDensity
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.IntOffset
+import androidx.compose.ui.unit.Velocity
+import androidx.compose.ui.unit.dp
+import kotlinx.coroutines.flow.collectLatest
+import kotlinx.coroutines.flow.drop
+import kotlinx.coroutines.flow.filter
+import kotlinx.coroutines.launch
+import kotlin.math.roundToInt
+
+private val sheetAnimationSpec = tween<Float>(350)
+
+@Composable
+fun PlayerSheet(
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+    tonalElevation: Dp = 1.dp,
+    dismissEvent: Boolean = false,
+    content: @Composable () -> Unit,
+) {
+    val scope = rememberCoroutineScope()
+    val density = LocalDensity.current
+    val latestOnDismissRequest by rememberUpdatedState(onDismissRequest)
+    val maxWidth = if (LocalConfiguration.current.orientation == ORIENTATION_LANDSCAPE) {
+        640.dp
+    } else {
+        420.dp
+    }
+    val maxHeight = LocalConfiguration.current.screenHeightDp.dp * .95f
+
+    var backgroundAlpha by remember { mutableFloatStateOf(0f) }
+    val alpha by animateFloatAsState(
+        backgroundAlpha,
+        animationSpec = sheetAnimationSpec,
+        label = "alpha",
+    )
+
+    val decayAnimationSpec = rememberSplineBasedDecay<Float>()
+    val anchoredDraggableState = remember {
+        AnchoredDraggableState(
+            initialValue = 1,
+            snapAnimationSpec = sheetAnimationSpec,
+            decayAnimationSpec = decayAnimationSpec,
+            positionalThreshold = { with(density) { 56.dp.toPx() } },
+            velocityThreshold = { with(density) { 125.dp.toPx() } },
+        )
+    }
+
+    LaunchedEffect(dismissEvent) {
+        if (dismissEvent) {
+            backgroundAlpha = 0f
+            anchoredDraggableState.animateTo(1)
+            onDismissRequest()
+        }
+    }
+
+    val internalOnDismissRequest = {
+        if (anchoredDraggableState.currentValue == 0) {
+            scope.launch {
+                backgroundAlpha = 0f
+                anchoredDraggableState.animateTo(1)
+            }
+        }
+    }
+    Box(
+        modifier = Modifier
+            .clickable(
+                interactionSource = remember { MutableInteractionSource() },
+                indication = null,
+                onClick = internalOnDismissRequest,
+            )
+            .fillMaxSize()
+            .background(Color.Black.copy(alpha))
+            .onSizeChanged {
+                val anchors = DraggableAnchors {
+                    0 at 0f
+                    1 at it.height.toFloat()
+                }
+                anchoredDraggableState.updateAnchors(anchors)
+            },
+        contentAlignment = Alignment.BottomCenter,
+    ) {
+        Surface(
+            modifier = Modifier
+                .sizeIn(maxWidth = maxWidth, maxHeight = maxHeight)
+                .clickable(
+                    interactionSource = remember { MutableInteractionSource() },
+                    indication = null,
+                    onClick = {},
+                )
+                .nestedScroll(
+                    remember(anchoredDraggableState) {
+                        anchoredDraggableState.preUpPostDownNestedScrollConnection()
+                    },
+                )
+                .then(modifier)
+                .offset {
+                    IntOffset(
+                        0,
+                        anchoredDraggableState.offset
+                            .takeIf { it.isFinite() }
+                            ?.roundToInt()
+                            ?: 0,
+                    )
+                }
+                .anchoredDraggable(
+                    state = anchoredDraggableState,
+                    orientation = Orientation.Vertical,
+                )
+                .windowInsetsPadding(
+                    WindowInsets.systemBars
+                        .only(WindowInsetsSides.Top + WindowInsetsSides.Horizontal),
+                ),
+            shape = MaterialTheme.shapes.extraLarge.copy(bottomEnd = ZeroCornerSize, bottomStart = ZeroCornerSize),
+            tonalElevation = tonalElevation,
+            content = {
+                BackHandler(
+                    enabled = anchoredDraggableState.targetValue == 0,
+                    onBack = internalOnDismissRequest,
+                )
+                content()
+            },
+        )
+
+        LaunchedEffect(true) {
+            backgroundAlpha = 0.5f
+        }
+
+        LaunchedEffect(anchoredDraggableState) {
+            scope.launch { anchoredDraggableState.animateTo(0) }
+            snapshotFlow { anchoredDraggableState.currentValue }
+                .drop(1)
+                .filter { it == 1 }
+                .collectLatest { latestOnDismissRequest() }
+        }
+    }
+}
+
+private fun <T> AnchoredDraggableState<T>.preUpPostDownNestedScrollConnection() = object : NestedScrollConnection {
+    override fun onPreScroll(available: Offset, source: NestedScrollSource): Offset {
+        val delta = available.toFloat()
+        return if (delta < 0 && source == NestedScrollSource.UserInput) {
+            dispatchRawDelta(delta).toOffset()
+        } else {
+            Offset.Zero
+        }
+    }
+
+    override fun onPostScroll(
+        consumed: Offset,
+        available: Offset,
+        source: NestedScrollSource,
+    ): Offset {
+        return if (source == NestedScrollSource.UserInput) {
+            dispatchRawDelta(available.toFloat()).toOffset()
+        } else {
+            Offset.Zero
+        }
+    }
+
+    override suspend fun onPreFling(available: Velocity): Velocity {
+        val toFling = available.toFloat()
+        return if (toFling < 0 && offset > anchors.minAnchor()) {
+            settle(toFling)
+            available
+        } else {
+            Velocity.Zero
+        }
+    }
+
+    override suspend fun onPostFling(consumed: Velocity, available: Velocity): Velocity {
+        val toFling = available.toFloat()
+        return if (toFling > 0) {
+            settle(toFling)
+            available
+        } else {
+            Velocity.Zero
+        }
+    }
+
+    private fun Float.toOffset(): Offset = Offset(0f, this)
+
+    @JvmName("velocityToFloat")
+    private fun Velocity.toFloat() = y
+
+    private fun Offset.toFloat(): Float = y
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/RepeatingIconButton.kt b/app/src/main/java/eu/kanade/presentation/player/components/RepeatingIconButton.kt
new file mode 100644
index 0000000000..5fb000c5fb
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/RepeatingIconButton.kt
@@ -0,0 +1,77 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import android.view.MotionEvent
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.material3.IconButton
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberUpdatedState
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.ExperimentalComposeUiApi
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.input.pointer.pointerInteropFilter
+import kotlinx.coroutines.delay
+
+@OptIn(ExperimentalComposeUiApi::class)
+@Composable
+fun RepeatingIconButton(
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+    enabled: Boolean = true,
+    interactionSource: MutableInteractionSource = remember { MutableInteractionSource() },
+    maxDelayMillis: Long = 750,
+    minDelayMillis: Long = 5,
+    delayDecayFactor: Float = .25f,
+    content: @Composable () -> Unit,
+) {
+    val currentClickListener by rememberUpdatedState(onClick)
+    var pressed by remember { mutableStateOf(false) }
+
+    IconButton(
+        modifier = modifier.pointerInteropFilter {
+            pressed = when (it.action) {
+                MotionEvent.ACTION_DOWN -> true
+
+                else -> false
+            }
+
+            true
+        },
+        onClick = {},
+        enabled = enabled,
+        interactionSource = interactionSource,
+        content = content,
+    )
+
+    LaunchedEffect(pressed, enabled) {
+        var currentDelayMillis = maxDelayMillis
+
+        while (enabled && pressed) {
+            currentClickListener()
+            delay(currentDelayMillis)
+            currentDelayMillis =
+                (currentDelayMillis - (currentDelayMillis * delayDecayFactor))
+                    .toLong().coerceAtLeast(minDelayMillis)
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/SliderItem.kt b/app/src/main/java/eu/kanade/presentation/player/components/SliderItem.kt
new file mode 100644
index 0000000000..0dcf325499
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/SliderItem.kt
@@ -0,0 +1,230 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.width
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Slider
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.TransformOrigin
+import androidx.compose.ui.graphics.graphicsLayer
+import androidx.compose.ui.hapticfeedback.HapticFeedbackType
+import androidx.compose.ui.layout.layout
+import androidx.compose.ui.platform.LocalHapticFeedback
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.Constraints
+import androidx.compose.ui.unit.dp
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun SliderItem(
+    label: String,
+    value: Int,
+    valueText: String,
+    onChange: (Int) -> Unit,
+    max: Int,
+    modifier: Modifier = Modifier,
+    min: Int = 0,
+    icon: @Composable () -> Unit = {},
+) {
+    val haptic = LocalHapticFeedback.current
+
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .padding(
+                horizontal = MaterialTheme.padding.medium,
+                vertical = MaterialTheme.padding.small,
+            ),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.large),
+    ) {
+        icon()
+        Column(modifier = Modifier.weight(0.5f)) {
+            Text(
+                text = label,
+                style = MaterialTheme.typography.bodyMedium,
+            )
+            Text(valueText)
+        }
+
+        Slider(
+            value = value.toFloat(),
+            onValueChange = {
+                val newValue = it.toInt()
+                if (newValue != value) {
+                    onChange(newValue)
+                    haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)
+                }
+            },
+            modifier = Modifier.weight(1.5f),
+            valueRange = min.toFloat()..max.toFloat(),
+            steps = max - min,
+        )
+    }
+}
+
+@Composable
+fun SliderItem(
+    label: String,
+    value: Float,
+    valueText: String,
+    onChange: (Float) -> Unit,
+    max: Float,
+    modifier: Modifier = Modifier,
+    steps: Int = 0,
+    min: Float = 0f,
+    icon: @Composable () -> Unit = {},
+) {
+    val haptic = LocalHapticFeedback.current
+
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .padding(
+                horizontal = MaterialTheme.padding.medium,
+                vertical = MaterialTheme.padding.small,
+            ),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.large),
+    ) {
+        icon()
+        Column(modifier = Modifier.weight(0.5f)) {
+            Text(
+                text = label,
+                style = MaterialTheme.typography.bodyMedium,
+            )
+            Text(valueText)
+        }
+
+        Slider(
+            value = value,
+            onValueChange = {
+                val newValue = it
+                if (newValue != value) {
+                    onChange(newValue)
+                    haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)
+                }
+            },
+            modifier = Modifier.weight(1.5f),
+            valueRange = min..max,
+            steps = steps,
+        )
+    }
+}
+
+@Composable
+fun VerticalSliderItem(
+    label: String,
+    value: Int,
+    valueText: String,
+    onChange: (Int) -> Unit,
+    max: Int,
+    modifier: Modifier = Modifier,
+    min: Int = 0,
+    icon: @Composable () -> Unit = {},
+) {
+    val haptic = LocalHapticFeedback.current
+
+    Column(
+        modifier = modifier
+            .fillMaxHeight()
+            .padding(
+                horizontal = MaterialTheme.padding.medium,
+                vertical = MaterialTheme.padding.small,
+            ),
+        verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraLarge),
+        horizontalAlignment = Alignment.CenterHorizontally,
+    ) {
+        icon()
+        VerticalSlider(
+            value = value,
+            min = min,
+            max = max,
+            onValueChange = {
+                haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)
+                onChange(it)
+            },
+            modifier = Modifier.weight(1f),
+        )
+        Column {
+            Text(
+                text = label,
+                style = MaterialTheme.typography.bodyMedium,
+            )
+            Text(valueText)
+        }
+    }
+}
+
+@Composable
+fun VerticalSlider(
+    value: Int,
+    min: Int,
+    max: Int,
+    onValueChange: (Int) -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Slider(
+        modifier = modifier
+            .graphicsLayer {
+                rotationZ = 270f
+                transformOrigin = TransformOrigin(0f, 0f)
+            }
+            .layout { measurable, constraints ->
+                val placeable = measurable.measure(
+                    Constraints(
+                        minWidth = constraints.minHeight,
+                        maxWidth = constraints.maxHeight,
+                        minHeight = constraints.minWidth,
+                        maxHeight = constraints.maxWidth,
+                    ),
+                )
+                layout(placeable.height, placeable.width) {
+                    placeable.place(-placeable.width, 0)
+                }
+            }
+            .width(180.dp)
+            .height(50.dp),
+        value = value.toFloat(),
+        valueRange = min.toFloat()..max.toFloat(),
+        onValueChange = { onValueChange(it.toInt()) },
+    )
+}
+
+@Preview
+@Composable
+private fun PreviewVerticalSliderItem() {
+    VerticalSliderItem(
+        "sex",
+        1,
+        "2",
+        {},
+        5,
+    )
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/SwitchPreference.kt b/app/src/main/java/eu/kanade/presentation/player/components/SwitchPreference.kt
new file mode 100644
index 0000000000..270c5fc37f
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/SwitchPreference.kt
@@ -0,0 +1,50 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.selection.toggleable
+import androidx.compose.material3.Switch
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.semantics.Role
+
+@Composable
+fun SwitchPreference(
+    value: Boolean,
+    onValueChange: (Boolean) -> Unit,
+    content: @Composable () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier = modifier
+            .toggleable(value, true, Role.Switch, onValueChange)
+            .fillMaxWidth(),
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically,
+    ) {
+        content()
+        Switch(
+            checked = value,
+            onCheckedChange = null,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/presentation/player/components/TintedSliderItem.kt b/app/src/main/java/eu/kanade/presentation/player/components/TintedSliderItem.kt
new file mode 100644
index 0000000000..e63335bc2e
--- /dev/null
+++ b/app/src/main/java/eu/kanade/presentation/player/components/TintedSliderItem.kt
@@ -0,0 +1,169 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.presentation.player.components
+
+import androidx.annotation.IntRange
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Slider
+import androidx.compose.material3.SliderColors
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.hapticfeedback.HapticFeedbackType
+import androidx.compose.ui.platform.LocalHapticFeedback
+import androidx.compose.ui.tooling.preview.Preview
+import tachiyomi.presentation.core.components.material.padding
+import kotlin.math.max
+import kotlin.math.min
+
+@Composable
+fun TintedSliderItem(
+    label: String,
+    value: Int,
+    valueText: String,
+    onChange: (Int) -> Unit,
+    max: Int,
+    tint: Color,
+    modifier: Modifier = Modifier,
+    min: Int = 0,
+    icon: @Composable () -> Unit = {},
+) {
+    val haptic = LocalHapticFeedback.current
+
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .padding(
+                horizontal = MaterialTheme.padding.medium,
+                vertical = MaterialTheme.padding.small,
+            ),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.large),
+    ) {
+        icon()
+        Column(modifier = Modifier.weight(0.5f)) {
+            Text(
+                text = label,
+                style = MaterialTheme.typography.bodyMedium,
+            )
+            Text(valueText)
+        }
+
+        TintedSlider(
+            value = value.toFloat(),
+            onValueChange = {
+                val newValue = it.toInt()
+                if (newValue != value) {
+                    onChange(newValue)
+                    haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)
+                }
+            },
+            modifier = Modifier.weight(1.5f),
+            valueRange = min.toFloat()..max.toFloat(),
+            steps = max - min,
+            tint = tint,
+        )
+    }
+}
+
+@Composable
+fun TintedSlider(
+    value: Float,
+    onValueChange: (Float) -> Unit,
+    modifier: Modifier = Modifier,
+    enabled: Boolean = true,
+    valueRange: ClosedFloatingPointRange<Float> = 0f..1f,
+    @IntRange steps: Int = 0,
+    onValueChangeFinished: (() -> Unit)? = null,
+    tint: Color = MaterialTheme.colorScheme.primaryContainer,
+    interactionSource: MutableInteractionSource = MutableInteractionSource(),
+) {
+    Slider(
+        value = value,
+        onValueChange = onValueChange,
+        modifier = modifier,
+        enabled = enabled,
+        valueRange = valueRange,
+        steps = steps,
+        onValueChangeFinished = onValueChangeFinished,
+        colors = generateSliderColors(tint),
+        interactionSource = interactionSource,
+    )
+}
+
+@Preview
+@Composable
+private fun PreviewTintedSliderRed() {
+    TintedSlider(
+        0.5f,
+        {},
+        tint = Color.Red,
+    )
+}
+
+@Preview
+@Composable
+private fun PreviewTintedSliderItemRed() {
+    TintedSliderItem(
+        "slideritem red",
+        1,
+        "1",
+        {},
+        20,
+        tint = Color.Red,
+    )
+}
+
+fun generateSliderColors(baseColor: Color): SliderColors {
+    // Utility function to darken a color
+    fun darken(color: Color, factor: Float): Color {
+        val red = max((color.red * factor), 0f)
+        val green = max((color.green * factor), 0f)
+        val blue = max((color.blue * factor), 0f)
+        return Color(red, green, blue, color.alpha)
+    }
+
+    // Utility function to lighten a color
+    fun lighten(color: Color, factor: Float): Color {
+        val red = min((color.red + (1 - color.red) * factor), 255f)
+        val green = min((color.green + (1 - color.green) * factor), 255f)
+        val blue = min((color.blue + (1 - color.blue) * factor), 255f)
+        return Color(red, green, blue, color.alpha)
+    }
+
+    return SliderColors(
+        thumbColor = baseColor,
+        activeTrackColor = lighten(baseColor, 0.2f),
+        activeTickColor = lighten(baseColor, 0.4f),
+        inactiveTrackColor = darken(baseColor, 0.2f),
+        inactiveTickColor = darken(baseColor, 0.4f),
+        disabledThumbColor = baseColor.copy(alpha = 0.5f),
+        disabledActiveTrackColor = lighten(baseColor, 0.2f).copy(alpha = 0.5f),
+        disabledActiveTickColor = lighten(baseColor, 0.4f).copy(alpha = 0.5f),
+        disabledInactiveTrackColor = darken(baseColor, 0.2f).copy(alpha = 0.5f),
+        disabledInactiveTickColor = darken(baseColor, 0.4f).copy(alpha = 0.5f),
+    )
+}
diff --git a/app/src/main/java/eu/kanade/presentation/theme/TachiyomiTheme.kt b/app/src/main/java/eu/kanade/presentation/theme/TachiyomiTheme.kt
index 5d860b702e..0522edb172 100644
--- a/app/src/main/java/eu/kanade/presentation/theme/TachiyomiTheme.kt
+++ b/app/src/main/java/eu/kanade/presentation/theme/TachiyomiTheme.kt
@@ -1,8 +1,10 @@
 package eu.kanade.presentation.theme
 
 import androidx.compose.foundation.isSystemInDarkTheme
+import androidx.compose.material.ripple.RippleAlpha
 import androidx.compose.material3.ColorScheme
 import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.RippleConfiguration
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.ReadOnlyComposable
 import androidx.compose.ui.platform.LocalContext
@@ -81,6 +83,22 @@ private fun getThemeColorScheme(
     )
 }
 
+private const val RIPPLE_DRAGGED_ALPHA = .5f
+private const val RIPPLE_FOCUSED_ALPHA = .6f
+private const val RIPPLE_HOVERED_ALPHA = .4f
+private const val RIPPLE_PRESSED_ALPHA = .6f
+
+val playerRippleConfiguration
+    @Composable get() = RippleConfiguration(
+        color = MaterialTheme.colorScheme.primaryContainer,
+        rippleAlpha = RippleAlpha(
+            draggedAlpha = RIPPLE_DRAGGED_ALPHA,
+            focusedAlpha = RIPPLE_FOCUSED_ALPHA,
+            hoveredAlpha = RIPPLE_HOVERED_ALPHA,
+            pressedAlpha = RIPPLE_PRESSED_ALPHA,
+        ),
+    )
+
 private val colorSchemes: Map<AppTheme, BaseColorScheme> = mapOf(
     AppTheme.DEFAULT to TachiyomiColorScheme,
     AppTheme.CLOUDFLARE to CloudflareColorScheme,
diff --git a/app/src/main/java/eu/kanade/tachiyomi/di/PreferenceModule.kt b/app/src/main/java/eu/kanade/tachiyomi/di/PreferenceModule.kt
index 85172316a4..420e9ed6b1 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/di/PreferenceModule.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/di/PreferenceModule.kt
@@ -7,7 +7,12 @@ import eu.kanade.domain.track.service.TrackPreferences
 import eu.kanade.domain.ui.UiPreferences
 import eu.kanade.tachiyomi.core.security.SecurityPreferences
 import eu.kanade.tachiyomi.network.NetworkPreferences
+import eu.kanade.tachiyomi.ui.player.settings.AdvancedPlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import eu.kanade.tachiyomi.ui.player.settings.DecoderPreferences
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
 import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
 import eu.kanade.tachiyomi.ui.reader.setting.ReaderPreferences
 import eu.kanade.tachiyomi.util.system.isDevFlavor
 import tachiyomi.core.common.preference.AndroidPreferenceStore
@@ -48,6 +53,21 @@ class PreferenceModule(val app: Application) : InjektModule {
         addSingletonFactory {
             PlayerPreferences(get())
         }
+        addSingletonFactory {
+            GesturePreferences(get())
+        }
+        addSingletonFactory {
+            DecoderPreferences(get())
+        }
+        addSingletonFactory {
+            SubtitlePreferences(get())
+        }
+        addSingletonFactory {
+            AudioPreferences(get())
+        }
+        addSingletonFactory {
+            AdvancedPlayerPreferences(get())
+        }
         addSingletonFactory {
             TrackPreferences(get())
         }
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreen.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreen.kt
index 5fe736ebf4..6ec82a8e80 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreen.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreen.kt
@@ -52,7 +52,6 @@ import eu.kanade.tachiyomi.ui.entries.anime.track.AnimeTrackInfoDialogHomeScreen
 import eu.kanade.tachiyomi.ui.home.HomeScreen
 import eu.kanade.tachiyomi.ui.library.anime.AnimeLibraryTab
 import eu.kanade.tachiyomi.ui.main.MainActivity
-import eu.kanade.tachiyomi.ui.player.settings.dialogs.SkipIntroLengthDialog
 import eu.kanade.tachiyomi.ui.setting.SettingsScreen
 import eu.kanade.tachiyomi.ui.webview.WebViewScreen
 import eu.kanade.tachiyomi.util.system.copyToClipboard
@@ -311,13 +310,17 @@ class AnimeScreen(
                         screenModel.setAnimeViewerFlags.awaitSetSkipIntroLength(animeId, newLength)
                     }
                 }
+                // TODO(custombuttons)
+                /*
                 SkipIntroLengthDialog(
                     currentSkipIntroLength = successState.anime.skipIntroLength,
-                    defaultSkipIntroLength = screenModel.playerPreferences.defaultIntroLength().get(),
+                    defaultSkipIntroLength = screenModel.gesturePreferences.defaultIntroLength().get(),
                     fromPlayer = false,
                     updateSkipIntroLength = ::updateSkipIntroLength,
                     onDismissRequest = onDismissRequest,
                 )
+
+                 */
             }
             is AnimeScreenModel.Dialog.ShowQualities -> {
                 EpisodeOptionsDialogScreen.onDismissDialog = onDismissRequest
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreenModel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreenModel.kt
index 2a0637e68e..964eb98e0f 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreenModel.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/entries/anime/AnimeScreenModel.kt
@@ -33,6 +33,7 @@ import eu.kanade.tachiyomi.data.track.EnhancedAnimeTracker
 import eu.kanade.tachiyomi.data.track.TrackerManager
 import eu.kanade.tachiyomi.network.HttpException
 import eu.kanade.tachiyomi.ui.entries.anime.track.AnimeTrackItem
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
 import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
 import eu.kanade.tachiyomi.util.AniChartApi
 import eu.kanade.tachiyomi.util.episode.getNextUnseen
@@ -97,6 +98,7 @@ class AnimeScreenModel(
     private val libraryPreferences: LibraryPreferences = Injekt.get(),
     private val trackPreferences: TrackPreferences = Injekt.get(),
     internal val playerPreferences: PlayerPreferences = Injekt.get(),
+    internal val gesturePreferences: GesturePreferences = Injekt.get(),
     private val trackerManager: TrackerManager = Injekt.get(),
     private val trackEpisode: TrackEpisode = Injekt.get(),
     private val downloadManager: AnimeDownloadManager = Injekt.get(),
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/AniyomiMPVView.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/AniyomiMPVView.kt
new file mode 100644
index 0000000000..559feffcf2
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/AniyomiMPVView.kt
@@ -0,0 +1,257 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player
+
+import android.content.Context
+import android.os.Build
+import android.os.Environment
+import android.util.AttributeSet
+import android.view.KeyCharacterMap
+import android.view.KeyEvent
+import eu.kanade.tachiyomi.network.NetworkPreferences
+import eu.kanade.tachiyomi.ui.player.controls.components.panels.toColorHexString
+import eu.kanade.tachiyomi.ui.player.settings.AdvancedPlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import eu.kanade.tachiyomi.ui.player.settings.DecoderPreferences
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
+import `is`.xyz.mpv.BaseMPVView
+import `is`.xyz.mpv.KeyMapping
+import `is`.xyz.mpv.MPVLib
+import logcat.LogPriority
+import logcat.logcat
+import uy.kohesive.injekt.injectLazy
+import kotlin.reflect.KProperty
+
+class AniyomiMPVView(context: Context, attributes: AttributeSet) : BaseMPVView(context, attributes) {
+
+    private val playerPreferences: PlayerPreferences by injectLazy()
+    private val decoderPreferences: DecoderPreferences by injectLazy()
+    private val subtitlePreferences: SubtitlePreferences by injectLazy()
+    private val audioPreferences: AudioPreferences by injectLazy()
+    private val advancedPreferences: AdvancedPlayerPreferences by injectLazy()
+    private val networkPreferences: NetworkPreferences by injectLazy()
+
+    var isExiting = false
+
+    val duration: Int?
+        get() = MPVLib.getPropertyInt("duration")
+
+    var timePos: Int?
+        get() = MPVLib.getPropertyInt("time-pos")
+        set(position) = MPVLib.setPropertyInt("time-pos", position!!)
+
+    var paused: Boolean?
+        get() = MPVLib.getPropertyBoolean("pause")
+        set(paused) = MPVLib.setPropertyBoolean("pause", paused!!)
+
+    val hwdecActive: String
+        get() = MPVLib.getPropertyString("hwdec-current") ?: "no"
+
+    val videoH: Int?
+        get() = MPVLib.getPropertyInt("video-params/h")
+
+    /**
+     * Returns the video aspect ratio. Rotation is taken into account.
+     */
+    fun getVideoOutAspect(): Double? {
+        return MPVLib.getPropertyDouble("video-params/aspect")?.let {
+            if (it < 0.001) return 0.0
+            if ((MPVLib.getPropertyInt("video-params/rotate") ?: 0) % 180 == 90) 1.0 / it else it
+        }
+    }
+
+    class TrackDelegate(private val name: String) {
+        operator fun getValue(thisRef: Any?, property: KProperty<*>): Int {
+            val v = MPVLib.getPropertyString(name)
+            // we can get null here for "no" or other invalid value
+            return v?.toIntOrNull() ?: -1
+        }
+        operator fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
+            if (value == -1) {
+                MPVLib.setPropertyString(name, "no")
+            } else {
+                MPVLib.setPropertyInt(name, value)
+            }
+        }
+    }
+
+    var sid: Int by TrackDelegate("sid")
+    var secondarySid: Int by TrackDelegate("secondary-sid")
+    var aid: Int by TrackDelegate("aid")
+
+    override fun initOptions(vo: String) {
+        setVo(if (decoderPreferences.gpuNext().get()) "gpu-next" else "gpu")
+        MPVLib.setPropertyBoolean("pause", true)
+        MPVLib.setOptionString("profile", "fast")
+        MPVLib.setOptionString("hwdec", if (decoderPreferences.tryHWDecoding().get()) "auto" else "no")
+        when (decoderPreferences.videoDebanding().get()) {
+            Debanding.None -> {}
+            Debanding.CPU -> MPVLib.setOptionString("vf", "gradfun=radius=12")
+            Debanding.GPU -> MPVLib.setOptionString("deband", "yes")
+        }
+
+        if (decoderPreferences.useYUV420P().get()) {
+            MPVLib.setOptionString("vf", "format=yuv420p")
+        }
+        MPVLib.setOptionString("msg-level", "all=" + if (networkPreferences.verboseLogging().get()) "v" else "warn")
+
+        MPVLib.setPropertyBoolean("keep-open", true)
+        MPVLib.setPropertyBoolean("input-default-bindings", true)
+
+        MPVLib.setOptionString("tls-verify", "yes")
+        MPVLib.setOptionString("tls-ca-file", "${context.filesDir.path}/cacert.pem")
+
+        // Limit demuxer cache since the defaults are too high for mobile devices
+        val cacheMegs = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) 64 else 32
+        MPVLib.setOptionString("demuxer-max-bytes", "${cacheMegs * 1024 * 1024}")
+        MPVLib.setOptionString("demuxer-max-back-bytes", "${cacheMegs * 1024 * 1024}")
+        //
+        val screenshotDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)
+        screenshotDir.mkdirs()
+        MPVLib.setOptionString("screenshot-directory", screenshotDir.path)
+
+        VideoFilters.entries.forEach {
+            MPVLib.setOptionString(it.mpvProperty, it.preference(decoderPreferences).get().toString())
+        }
+
+        MPVLib.setOptionString("speed", playerPreferences.playerSpeed().get().toString())
+        // workaround for <https://github.com/mpv-player/mpv/issues/14651>
+        MPVLib.setOptionString("vd-lavc-film-grain", "cpu")
+
+        setupSubtitlesOptions()
+        setupAudioOptions()
+    }
+
+    override fun observeProperties() {
+        for ((name, format) in observedProps) MPVLib.observeProperty(name, format)
+    }
+
+    override fun postInitOptions() {
+        advancedPreferences.playerStatisticsPage().get().let {
+            if (it != 0) {
+                MPVLib.command(arrayOf("script-binding", "stats/display-stats-toggle"))
+                MPVLib.command(arrayOf("script-binding", "stats/display-page-$it"))
+            }
+        }
+    }
+
+    fun onKey(event: KeyEvent): Boolean {
+        if (event.action == KeyEvent.ACTION_MULTIPLE || KeyEvent.isModifierKey(event.keyCode)) {
+            return false
+        }
+
+        var mapped = KeyMapping.map.get(event.keyCode)
+        if (mapped == null) {
+            // Fallback to produced glyph
+            if (!event.isPrintingKey) {
+                if (event.repeatCount == 0) {
+                    logcat(LogPriority.DEBUG) { "Unmapped non-printable key ${event.keyCode}" }
+                }
+                return false
+            }
+
+            val ch = event.unicodeChar
+            if (ch.and(KeyCharacterMap.COMBINING_ACCENT) != 0) {
+                return false // dead key
+            }
+            mapped = ch.toChar().toString()
+        }
+
+        if (event.repeatCount > 0) {
+            return true // eat event but ignore it, mpv has its own key repeat
+        }
+
+        val mod: MutableList<String> = mutableListOf()
+        event.isShiftPressed && mod.add("shift")
+        event.isCtrlPressed && mod.add("ctrl")
+        event.isAltPressed && mod.add("alt")
+        event.isMetaPressed && mod.add("meta")
+
+        val action = if (event.action == KeyEvent.ACTION_DOWN) "keydown" else "keyup"
+        mod.add(mapped)
+        MPVLib.command(arrayOf(action, mod.joinToString("+")))
+
+        return true
+    }
+
+    private val observedProps = mapOf(
+        "chapter" to MPVLib.mpvFormat.MPV_FORMAT_INT64,
+        "chapter-list" to MPVLib.mpvFormat.MPV_FORMAT_NONE,
+        "track-list" to MPVLib.mpvFormat.MPV_FORMAT_NONE,
+
+        "time-pos" to MPVLib.mpvFormat.MPV_FORMAT_INT64,
+        "demuxer-cache-time" to MPVLib.mpvFormat.MPV_FORMAT_INT64,
+        "duration" to MPVLib.mpvFormat.MPV_FORMAT_INT64,
+        "volume" to MPVLib.mpvFormat.MPV_FORMAT_INT64,
+        "volume-max" to MPVLib.mpvFormat.MPV_FORMAT_INT64,
+
+        "sid" to MPVLib.mpvFormat.MPV_FORMAT_STRING,
+        "secondary-sid" to MPVLib.mpvFormat.MPV_FORMAT_STRING,
+        "aid" to MPVLib.mpvFormat.MPV_FORMAT_STRING,
+
+        "speed" to MPVLib.mpvFormat.MPV_FORMAT_DOUBLE,
+        "video-params/aspect" to MPVLib.mpvFormat.MPV_FORMAT_DOUBLE,
+
+        "hwdec-current" to MPVLib.mpvFormat.MPV_FORMAT_STRING,
+        "hwdec" to MPVLib.mpvFormat.MPV_FORMAT_STRING,
+
+        "pause" to MPVLib.mpvFormat.MPV_FORMAT_FLAG,
+        "paused-for-cache" to MPVLib.mpvFormat.MPV_FORMAT_FLAG,
+        "seeking" to MPVLib.mpvFormat.MPV_FORMAT_FLAG,
+        "eof-reached" to MPVLib.mpvFormat.MPV_FORMAT_FLAG,
+        "user-data/mpvkt" to MPVLib.mpvFormat.MPV_FORMAT_STRING,
+    )
+
+    private fun setupAudioOptions() {
+        MPVLib.setOptionString("alang", audioPreferences.preferredAudioLanguages().get())
+        MPVLib.setOptionString("audio-delay", (audioPreferences.audioDelay().get() / 1000.0).toString())
+        MPVLib.setOptionString("audio-pitch-correction", audioPreferences.enablePitchCorrection().get().toString())
+        MPVLib.setOptionString("volume-max", (audioPreferences.volumeBoostCap().get() + 100).toString())
+    }
+
+    private fun setupSubtitlesOptions() {
+        MPVLib.setOptionString("sub-delay", (subtitlePreferences.subtitlesDelay().get() / 1000.0).toString())
+        MPVLib.setOptionString("sub-speed", subtitlePreferences.subtitlesSpeed().get().toString())
+        MPVLib.setOptionString(
+            "secondary-sub-delay",
+            (subtitlePreferences.subtitlesSecondaryDelay().get() / 1000.0).toString(),
+        )
+
+        MPVLib.setOptionString("sub-font", subtitlePreferences.subtitleFont().get())
+        if (subtitlePreferences.overrideSubsASS().get()) {
+            MPVLib.setOptionString("sub-ass-override", "force")
+            MPVLib.setOptionString("sub-ass-justify", "yes")
+        }
+        MPVLib.setOptionString("sub-font-size", subtitlePreferences.subtitleFontSize().get().toString())
+        MPVLib.setOptionString("sub-bold", if (subtitlePreferences.boldSubtitles().get()) "yes" else "no")
+        MPVLib.setOptionString("sub-italic", if (subtitlePreferences.italicSubtitles().get()) "yes" else "no")
+        MPVLib.setOptionString("sub-justify", subtitlePreferences.subtitleJustification().get().value)
+        MPVLib.setOptionString("sub-color", subtitlePreferences.textColorSubtitles().get().toColorHexString())
+        MPVLib.setOptionString(
+            "sub-back-color",
+            subtitlePreferences.backgroundColorSubtitles().get().toColorHexString(),
+        )
+        MPVLib.setOptionString("sub-border-color", subtitlePreferences.borderColorSubtitles().get().toColorHexString())
+        MPVLib.setOptionString("sub-border-size", subtitlePreferences.subtitleBorderSize().get().toString())
+        MPVLib.setOptionString("sub-border-style", subtitlePreferences.borderStyleSubtitles().get().value)
+        MPVLib.setOptionString("sub-shadow-offset", subtitlePreferences.shadowOffsetSubtitles().get().toString())
+        MPVLib.setOptionString("sub-pos", subtitlePreferences.subtitlePos().get().toString())
+        MPVLib.setOptionString("sub-scale", subtitlePreferences.subtitleFontScale().get().toString())
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PipActions.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PipActions.kt
new file mode 100644
index 0000000000..5210615581
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PipActions.kt
@@ -0,0 +1,112 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player
+
+import android.app.PendingIntent
+import android.app.RemoteAction
+import android.content.Context
+import android.content.Intent
+import android.graphics.drawable.Icon
+import androidx.annotation.DrawableRes
+import dev.icerock.moko.resources.StringResource
+import eu.kanade.tachiyomi.R
+import tachiyomi.core.common.i18n.stringResource
+import tachiyomi.i18n.MR
+
+fun createPipActions(
+    context: Context,
+    isPaused: Boolean,
+    replaceWithPrevious: Boolean,
+    playlistCount: Int,
+    playlistPosition: Int,
+): ArrayList<RemoteAction> = arrayListOf(
+    if (replaceWithPrevious) {
+        createPipAction(
+            context,
+            R.drawable.ic_skip_previous_24dp,
+            MR.strings.action_previous_episode,
+            PIP_PREVIOUS,
+            PIP_PREVIOUS,
+            playlistPosition != 0,
+        )
+    } else {
+        createPipAction(
+            context,
+            R.drawable.ic_forward_10_24dp,
+            MR.strings.pref_skip_10,
+            PIP_SKIP,
+            PIP_SKIP,
+        )
+    },
+    if (isPaused) {
+        createPipAction(
+            context,
+            R.drawable.ic_play_arrow_24dp,
+            MR.strings.action_play,
+            PIP_PLAY,
+            PIP_PLAY,
+        )
+    } else {
+        createPipAction(
+            context,
+            R.drawable.ic_pause_24dp,
+            MR.strings.action_pause,
+            PIP_PAUSE,
+            PIP_PAUSE,
+        )
+    },
+    createPipAction(
+        context,
+        R.drawable.ic_skip_next_24dp,
+        MR.strings.action_next_episode,
+        PIP_NEXT,
+        PIP_NEXT,
+        playlistPosition != playlistCount - 1,
+    ),
+)
+
+fun createPipAction(
+    context: Context,
+    @DrawableRes icon: Int,
+    titleRes: StringResource,
+    requestCode: Int,
+    controlType: Int,
+    isEnabled: Boolean = true,
+): RemoteAction {
+    val action = RemoteAction(
+        Icon.createWithResource(context, icon),
+        context.stringResource(titleRes),
+        context.stringResource(titleRes),
+        PendingIntent.getBroadcast(
+            context,
+            requestCode,
+            Intent(PIP_INTENTS_FILTER).putExtra(PIP_INTENT_ACTION, controlType).setPackage(context.packageName),
+            PendingIntent.FLAG_IMMUTABLE,
+        ),
+    )
+    action.isEnabled = isEnabled
+    return action
+}
+
+const val PIP_INTENTS_FILTER = "pip_control"
+const val PIP_INTENT_ACTION = "media_control"
+const val PIP_PAUSE = 1
+const val PIP_PLAY = 2
+const val PIP_PREVIOUS = 3
+const val PIP_NEXT = 4
+const val PIP_SKIP = 5
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt
index 75b93eb4fc..8d1aec79cb 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt
@@ -1,93 +1,84 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Code is a mix between PlayerActivity from mpvKt and the former
+ * PlayerActivity from Aniyomi.
+ */
+
 package eu.kanade.tachiyomi.ui.player
 
-import android.animation.ObjectAnimator
 import android.annotation.SuppressLint
+import android.app.PictureInPictureParams
 import android.content.BroadcastReceiver
 import android.content.Context
 import android.content.Intent
 import android.content.IntentFilter
+import android.content.pm.ActivityInfo
+import android.content.pm.PackageManager
 import android.content.res.AssetManager
 import android.content.res.Configuration
-import android.graphics.Color
-import android.media.AudioFocusRequest
+import android.graphics.Rect
 import android.media.AudioManager
+import android.media.session.MediaSession
+import android.media.session.PlaybackState
 import android.net.Uri
 import android.os.Build
 import android.os.Bundle
 import android.os.Environment
-import android.os.Handler
-import android.os.Looper
-import android.os.ParcelFileDescriptor
-import android.os.PowerManager
-import android.provider.Settings
-import android.support.v4.media.session.MediaControllerCompat
-import android.support.v4.media.session.MediaSessionCompat
-import android.support.v4.media.session.PlaybackStateCompat
-import android.util.DisplayMetrics
+import android.util.Rational
 import android.view.KeyEvent
-import android.view.MotionEvent
 import android.view.View
-import android.view.ViewAnimationUtils
 import android.view.WindowManager
-import android.view.animation.AnimationUtils
-import android.widget.ImageView
+import androidx.activity.enableEdgeToEdge
 import androidx.activity.viewModels
-import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
-import androidx.constraintlayout.widget.ConstraintLayout
-import androidx.core.view.GestureDetectorCompat
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.layout.boundsInWindow
+import androidx.compose.ui.layout.onGloballyPositioned
+import androidx.core.view.WindowCompat
 import androidx.core.view.WindowInsetsCompat
 import androidx.core.view.WindowInsetsControllerCompat
-import androidx.core.view.isVisible
-import androidx.core.view.updateLayoutParams
 import androidx.lifecycle.lifecycleScope
 import androidx.lifecycle.viewModelScope
+import androidx.media.AudioAttributesCompat
+import androidx.media.AudioFocusRequestCompat
+import androidx.media.AudioManagerCompat
 import com.hippo.unifile.UniFile
-import eu.kanade.domain.base.BasePreferences
-import eu.kanade.tachiyomi.R
+import eu.kanade.presentation.theme.TachiyomiTheme
 import eu.kanade.tachiyomi.animesource.model.SerializableVideo.Companion.serialize
-import eu.kanade.tachiyomi.animesource.model.Track
 import eu.kanade.tachiyomi.animesource.model.Video
 import eu.kanade.tachiyomi.animesource.online.AnimeHttpSource
 import eu.kanade.tachiyomi.data.notification.NotificationReceiver
 import eu.kanade.tachiyomi.data.notification.Notifications
-import eu.kanade.tachiyomi.databinding.PlayerActivityBinding
+import eu.kanade.tachiyomi.databinding.PlayerLayoutBinding
+import eu.kanade.tachiyomi.network.NetworkPreferences
 import eu.kanade.tachiyomi.ui.base.activity.BaseActivity
+import eu.kanade.tachiyomi.ui.player.controls.PlayerControls
+import eu.kanade.tachiyomi.ui.player.controls.components.IndexedSegment
+import eu.kanade.tachiyomi.ui.player.settings.AdvancedPlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
 import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import eu.kanade.tachiyomi.ui.player.settings.dialogs.EpisodeListDialog
-import eu.kanade.tachiyomi.ui.player.settings.dialogs.SkipIntroLengthDialog
-import eu.kanade.tachiyomi.ui.player.settings.dialogs.SpeedPickerDialog
-import eu.kanade.tachiyomi.ui.player.settings.sheets.PlayerSettingsSheet
-import eu.kanade.tachiyomi.ui.player.settings.sheets.ScreenshotOptionsSheet
-import eu.kanade.tachiyomi.ui.player.settings.sheets.StreamsCatalogSheet
-import eu.kanade.tachiyomi.ui.player.settings.sheets.VideoChaptersSheet
-import eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle.SubtitleSettingsSheet
-import eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle.VideoFilters
-import eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle.toHexString
-import eu.kanade.tachiyomi.ui.player.viewer.ACTION_MEDIA_CONTROL
-import eu.kanade.tachiyomi.ui.player.viewer.AspectState
-import eu.kanade.tachiyomi.ui.player.viewer.EXTRA_CONTROL_TYPE
-import eu.kanade.tachiyomi.ui.player.viewer.GestureHandler
-import eu.kanade.tachiyomi.ui.player.viewer.PIP_NEXT
-import eu.kanade.tachiyomi.ui.player.viewer.PIP_PAUSE
-import eu.kanade.tachiyomi.ui.player.viewer.PIP_PLAY
-import eu.kanade.tachiyomi.ui.player.viewer.PIP_PREVIOUS
-import eu.kanade.tachiyomi.ui.player.viewer.PIP_SKIP
-import eu.kanade.tachiyomi.ui.player.viewer.PictureInPictureHandler
-import eu.kanade.tachiyomi.ui.player.viewer.PipState
-import eu.kanade.tachiyomi.ui.player.viewer.SeekState
-import eu.kanade.tachiyomi.ui.player.viewer.SetAsCover
-import eu.kanade.tachiyomi.ui.player.viewer.VideoDebanding
-import eu.kanade.tachiyomi.util.AniSkipApi
-import eu.kanade.tachiyomi.util.SkipType
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
 import eu.kanade.tachiyomi.util.Stamp
 import eu.kanade.tachiyomi.util.SubtitleSelect
-import eu.kanade.tachiyomi.util.system.LocaleHelper
-import eu.kanade.tachiyomi.util.system.powerManager
 import eu.kanade.tachiyomi.util.system.toShareIntent
 import eu.kanade.tachiyomi.util.system.toast
-import eu.kanade.tachiyomi.util.view.setComposeContent
 import `is`.xyz.mpv.MPVLib
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
@@ -115,16 +106,46 @@ import java.io.OutputStream
 import kotlin.math.abs
 import kotlin.math.ceil
 import kotlin.math.floor
-import kotlin.math.roundToInt
-import `is`.xyz.mpv.MPVView.Chapter as VideoChapter
 
 class PlayerActivity : BaseActivity() {
+    private val viewModel by viewModels<PlayerViewModel>(factoryProducer = { PlayerViewModelProviderFactory(this) })
+    private val binding by lazy { PlayerLayoutBinding.inflate(layoutInflater) }
+    private val playerObserver by lazy { PlayerObserver(this) }
+    val player by lazy { binding.player }
+    val windowInsetsController by lazy { WindowCompat.getInsetsController(window, window.decorView) }
+    val audioManager by lazy { getSystemService(Context.AUDIO_SERVICE) as AudioManager }
+
+    private var mediaSession: MediaSession? = null
+    private val gesturePreferences: GesturePreferences by lazy { viewModel.gesturePreferences }
+    private val playerPreferences: PlayerPreferences by lazy { viewModel.playerPreferences }
+    private val subtitlePreferences: SubtitlePreferences = Injekt.get()
+    private val audioPreferences: AudioPreferences = Injekt.get()
+    private val advancedPlayerPreferences: AdvancedPlayerPreferences = Injekt.get()
+    private val networkPreferences: NetworkPreferences = Injekt.get()
+    private val storageManager: StorageManager = Injekt.get()
 
-    internal val viewModel by viewModels<PlayerViewModel>()
+    internal val subtitleSelect by lazy { SubtitleSelect(subtitlePreferences) }
 
-    internal val playerPreferences: PlayerPreferences = Injekt.get()
+    private var audioFocusRequest: AudioFocusRequestCompat? = null
+    private var restoreAudioFocus: () -> Unit = {}
 
-    private val storageManager: StorageManager = Injekt.get()
+    private var pipRect: Rect? = null
+    val isPipSupportedAndEnabled by lazy {
+        packageManager.hasSystemFeature(PackageManager.FEATURE_PICTURE_IN_PICTURE) &&
+            playerPreferences.enablePip().get()
+    }
+
+    private var pipReceiver: BroadcastReceiver? = null
+
+    private val noisyReceiver = object : BroadcastReceiver() {
+        var initialized = false
+        override fun onReceive(context: Context?, intent: Intent?) {
+            if (intent?.action == AudioManager.ACTION_AUDIO_BECOMING_NOISY) {
+                viewModel.pause()
+                window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
+            }
+        }
+    }
 
     companion object {
         fun newIntent(
@@ -142,11 +163,11 @@ class PlayerActivity : BaseActivity() {
                 addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
             }
         }
-
-        private const val MAX_BRIGHTNESS = 255F
     }
 
     override fun onNewIntent(intent: Intent) {
+        super.onNewIntent(intent)
+
         val animeId = intent.extras?.getLong("animeId") ?: -1
         val episodeId = intent.extras?.getLong("episodeId") ?: -1
         val vidList = intent.extras?.getString("vidList") ?: ""
@@ -164,9 +185,7 @@ class PlayerActivity : BaseActivity() {
         viewModel.saveCurrentEpisodeWatchingProgress()
 
         lifecycleScope.launchNonCancellable {
-            viewModel.mutableState.update {
-                it.copy(isLoadingEpisode = true)
-            }
+            viewModel.updateIsLoadingEpisode(true)
 
             val initResult = viewModel.init(animeId, episodeId, vidList, vidIndex)
             if (!initResult.second.getOrDefault(false)) {
@@ -177,6 +196,7 @@ class PlayerActivity : BaseActivity() {
                     setInitialEpisodeError(exception)
                 }
             }
+
             lifecycleScope.launch {
                 setVideoList(
                     qualityIndex = initResult.first.videoIndex,
@@ -185,137 +205,21 @@ class PlayerActivity : BaseActivity() {
                 )
             }
         }
-        super.onNewIntent(intent)
-    }
-
-    private val playerObserver = PlayerObserver(this)
-
-    private var mReceiver: BroadcastReceiver? = null
-
-    lateinit var binding: PlayerActivityBinding
-
-    private lateinit var mediaSession: MediaSessionCompat
-
-    private val playbackStateBuilder = PlaybackStateCompat.Builder()
-
-    private lateinit var headsetReceiver: BroadcastReceiver
-
-    internal val player get() = binding.player
-
-    internal val playerControls get() = binding.playerControls
-
-    private var audioManager: AudioManager? = null
-    private var fineVolume = 0F
-    private var maxVolume = 0
-
-    private var brightness = 0F
-
-    internal var deviceWidth = 0
-    internal var deviceHeight = 0
-
-    private var audioFocusRestore: () -> Unit = {}
-
-    private val audioFocusChangeListener = AudioManager.OnAudioFocusChangeListener { type ->
-        when (type) {
-            AudioManager.AUDIOFOCUS_LOSS,
-            AudioManager.AUDIOFOCUS_LOSS_TRANSIENT,
-            -> {
-                // loss can occur in addition to ducking, so remember the old callback
-                val oldRestore = audioFocusRestore
-                val wasPlayerPaused = player.paused ?: false
-                player.paused = true
-                audioFocusRestore = {
-                    oldRestore()
-                    if (!wasPlayerPaused) player.paused = false
-                }
-            }
-            AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK -> {
-                MPVLib.command(arrayOf("multiply", "volume", 0.5F.toString()))
-                audioFocusRestore = {
-                    MPVLib.command(arrayOf("multiply", "volume", 2F.toString()))
-                }
-            }
-            AudioManager.AUDIOFOCUS_GAIN -> {
-                audioFocusRestore()
-                audioFocusRestore = {}
-            }
-        }
-    }
-
-    private var hasAudioFocus = false
-
-    private val audioFocusRequest = AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN)
-        .setOnAudioFocusChangeListener(audioFocusChangeListener)
-        .build()
-
-    private fun requestAudioFocus() {
-        if (hasAudioFocus) return
-        hasAudioFocus = true
-        audioManager!!.requestAudioFocus(audioFocusRequest!!)
-    }
-
-    private fun abandonAudioFocus() {
-        if (!hasAudioFocus) return
-        hasAudioFocus = false
-        audioManager!!.abandonAudioFocusRequest(audioFocusRequest!!)
-    }
-
-    private fun setAudioFocus(paused: Boolean) {
-        if (paused) {
-            abandonAudioFocus()
-        } else {
-            requestAudioFocus()
-        }
-    }
-
-    internal var initialSeek = -1
-
-    private val animationHandler = Handler(Looper.getMainLooper())
-
-    private val streams: PlayerViewModel.VideoStreams
-        get() = viewModel.state.value.videoStreams
-
-    private var currentVideoList: List<Video>? = null
-        set(list) {
-            field = list
-            streams.quality.tracks = field?.map { Track("", it.quality) }?.toTypedArray() ?: emptyArray()
-        }
-
-    private var playerIsDestroyed = true
-
-    private var hadPreviousSubs = false
-
-    private var hadPreviousAudio = false
-
-    private var videoChapters: List<VideoChapter> = emptyList()
-        set(value) {
-            field = value
-            runOnUiThread {
-                playerControls.seekbar.updateSeekbar(chapters = value)
-                playerControls.chapterText.updateCurrentChapterText(chapters = value)
-            }
-        }
 
-    override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {
-        playerControls.resetControlsFade()
-        return super.dispatchTouchEvent(ev)
+        setIntent(intent)
     }
 
-    // Create Player -- Start --
-
     @SuppressLint("ClickableViewAccessibility")
     override fun onCreate(savedInstanceState: Bundle?) {
+        enableEdgeToEdge()
         registerSecureActivity(this)
-        overridePendingTransition(R.anim.shared_axis_x_push_enter, R.anim.shared_axis_x_push_exit)
         super.onCreate(savedInstanceState)
+        setContentView(binding.root)
 
-        setupPlayerControls()
-        setupMediaSession()
         setupPlayerMPV()
         setupPlayerAudio()
-        setupPlayerSubtitles()
-        setupPlayerBrightness()
-        loadDeviceDimensions()
+        setupMediaSession()
+        setupPlayerOrientation()
 
         Thread.setDefaultUncaughtExceptionHandler { _, throwable ->
             toast(throwable.message)
@@ -335,272 +239,155 @@ class PlayerActivity : BaseActivity() {
                     is PlayerViewModel.Event.SetCoverResult -> {
                         onSetAsCoverResult(event.result)
                     }
-                    is PlayerViewModel.Event.SetAnimeSkipIntro -> {
-                        refreshUi()
-                    }
                 }
             }
             .launchIn(lifecycleScope)
 
-        onNewIntent(this.intent)
-
-        binding.dialogRoot.setComposeContent {
-            val state by viewModel.state.collectAsState()
-
-            when (state.dialog) {
-                is PlayerViewModel.Dialog.EpisodeList -> {
-                    if (state.anime != null) {
-                        EpisodeListDialog(
-                            displayMode = state.anime!!.displayMode,
-                            episodeList = viewModel.currentPlaylist,
-                            currentEpisodeIndex = viewModel.getCurrentEpisodeIndex(),
-                            dateRelativeTime = viewModel.relativeTime,
-                            dateFormat = viewModel.dateFormat,
-                            onBookmarkClicked = viewModel::bookmarkEpisode,
-                            onEpisodeClicked = this::changeEpisode,
-                            onDismissRequest = pauseForDialogSheet(),
-                        )
-                    }
-                }
-
-                is PlayerViewModel.Dialog.SpeedPicker -> {
-                    fun updateSpeed(speed: Float) {
-                        playerPreferences.playerSpeed().set(speed)
-                        MPVLib.setPropertyDouble("speed", speed.toDouble())
-                    }
-                    SpeedPickerDialog(
-                        currentSpeed = MPVLib.getPropertyDouble("speed"),
-                        onSpeedChanged = ::updateSpeed,
-                        onDismissRequest = pauseForDialogSheet(),
-                    )
-                }
-
-                is PlayerViewModel.Dialog.SkipIntroLength -> {
-                    if (state.anime != null) {
-                        SkipIntroLengthDialog(
-                            currentSkipIntroLength = state.anime!!.skipIntroLength,
-                            defaultSkipIntroLength = playerPreferences.defaultIntroLength().get(),
-                            fromPlayer = true,
-                            updateSkipIntroLength = viewModel::setAnimeSkipIntroLength,
-                            onDismissRequest = pauseForDialogSheet(),
-                        )
-                    }
-                }
-
-                null -> {}
+        binding.controls.setContent {
+            TachiyomiTheme {
+                PlayerControls(
+                    viewModel = viewModel,
+                    onBackPress = {
+                        if (isPipSupportedAndEnabled && player.paused == false && playerPreferences.pipOnExit().get()) {
+                            enterPictureInPictureMode(createPipParams())
+                        } else {
+                            finish()
+                        }
+                    },
+                    modifier = Modifier.onGloballyPositioned {
+                        pipRect = run {
+                            val boundsInWindow = it.boundsInWindow()
+                            Rect(
+                                boundsInWindow.left.toInt(),
+                                boundsInWindow.top.toInt(),
+                                boundsInWindow.right.toInt(),
+                                boundsInWindow.bottom.toInt(),
+                            )
+                        }
+                    },
+                )
             }
         }
 
-        binding.sheetRoot.setComposeContent {
-            val state by viewModel.state.collectAsState()
-
-            when (state.sheet) {
-                is PlayerViewModel.Sheet.ScreenshotOptions -> {
-                    ScreenshotOptionsSheet(
-                        screenModel = PlayerSettingsScreenModel(
-                            preferences = viewModel.playerPreferences,
-                            hasSubTracks = streams.subtitle.tracks.size > 1,
-                        ),
-                        cachePath = cacheDir.path,
-                        onSetAsCover = viewModel::setAsCover,
-                        onShare = { viewModel.shareImage(it, player.timePos) },
-                        onSave = { viewModel.saveImage(it, player.timePos) },
-                        onDismissRequest = pauseForDialogSheet(),
-                    )
-                }
-
-                is PlayerViewModel.Sheet.PlayerSettings -> {
-                    PlayerSettingsSheet(
-                        screenModel = PlayerSettingsScreenModel(viewModel.playerPreferences),
-                        onDismissRequest = pauseForDialogSheet(),
-                    )
-                }
-
-                is PlayerViewModel.Sheet.VideoChapters -> {
-                    fun setChapter(videoChapter: VideoChapter, text: String) {
-                        val seekDifference = videoChapter.time.roundToInt() - (player.timePos ?: 0)
-                        doubleTapSeek(
-                            time = seekDifference,
-                            isDoubleTap = false,
-                            videoChapterText = text,
-                        )
-                    }
-                    VideoChaptersSheet(
-                        timePosition = player.timePos ?: 0,
-                        videoChapters = videoChapters,
-                        onVideoChapterSelected = ::setChapter,
-                        onDismissRequest = pauseForDialogSheet(),
-                    )
-                }
-
-                is PlayerViewModel.Sheet.StreamsCatalog -> {
-                    val qualityTracks = streams.quality.tracks.takeUnless { it.isEmpty() }
-                    val subtitleTracks = streams.subtitle.tracks.takeUnless { it.isEmpty() }
-                    val audioTracks = streams.audio.tracks.takeUnless { it.isEmpty() }
-
-                    if (qualityTracks != null && subtitleTracks != null && audioTracks != null) {
-                        fun onQualitySelected(qualityIndex: Int) {
-                            if (playerIsDestroyed) return
-                            if (streams.quality.index == qualityIndex) return
-                            showLoadingIndicator(true)
-                            viewModel.qualityIndex = qualityIndex
-                            logcat(LogPriority.INFO) { "Changing quality" }
-                            setVideoList(qualityIndex, currentVideoList)
-                        }
+        onNewIntent(this.intent)
+    }
 
-                        fun onSubtitleSelected(index: Int) {
-                            if (streams.subtitle.index == index ||
-                                streams.subtitle.index > subtitleTracks.lastIndex
-                            ) {
-                                return
-                            }
-                            streams.subtitle.index = index
-                            if (index == 0) {
-                                player.sid = -1
-                                return
-                            }
-                            val tracks = player.tracks.getValue("sub")
-                            val selectedLoadedTrack = tracks.firstOrNull {
-                                it.name == subtitleTracks[index].url ||
-                                    it.mpvId.toString() == subtitleTracks[index].url
-                            }
-                            selectedLoadedTrack?.let { player.sid = it.mpvId }
-                                ?: MPVLib.command(
-                                    arrayOf(
-                                        "sub-add",
-                                        subtitleTracks[index].url,
-                                        "select",
-                                        subtitleTracks[index].url,
-                                    ),
-                                )
-                        }
+    override fun onDestroy() {
+        audioFocusRequest?.let {
+            AudioManagerCompat.abandonAudioFocusRequest(audioManager, it)
+        }
+        audioFocusRequest = null
+        mediaSession?.release()
+        if (noisyReceiver.initialized) {
+            unregisterReceiver(noisyReceiver)
+            noisyReceiver.initialized = false
+        }
 
-                        fun onAudioSelected(index: Int) {
-                            if (streams.audio.index == index || streams.audio.index > audioTracks.lastIndex) return
-                            streams.audio.index = index
-                            if (index == 0) {
-                                player.aid = -1
-                                return
-                            }
-                            val tracks = player.tracks.getValue("audio")
-                            val selectedLoadedTrack = tracks.firstOrNull {
-                                it.name == audioTracks[index].url ||
-                                    it.mpvId.toString() == audioTracks[index].url
-                            }
-                            selectedLoadedTrack?.let { player.aid = it.mpvId }
-                                ?: MPVLib.command(
-                                    arrayOf(
-                                        "audio-add",
-                                        audioTracks[index].url,
-                                        "select",
-                                        audioTracks[index].url,
-                                    ),
-                                )
-                        }
+        player.isExiting = true
+        MPVLib.removeLogObserver(playerObserver)
+        MPVLib.removeObserver(playerObserver)
+        player.destroy()
 
-                        StreamsCatalogSheet(
-                            isEpisodeOnline = viewModel.isEpisodeOnline(),
-                            videoStreams = viewModel.state.collectAsState().value.videoStreams,
-                            openContentFd = ::openContentFd,
-                            onQualitySelected = ::onQualitySelected,
-                            onSubtitleSelected = ::onSubtitleSelected,
-                            onAudioSelected = ::onAudioSelected,
-                            onSettingsClicked = viewModel::showSubtitleSettings,
-                            onDismissRequest = pauseForDialogSheet(),
-                        )
-                    }
-                }
+        super.onDestroy()
+    }
 
-                is PlayerViewModel.Sheet.SubtitleSettings -> {
-                    SubtitleSettingsSheet(
-                        screenModel = PlayerSettingsScreenModel(
-                            preferences = viewModel.playerPreferences,
-                            hasSubTracks = streams.subtitle.tracks.size > 1,
-                        ),
-                        onDismissRequest = pauseForDialogSheet(fadeControls = true),
-                    )
-                }
+    override fun onPause() {
+        if (!isInPictureInPictureMode) {
+            viewModel.pause()
+        }
+        viewModel.saveCurrentEpisodeWatchingProgress()
+        super.onPause()
+    }
 
-                null -> {}
+    override fun onStop() {
+        viewModel.pause()
+        viewModel.saveCurrentEpisodeWatchingProgress()
+        window.attributes.screenBrightness.let {
+            if (playerPreferences.rememberPlayerBrightness().get() && it != -1f) {
+                playerPreferences.playerBrightnessValue().set(it)
             }
         }
 
-        playerIsDestroyed = false
+        if (isInPictureInPictureMode) {
+            finishAndRemoveTask()
+        }
 
-        registerReceiver(
-            headsetReceiver,
-            IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY),
-        )
+        super.onStop()
     }
-    private fun copyAssets(configDir: String) {
-        val assetManager = this.assets
-        val files = arrayOf("subfont.ttf", "cacert.pem")
-        for (filename in files) {
-            var ins: InputStream? = null
-            var out: OutputStream? = null
-            try {
-                ins = assetManager.open(filename, AssetManager.ACCESS_STREAMING)
-                val outFile = File("$configDir/$filename")
-                // Note that .available() officially returns an *estimated* number of bytes available
-                // this is only true for generic streams, asset streams return the full file size
-                if (outFile.length() == ins.available().toLong()) {
-                    logcat(LogPriority.VERBOSE) { "Skipping copy of asset file (exists same size): $filename" }
-                    continue
-                }
-                out = FileOutputStream(outFile)
-                ins.copyTo(out)
-                logcat(LogPriority.WARN) { "Copied asset file: $filename" }
-            } catch (e: IOException) {
-                logcat(LogPriority.ERROR, e) { "Failed to copy asset file: $filename" }
-            } finally {
-                ins?.close()
-                out?.close()
-            }
+
+    override fun onUserLeaveHint() {
+        if (isPipSupportedAndEnabled && player.paused == false && playerPreferences.pipOnExit().get()) {
+            enterPictureInPictureMode()
         }
+        super.onUserLeaveHint()
     }
 
-    private fun setupPlayerControls() {
-        binding = PlayerActivityBinding.inflate(layoutInflater)
-        setContentView(binding.root)
-
-        window.statusBarColor = 70000000
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
-            window.navigationBarColor = 70000000
+    @Deprecated("Deprecated in Java")
+    override fun onBackPressed() {
+        if (isPipSupportedAndEnabled && player.paused == false && playerPreferences.pipOnExit().get()) {
+            if (viewModel.sheetShown.value == Sheets.None &&
+                viewModel.panelShown.value == Panels.None &&
+                viewModel.dialogShown.value == Dialogs.None
+            ) {
+                enterPictureInPictureMode()
+            }
+        } else {
+            super.onBackPressed()
         }
+    }
 
-        if (playerPreferences.defaultIntroLength().get() == 0) {
-            playerControls.binding.controlsSkipIntroBtn.visibility = View.GONE
+    override fun onStart() {
+        super.onStart()
+        setPictureInPictureParams(createPipParams())
+        WindowCompat.setDecorFitsSystemWindows(window, false)
+        window.setFlags(
+            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,
+            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,
+        )
+        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
+        binding.root.systemUiVisibility =
+            View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY or
+            View.SYSTEM_UI_FLAG_LAYOUT_STABLE or
+            View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or
+            View.SYSTEM_UI_FLAG_LOW_PROFILE
+        windowInsetsController.hide(WindowInsetsCompat.Type.systemBars())
+        windowInsetsController.hide(WindowInsetsCompat.Type.navigationBars())
+        windowInsetsController.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
+        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+            window.attributes.layoutInDisplayCutoutMode = if (playerPreferences.playerFullscreen().get()) {
+                WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES
+            } else {
+                WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER
+            }
         }
 
-        refreshUi()
-
-        if (playerPreferences.hideControls().get()) {
-            playerControls.hideControls(true)
-        } else {
-            playerControls.showAndFadeControls()
+        if (playerPreferences.rememberPlayerBrightness().get()) {
+            playerPreferences.playerBrightnessValue().get().let {
+                if (it != -1f) viewModel.changeBrightnessTo(it)
+            }
         }
-        playerControls.toggleAutoplay(playerPreferences.autoplayEnabled().get())
     }
 
     private fun setupPlayerMPV() {
-        val logLevel = if (viewModel.networkPreferences.verboseLogging().get()) "info" else "warn"
-        val vo = if (playerPreferences.gpuNext().get()) "gpu-next" else "gpu"
+        val logLevel = if (networkPreferences.verboseLogging().get()) "info" else "warn"
 
         val configDir = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && Environment.isExternalStorageManager()) {
             storageManager.getMPVConfigDirectory()!!.filePath!!
         } else {
-            if (playerPreferences.mpvScripts().get()) {
+            if (advancedPlayerPreferences.mpvScripts().get()) {
                 copyScripts()
             }
             applicationContext.filesDir.path
         }
 
         val mpvConfFile = File("$configDir/mpv.conf")
-        playerPreferences.mpvConf().get().let { mpvConfFile.writeText(it) }
+        advancedPlayerPreferences.mpvConf().get().let { mpvConfFile.writeText(it) }
         val mpvInputFile = File("$configDir/input.conf")
-        playerPreferences.mpvInput().get().let { mpvInputFile.writeText(it) }
+        advancedPlayerPreferences.mpvInput().get().let { mpvInputFile.writeText(it) }
 
         copyAssets(configDir)
+        copyFontsDirectory()
 
         MPVLib.setOptionString("sub-ass-force-margins", "yes")
         MPVLib.setOptionString("sub-use-margins", "yes")
@@ -609,100 +396,63 @@ class PlayerActivity : BaseActivity() {
             configDir = configDir,
             cacheDir = applicationContext.cacheDir.path,
             logLvl = logLevel,
-            vo = vo,
         )
-
-        val speedProperty = MPVLib.getPropertyDouble("speed")
-        val currentSpeed = if (speedProperty == 1.0) playerPreferences.playerSpeed().get().toDouble() else speedProperty
-        MPVLib.setPropertyDouble("speed", currentSpeed)
-
-        MPVLib.observeProperty("chapter-list", MPVLib.mpvFormat.MPV_FORMAT_NONE)
-        MPVLib.setOptionString("keep-open", "always")
-        MPVLib.setOptionString("ytdl", "no")
-
-        MPVLib.setOptionString("hwdec", playerPreferences.hardwareDecoding().get().mpvValue)
-        when (playerPreferences.videoDebanding().get()) {
-            VideoDebanding.CPU -> MPVLib.setOptionString("vf", "gradfun=radius=12")
-            VideoDebanding.GPU -> MPVLib.setOptionString("deband", "yes")
-            VideoDebanding.NONE -> {}
-        }
-
-        val currentPlayerStatisticsPage = playerPreferences.playerStatisticsPage().get()
-        if (currentPlayerStatisticsPage != 0) {
-            MPVLib.command(arrayOf("script-binding", "stats/display-stats-toggle"))
-            MPVLib.command(
-                arrayOf("script-binding", "stats/display-page-$currentPlayerStatisticsPage"),
-            )
-        }
-
-        setVideoFilters()
-
-        MPVLib.setOptionString("input-default-bindings", "yes")
-
         MPVLib.addLogObserver(playerObserver)
-        player.addObserver(playerObserver)
-    }
-
-    private fun setVideoFilters() {
-        VideoFilters.entries.forEach {
-            MPVLib.setPropertyInt(it.mpvProperty, it.preference(playerPreferences).get())
-        }
+        MPVLib.addObserver(playerObserver)
     }
 
-    private fun setupPlayerAudio() {
-        with(playerPreferences) {
-            audioManager = getSystemService(Context.AUDIO_SERVICE) as AudioManager
-            val audioChannel = audioChannels().get()
-
-            val useDeviceVolume = playerVolumeValue().get() == -1.0F || !rememberPlayerVolume().get()
-            fineVolume = if (useDeviceVolume) {
-                audioManager!!.getStreamVolume(AudioManager.STREAM_MUSIC).toFloat()
-            } else {
-                playerVolumeValue().get()
+    private fun copyScripts() {
+        CoroutineScope(Dispatchers.IO).launchIO {
+            // First, delete all present scripts
+            val scriptsDir = {
+                UniFile.fromFile(applicationContext.filesDir)?.createDirectory("scripts")
             }
-
-            if (rememberAudioDelay().get()) {
-                MPVLib.setPropertyDouble("audio-delay", (audioDelay().get() / 1000.0))
+            val scriptOptsDir = {
+                UniFile.fromFile(applicationContext.filesDir)?.createDirectory("script-opts")
             }
+            scriptsDir()?.delete()
+            scriptOptsDir()?.delete()
 
-            MPVLib.setOptionString(audioChannel.propertyName, audioChannel.propertyValue)
+            // Then, copy the scripts from the Aniyomi directory
+            storageManager.getScriptsDirectory()?.listFiles()?.forEach { file ->
+                val outFile = scriptsDir()?.createFile(file.name)
+                outFile?.let {
+                    file.openInputStream().copyTo(it.openOutputStream())
+                }
+            }
+            storageManager.getScriptOptsDirectory()?.listFiles()?.forEach { file ->
+                val outFile = scriptOptsDir()?.createFile(file.name)
+                outFile?.let {
+                    file.openInputStream().copyTo(it.openOutputStream())
+                }
+            }
         }
-
-        verticalScrollRight(0F)
-
-        maxVolume = audioManager!!.getStreamMaxVolume(AudioManager.STREAM_MUSIC)
-        playerControls.binding.volumeBar.max = maxVolume
-        playerControls.binding.volumeBar.secondaryProgress = maxVolume
-
-        volumeControlStream = AudioManager.STREAM_MUSIC
     }
 
-    private fun setupPlayerSubtitles() {
-        with(playerPreferences) {
-            val overrideType = if (overrideSubsASS().get()) "force" else "no"
-            MPVLib.setPropertyString("sub-ass-override", overrideType)
-
-            if (rememberSubtitlesDelay().get()) {
-                MPVLib.setPropertyDouble("sub-delay", subtitlesDelay().get() / 1000.0)
-            }
-
-            copyFontsDirectory()
-
-            if (playerPreferences.subtitleFont().get().trim() != "") {
-                MPVLib.setPropertyString("sub-font", playerPreferences.subtitleFont().get())
-            } else {
-                MPVLib.setPropertyString("sub-font", "Sans Serif")
+    private fun copyAssets(configDir: String) {
+        val assetManager = this.assets
+        val files = arrayOf("subfont.ttf", "cacert.pem")
+        for (filename in files) {
+            var ins: InputStream? = null
+            var out: OutputStream? = null
+            try {
+                ins = assetManager.open(filename, AssetManager.ACCESS_STREAMING)
+                val outFile = File("$configDir/$filename")
+                // Note that .available() officially returns an *estimated* number of bytes available
+                // this is only true for generic streams, asset streams return the full file size
+                if (outFile.length() == ins.available().toLong()) {
+                    logcat(LogPriority.VERBOSE) { "Skipping copy of asset file (exists same size): $filename" }
+                    continue
+                }
+                out = FileOutputStream(outFile)
+                ins.copyTo(out)
+                logcat(LogPriority.WARN) { "Copied asset file: $filename" }
+            } catch (e: IOException) {
+                logcat(LogPriority.ERROR, e) { "Failed to copy asset file: $filename" }
+            } finally {
+                ins?.close()
+                out?.close()
             }
-
-            MPVLib.setPropertyString("sub-bold", if (boldSubtitles().get()) "yes" else "no")
-            MPVLib.setPropertyString("sub-italic", if (italicSubtitles().get()) "yes" else "no")
-            MPVLib.setPropertyInt("sub-font-size", subtitleFontSize().get())
-            MPVLib.setPropertyString("sub-color", textColorSubtitles().get().toHexString())
-            MPVLib.setPropertyString("sub-border-color", borderColorSubtitles().get().toHexString())
-            MPVLib.setPropertyString(
-                "sub-back-color",
-                backgroundColorSubtitles().get().toHexString(),
-            )
         }
     }
 
@@ -727,924 +477,480 @@ class PlayerActivity : BaseActivity() {
         }
     }
 
-    private fun copyScripts() {
-        CoroutineScope(Dispatchers.IO).launchIO {
-            // First, delete all present scripts
-            val scriptsDir = {
-                UniFile.fromFile(applicationContext.filesDir)?.createDirectory("scripts")
-            }
-            val scriptOptsDir = {
-                UniFile.fromFile(applicationContext.filesDir)?.createDirectory("script-opts")
-            }
-            scriptsDir()?.delete()
-            scriptOptsDir()?.delete()
+    private fun setupPlayerAudio() {
+        with(audioPreferences) {
+            audioChannels().get().let { MPVLib.setPropertyString(it.property, it.value) }
 
-            // Then, copy the scripts from the Aniyomi directory
-            storageManager.getScriptsDirectory()?.listFiles()?.forEach { file ->
-                val outFile = scriptsDir()?.createFile(file.name)
-                outFile?.let {
-                    file.openInputStream().copyTo(it.openOutputStream())
-                }
-            }
-            storageManager.getScriptOptsDirectory()?.listFiles()?.forEach { file ->
-                val outFile = scriptOptsDir()?.createFile(file.name)
-                outFile?.let {
-                    file.openInputStream().copyTo(it.openOutputStream())
-                }
+            val request = AudioFocusRequestCompat.Builder(AudioManagerCompat.AUDIOFOCUS_GAIN).also {
+                it.setAudioAttributes(
+                    AudioAttributesCompat.Builder().setUsage(AudioAttributesCompat.USAGE_MEDIA)
+                        .setContentType(AudioAttributesCompat.CONTENT_TYPE_MUSIC).build(),
+                )
+                it.setOnAudioFocusChangeListener(audioFocusChangeListener)
+            }.build()
+            AudioManagerCompat.requestAudioFocus(audioManager, request).let {
+                if (it == AudioManager.AUDIOFOCUS_REQUEST_FAILED) return@let
+                audioFocusRequest = request
             }
         }
     }
 
-    private fun setupPlayerBrightness() {
-        val useDeviceBrightness =
-            playerPreferences.playerBrightnessValue().get() == -1.0F ||
-                !playerPreferences.rememberPlayerBrightness().get()
-
-        brightness = if (useDeviceBrightness) {
-            getCurrentBrightness()
-        } else {
-            playerPreferences.playerBrightnessValue().get()
-        }
-        verticalScrollLeft(0F)
-    }
-
-    private fun getMaxBrightness(): Float {
-        val powerManager = getSystemService(POWER_SERVICE) as? PowerManager ?: return MAX_BRIGHTNESS
-        val brightnessField = powerManager.javaClass.declaredFields.find {
-            it.name == "BRIGHTNESS_ON"
-        } ?: return MAX_BRIGHTNESS
-
-        brightnessField.isAccessible = true
-        return try {
-            (brightnessField.get(powerManager) as Int).toFloat()
-        } catch (e: IllegalAccessException) {
-            logcat(LogPriority.ERROR, e) { "Unable to access BRIGHTNESS_ON field" }
-            MAX_BRIGHTNESS
-        }
-    }
-
-    private fun getCurrentBrightness(): Float {
-        // check if window has brightness set
-        val lp = window.attributes
-        if (lp.screenBrightness >= 0f) return lp.screenBrightness
-        val resolver = contentResolver
-        return try {
-            Settings.System.getInt(resolver, Settings.System.SCREEN_BRIGHTNESS) / getMaxBrightness()
-        } catch (e: Settings.SettingNotFoundException) {
-            logcat(LogPriority.ERROR, e) { "Unable to get screen brightness" }
-            0.5F
-        }
-    }
-
-    @Suppress("DEPRECATION")
-    private fun setupMediaSession() {
-        mediaSession = MediaSessionCompat(this, "Aniyomi_Player_Session").apply {
-            // Enable callbacks from MediaButtons and TransportControls
-            setFlags(
-                MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS or
-                    MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS,
-            )
-
-            // Do not let MediaButtons restart the player when the app is not visible
-            setMediaButtonReceiver(null)
-
-            setPlaybackState(
-                with(playbackStateBuilder) {
-                    setState(
-                        PlaybackStateCompat.STATE_NONE,
-                        0L,
-                        0.0F,
-                    )
-                    build()
-                },
-            )
-
-            // Implement methods that handle callbacks from a media controller
-            setCallback(
-                object : MediaSessionCompat.Callback() {
-                    override fun onPlay() {
-                        pauseByIntents(false)
-                    }
-
-                    override fun onPause() {
-                        pauseByIntents(true)
-                    }
-
-                    override fun onSkipToPrevious() {
-                        if (playerPreferences.mediaChapterSeek().get()) {
-                            if (player.loadChapters().isNotEmpty()) {
-                                doubleTapSeek(
-                                    -1,
-                                    videoChapterText = stringResource(MR.strings.go_to_previous_chapter),
-                                    chapterSeek = "-1",
-                                )
-                            }
-                        } else {
-                            changeEpisode(viewModel.getAdjacentEpisodeId(previous = true))
-                        }
-                    }
-
-                    override fun onSkipToNext() {
-                        if (playerPreferences.mediaChapterSeek().get()) {
-                            if (player.loadChapters().isNotEmpty()) {
-                                doubleTapSeek(
-                                    1,
-                                    videoChapterText = stringResource(MR.strings.go_to_next_chapter),
-                                    chapterSeek = "1",
-                                )
-                            } else {
-                                doubleTapSeek(viewModel.getAnimeSkipIntroLength())
-                            }
-                        } else {
-                            changeEpisode(viewModel.getAdjacentEpisodeId(previous = false))
-                        }
-                    }
-                },
-            )
-        }
-
-        MediaControllerCompat(this, mediaSession).also { mediaController ->
-            MediaControllerCompat.setMediaController(this, mediaController)
-        }
-
-        headsetReceiver = object : BroadcastReceiver() {
-            override fun onReceive(context: Context, intent: Intent) {
-                if (intent.action == AudioManager.ACTION_AUDIO_BECOMING_NOISY) {
-                    pauseByIntents(true)
+    private val audioFocusChangeListener = AudioManager.OnAudioFocusChangeListener {
+        when (it) {
+            AudioManager.AUDIOFOCUS_LOSS,
+            AudioManager.AUDIOFOCUS_LOSS_TRANSIENT,
+            -> {
+                val oldRestore = restoreAudioFocus
+                val wasPlayerPaused = player.paused ?: false
+                viewModel.pause()
+                restoreAudioFocus = {
+                    oldRestore()
+                    if (!wasPlayerPaused) viewModel.unpause()
                 }
             }
-        }
-    }
-
-    private fun pauseByIntents(pause: Boolean) {
-        player.paused = pause
-        playerControls.toggleControls(!pause)
-        updatePlaybackState(pause = pause)
-    }
 
-    private fun updatePlaybackState(cachePause: Boolean = false, pause: Boolean = false) {
-        val state = when {
-            player.timePos?.let { it < 0 } ?: true ||
-                player.duration?.let { it <= 0 } ?: true -> PlaybackStateCompat.STATE_CONNECTING
-            cachePause -> PlaybackStateCompat.STATE_BUFFERING
-            pause or (player.paused == true) -> PlaybackStateCompat.STATE_PAUSED
-            else -> PlaybackStateCompat.STATE_PLAYING
-        }
-        var actions = PlaybackStateCompat.ACTION_PLAY or
-            PlaybackStateCompat.ACTION_PLAY_PAUSE or
-            PlaybackStateCompat.ACTION_PAUSE
-        if (viewModel.currentPlaylist.size > 1) {
-            actions = actions or PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS or
-                PlaybackStateCompat.ACTION_SKIP_TO_NEXT
-        }
-
-        mediaSession.setPlaybackState(
-            with(playbackStateBuilder) {
-                setState(
-                    state,
-                    player.timePos?.toLong() ?: 0L,
-                    player.playbackSpeed?.toFloat() ?: 1.0f,
-                )
-                setActions(actions)
-                build()
-            },
-        )
-    }
-
-    @Suppress("DEPRECATION")
-    private fun loadDeviceDimensions() {
-        this@PlayerActivity.requestedOrientation = playerPreferences.defaultPlayerOrientationType().get()
-        val dm = DisplayMetrics()
-        windowManager.defaultDisplay.getRealMetrics(dm)
-        deviceWidth = dm.widthPixels
-        deviceHeight = dm.heightPixels
-        if (deviceWidth <= deviceHeight) {
-            switchControlsOrientation(false)
-        } else {
-            switchControlsOrientation(true)
-        }
-
-        val aspectProperty = MPVLib.getPropertyString("video-aspect-override").toDouble()
-        AspectState.mode = if (aspectProperty != -1.0 && aspectProperty != (deviceWidth / deviceHeight).toDouble()) {
-            AspectState.CUSTOM
-        } else {
-            playerPreferences.aspectState().get()
-        }
-
-        playerControls.setViewMode(showText = false)
-    }
-
-    private fun pauseForDialogSheet(fadeControls: Boolean = false): () -> Unit {
-        val wasPlayerPaused = player.paused ?: true // default to not changing state
-        player.paused = true
-        if (!fadeControls) playerControls.fadeOutControlsRunnable.run()
-        return {
-            if (!wasPlayerPaused) {
-                player.paused = false
-            } else {
-                playerControls.showAndFadeControls()
+            AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK -> {
+                MPVLib.command(arrayOf("multiply", "volume", "0.5"))
+                restoreAudioFocus = {
+                    MPVLib.command(arrayOf("multiply", "volume", "2"))
+                }
             }
-            viewModel.closeDialogSheet()
-            refreshUi()
-        }
-    }
-
-    // Create Player -- End --
 
-    // Override PlayerActivity lifecycle -- Start --
+            AudioManager.AUDIOFOCUS_GAIN -> {
+                restoreAudioFocus()
+                restoreAudioFocus = {}
+            }
 
-    override fun onSaveInstanceState(outState: Bundle) {
-        if (!isChangingConfigurations) {
-            viewModel.onSaveInstanceStateNonConfigurationChange()
+            AudioManager.AUDIOFOCUS_REQUEST_FAILED -> {
+                logcat(LogPriority.DEBUG) { "didn't get audio focus" }
+            }
         }
-        super.onSaveInstanceState(outState)
     }
 
     override fun onResume() {
         super.onResume()
-        refreshUi()
-    }
-
-    override fun onPause() {
-        viewModel.saveCurrentEpisodeWatchingProgress()
-        super.onPause()
-    }
-
-    override fun onStop() {
-        viewModel.saveCurrentEpisodeWatchingProgress()
-        if (!playerIsDestroyed) {
-            player.paused = true
-        }
-        if (PipState.mode == PipState.ON && powerManager.isInteractive) {
-            finishAndRemoveTask()
-        }
-
-        super.onStop()
-    }
-
-    override fun finishAndRemoveTask() {
-        viewModel.deletePendingEpisodes()
-        super.finishAndRemoveTask()
-    }
-
-    override fun finish() {
-        super.finish()
-        overridePendingTransition(R.anim.shared_axis_x_pop_enter, R.anim.shared_axis_x_pop_exit)
-    }
-
-    override fun onDestroy() {
-        mediaSession.isActive = false
-        mediaSession.release()
-        unregisterReceiver(headsetReceiver)
-
-        playerPreferences.playerVolumeValue().set(fineVolume)
-        playerPreferences.playerBrightnessValue().set(brightness)
-        MPVLib.removeLogObserver(playerObserver)
-        if (!playerIsDestroyed) {
-            playerIsDestroyed = true
-            player.removeObserver(playerObserver)
-            player.destroy()
-        }
-        abandonAudioFocus()
-        super.onDestroy()
-    }
 
-    @Deprecated("Deprecated in Java")
-    override fun onBackPressed() {
-        if (supportedAndEnabled) {
-            if (player.paused == false && playerPreferences.pipOnExit().get()) {
-                updatePip(true)
-            } else {
-                finishAndRemoveTask()
-                super.onBackPressed()
+        viewModel.currentVolume.update {
+            audioManager.getStreamVolume(AudioManager.STREAM_MUSIC).also {
+                if (it < viewModel.maxVolume) viewModel.changeMPVVolumeTo(100)
             }
-        } else {
-            finishAndRemoveTask()
-            super.onBackPressed()
-        }
-    }
-
-    override fun onUserLeaveHint() {
-        if (player.paused == false &&
-            playerPreferences.pipOnExit().get() &&
-            Build.VERSION.SDK_INT < Build.VERSION_CODES.S
-        ) {
-            updatePip(start = true)
         }
-        super.onUserLeaveHint()
     }
 
     override fun onConfigurationChanged(newConfig: Configuration) {
-        super.onConfigurationChanged(newConfig)
-        if (PipState.mode != PipState.STARTED) {
-            if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                switchControlsOrientation(true)
-            } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {
-                switchControlsOrientation(false)
-            }
+        if (!isInPictureInPictureMode) {
+            viewModel.changeVideoAspect(playerPreferences.aspectState().get())
+        } else {
+            viewModel.hideControls()
         }
+        super.onConfigurationChanged(newConfig)
     }
 
-    // Override PlayerActivity lifecycle -- End --
-
-    /**
-     * Function to handle Player UI on orientation changes
-     * Affects the top row in portrait and landscape mode
-     * @param isLandscape whether the new orientation is landscape
-     */
-    private fun switchControlsOrientation(isLandscape: Boolean) {
-        viewModel.viewModelScope.launchUI {
-            refreshUi()
-            if (isLandscape) {
-                if (deviceWidth <= deviceHeight) {
-                    deviceWidth = deviceHeight.also { deviceHeight = deviceWidth }
-                }
-
-                playerControls.binding.episodeListBtn.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                    rightToLeft = playerControls.binding.toggleAutoplay.id
-                    rightToRight = ConstraintLayout.LayoutParams.UNSET
-                }
-                playerControls.binding.settingsBtn.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                    topToTop = ConstraintLayout.LayoutParams.PARENT_ID
-                    topToBottom = ConstraintLayout.LayoutParams.UNSET
-                }
-                playerControls.binding.toggleAutoplay.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                    leftToLeft = ConstraintLayout.LayoutParams.UNSET
-                    leftToRight = playerControls.binding.episodeListBtn.id
-                }
-            } else {
-                if (deviceWidth >= deviceHeight) {
-                    deviceWidth = deviceHeight.also { deviceHeight = deviceWidth }
-                }
+    // A bunch of observers
 
-                playerControls.binding.episodeListBtn.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                    rightToLeft = ConstraintLayout.LayoutParams.UNSET
-                    rightToRight = ConstraintLayout.LayoutParams.PARENT_ID
-                }
-                playerControls.binding.settingsBtn.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                    topToTop = ConstraintLayout.LayoutParams.UNSET
-                    topToBottom = playerControls.binding.episodeListBtn.id
-                }
-                playerControls.binding.toggleAutoplay.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                    leftToLeft = ConstraintLayout.LayoutParams.PARENT_ID
-                    leftToRight = ConstraintLayout.LayoutParams.UNSET
-                }
+    internal fun onObserverEvent(property: String, value: Long) {
+        if (player.isExiting) return
+        when (property) {
+            "time-pos" -> {
+                viewModel.updatePlayBackPos(value.toFloat())
+                viewModel.aniSkipStuff(value)
             }
-            setupGestures()
-            viewModel.closeDialogSheet()
+            "demuxer-cache-time" -> viewModel.updateReadAhead(value = value)
+            "volume" -> viewModel.setMPVVolume(value.toInt())
+            "volume-max" -> viewModel.volumeBoostCap = value.toInt() - 100
+            "chapter" -> viewModel.updateChapter(value)
+            "duration" -> viewModel.duration.update { value.toFloat() }
         }
     }
 
-    /**
-     * Sets up the gesture detector and connects it to the player
-     */
-    @SuppressLint("ClickableViewAccessibility")
-    private fun setupGestures() {
-        val gestures = GestureHandler(this, deviceWidth.toFloat(), deviceHeight.toFloat())
-        val mDetector = GestureDetectorCompat(this, gestures)
-        player.setOnTouchListener { v, event ->
-            gestures.onTouch(v, event)
-            mDetector.onTouchEvent(event)
+    internal fun onObserverEvent(property: String) {
+        if (player.isExiting) return
+        when (property) {
+            "chapter-list" -> {
+                viewModel.loadChapters()
+                viewModel.updateChapter(0)
+            }
+            // TODO(tracklist)
+            "track-list" -> viewModel.loadTracks()
         }
     }
 
-    /**
-     * Switches to the episode based on [episodeId],
-     * @param episodeId id of the episode to switch the player to
-     * @param autoPlay whether the episode is switching due to auto play
-     */
-    internal fun changeEpisode(episodeId: Long?, autoPlay: Boolean = false) {
-        animationHandler.removeCallbacks(nextEpisodeRunnable)
-        viewModel.closeDialogSheet()
-
-        player.paused = true
-        showLoadingIndicator(true)
-        videoChapters = emptyList()
-        aniskipStamps = emptyList()
-
-        lifecycleScope.launch {
-            viewModel.mutableState.update { it.copy(isLoadingEpisode = true) }
-
-            val pipEpisodeToasts = playerPreferences.pipEpisodeToasts().get()
-
-            when (val switchMethod = viewModel.loadEpisode(episodeId)) {
-                null -> {
-                    if (viewModel.currentAnime != null && !autoPlay) {
-                        launchUI { toast(MR.strings.no_next_episode) }
-                    }
-                    showLoadingIndicator(false)
-                }
-
-                else -> {
-                    if (switchMethod.first != null) {
-                        when {
-                            switchMethod.first!!.isEmpty() -> setInitialEpisodeError(
-                                Exception("Video list is empty."),
-                            )
-                            else -> setVideoList(qualityIndex = 0, switchMethod.first!!)
-                        }
-                    } else {
-                        logcat(LogPriority.ERROR) { "Error getting links" }
-                    }
-
-                    if (PipState.mode == PipState.ON && pipEpisodeToasts) {
-                        launchUI { toast(switchMethod.second) }
-                    }
+    internal fun onObserverEvent(property: String, value: Boolean) {
+        if (player.isExiting) return
+        when (property) {
+            "pause" -> {
+                if (value) {
+                    viewModel.pause()
+                    window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
+                } else {
+                    viewModel.unpause()
+                    window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
                 }
             }
-        }
-    }
 
-    internal fun showLoadingIndicator(visible: Boolean) {
-        viewModel.viewModelScope.launchUI {
-            binding.loadingIndicator.isVisible = visible
-            playerControls.binding.playBtn.isVisible = !visible
-        }
-    }
+            "paused-for-cache" -> {
+                viewModel.isLoading.update { value }
+            }
 
-    private fun isSeeking(seeking: Boolean) {
-        val position = player.timePos ?: return
-        val cachePosition = MPVLib.getPropertyInt("demuxer-cache-time") ?: -1
-        showLoadingIndicator(position >= cachePosition && seeking)
-    }
+            "seeking" -> {
+                viewModel.isLoading.update { value }
+            }
 
-    @Suppress("UNUSED_PARAMETER")
-    @SuppressLint("SourceLockedOrientationActivity")
-    fun rotatePlayer(view: View) {
-        if (this.resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT) {
-            this.requestedOrientation = playerPreferences.defaultPlayerOrientationLandscape().get()
-        } else {
-            this.requestedOrientation = playerPreferences.defaultPlayerOrientationPortrait().get()
+            "eof-reached" -> {
+                endFile(value)
+            }
         }
     }
 
-    private val doubleTapPlayPauseRunnable = Runnable {
-        AnimationUtils.loadAnimation(this, R.anim.player_fade_out).also { fadeAnimation ->
-            binding.playPauseView.startAnimation(fadeAnimation)
-            binding.playPauseView.visibility = View.GONE
+    val trackId: (String) -> Int? = {
+        when (it) {
+            "auto" -> null
+            "no" -> -1
+            else -> it.toInt()
         }
     }
 
-    internal fun doubleTapPlayPause() {
-        animationHandler.removeCallbacks(doubleTapPlayPauseRunnable)
-        playerControls.playPause()
-
-        if (!playerControls.binding.unlockedView.isVisible) {
-            when {
-                player.paused!! -> {
-                    binding.playPauseView.setImageResource(R.drawable.ic_pause_64dp)
-                }
-
-                !player.paused!! -> {
-                    binding.playPauseView.setImageResource(R.drawable.ic_play_arrow_64dp)
-                }
+    internal fun onObserverEvent(property: String, value: String) {
+        if (player.isExiting) return
+        when (property.substringBeforeLast("/")) {
+            "aid" -> trackId(value)?.let { viewModel.updateAudio(it) }
+            "sid" -> trackId(value)?.let { viewModel.updateSubtitle(it, viewModel.selectedSubtitles.value.second) }
+            "secondary-sid" -> trackId(value)?.let {
+                viewModel.updateSubtitle(viewModel.selectedSubtitles.value.first, it)
             }
-
-            AnimationUtils.loadAnimation(this, R.anim.player_fade_in).also { fadeAnimation ->
-                binding.playPauseView.startAnimation(fadeAnimation)
-                binding.playPauseView.visibility = View.VISIBLE
-            }
-
-            animationHandler.postDelayed(doubleTapPlayPauseRunnable, 500L)
-        } else {
-            binding.playPauseView.visibility = View.GONE
+            "hwdec", "hwdec-current" -> viewModel.getDecoder()
+            // TODO(custombutton)
+            // "user-data/mpvkt" -> viewModel.handleLuaInvocation(property, value)
         }
     }
 
-    private lateinit var doubleTapBg: ImageView
-
-    private val doubleTapSeekRunnable = Runnable {
-        SeekState.mode = SeekState.NONE
-        binding.secondsView.visibility = View.GONE
-        doubleTapBg.visibility = View.GONE
-        binding.secondsView.seconds = 0
-        binding.secondsView.stop()
-    }
-
-    fun doubleTapSeek(
-        time: Int,
-        event: MotionEvent? = null,
-        isDoubleTap: Boolean = true,
-        videoChapterText: String? = null,
-        chapterSeek: String? = null,
-    ) {
-        if (SeekState.mode != SeekState.DOUBLE_TAP) {
-            doubleTapBg = if (time < 0) binding.rewBg else binding.ffwdBg
+    @SuppressLint("NewApi")
+    internal fun onObserverEvent(property: String, value: Double) {
+        if (player.isExiting) return
+        when (property) {
+            "speed" -> viewModel.playbackSpeed.update { value.toFloat() }
+            "video-params/aspect" -> if (isPipSupportedAndEnabled) createPipParams()
         }
+    }
 
-        val view = if (time < 0) binding.rewTap else binding.ffwdTap
-        val width = if (time < 0) deviceWidth * 0.2F else deviceWidth * 0.8F
-        val x = (event?.x?.toInt() ?: width.toInt()) - view.x.toInt()
-        val y = (event?.y?.toInt() ?: (deviceHeight / 2)) - view.y.toInt()
-
-        SeekState.mode = if (isDoubleTap) SeekState.DOUBLE_TAP else SeekState.NONE
-        binding.secondsView.visibility = View.VISIBLE
-        animationHandler.removeCallbacks(doubleTapSeekRunnable)
-        animationHandler.postDelayed(doubleTapSeekRunnable, 750L)
-
-        if (time < 0) {
-            binding.secondsView.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                rightToRight = ConstraintLayout.LayoutParams.UNSET
-                leftToLeft = ConstraintLayout.LayoutParams.PARENT_ID
-            }
-            binding.secondsView.isForward = false
-
-            if (doubleTapBg != binding.rewBg) {
-                doubleTapBg.visibility = View.GONE
-                binding.secondsView.seconds = 0
-                doubleTapBg = binding.rewBg
-            }
-            doubleTapBg.visibility = View.VISIBLE
-
-            if (videoChapterText != null) {
-                binding.secondsView.binding.doubleTapSeconds.text = videoChapterText
-            } else {
-                binding.secondsView.seconds -= time
-            }
-        } else {
-            binding.secondsView.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                rightToRight = ConstraintLayout.LayoutParams.PARENT_ID
-                leftToLeft = ConstraintLayout.LayoutParams.UNSET
-            }
-            binding.secondsView.isForward = true
-
-            if (doubleTapBg != binding.ffwdBg) {
-                doubleTapBg.visibility = View.GONE
-                binding.secondsView.seconds = 0
-                doubleTapBg = binding.ffwdBg
-            }
-            doubleTapBg.visibility = View.VISIBLE
-
-            if (videoChapterText != null) {
-                binding.secondsView.binding.doubleTapSeconds.text = videoChapterText
-            } else {
-                binding.secondsView.seconds += time
+    internal fun event(eventId: Int) {
+        if (player.isExiting) return
+        when (eventId) {
+            MPVLib.mpvEventId.MPV_EVENT_FILE_LOADED -> {
+                viewModel.viewModelScope.launchIO { fileLoaded() }
             }
-        }
-        if (videoChapterText == null || chapterSeek != null) {
-            playerControls.hideUiForSeek()
-        }
-        binding.secondsView.start()
-        ViewAnimationUtils.createCircularReveal(
-            view,
-            x,
-            y,
-            0f,
-            kotlin.math.max(view.height, view.width).toFloat(),
-        ).setDuration(500).start()
-
-        ObjectAnimator.ofFloat(view, "alpha", 0f, 0.15f).setDuration(500).start()
-        ObjectAnimator.ofFloat(view, "alpha", 0.15f, 0.15f, 0f).setDuration(1000).start()
-
-        if (chapterSeek == null) {
-            MPVLib.command(arrayOf("seek", time.toString(), "relative+exact"))
-        } else {
-            MPVLib.command(arrayOf("add", "chapter", chapterSeek))
+            MPVLib.mpvEventId.MPV_EVENT_SEEK -> viewModel.isLoading.update { true }
+            MPVLib.mpvEventId.MPV_EVENT_PLAYBACK_RESTART -> player.isExiting = false
         }
     }
 
-    // Gesture Functions -- Start --
+    fun createPipParams(): PictureInPictureParams {
+        val builder = PictureInPictureParams.Builder()
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            val anime = viewModel.currentAnime.value
+            val episode = viewModel.currentEpisode.value
 
-    internal fun initSeek() {
-        initialSeek = player.timePos ?: -1
-    }
-
-    internal fun horizontalScroll(diff: Float, final: Boolean = false) {
-        // disable seeking when timePos is not available
-        val duration = player.duration ?: 0
-        if (duration == 0 || initialSeek < 0) {
-            return
-        }
-        val newPos = (initialSeek + diff.toInt()).coerceIn(0, duration)
-        if (playerPreferences.playerSmoothSeek().get() && final) {
-            player.timePos = newPos
-        } else {
-            MPVLib.command(
-                arrayOf("seek", newPos.toString(), "absolute+keyframes"),
-            )
-        }
-        val newDiff = newPos - initialSeek
-
-        playerControls.showSeekText(newPos, newDiff)
-    }
-
-    fun verticalScrollRight(diff: Float) {
-        if (diff != 0F) {
-            fineVolume = (fineVolume + (diff * maxVolume)).coerceIn(
-                0F,
-                maxVolume.toFloat(),
-            )
+            if (anime != null && episode != null) {
+                builder.setTitle(anime.title).setSubtitle(episode.name)
+            }
         }
-        val newVolume = fineVolume.toInt()
-        audioManager!!.setStreamVolume(AudioManager.STREAM_MUSIC, newVolume, 0)
-
-        playerControls.showVolumeBar(diff != 0F, newVolume)
-    }
-
-    fun verticalScrollLeft(diff: Float) {
-        if (diff != 0F) brightness = (brightness + diff).coerceIn(-0.75F, 1F)
-        window.attributes = window.attributes.apply {
-            // value of 0 and 0.01 is broken somehow
-            screenBrightness = brightness.coerceAtLeast(0.02F)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+            val autoEnter = playerPreferences.pipOnExit().get()
+            builder.setAutoEnterEnabled(player.paused == false && autoEnter)
+            builder.setSeamlessResizeEnabled(player.paused == false && autoEnter)
         }
-
-        if (brightness < 0) {
-            binding.brightnessOverlay.visibility = View.VISIBLE
-            val alpha = (abs(brightness) * 256).toInt()
-            binding.brightnessOverlay.setBackgroundColor(Color.argb(alpha, 0, 0, 0))
-        } else {
-            binding.brightnessOverlay.visibility = View.GONE
+        builder.setActions(
+            createPipActions(
+                context = this,
+                isPaused = player.paused ?: true,
+                replaceWithPrevious = playerPreferences.pipReplaceWithPrevious().get(),
+                playlistCount = viewModel.currentPlaylist.value.size,
+                playlistPosition = viewModel.getCurrentEpisodeIndex(),
+            ),
+        )
+        builder.setSourceRectHint(pipRect)
+        player.videoH?.let {
+            val height = it
+            val width = it * player.getVideoOutAspect()!!
+            val rational = Rational(height, width.toInt()).toFloat()
+            if (rational in 0.42..2.38) builder.setAspectRatio(Rational(width.toInt(), height))
         }
-        val finalBrightness = (brightness * 100).roundToInt()
-
-        playerControls.showBrightnessBar(diff != 0F, finalBrightness)
+        return builder.build()
     }
 
-    // Gesture Functions -- End --
-
-    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {
-        when (keyCode) {
-            KeyEvent.KEYCODE_VOLUME_UP -> {
-                verticalScrollRight(1 / maxVolume.toFloat())
-                return true
-            }
-            KeyEvent.KEYCODE_VOLUME_DOWN -> {
-                verticalScrollRight(-1 / maxVolume.toFloat())
-                return true
-            }
-            // Not entirely sure how to handle these KeyCodes yet, need to learn some more
-            /**
-             KeyEvent.KEYCODE_MEDIA_NEXT -> {
-             switchEpisode(false)
-             return true
-             }
-
-             KeyEvent.KEYCODE_MEDIA_PREVIOUS -> {
-             switchEpisode(true)
-             return true
-             }
-             KeyEvent.KEYCODE_MEDIA_PLAY -> {
-             player.paused = true
-             doubleTapPlayPause()
-             return true
-             }
-             KeyEvent.KEYCODE_MEDIA_PAUSE -> {
-             player.paused = false
-             doubleTapPlayPause()
-             return true
-             }
-             KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE -> {
-             doubleTapPlayPause()
-             return true
-             }
-             */
-            KeyEvent.KEYCODE_DPAD_RIGHT -> {
-                doubleTapSeek(playerPreferences.skipLengthPreference().get())
-                return true
-            }
-            KeyEvent.KEYCODE_DPAD_LEFT -> {
-                doubleTapSeek(-playerPreferences.skipLengthPreference().get())
-                return true
+    @SuppressLint("UnspecifiedRegisterReceiverFlag")
+    override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration) {
+        if (!isInPictureInPictureMode) {
+            pipReceiver?.let {
+                unregisterReceiver(pipReceiver)
+                pipReceiver = null
             }
-            KeyEvent.KEYCODE_SPACE -> {
-                doubleTapPlayPause()
-                return true
+        } else {
+            setPictureInPictureParams(createPipParams())
+            viewModel.hideControls()
+            viewModel.hideSeekBar()
+            viewModel.isBrightnessSliderShown.update { false }
+            viewModel.isVolumeSliderShown.update { false }
+            viewModel.sheetShown.update { Sheets.None }
+            pipReceiver = object : BroadcastReceiver() {
+                override fun onReceive(context: Context?, intent: Intent?) {
+                    if (intent == null || intent.action != PIP_INTENTS_FILTER) return
+                    when (intent.getIntExtra(PIP_INTENT_ACTION, 0)) {
+                        PIP_PAUSE -> viewModel.pause()
+                        PIP_PLAY -> viewModel.unpause()
+                        PIP_NEXT -> viewModel.changeEpisode(false)
+                        PIP_PREVIOUS -> viewModel.changeEpisode(true)
+                        PIP_SKIP -> viewModel.seekBy(10)
+                    }
+                    setPictureInPictureParams(createPipParams())
+                }
             }
-            // add other keycodes as needed
-            else -> {
-                if (player.onKey(event!!)) return true
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+                registerReceiver(pipReceiver, IntentFilter(PIP_INTENTS_FILTER), RECEIVER_NOT_EXPORTED)
+            } else {
+                registerReceiver(pipReceiver, IntentFilter(PIP_INTENTS_FILTER))
             }
         }
-        return super.onKeyDown(keyCode, event)
-    }
-
-    // Removing this causes mpv to repeat the last repeated input
-    // that's not specified in onKeyDown indefinitely for some reason
-    override fun onKeyUp(keyCode: Int, event: KeyEvent?): Boolean {
-        if (player.onKey(event!!)) return true
-        return super.onKeyUp(keyCode, event)
-    }
-
-    /**
-     * Called from the presenter when a screenshot is ready to be shared. It shows Android's
-     * default sharing tool.
-     */
-    private fun onShareImageResult(uri: Uri, seconds: String) {
-        val anime = viewModel.currentAnime ?: return
-        val episode = viewModel.currentEpisode ?: return
 
-        val intent = uri.toShareIntent(
-            context = applicationContext,
-            message = stringResource(MR.strings.share_screenshot_info, anime.title, episode.name, seconds),
-        )
-        startActivity(Intent.createChooser(intent, stringResource(MR.strings.action_share)))
+        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig)
     }
 
-    /**
-     * Called from the presenter when a screenshot is saved or fails. It shows a message
-     * or logs the event depending on the [result].
-     */
-    private fun onSaveImageResult(result: PlayerViewModel.SaveImageResult) {
-        when (result) {
-            is PlayerViewModel.SaveImageResult.Success -> {
-                toast(MR.strings.picture_saved)
-            }
-            is PlayerViewModel.SaveImageResult.Error -> {
-                logcat(LogPriority.ERROR, result.error)
+    private fun setupPlayerOrientation() {
+        requestedOrientation = when (playerPreferences.defaultPlayerOrientationType().get()) {
+            PlayerOrientation.Free -> ActivityInfo.SCREEN_ORIENTATION_SENSOR
+            PlayerOrientation.Video -> if ((player.getVideoOutAspect() ?: 0.0) > 1.0) {
+                ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE
+            } else {
+                ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT
             }
+
+            PlayerOrientation.Portrait -> ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
+            PlayerOrientation.ReversePortrait -> ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT
+            PlayerOrientation.SensorPortrait -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT
+            PlayerOrientation.Landscape -> ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE
+            PlayerOrientation.ReverseLandscape -> ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT
+            PlayerOrientation.SensorLandscape -> ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE
         }
     }
 
-    /**
-     * Called from the presenter when a screenshot is set as cover or fails.
-     * It shows a different message depending on the [result].
-     */
-    private fun onSetAsCoverResult(result: SetAsCover) {
-        toast(
-            when (result) {
-                SetAsCover.Success -> MR.strings.cover_updated
-                SetAsCover.AddToLibraryFirst -> MR.strings.notification_first_add_to_library
-                SetAsCover.Error -> MR.strings.notification_cover_update_failed
-            },
-        )
-    }
+    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {
+        when (keyCode) {
+            KeyEvent.KEYCODE_VOLUME_UP -> {
+                viewModel.changeVolumeBy(1)
+                viewModel.displayVolumeSlider()
+            }
+            KeyEvent.KEYCODE_VOLUME_DOWN -> {
+                viewModel.changeVolumeBy(-1)
+                viewModel.displayVolumeSlider()
+            }
+            KeyEvent.KEYCODE_DPAD_RIGHT -> viewModel.handleLeftDoubleTap()
+            KeyEvent.KEYCODE_DPAD_LEFT -> viewModel.handleRightDoubleTap()
+            KeyEvent.KEYCODE_SPACE -> viewModel.pauseUnpause()
+            KeyEvent.KEYCODE_MEDIA_STOP -> finishAndRemoveTask()
 
-    @Suppress("UNUSED_PARAMETER")
-    fun cycleSpeed(view: View) {
-        player.cycleSpeed()
-        refreshUi()
-    }
+            KeyEvent.KEYCODE_MEDIA_REWIND -> viewModel.handleLeftDoubleTap()
+            KeyEvent.KEYCODE_MEDIA_FAST_FORWARD -> viewModel.handleRightDoubleTap()
 
-    @Suppress("UNUSED_PARAMETER")
-    fun skipIntro(view: View) {
-        if (skipType != null) {
-            // this stops the counter
-            if (waitingAniSkip > 0 && netflixStyle) {
-                waitingAniSkip = -1
-                return
-            }
-            skipType.let {
-                MPVLib.command(
-                    arrayOf(
-                        "seek",
-                        "${aniSkipInterval!!.first{it.skipType == skipType}.interval.endTime}",
-                        "absolute",
-                    ),
-                )
+            // other keys should be bound by the user in input.conf ig
+            else -> {
+                event?.let { player.onKey(it) }
+                super.onKeyDown(keyCode, event)
             }
-            AniSkipApi.PlayerUtils(binding, aniSkipInterval!!).skipAnimation(skipType!!)
-        } else if (playerControls.binding.controlsSkipIntroBtn.text != "") {
-            doubleTapSeek(viewModel.getAnimeSkipIntroLength(), isDoubleTap = false)
-            playerControls.resetControlsFade()
         }
+        return true
     }
 
-    /**
-     * Updates the player UI text and controls in a separate thread
-     */
-    internal fun refreshUi() {
-        viewModel.viewModelScope.launchUI {
-            setVisibilities()
-            player.timePos?.let { playerControls.updatePlaybackPos(it) }
-            player.duration?.let { playerControls.updatePlaybackDuration(it) }
-            updatePlaybackStatus(player.paused ?: return@launchUI)
-            updatePip(start = false)
-            playerControls.updateEpisodeText()
-            playerControls.updatePlaylistButtons()
-            playerControls.updateSpeedButton()
-        }
+    override fun onKeyUp(keyCode: Int, event: KeyEvent?): Boolean {
+        if (player.onKey(event!!)) return true
+        return super.onKeyUp(keyCode, event)
     }
 
-    @Suppress("DEPRECATION")
-    private fun setVisibilities() {
-        val windowInsetsController by lazy { WindowInsetsControllerCompat(window, binding.root) }
-        binding.root.systemUiVisibility =
-            View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY or
-            View.SYSTEM_UI_FLAG_LAYOUT_STABLE or
-            View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or
-            View.SYSTEM_UI_FLAG_LOW_PROFILE
-        windowInsetsController.hide(WindowInsetsCompat.Type.systemBars())
-        windowInsetsController.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
-        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P && playerPreferences.playerFullscreen().get()) {
-            window.attributes.layoutInDisplayCutoutMode =
-                WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES
+    private fun setupMediaSession() {
+        val previousAction = gesturePreferences.mediaPreviousGesture().get()
+        val playAction = gesturePreferences.mediaPlayPauseGesture().get()
+        val nextAction = gesturePreferences.mediaNextGesture().get()
+
+        mediaSession = MediaSession(this, "PlayerActivity").apply {
+            setCallback(
+                object : MediaSession.Callback() {
+                    override fun onPlay() {
+                        when (playAction) {
+                            SingleActionGesture.None -> {}
+                            SingleActionGesture.Seek -> {}
+                            SingleActionGesture.PlayPause -> {
+                                super.onPlay()
+                                viewModel.unpause()
+                                window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
+                            }
+                            SingleActionGesture.Custom -> {
+                                MPVLib.command(arrayOf("keypress", CustomKeyCodes.MediaPlay.keyCode))
+                            }
+
+                            SingleActionGesture.Switch -> {}
+                        }
+                    }
+
+                    override fun onPause() {
+                        when (playAction) {
+                            SingleActionGesture.None -> {}
+                            SingleActionGesture.Seek -> {}
+                            SingleActionGesture.PlayPause -> {
+                                super.onPause()
+                                viewModel.pause()
+                                window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
+                            }
+                            SingleActionGesture.Custom -> {
+                                MPVLib.command(arrayOf("keypress", CustomKeyCodes.MediaPlay.keyCode))
+                            }
+
+                            SingleActionGesture.Switch -> {}
+                        }
+                    }
+
+                    override fun onSkipToPrevious() {
+                        when (previousAction) {
+                            SingleActionGesture.None -> {}
+                            SingleActionGesture.Seek -> {
+                                viewModel.leftSeek()
+                            }
+                            SingleActionGesture.PlayPause -> {
+                                viewModel.pauseUnpause()
+                            }
+                            SingleActionGesture.Custom -> {
+                                MPVLib.command(arrayOf("keypress", CustomKeyCodes.MediaPrevious.keyCode))
+                            }
+
+                            SingleActionGesture.Switch -> viewModel.changeEpisode(true)
+                        }
+                    }
+
+                    override fun onSkipToNext() {
+                        when (nextAction) {
+                            SingleActionGesture.None -> {}
+                            SingleActionGesture.Seek -> {
+                                viewModel.rightSeek()
+                            }
+                            SingleActionGesture.PlayPause -> {
+                                viewModel.pauseUnpause()
+                            }
+                            SingleActionGesture.Custom -> {
+                                MPVLib.command(arrayOf("keypress", CustomKeyCodes.MediaNext.keyCode))
+                            }
+
+                            SingleActionGesture.Switch -> viewModel.changeEpisode(false)
+                        }
+                    }
+
+                    override fun onStop() {
+                        super.onStop()
+                        isActive = false
+                        this@PlayerActivity.onStop()
+                    }
+                },
+            )
+            setPlaybackState(
+                PlaybackState.Builder()
+                    .setActions(
+                        PlaybackState.ACTION_PLAY or
+                            PlaybackState.ACTION_PAUSE or
+                            PlaybackState.ACTION_STOP or
+                            PlaybackState.ACTION_SKIP_TO_PREVIOUS or
+                            PlaybackState.ACTION_SKIP_TO_NEXT,
+                    )
+                    .build(),
+            )
+            isActive = true
         }
+
+        val filter = IntentFilter().apply { addAction(AudioManager.ACTION_AUDIO_BECOMING_NOISY) }
+        registerReceiver(noisyReceiver, filter)
+        noisyReceiver.initialized = true
     }
 
-    private fun updatePlaybackStatus(paused: Boolean) {
-        val r = if (paused) R.drawable.ic_play_arrow_64dp else R.drawable.ic_pause_64dp
-        playerControls.binding.playBtn.setImageResource(r)
+    // ==== END MPVKT ====
 
-        if (paused) {
-            window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
-        } else {
-            window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
+    override fun onSaveInstanceState(outState: Bundle) {
+        if (!isChangingConfigurations) {
+            viewModel.onSaveInstanceStateNonConfigurationChange()
         }
+        super.onSaveInstanceState(outState)
     }
 
-    // TODO: Move into function once compose is implemented
-    val supportedAndEnabled = Injekt.get<BasePreferences>().deviceHasPip() && playerPreferences.enablePip().get()
-    internal fun updatePip(start: Boolean) {
-        val anime = viewModel.currentAnime ?: return
-        val episode = viewModel.currentEpisode ?: return
-        val paused = player.paused ?: return
-        val videoAspect = player.videoAspect ?: return
-        if (supportedAndEnabled) {
-            PictureInPictureHandler().update(
-                context = this,
-                title = anime.title,
-                subtitle = episode.name,
-                paused = paused,
-                replaceWithPrevious = playerPreferences.pipReplaceWithPrevious().get(),
-                pipOnExit = playerPreferences.pipOnExit().get() && !paused,
-                videoAspect = videoAspect * 10000,
-                playlistCount = viewModel.getCurrentEpisodeIndex(),
-                playlistPosition = viewModel.currentPlaylist.size,
-            ).let {
-                setPictureInPictureParams(it)
-                if (PipState.mode == PipState.OFF && start) {
-                    PipState.mode = PipState.STARTED
-                    playerControls.hideControls(hide = true)
-                    enterPictureInPictureMode(it)
-                }
-            }
-        }
+    override fun finishAndRemoveTask() {
+        viewModel.deletePendingEpisodes()
+        super.finishAndRemoveTask()
     }
 
-    @Deprecated("Deprecated in Java")
-    override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean) {
-        PipState.mode = if (isInPictureInPictureMode) PipState.ON else PipState.OFF
+    /**
+     * Switches to the episode based on [episodeId],
+     * @param episodeId id of the episode to switch the player to
+     * @param autoPlay whether the episode is switching due to auto play
+     */
+    internal fun changeEpisode(episodeId: Long?, autoPlay: Boolean = false) {
+        viewModel.sheetShown.update { _ -> Sheets.None }
+        viewModel.panelShown.update { _ -> Panels.None }
+        viewModel.pause()
+        viewModel.isLoading.update { _ -> true }
 
-        playerControls.lockControls(locked = PipState.mode == PipState.ON)
-        super.onPictureInPictureModeChanged(isInPictureInPictureMode)
+        aniskipStamps = emptyList()
 
-        if (PipState.mode == PipState.ON) {
-            // On Android TV it is required to hide controller in this PIP change callback
-            playerControls.hideControls(true)
-            binding.loadingIndicator.indicatorSize = binding.loadingIndicator.indicatorSize / 2
-            mReceiver = object : BroadcastReceiver() {
-                override fun onReceive(context: Context?, intent: Intent?) {
-                    if (intent == null || ACTION_MEDIA_CONTROL != intent.action) {
-                        return
+        lifecycleScope.launch {
+            viewModel.updateIsLoadingEpisode(true)
+
+            val pipEpisodeToasts = playerPreferences.pipEpisodeToasts().get()
+
+            when (val switchMethod = viewModel.loadEpisode(episodeId)) {
+                null -> {
+                    if (viewModel.currentAnime.value != null && !autoPlay) {
+                        launchUI { toast(MR.strings.no_next_episode) }
                     }
-                    when (intent.getIntExtra(EXTRA_CONTROL_TYPE, 0)) {
-                        PIP_PLAY -> {
-                            player.paused = false
-                        }
-                        PIP_PAUSE -> {
-                            player.paused = true
-                        }
-                        PIP_PREVIOUS -> {
-                            changeEpisode(viewModel.getAdjacentEpisodeId(previous = true))
-                        }
-                        PIP_NEXT -> {
-                            changeEpisode(viewModel.getAdjacentEpisodeId(previous = false))
-                        }
-                        PIP_SKIP -> {
-                            doubleTapSeek(time = 10)
+                    viewModel.isLoading.update { _ -> false }
+                }
+
+                else -> {
+                    if (switchMethod.first != null) {
+                        when {
+                            switchMethod.first!!.isEmpty() -> setInitialEpisodeError(
+                                Exception("Video list is empty."),
+                            )
+                            else -> {
+                                setVideoList(qualityIndex = 0, switchMethod.first!!)
+                            }
                         }
+                    } else {
+                        logcat(LogPriority.ERROR) { "Error getting links" }
+                    }
+
+                    if (isInPictureInPictureMode && pipEpisodeToasts) {
+                        launchUI { toast(switchMethod.second) }
                     }
                 }
             }
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
-                registerReceiver(mReceiver, IntentFilter(ACTION_MEDIA_CONTROL), RECEIVER_NOT_EXPORTED)
-            } else {
-                registerReceiver(mReceiver, IntentFilter(ACTION_MEDIA_CONTROL))
-            }
-        } else {
-            if (player.paused!!) playerControls.hideControls(false)
-            binding.loadingIndicator.indicatorSize = binding.loadingIndicator.indicatorSize * 2
-            if (mReceiver != null) {
-                unregisterReceiver(mReceiver)
-                mReceiver = null
-            }
         }
-    }
 
-    /**
-     * Called from the presenter if the initial load couldn't load the videos of the episode. In
-     * this case the activity is closed and a toast is shown to the user.
-     */
-    private fun setInitialEpisodeError(error: Throwable) {
-        toast(error.message)
-        logcat(LogPriority.ERROR, error)
-        finish()
+        viewModel.updateHasPreviousEpisode(
+            viewModel.getCurrentEpisodeIndex() != 0,
+        )
+        viewModel.updateHasNextEpisode(
+            viewModel.getCurrentEpisodeIndex() != viewModel.currentPlaylist.value.size - 1,
+        )
     }
 
-    private fun setVideoList(
+    fun setVideoList(
         qualityIndex: Int,
         videos: List<Video>?,
         fromStart: Boolean = false,
         position: Long? = null,
     ) {
-        if (playerIsDestroyed) return
-        currentVideoList = videos
-        currentVideoList?.getOrNull(qualityIndex)?.let {
-            streams.quality.index = qualityIndex
+        if (player.isExiting) return
+        viewModel.updateVideoList(videos ?: emptyList())
+        if (videos == null) return
+
+        videos.getOrNull(qualityIndex)?.let {
+            viewModel.setVideoIndex(qualityIndex)
             setHttpOptions(it)
-            if (viewModel.state.value.isLoadingEpisode) {
-                viewModel.currentEpisode?.let { episode ->
+            if (viewModel.isLoadingEpisode.value) {
+                viewModel.currentEpisode.value?.let { episode ->
                     val preservePos = playerPreferences.preserveWatchingPosition().get()
                     val resumePosition = position
                         ?: if ((episode.seen && !preservePos) || fromStart) {
@@ -1653,52 +959,35 @@ class PlayerActivity : BaseActivity() {
                             episode.last_second_seen
                         }
                     MPVLib.command(arrayOf("set", "start", "${resumePosition / 1000F}"))
-                    playerControls.updatePlaybackDuration(resumePosition.toInt() / 1000)
                 }
             } else {
                 player.timePos?.let {
                     MPVLib.command(arrayOf("set", "start", "${player.timePos}"))
                 }
             }
-            streams.subtitle.tracks = arrayOf(Track("nothing", "None")) + it.subtitleTracks.toTypedArray()
-            streams.audio.tracks = arrayOf(Track("nothing", "None")) + it.audioTracks.toTypedArray()
+
             MPVLib.command(arrayOf("loadfile", parseVideoUrl(it.videoUrl)))
         }
-        refreshUi()
     }
 
-    private fun parseVideoUrl(videoUrl: String?): String? {
-        val uri = Uri.parse(videoUrl)
-        return openContentFd(uri) ?: videoUrl
+    /**
+     * Called from the presenter if the initial load couldn't load the videos of the episode. In
+     * this case the activity is closed and a toast is shown to the user.
+     */
+    private fun setInitialEpisodeError(error: Throwable) {
+        toast(error.message)
+        logcat(LogPriority.ERROR, error)
+        finish()
     }
 
-    private fun openContentFd(uri: Uri): String? {
-        if (uri.scheme != "content") return null
-        val resolver = applicationContext.contentResolver
-        logcat { "Resolving content URI: $uri" }
-        val fd = try {
-            val desc = resolver.openFileDescriptor(uri, "r")
-            desc!!.detachFd()
-        } catch (e: Exception) {
-            logcat { "Failed to open content fd: $e" }
-            return null
-        }
-        // Find out real file path and see if we can read it directly
-        try {
-            val path = File("/proc/self/fd/$fd").canonicalPath
-            if (!path.startsWith("/proc") && File(path).canRead()) {
-                logcat { "Found real file path: $path" }
-                ParcelFileDescriptor.adoptFd(fd).close() // we don't need that anymore
-                return path
-            }
-        } catch (_: Exception) {}
-        // Else, pass the fd to mpv
-        return "fdclose://$fd"
+    private fun parseVideoUrl(videoUrl: String?): String? {
+        return Uri.parse(videoUrl).resolveUri(this)
+            ?: videoUrl
     }
 
     private fun setHttpOptions(video: Video) {
         if (viewModel.isEpisodeOnline() != true) return
-        val source = viewModel.currentSource as AnimeHttpSource
+        val source = viewModel.currentSource.value as? AnimeHttpSource ?: return
 
         val headers = (video.headers ?: source.headers)
             .toMultimap()
@@ -1717,15 +1006,56 @@ class PlayerActivity : BaseActivity() {
         // MPVLib.setOptionString("cache-dir", cacheDir)
     }
 
+    /**
+     * Called from the presenter when a screenshot is ready to be shared. It shows Android's
+     * default sharing tool.
+     */
+    private fun onShareImageResult(uri: Uri, seconds: String) {
+        val anime = viewModel.currentAnime.value ?: return
+        val episode = viewModel.currentEpisode.value ?: return
+
+        val intent = uri.toShareIntent(
+            context = applicationContext,
+            message = stringResource(MR.strings.share_screenshot_info, anime.title, episode.name, seconds),
+        )
+        startActivity(Intent.createChooser(intent, stringResource(MR.strings.action_share)))
+    }
+
+    /**
+     * Called from the presenter when a screenshot is saved or fails. It shows a message
+     * or logs the event depending on the [result].
+     */
+    private fun onSaveImageResult(result: PlayerViewModel.SaveImageResult) {
+        when (result) {
+            is PlayerViewModel.SaveImageResult.Success -> {
+                toast(MR.strings.picture_saved)
+            }
+            is PlayerViewModel.SaveImageResult.Error -> {
+                logcat(LogPriority.ERROR, result.error)
+            }
+        }
+    }
+
+    /**
+     * Called from the presenter when a screenshot is set as cover or fails.
+     * It shows a different message depending on the [result].
+     */
+    private fun onSetAsCoverResult(result: SetAsCover) {
+        toast(
+            when (result) {
+                SetAsCover.Success -> MR.strings.cover_updated
+                SetAsCover.AddToLibraryFirst -> MR.strings.notification_first_add_to_library
+                SetAsCover.Error -> MR.strings.notification_cover_update_failed
+            },
+        )
+    }
+
     private fun clearTracks() {
         val count = MPVLib.getPropertyInt("track-list/count")!!
         // Note that because events are async, properties might disappear at any moment
         // so use ?: continue instead of !!
         for (i in 0 until count) {
             val type = MPVLib.getPropertyString("track-list/$i/type") ?: continue
-            if (!player.tracks.containsKey(type)) {
-                continue
-            }
             val mpvId = MPVLib.getPropertyInt("track-list/$i/id") ?: continue
             when (type) {
                 "video" -> MPVLib.command(arrayOf("video-remove", "$mpvId"))
@@ -1733,27 +1063,8 @@ class PlayerActivity : BaseActivity() {
                 "sub" -> MPVLib.command(arrayOf("sub-remove", "$mpvId"))
             }
         }
-    }
-
-    private val subtitleSelect = SubtitleSelect(playerPreferences)
 
-    private fun selectSubtitle(subtitleTracks: List<Track>, index: Int, embedded: Boolean = false) {
-        val offset = if (embedded) 0 else 1
-        streams.subtitle.index = index + offset
-        val tracks = player.tracks.getValue("sub")
-        val selectedLoadedTrack = tracks.firstOrNull {
-            it.name == subtitleTracks[index].url ||
-                it.mpvId.toString() == subtitleTracks[index].url
-        }
-        selectedLoadedTrack?.let { player.sid = it.mpvId }
-            ?: MPVLib.command(
-                arrayOf(
-                    "sub-add",
-                    subtitleTracks[index].url,
-                    "select",
-                    subtitleTracks[index].url,
-                ),
-            )
+        viewModel.isLoadingTracks.update { _ -> true }
     }
 
     // TODO: exception java.util.ConcurrentModificationException:
@@ -1762,38 +1073,18 @@ class PlayerActivity : BaseActivity() {
     // at void eu.kanade.tachiyomi.ui.player.PlayerActivity.fileLoaded() (PlayerActivity.kt:1874)
     // at void eu.kanade.tachiyomi.ui.player.PlayerActivity.event(int) (PlayerActivity.kt:1566)
     // at void is.xyz.mpv.MPVLib.event(int) (MPVLib.java:86)
-    internal suspend fun fileLoaded() {
+    private fun fileLoaded() {
         setMpvMediaTitle()
+        setupPlayerOrientation()
         clearTracks()
-        player.loadTracks()
-        setupSubtitleTracks()
-        setupAudioTracks()
-
-        viewModel.viewModelScope.launchUI {
-            if (playerPreferences.adjustOrientationVideoDimensions().get()) {
-                if ((player.videoW ?: 1) / (player.videoH ?: 1) >= 1) {
-                    this@PlayerActivity.requestedOrientation =
-                        playerPreferences.defaultPlayerOrientationLandscape().get()
-
-                    switchControlsOrientation(true)
-                } else {
-                    this@PlayerActivity.requestedOrientation =
-                        playerPreferences.defaultPlayerOrientationPortrait().get()
-
-                    switchControlsOrientation(false)
-                }
-            }
+        setupTracks()
 
-            viewModel.mutableState.update {
-                it.copy(isLoadingEpisode = false)
-            }
-        }
         // aniSkip stuff
-        waitingAniSkip = playerPreferences.waitingTimeAniSkip().get()
+        viewModel.waitingAniSkip = gesturePreferences.waitingTimeAniSkip().get()
         runBlocking {
-            if (aniSkipEnable) {
-                aniSkipInterval = viewModel.aniSkipResponse(player.duration)
-                aniSkipInterval?.let {
+            if (viewModel.aniSkipEnable) {
+                viewModel.aniSkipInterval = viewModel.aniSkipResponse(player.duration)
+                viewModel.aniSkipInterval?.let {
                     aniskipStamps = it
                     updateChapters(it, player.duration)
                 }
@@ -1801,73 +1092,35 @@ class PlayerActivity : BaseActivity() {
         }
     }
 
-    private fun setupSubtitleTracks() {
-        streams.subtitle.tracks += player.tracks.getOrElse("sub") { emptyList() }
-            .drop(1).map { track ->
-                Track(track.mpvId.toString(), track.name)
-            }.toTypedArray()
-        if (hadPreviousSubs) {
-            streams.subtitle.tracks.getOrNull(streams.subtitle.index)?.let { sub ->
-                MPVLib.command(arrayOf("sub-add", sub.url, "select", sub.url))
-            }
-            return
-        }
-        val subtitleTracks = currentVideoList?.getOrNull(streams.quality.index)
+    private fun setupTracks() {
+        val audioTracks = viewModel.videoList.value.getOrNull(viewModel.selectedVideoIndex.value)
+            ?.audioTracks?.takeIf { it.isNotEmpty() }
+        val subtitleTracks = viewModel.videoList.value.getOrNull(viewModel.selectedVideoIndex.value)
             ?.subtitleTracks?.takeIf { it.isNotEmpty() }
 
-        subtitleTracks?.let { tracks ->
-            val preferredIndex = subtitleSelect.getPreferredSubtitleIndex(tracks) ?: 0
-            hadPreviousSubs = true
-            selectSubtitle(tracks, preferredIndex)
-        } ?: let {
-            val tracks = streams.subtitle.tracks.toList()
-            val preferredIndex = subtitleSelect.getPreferredSubtitleIndex(tracks)
-                ?: let {
-                    val mpvSub = player.tracks["sub"]?.toTypedArray()?.firstOrNull { player.sid == it.mpvId }
-                    mpvSub?.let {
-                        streams.subtitle.tracks.indexOfFirst { it.url == mpvSub.mpvId.toString() }
-                    }?.coerceAtLeast(0) ?: 0
-                }
-            selectSubtitle(tracks, preferredIndex, embedded = true)
+        // If no external audio or subtitle tracks are present, loadTracks() won't be
+        // called and we need to call onFinishLoadingTracks() manually
+        if (audioTracks == null && subtitleTracks == null) {
+            viewModel.onFinishLoadingTracks()
+            return
         }
-    }
-
-    private fun setupAudioTracks() {
-        val localLangName = LocaleHelper.getSimpleLocaleDisplayName()
 
-        streams.audio.tracks += player.tracks.getOrElse("audio") { emptyList() }
-            .drop(1).map { track ->
-                Track(track.mpvId.toString(), track.name)
-            }.toTypedArray()
-
-        if (hadPreviousAudio) {
-            streams.audio.tracks.getOrNull(streams.audio.index)?.let { audio ->
-                MPVLib.command(arrayOf("audio-add", audio.url, "select", audio.url))
-            }
-        } else {
-            currentVideoList?.getOrNull(streams.quality.index)
-                ?.audioTracks?.let { tracks ->
-                    val langIndex = tracks.indexOfFirst {
-                        it.lang.contains(localLangName)
-                    }
-                    val requestedLanguage = if (langIndex == -1) 0 else langIndex
-                    tracks.getOrNull(requestedLanguage)?.let { audio ->
-                        hadPreviousAudio = true
-                        streams.audio.index = requestedLanguage + 1
-                        MPVLib.command(arrayOf("audio-add", audio.url, "select", audio.url))
-                    }
-                } ?: run {
-                val mpvAudio = player.tracks["audio"]?.toTypedArray()?.firstOrNull { player.aid == it.mpvId }
-                streams.audio.index = mpvAudio?.let {
-                    streams.audio.tracks.indexOfFirst { it.url == mpvAudio.mpvId.toString() }
-                }?.coerceAtLeast(0) ?: 0
-            }
+        audioTracks?.forEach { audio ->
+            MPVLib.command(arrayOf("audio-add", audio.url, "auto", audio.lang))
         }
+        subtitleTracks?.forEach { sub ->
+            MPVLib.command(arrayOf("sub-add", sub.url, "auto", sub.lang))
+        }
+
+        viewModel.isLoadingTracks.update { _ -> false }
     }
 
     private fun setMpvMediaTitle() {
-        val anime = viewModel.currentAnime ?: return
-        val episode = viewModel.currentEpisode ?: return
+        val anime = viewModel.currentAnime.value ?: return
+        val episode = viewModel.currentEpisode.value ?: return
+
+        viewModel.animeTitle.update { _ -> anime.title }
+        viewModel.mediaTitle.update { _ -> episode.name }
 
         val epNumber = episode.episode_number.let { number ->
             if (ceil(number) == floor(number)) number.toInt() else number
@@ -1883,8 +1136,13 @@ class PlayerActivity : BaseActivity() {
         MPVLib.setPropertyString("force-media-title", title)
     }
 
-    private var aniskipStamps: List<Stamp> = emptyList()
+    private fun endFile(eofReached: Boolean) {
+        if (eofReached && playerPreferences.autoplayEnabled().get()) {
+            viewModel.changeEpisode(previous = false, autoPlay = true)
+        }
+    }
 
+    private var aniskipStamps: List<Stamp> = emptyList()
     private fun updateChapters(stamps: List<Stamp>? = null, duration: Int? = null) {
         val aniskipStamps = stamps ?: aniskipStamps
         val sortedAniskipStamps = aniskipStamps.sortedBy { it.interval.startTime }
@@ -1894,35 +1152,38 @@ class PlayerActivity : BaseActivity() {
             } else {
                 it.interval.startTime
             }
-            val startChapter = VideoChapter(
+            val startChapter = IndexedSegment(
                 index = -2, // Index -2 is used to indicate that this is an AniSkip chapter
-                title = it.skipType.getString(),
-                time = startTime,
+                name = it.skipType.getString(),
+                start = startTime.toFloat(),
+                color = Color(0xFFD8BBDF),
             )
             val nextStart = sortedAniskipStamps.getOrNull(i + 1)?.interval?.startTime
             val isNotLastChapter = abs(it.interval.endTime - (duration?.toDouble() ?: -2.0)) > 1.0
             val isNotAdjacent = nextStart == null || (abs(it.interval.endTime - nextStart) > 1.0)
             if (isNotLastChapter && isNotAdjacent) {
-                val endChapter = VideoChapter(
+                val endChapter = IndexedSegment(
                     index = -1,
-                    title = null,
-                    time = it.interval.endTime,
+                    name = "",
+                    start = it.interval.endTime.toFloat(),
                 )
                 return@mapIndexed listOf(startChapter, endChapter)
             } else {
                 listOf(startChapter)
             }
         }.flatten()
-        val playerChapters = player.loadChapters().filter { playerChapter ->
+        val playerChapters = viewModel.chapters.value.filter { playerChapter ->
             aniskipChapters.none { aniskipChapter ->
-                abs(aniskipChapter.time - playerChapter.time) < 1.0 && aniskipChapter.index == -2
-            }
-        }.sortedBy { it.time }.mapIndexed { i, it ->
-            if (i == 0 && it.time < 1.0) {
-                VideoChapter(
-                    it.index,
-                    it.title,
-                    0.0,
+                abs(aniskipChapter.start - playerChapter.start) < 1.0 && aniskipChapter.index == -2
+            }
+        }.map {
+            IndexedSegment(it.name, it.start, it.color)
+        }.sortedBy { it.start }.mapIndexed { i, it ->
+            if (i == 0 && it.start < 1.0) {
+                IndexedSegment(
+                    it.name,
+                    0.0f,
+                    index = it.index,
                 )
             } else {
                 it
@@ -1930,131 +1191,24 @@ class PlayerActivity : BaseActivity() {
         }
         val filteredAniskipChapters = aniskipChapters.filter { aniskipChapter ->
             playerChapters.none { playerChapter ->
-                abs(aniskipChapter.time - playerChapter.time) < 1.0 && aniskipChapter.index != -2
+                abs(aniskipChapter.start - playerChapter.start) < 1.0 && aniskipChapter.index != -2
             }
         }
         val startChapter = if ((playerChapters + filteredAniskipChapters).isNotEmpty() &&
-            playerChapters.none { it.time == 0.0 } &&
-            filteredAniskipChapters.none { it.time == 0.0 }
+            playerChapters.none { it.start == 0.0f } &&
+            filteredAniskipChapters.none { it.start == 0.0f }
         ) {
             listOf(
-                VideoChapter(
+                IndexedSegment(
                     index = -1,
-                    title = null,
-                    time = 0.0,
+                    name = "",
+                    start = 0.0f,
                 ),
             )
         } else {
             emptyList()
         }
-        val combinedChapters = (startChapter + playerChapters + filteredAniskipChapters).sortedBy { it.time }
-        videoChapters = combinedChapters
-    }
-
-    private val aniSkipEnable = playerPreferences.aniSkipEnabled().get()
-    private val netflixStyle = playerPreferences.enableNetflixStyleAniSkip().get()
-
-    private var aniSkipInterval: List<Stamp>? = null
-    private var waitingAniSkip = playerPreferences.waitingTimeAniSkip().get()
-
-    private var skipType: SkipType? = null
-
-    private suspend fun aniSkipStuff(position: Long) {
-        if (!aniSkipEnable) return
-        // if it doesn't find any interval it will show the +85 button
-        if (aniSkipInterval == null) return
-
-        val autoSkipAniSkip = playerPreferences.autoSkipAniSkip().get()
-
-        skipType =
-            aniSkipInterval
-                ?.firstOrNull {
-                    it.interval.startTime <= position &&
-                        it.interval.endTime > position
-                }?.skipType
-        skipType?.let { skipType ->
-            val aniSkipPlayerUtils = AniSkipApi.PlayerUtils(binding, aniSkipInterval!!)
-            if (netflixStyle) {
-                // show a toast with the seconds before the skip
-                if (waitingAniSkip == playerPreferences.waitingTimeAniSkip().get()) {
-                    toast(
-                        "AniSkip: ${stringResource(MR.strings.player_aniskip_dontskip_toast,waitingAniSkip)}",
-                    )
-                }
-                aniSkipPlayerUtils.showSkipButton(skipType, waitingAniSkip)
-                waitingAniSkip--
-            } else if (autoSkipAniSkip) {
-                skipType.let {
-                    MPVLib.command(
-                        arrayOf(
-                            "seek",
-                            "${aniSkipInterval!!.first{it.skipType == skipType}.interval.endTime}",
-                            "absolute",
-                        ),
-                    )
-                }
-            } else {
-                aniSkipPlayerUtils.showSkipButton(skipType)
-            }
-        } ?: run {
-            refreshUi()
-        }
-    }
-
-    // mpv events
-
-    internal fun eventPropertyUi(property: String, value: Long) {
-        when (property) {
-            "demuxer-cache-time" -> playerControls.updateBufferPosition(value.toInt())
-            "time-pos" -> {
-                playerControls.updatePlaybackPos(value.toInt())
-                viewModel.viewModelScope.launchUI { aniSkipStuff(value) }
-                updatePlaybackState()
-            }
-            "duration" -> {
-                playerControls.updatePlaybackDuration(value.toInt())
-                mediaSession.isActive = true
-                updatePlaybackState()
-            }
-        }
-    }
-
-    internal fun eventPropertyUi(property: String, value: Boolean) {
-        when (property) {
-            "seeking" -> isSeeking(value)
-            "paused-for-cache" -> {
-                showLoadingIndicator(value)
-                updatePlaybackState(cachePause = true)
-            }
-            "pause" -> {
-                if (!isFinishing) {
-                    setAudioFocus(value)
-                    updatePlaybackStatus(value)
-                    updatePlaybackState(pause = true)
-                    refreshUi()
-                }
-            }
-            "eof-reached" -> endFile(value)
-        }
-    }
-
-    internal fun eventPropertyUi(property: String) {
-        when (property) {
-            "chapter-list" -> updateChapters()
-        }
-    }
-
-    private val nextEpisodeRunnable = Runnable {
-        changeEpisode(
-            viewModel.getAdjacentEpisodeId(previous = false),
-            autoPlay = true,
-        )
-    }
-
-    private fun endFile(eofReached: Boolean) {
-        animationHandler.removeCallbacks(nextEpisodeRunnable)
-        if (eofReached && playerPreferences.autoplayEnabled().get()) {
-            animationHandler.postDelayed(nextEpisodeRunnable, 1000L)
-        }
+        val combinedChapters = (startChapter + playerChapters + filteredAniskipChapters).sortedBy { it.start }
+        viewModel.updateChapters(combinedChapters)
     }
 }
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerEnums.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerEnums.kt
new file mode 100644
index 0000000000..80588bc25f
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerEnums.kt
@@ -0,0 +1,154 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player
+
+import dev.icerock.moko.resources.StringResource
+import eu.kanade.tachiyomi.ui.player.settings.DecoderPreferences
+import tachiyomi.core.common.preference.Preference
+import tachiyomi.i18n.MR
+
+/**
+ * Results of the set as cover feature.
+ */
+enum class SetAsCover {
+    Success,
+    AddToLibraryFirst,
+    Error,
+}
+
+enum class PlayerOrientation(val titleRes: StringResource) {
+    Free(MR.strings.rotation_free),
+    Video(MR.strings.rotation_video),
+    Portrait(MR.strings.rotation_portrait),
+    ReversePortrait(MR.strings.rotation_reverse_portrait),
+    SensorPortrait(MR.strings.rotation_sensor_portrait),
+    Landscape(MR.strings.rotation_landscape),
+    ReverseLandscape(MR.strings.rotation_reverse_landscape),
+    SensorLandscape(MR.strings.rotation_sensor_landscape),
+}
+
+enum class VideoAspect(val titleRes: StringResource) {
+    Crop(MR.strings.video_crop_screen),
+    Fit(MR.strings.video_fit_screen),
+    Stretch(MR.strings.video_stretch_screen),
+}
+
+/**
+ * Action performed by a button, like double tap or media controls
+ */
+enum class SingleActionGesture(val stringRes: StringResource) {
+    None(stringRes = MR.strings.single_action_none),
+    Seek(stringRes = MR.strings.single_action_seek),
+    PlayPause(stringRes = MR.strings.single_action_playpause),
+    Switch(stringRes = MR.strings.single_action_switch),
+    Custom(stringRes = MR.strings.single_action_custom),
+}
+
+/**
+ * Key codes sent through the `Custom` option in gestures
+ */
+enum class CustomKeyCodes(val keyCode: String) {
+    DoubleTapLeft("0x10001"),
+    DoubleTapCenter("0x10002"),
+    DoubleTapRight("0x10003"),
+    MediaPrevious("0x10004"),
+    MediaPlay("0x10005"),
+    MediaNext("0x10006"),
+}
+
+enum class Decoder(val title: String, val value: String) {
+    AutoCopy("Auto", "auto-copy"),
+    Auto("Auto", "auto"),
+    SW("SW", "no"),
+    HW("HW", "mediacodec-copy"),
+    HWPlus("HW+", "mediacodec"),
+}
+
+fun getDecoderFromValue(value: String): Decoder {
+    return Decoder.entries.first { it.value == value }
+}
+
+enum class Debanding {
+    None,
+    CPU,
+    GPU,
+}
+
+enum class Sheets {
+    None,
+    PlaybackSpeed,
+    SubtitleTracks,
+    AudioTracks,
+    QualityTracks,
+    Chapters,
+    More,
+    Screenshot,
+}
+
+enum class Panels {
+    None,
+    SubtitleSettings,
+    SubtitleDelay,
+    AudioDelay,
+    VideoFilters,
+}
+
+enum class Dialogs {
+    None,
+    EpisodeList,
+}
+
+sealed class PlayerUpdates {
+    data object None : PlayerUpdates()
+    data object DoubleSpeed : PlayerUpdates()
+    data object AspectRatio : PlayerUpdates()
+    data class ShowText(val value: String) : PlayerUpdates()
+    data class ShowTextResource(val textResource: StringResource) : PlayerUpdates()
+}
+
+enum class VideoFilters(
+    val titleRes: StringResource,
+    val preference: (DecoderPreferences) -> Preference<Int>,
+    val mpvProperty: String,
+) {
+    BRIGHTNESS(
+        MR.strings.player_sheets_filters_brightness,
+        { it.brightnessFilter() },
+        "brightness",
+    ),
+    SATURATION(
+        MR.strings.player_sheets_filters_Saturation,
+        { it.saturationFilter() },
+        "saturation",
+    ),
+    CONTRAST(
+        MR.strings.player_sheets_filters_contrast,
+        { it.contrastFilter() },
+        "contrast",
+    ),
+    GAMMA(
+        MR.strings.player_sheets_filters_gamma,
+        { it.gammaFilter() },
+        "gamma",
+    ),
+    HUE(
+        MR.strings.player_sheets_filters_hue,
+        { it.hueFilter() },
+        "hue",
+    ),
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerObserver.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerObserver.kt
index 7c8dfcd72e..14ac0ed80d 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerObserver.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerObserver.kt
@@ -1,13 +1,9 @@
 package eu.kanade.tachiyomi.ui.player
 
 import android.widget.Toast
-import androidx.lifecycle.viewModelScope
 import eu.kanade.tachiyomi.util.system.toast
 import `is`.xyz.mpv.MPVLib
 import logcat.LogPriority
-import tachiyomi.core.common.util.lang.launchIO
-import tachiyomi.core.common.util.lang.launchUI
-import tachiyomi.core.common.util.lang.withIOContext
 import tachiyomi.core.common.util.system.logcat
 
 class PlayerObserver(val activity: PlayerActivity) :
@@ -15,32 +11,27 @@ class PlayerObserver(val activity: PlayerActivity) :
     MPVLib.LogObserver {
 
     override fun eventProperty(property: String) {
-        activity.runOnUiThread { activity.eventPropertyUi(property) }
+        activity.runOnUiThread { activity.onObserverEvent(property) }
+    }
+
+    override fun eventProperty(property: String, value: Long) {
+        activity.runOnUiThread { activity.onObserverEvent(property, value) }
     }
 
     override fun eventProperty(property: String, value: Boolean) {
-        activity.runOnUiThread { activity.eventPropertyUi(property, value) }
+        activity.runOnUiThread { activity.onObserverEvent(property, value) }
     }
 
-    override fun eventProperty(property: String, value: Long) {
-        activity.runOnUiThread { activity.eventPropertyUi(property, value) }
+    override fun eventProperty(property: String, value: String) {
+        activity.runOnUiThread { activity.onObserverEvent(property, value) }
     }
 
-    override fun eventProperty(property: String, value: String) {}
+    override fun eventProperty(property: String, value: Double) {
+        activity.runOnUiThread { activity.onObserverEvent(property, value) }
+    }
 
     override fun event(eventId: Int) {
-        when (eventId) {
-            MPVLib.mpvEventId.MPV_EVENT_FILE_LOADED ->
-                activity.viewModel.viewModelScope.launchIO { activity.fileLoaded() }
-            MPVLib.mpvEventId.MPV_EVENT_START_FILE ->
-                activity.viewModel.viewModelScope.launchUI {
-                    activity.player.paused = false
-                    activity.refreshUi()
-                    // Fixes a minor Ui bug but I have no idea why
-                    val isEpisodeOnline = withIOContext { activity.viewModel.isEpisodeOnline() != true }
-                    if (isEpisodeOnline) activity.showLoadingIndicator(false)
-                }
-        }
+        activity.runOnUiThread { activity.event(eventId) }
     }
 
     override fun efEvent(err: String?) {
@@ -51,7 +42,6 @@ class PlayerObserver(val activity: PlayerActivity) :
         }
         logcat(LogPriority.ERROR) { errorMessage }
         activity.runOnUiThread {
-            activity.showLoadingIndicator(false)
             activity.toast(errorMessage, Toast.LENGTH_LONG)
         }
     }
@@ -65,9 +55,7 @@ class PlayerObserver(val activity: PlayerActivity) :
             MPVLib.mpvLogLevel.MPV_LOG_LEVEL_INFO -> LogPriority.INFO
             else -> LogPriority.VERBOSE
         }
-        if (logPriority != null) {
-            if (text.contains("HTTP error")) httpError = text
-            logcat.logcat("mpv/$prefix", logPriority) { text }
-        }
+        if (text.contains("HTTP error")) httpError = text
+        logcat.logcat("mpv/$prefix", logPriority) { text }
     }
 }
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerUtils.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerUtils.kt
new file mode 100644
index 0000000000..d944f3c5fd
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerUtils.kt
@@ -0,0 +1,55 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player
+
+import android.content.Context
+import android.net.Uri
+import android.os.ParcelFileDescriptor
+import android.provider.OpenableColumns
+import `is`.xyz.mpv.Utils
+import logcat.LogPriority
+import logcat.logcat
+
+internal fun Uri.openContentFd(context: Context): String? {
+    return context.contentResolver.openFileDescriptor(this, "r")?.detachFd()?.let {
+        Utils.findRealPath(it)?.also { _ ->
+            ParcelFileDescriptor.adoptFd(it).close()
+        } ?: "fd://$it"
+    }
+}
+
+internal fun Uri.resolveUri(context: Context): String? {
+    val filepath = when (scheme) {
+        "file" -> path
+        "content" -> openContentFd(context)
+        "data" -> "data://$schemeSpecificPart"
+        in Utils.PROTOCOLS -> toString()
+        else -> null
+    }
+
+    if (filepath == null) logcat(LogPriority.ERROR) { "unknown scheme: $scheme" }
+    return filepath
+}
+
+internal fun Uri.getFileName(context: Context): String? {
+    return context.contentResolver.query(this, null, null, null, null)?.use { cursor ->
+        val nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
+        cursor.moveToFirst()
+        cursor.getString(nameIndex)
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt
index 1db0b94d72..e95672cfdd 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt
@@ -1,11 +1,41 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Code is a mix between PlayerViewModel from mpvKt and the former
+ * PlayerViewModel from Aniyomi.
+ */
+
 package eu.kanade.tachiyomi.ui.player
 
 import android.app.Application
+import android.content.pm.ActivityInfo
+import android.media.AudioManager
 import android.net.Uri
+import android.provider.Settings
+import android.util.DisplayMetrics
 import androidx.compose.runtime.Immutable
+import androidx.core.view.WindowInsetsCompat
 import androidx.lifecycle.SavedStateHandle
 import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelProvider
+import androidx.lifecycle.createSavedStateHandle
 import androidx.lifecycle.viewModelScope
+import androidx.lifecycle.viewmodel.CreationExtras
 import eu.kanade.domain.base.BasePreferences
 import eu.kanade.domain.entries.anime.interactor.SetAnimeViewerFlags
 import eu.kanade.domain.items.episode.model.toDbEpisode
@@ -14,7 +44,6 @@ import eu.kanade.domain.track.service.TrackPreferences
 import eu.kanade.domain.ui.UiPreferences
 import eu.kanade.tachiyomi.animesource.AnimeSource
 import eu.kanade.tachiyomi.animesource.model.SerializableVideo.Companion.toVideoList
-import eu.kanade.tachiyomi.animesource.model.Track
 import eu.kanade.tachiyomi.animesource.model.Video
 import eu.kanade.tachiyomi.animesource.online.AnimeHttpSource
 import eu.kanade.tachiyomi.data.database.models.anime.Episode
@@ -27,12 +56,13 @@ import eu.kanade.tachiyomi.data.saver.Location
 import eu.kanade.tachiyomi.data.track.TrackerManager
 import eu.kanade.tachiyomi.data.track.anilist.Anilist
 import eu.kanade.tachiyomi.data.track.myanimelist.MyAnimeList
-import eu.kanade.tachiyomi.network.NetworkPreferences
+import eu.kanade.tachiyomi.ui.player.controls.components.IndexedSegment
 import eu.kanade.tachiyomi.ui.player.loader.EpisodeLoader
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
 import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.viewer.SetAsCover
 import eu.kanade.tachiyomi.ui.reader.SaveImageNotifier
 import eu.kanade.tachiyomi.util.AniSkipApi
+import eu.kanade.tachiyomi.util.SkipType
 import eu.kanade.tachiyomi.util.Stamp
 import eu.kanade.tachiyomi.util.editCover
 import eu.kanade.tachiyomi.util.episode.filterDownloadedEpisodes
@@ -40,18 +70,25 @@ import eu.kanade.tachiyomi.util.lang.byteSize
 import eu.kanade.tachiyomi.util.lang.takeBytes
 import eu.kanade.tachiyomi.util.storage.DiskUtil
 import eu.kanade.tachiyomi.util.storage.cacheImageDir
+import eu.kanade.tachiyomi.util.system.toast
+import `is`.xyz.mpv.MPVLib
 import `is`.xyz.mpv.Utils
+import kotlinx.coroutines.Job
 import kotlinx.coroutines.channels.Channel
+import kotlinx.coroutines.delay
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.flow.first
 import kotlinx.coroutines.flow.receiveAsFlow
 import kotlinx.coroutines.flow.update
+import kotlinx.coroutines.launch
 import kotlinx.coroutines.runBlocking
 import logcat.LogPriority
+import tachiyomi.core.common.i18n.stringResource
 import tachiyomi.core.common.util.lang.launchIO
 import tachiyomi.core.common.util.lang.launchNonCancellable
 import tachiyomi.core.common.util.lang.withIOContext
+import tachiyomi.core.common.util.lang.withUIContext
 import tachiyomi.core.common.util.system.logcat
 import tachiyomi.domain.download.service.DownloadPreferences
 import tachiyomi.domain.entries.anime.interactor.GetAnime
@@ -65,13 +102,24 @@ import tachiyomi.domain.items.episode.model.EpisodeUpdate
 import tachiyomi.domain.items.episode.service.getEpisodeSort
 import tachiyomi.domain.source.anime.service.AnimeSourceManager
 import tachiyomi.domain.track.anime.interactor.GetAnimeTracks
+import tachiyomi.i18n.MR
 import tachiyomi.source.local.entries.anime.isLocal
 import uy.kohesive.injekt.Injekt
 import uy.kohesive.injekt.api.get
+import java.io.File
 import java.io.InputStream
 import java.util.Date
 
+class PlayerViewModelProviderFactory(
+    private val activity: PlayerActivity,
+) : ViewModelProvider.Factory {
+    override fun <T : ViewModel> create(modelClass: Class<T>, extras: CreationExtras): T {
+        return PlayerViewModel(activity, extras.createSavedStateHandle()) as T
+    }
+}
+
 class PlayerViewModel @JvmOverloads constructor(
+    private val activity: PlayerActivity,
     private val savedState: SavedStateHandle,
     private val sourceManager: AnimeSourceManager = Injekt.get(),
     private val downloadManager: AnimeDownloadManager = Injekt.get(),
@@ -86,47 +134,645 @@ class PlayerViewModel @JvmOverloads constructor(
     private val upsertHistory: UpsertAnimeHistory = Injekt.get(),
     private val updateEpisode: UpdateEpisode = Injekt.get(),
     private val setAnimeViewerFlags: SetAnimeViewerFlags = Injekt.get(),
-    internal val networkPreferences: NetworkPreferences = Injekt.get(),
     internal val playerPreferences: PlayerPreferences = Injekt.get(),
+    internal val gesturePreferences: GesturePreferences = Injekt.get(),
     private val basePreferences: BasePreferences = Injekt.get(),
     uiPreferences: UiPreferences = Injekt.get(),
 ) : ViewModel() {
 
-    val mutableState = MutableStateFlow(State())
-    val state = mutableState.asStateFlow()
+    private val _currentPlaylist = MutableStateFlow<List<Episode>>(emptyList())
+    val currentPlaylist = _currentPlaylist.asStateFlow()
 
-    private val eventChannel = Channel<Event>()
-    val eventFlow = eventChannel.receiveAsFlow()
+    private val _hasPreviousEpisode = MutableStateFlow(false)
+    val hasPreviousEpisode = _hasPreviousEpisode.asStateFlow()
 
-    private val incognitoMode = basePreferences.incognitoMode().get()
-    private val downloadAheadAmount = downloadPreferences.autoDownloadWhileWatching().get()
+    private val _hasNextEpisode = MutableStateFlow(false)
+    val hasNextEpisode = _hasNextEpisode.asStateFlow()
 
-    internal val relativeTime = uiPreferences.relativeTime().get()
-    internal val dateFormat = UiPreferences.dateFormat(uiPreferences.dateFormat().get())
+    private val _currentEpisode = MutableStateFlow<Episode?>(null)
+    val currentEpisode = _currentEpisode.asStateFlow()
 
-    /**
-     * The episode playlist loaded in the player. It can be empty when instantiated for a short time.
-     */
-    val currentPlaylist: List<Episode>
-        get() = filterEpisodeList(state.value.episodeList)
+    private val _currentAnime = MutableStateFlow<Anime?>(null)
+    val currentAnime = _currentAnime.asStateFlow()
 
-    /**
-     * The episode loaded in the player. It can be null when instantiated for a short time.
-     */
-    val currentEpisode: Episode?
-        get() = state.value.episode
+    private val _currentSource = MutableStateFlow<AnimeSource?>(null)
+    val currentSource = _currentSource.asStateFlow()
 
-    /**
-     * The anime loaded in the player. It can be null when instantiated for a short time.
-     */
-    val currentAnime: Anime?
-        get() = state.value.anime
+    private val _isLoadingEpisode = MutableStateFlow(false)
+    val isLoadingEpisode = _isLoadingEpisode.asStateFlow()
+
+    private val _currentDecoder = MutableStateFlow(getDecoderFromValue(MPVLib.getPropertyString("hwdec")))
+    val currentDecoder = _currentDecoder.asStateFlow()
+
+    val mediaTitle = MutableStateFlow("")
+    val animeTitle = MutableStateFlow("")
+
+    val isLoading = MutableStateFlow(true)
+    val playbackSpeed = MutableStateFlow(playerPreferences.playerSpeed().get())
+
+    private val _subtitleTracks = MutableStateFlow<List<VideoTrack>>(emptyList())
+    val subtitleTracks = _subtitleTracks.asStateFlow()
+    private val _selectedSubtitles = MutableStateFlow(Pair(-1, -1))
+    val selectedSubtitles = _selectedSubtitles.asStateFlow()
+
+    private val _audioTracks = MutableStateFlow<List<VideoTrack>>(emptyList())
+    val audioTracks = _audioTracks.asStateFlow()
+    private val _selectedAudio = MutableStateFlow(-1)
+    val selectedAudio = _selectedAudio.asStateFlow()
+
+    val isLoadingTracks = MutableStateFlow(true)
+
+    private val _videoList = MutableStateFlow<List<Video>>(emptyList())
+    val videoList = _videoList.asStateFlow()
+    private val _selectedVideoIndex = MutableStateFlow(-1)
+    val selectedVideoIndex = _selectedVideoIndex.asStateFlow()
+
+    private val _chapters = MutableStateFlow<List<IndexedSegment>>(emptyList())
+    val chapters = _chapters.asStateFlow()
+    private val _currentChapter = MutableStateFlow<IndexedSegment?>(null)
+    val currentChapter = _currentChapter.asStateFlow()
+
+    private val _pos = MutableStateFlow(0f)
+    val pos = _pos.asStateFlow()
+
+    val duration = MutableStateFlow(0f)
+
+    private val _readAhead = MutableStateFlow(0f)
+    val readAhead = _readAhead.asStateFlow()
+
+    private val _paused = MutableStateFlow(false)
+    val paused = _paused.asStateFlow()
+
+    private val _controlsShown = MutableStateFlow(!playerPreferences.hideControls().get())
+    val controlsShown = _controlsShown.asStateFlow()
+    private val _seekBarShown = MutableStateFlow(!playerPreferences.hideControls().get())
+    val seekBarShown = _seekBarShown.asStateFlow()
+    private val _areControlsLocked = MutableStateFlow(false)
+    val areControlsLocked = _areControlsLocked.asStateFlow()
+
+    val playerUpdate = MutableStateFlow<PlayerUpdates>(PlayerUpdates.None)
+    val isBrightnessSliderShown = MutableStateFlow(false)
+    val isVolumeSliderShown = MutableStateFlow(false)
+    val currentBrightness = MutableStateFlow(
+        runCatching {
+            Settings.System.getFloat(activity.contentResolver, Settings.System.SCREEN_BRIGHTNESS)
+                .normalize(0f, 255f, 0f, 1f)
+        }.getOrElse { 0f },
+    )
+    val currentVolume = MutableStateFlow(activity.audioManager.getStreamVolume(AudioManager.STREAM_MUSIC))
+    val currentMPVVolume = MutableStateFlow(MPVLib.getPropertyInt("volume"))
+    var volumeBoostCap: Int = MPVLib.getPropertyInt("volume-max")
+
+    // Pair(startingPosition, seekAmount)
+    val gestureSeekAmount = MutableStateFlow<Pair<Int, Int>?>(null)
+
+    val sheetShown = MutableStateFlow(Sheets.None)
+    val panelShown = MutableStateFlow(Panels.None)
+    val dialogShown = MutableStateFlow(Dialogs.None)
+
+    private val _seekText = MutableStateFlow<String?>(null)
+    val seekText = _seekText.asStateFlow()
+    private val _doubleTapSeekAmount = MutableStateFlow(0)
+    val doubleTapSeekAmount = _doubleTapSeekAmount.asStateFlow()
+    private val _isSeekingForwards = MutableStateFlow(false)
+    val isSeekingForwards = _isSeekingForwards.asStateFlow()
+
+    private var timerJob: Job? = null
+    private val _remainingTime = MutableStateFlow(0)
+    val remainingTime = _remainingTime.asStateFlow()
+
+    private val _aniskipButton = MutableStateFlow<String?>(null)
+    val aniskipButton = _aniskipButton.asStateFlow()
+
+    val cachePath: String = activity.cacheDir.path
+
+    private fun updateAniskipButton(value: String?) {
+        _aniskipButton.update { _ -> value }
+    }
 
     /**
-     * The source used. It can be null when instantiated for a short time.
+     * Starts a sleep timer/cancels the current timer if [seconds] is less than 1.
      */
-    val currentSource: AnimeSource?
-        get() = state.value.source
+    fun startTimer(seconds: Int) {
+        timerJob?.cancel()
+        _remainingTime.value = seconds
+        if (seconds < 1) return
+        timerJob = viewModelScope.launch {
+            for (time in seconds downTo 0) {
+                _remainingTime.value = time
+                delay(1000)
+            }
+            pause()
+            withUIContext { Injekt.get<Application>().toast(MR.strings.toast_sleep_timer_ended) }
+        }
+    }
+
+    fun isEpisodeOnline(): Boolean? {
+        val anime = currentAnime.value ?: return null
+        val episode = currentEpisode.value ?: return null
+        val source = currentSource.value ?: return null
+        return source is AnimeHttpSource &&
+            !EpisodeLoader.isDownload(
+                episode.toDomainEpisode()!!,
+                anime,
+            )
+    }
+
+    fun updateIsLoadingEpisode(value: Boolean) {
+        _isLoadingEpisode.update { _ -> value }
+    }
+
+    private fun updateEpisodeList(episodeList: List<Episode>) {
+        _currentPlaylist.update { _ -> filterEpisodeList(episodeList) }
+    }
+
+    fun getDecoder() {
+        _currentDecoder.update { getDecoderFromValue(activity.player.hwdecActive) }
+    }
+
+    fun updateDecoder(decoder: Decoder) {
+        MPVLib.setPropertyString("hwdec", decoder.value)
+    }
+
+    val getTrackLanguage: (Int) -> String = {
+        if (it != -1) {
+            MPVLib.getPropertyString("track-list/$it/lang") ?: ""
+        } else {
+            activity.stringResource(MR.strings.off)
+        }
+    }
+    val getTrackTitle: (Int) -> String = {
+        if (it != -1) {
+            MPVLib.getPropertyString("track-list/$it/title") ?: ""
+        } else {
+            activity.stringResource(MR.strings.off)
+        }
+    }
+    val getTrackMPVId: (Int) -> Int = {
+        if (it != -1) {
+            MPVLib.getPropertyInt("track-list/$it/id")
+        } else {
+            -1
+        }
+    }
+    val getTrackType: (Int) -> String? = {
+        MPVLib.getPropertyString("track-list/$it/type")
+    }
+
+    private var trackLoadingJob: Job? = null
+    fun loadTracks() {
+        trackLoadingJob?.cancel()
+        trackLoadingJob = viewModelScope.launch {
+            val possibleTrackTypes = listOf("audio", "sub")
+            val subTracks = mutableListOf<VideoTrack>()
+            val audioTracks = mutableListOf(
+                VideoTrack(-1, activity.stringResource(MR.strings.off), null),
+            )
+            try {
+                val tracksCount = MPVLib.getPropertyInt("track-list/count") ?: 0
+                for (i in 0..<tracksCount) {
+                    val type = getTrackType(i)
+                    if (!possibleTrackTypes.contains(type) || type == null) continue
+                    when (type) {
+                        "sub" -> subTracks.add(VideoTrack(getTrackMPVId(i), getTrackTitle(i), getTrackLanguage(i)))
+                        "audio" -> audioTracks.add(VideoTrack(getTrackMPVId(i), getTrackTitle(i), getTrackLanguage(i)))
+                        else -> error("Unrecognized track type")
+                    }
+                }
+            } catch (e: NullPointerException) {
+                logcat(LogPriority.ERROR) { "Couldn't load tracks, probably cause mpv was destroyed" }
+                return@launch
+            }
+            _subtitleTracks.update { subTracks }
+            _audioTracks.update { audioTracks }
+
+            if (!isLoadingTracks.value) {
+                onFinishLoadingTracks()
+            }
+        }
+    }
+
+    fun onFinishLoadingTracks() {
+        val preferredSubtitle = activity.subtitleSelect.getPreferredSubtitleIndex(subtitleTracks.value)
+        preferredSubtitle?.let {
+            activity.player.sid = it.id
+            activity.player.secondarySid = -1
+        }
+
+        isLoadingTracks.update { _ -> true }
+        updateIsLoadingEpisode(false)
+        unpause()
+    }
+
+    @Immutable
+    data class VideoTrack(
+        val id: Int,
+        val name: String,
+        val language: String?,
+    )
+
+    fun loadChapters() {
+        val chapters = mutableListOf<IndexedSegment>()
+        val count = MPVLib.getPropertyInt("chapter-list/count")!!
+        for (i in 0 until count) {
+            val title = MPVLib.getPropertyString("chapter-list/$i/title")
+            val time = MPVLib.getPropertyInt("chapter-list/$i/time")!!
+            chapters.add(
+                IndexedSegment(
+                    name = title,
+                    start = time.toFloat(),
+                    index = 0,
+                ),
+            )
+        }
+        updateChapters(chapters.sortedBy { it.start })
+    }
+
+    fun updateChapters(chapters: List<IndexedSegment>) {
+        _chapters.update { _ -> chapters }
+    }
+
+    fun selectChapter(index: Int) {
+        val time = chapters.value[index].start
+        seekTo(time.toInt())
+    }
+
+    fun updateChapter(index: Long) {
+        if (chapters.value.isEmpty() || index == -1L) return
+        _currentChapter.update { chapters.value.getOrNull(index.toInt()) ?: return }
+    }
+
+    fun updateVideoList(videoList: List<Video>) {
+        _videoList.update { _ -> videoList }
+    }
+
+    fun setVideoIndex(idx: Int) {
+        _selectedVideoIndex.update { _ -> idx }
+    }
+
+    fun selectVideo(video: Video) {
+        updateIsLoadingEpisode(true)
+
+        val idx = videoList.value.indexOf(video)
+
+        activity.setVideoList(
+            qualityIndex = idx,
+            videos = videoList.value,
+        )
+    }
+
+    fun addAudio(uri: Uri) {
+        val url = uri.toString()
+        val isContentUri = url.startsWith("content://")
+        val path = (if (isContentUri) uri.openContentFd(activity) else url)
+            ?: return
+        val name = if (isContentUri) uri.getFileName(activity) else null
+        if (name == null) {
+            MPVLib.command(arrayOf("audio-add", path, "cached"))
+        } else {
+            MPVLib.command(arrayOf("audio-add", path, "cached", name))
+        }
+    }
+
+    fun selectAudio(id: Int) {
+        activity.player.aid = id
+    }
+
+    fun updateAudio(id: Int) {
+        _selectedAudio.update { id }
+    }
+
+    fun addSubtitle(uri: Uri) {
+        val url = uri.toString()
+        val isContentUri = url.startsWith("content://")
+        val path = (if (isContentUri) uri.openContentFd(activity) else url)
+            ?: return
+        val name = if (isContentUri) uri.getFileName(activity) else null
+        if (name == null) {
+            MPVLib.command(arrayOf("sub-add", path, "cached"))
+        } else {
+            MPVLib.command(arrayOf("sub-add", path, "cached", name))
+        }
+    }
+
+    fun selectSub(id: Int) {
+        val selectedSubs = selectedSubtitles.value
+        _selectedSubtitles.update {
+            when (id) {
+                selectedSubs.first -> Pair(selectedSubs.second, -1)
+                selectedSubs.second -> Pair(selectedSubs.first, -1)
+                else -> {
+                    if (selectedSubs.first != -1) {
+                        Pair(selectedSubs.first, id)
+                    } else {
+                        Pair(id, -1)
+                    }
+                }
+            }
+        }
+        activity.player.secondarySid = _selectedSubtitles.value.second
+        activity.player.sid = _selectedSubtitles.value.first
+    }
+
+    fun updateSubtitle(sid: Int, secondarySid: Int) {
+        _selectedSubtitles.update { Pair(sid, secondarySid) }
+    }
+
+    fun updatePlayBackPos(pos: Float) {
+        onSecondReached(pos.toInt(), duration.value.toInt())
+        _pos.update { pos }
+    }
+
+    fun updateReadAhead(value: Long) {
+        _readAhead.update { value.toFloat() }
+    }
+
+    fun pauseUnpause() {
+        if (paused.value) {
+            unpause()
+        } else {
+            pause()
+        }
+    }
+
+    fun pause() {
+        activity.player.paused = true
+        _paused.update { true }
+        runCatching {
+            activity.setPictureInPictureParams(activity.createPipParams())
+        }
+    }
+
+    fun unpause() {
+        activity.player.paused = false
+        _paused.update { false }
+    }
+
+    private val showStatusBar = playerPreferences.showSystemStatusBar().get()
+    fun showControls() {
+        if (sheetShown.value != Sheets.None ||
+            panelShown.value != Panels.None ||
+            dialogShown.value != Dialogs.None
+        ) {
+            return
+        }
+        if (showStatusBar) {
+            activity.windowInsetsController.show(WindowInsetsCompat.Type.statusBars())
+        }
+        _controlsShown.update { true }
+    }
+
+    fun hideControls() {
+        activity.windowInsetsController.hide(WindowInsetsCompat.Type.statusBars())
+        _controlsShown.update { false }
+    }
+
+    fun hideSeekBar() {
+        _seekBarShown.update { false }
+    }
+
+    fun showSeekBar() {
+        if (sheetShown.value != Sheets.None) return
+        _seekBarShown.update { true }
+    }
+
+    fun lockControls() {
+        _areControlsLocked.update { true }
+    }
+
+    fun unlockControls() {
+        _areControlsLocked.update { false }
+    }
+
+    fun seekBy(offset: Int, precise: Boolean = false) {
+        MPVLib.command(arrayOf("seek", offset.toString(), if (precise) "relative+exact" else "relative"))
+    }
+
+    fun seekTo(position: Int, precise: Boolean = true) {
+        if (position !in 0..(activity.player.duration ?: 0)) return
+        MPVLib.command(arrayOf("seek", position.toString(), if (precise) "absolute" else "absolute+keyframes"))
+    }
+
+    fun changeBrightnessTo(
+        brightness: Float,
+    ) {
+        activity.window.attributes = activity.window.attributes.apply {
+            screenBrightness = brightness.coerceIn(0f, 1f).also {
+                currentBrightness.update { _ -> it }
+            }
+        }
+    }
+
+    fun displayBrightnessSlider() {
+        isBrightnessSliderShown.update { true }
+    }
+
+    val maxVolume = activity.audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC)
+    fun changeVolumeBy(change: Int) {
+        val mpvVolume = MPVLib.getPropertyInt("volume")
+        if (volumeBoostCap > 0 && currentVolume.value == maxVolume) {
+            if (mpvVolume == 100 && change < 0) changeVolumeTo(currentVolume.value + change)
+            val finalMPVVolume = (mpvVolume + change).coerceAtLeast(100)
+            if (finalMPVVolume in 100..volumeBoostCap + 100) {
+                changeMPVVolumeTo(finalMPVVolume)
+                return
+            }
+        }
+        changeVolumeTo(currentVolume.value + change)
+    }
+
+    fun changeVolumeTo(volume: Int) {
+        val newVolume = volume.coerceIn(0..maxVolume)
+        activity.audioManager.setStreamVolume(
+            AudioManager.STREAM_MUSIC,
+            newVolume,
+            0,
+        )
+        currentVolume.update { newVolume }
+    }
+
+    fun changeMPVVolumeTo(volume: Int) {
+        MPVLib.setPropertyInt("volume", volume)
+    }
+
+    fun setMPVVolume(volume: Int) {
+        if (volume != currentMPVVolume.value) displayVolumeSlider()
+        currentMPVVolume.update { volume }
+    }
+
+    fun displayVolumeSlider() {
+        isVolumeSliderShown.update { true }
+    }
+
+    fun setAutoPlay(value: Boolean) {
+        val textRes = if (value) {
+            MR.strings.enable_auto_play
+        } else {
+            MR.strings.disable_auto_play
+        }
+        playerUpdate.update { PlayerUpdates.ShowTextResource(textRes) }
+        playerPreferences.autoplayEnabled().set(value)
+    }
+
+    @Suppress("DEPRECATION")
+    fun changeVideoAspect(aspect: VideoAspect) {
+        var ratio = -1.0
+        var pan = 1.0
+        when (aspect) {
+            VideoAspect.Crop -> {
+                pan = 1.0
+            }
+
+            VideoAspect.Fit -> {
+                pan = 0.0
+                MPVLib.setPropertyDouble("panscan", 0.0)
+            }
+
+            VideoAspect.Stretch -> {
+                val dm = DisplayMetrics()
+                activity.windowManager.defaultDisplay.getRealMetrics(dm)
+                ratio = dm.widthPixels / dm.heightPixels.toDouble()
+                pan = 0.0
+            }
+        }
+        MPVLib.setPropertyDouble("panscan", pan)
+        MPVLib.setPropertyDouble("video-aspect-override", ratio)
+        playerPreferences.aspectState().set(aspect)
+        playerUpdate.update { PlayerUpdates.AspectRatio }
+    }
+
+    fun cycleScreenRotations() {
+        activity.requestedOrientation = when (activity.requestedOrientation) {
+            ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE,
+            ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE,
+            ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE,
+            -> {
+                playerPreferences.defaultPlayerOrientationType().set(PlayerOrientation.SensorPortrait)
+                ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT
+            }
+
+            else -> {
+                playerPreferences.defaultPlayerOrientationType().set(PlayerOrientation.SensorLandscape)
+                ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE
+            }
+        }
+    }
+
+    private val doubleTapToSeekDuration = gesturePreferences.skipLengthPreference().get()
+
+    fun updateSeekAmount(amount: Int) {
+        _doubleTapSeekAmount.update { _ -> amount }
+    }
+
+    fun updateSeekText(value: String?) {
+        _seekText.update { _ -> value }
+    }
+
+    fun leftSeek() {
+        if (pos.value > 0) {
+            _doubleTapSeekAmount.value -= doubleTapToSeekDuration
+        }
+        _isSeekingForwards.value = false
+        seekBy(-doubleTapToSeekDuration, gesturePreferences.playerSmoothSeek().get())
+        if (gesturePreferences.showSeekBar().get()) showSeekBar()
+    }
+
+    fun rightSeek() {
+        if (pos.value < duration.value) {
+            _doubleTapSeekAmount.value += doubleTapToSeekDuration
+        }
+        _isSeekingForwards.value = true
+        seekBy(doubleTapToSeekDuration, gesturePreferences.playerSmoothSeek().get())
+        if (gesturePreferences.showSeekBar().get()) showSeekBar()
+    }
+
+    private fun rightSeekToWithText(seekDuration: Int, text: String?) {
+        _isSeekingForwards.value = true
+        _doubleTapSeekAmount.value = 1
+        _seekText.update { _ -> text }
+        seekTo(seekDuration)
+        if (gesturePreferences.showSeekBar().get()) showSeekBar()
+    }
+
+    fun changeEpisode(previous: Boolean, autoPlay: Boolean = false) {
+        if (previous && !hasPreviousEpisode.value) {
+            activity.toast(activity.stringResource(MR.strings.no_prev_episode))
+            return
+        }
+
+        if (!previous && !hasNextEpisode.value) {
+            activity.toast(activity.stringResource(MR.strings.no_next_episode))
+            return
+        }
+
+        activity.changeEpisode(getAdjacentEpisodeId(previous = previous), autoPlay = autoPlay)
+    }
+
+    fun handleLeftDoubleTap() {
+        when (gesturePreferences.leftDoubleTapGesture().get()) {
+            SingleActionGesture.Seek -> {
+                leftSeek()
+            }
+            SingleActionGesture.PlayPause -> {
+                pauseUnpause()
+            }
+            SingleActionGesture.Custom -> {
+                MPVLib.command(arrayOf("keypress", CustomKeyCodes.DoubleTapLeft.keyCode))
+            }
+            SingleActionGesture.None -> {}
+            SingleActionGesture.Switch -> changeEpisode(true)
+        }
+    }
+
+    fun handleCenterDoubleTap() {
+        when (gesturePreferences.centerDoubleTapGesture().get()) {
+            SingleActionGesture.PlayPause -> {
+                pauseUnpause()
+            }
+            SingleActionGesture.Custom -> {
+                MPVLib.command(arrayOf("keypress", CustomKeyCodes.DoubleTapCenter.keyCode))
+            }
+            SingleActionGesture.Seek -> {}
+            SingleActionGesture.None -> {}
+            SingleActionGesture.Switch -> {}
+        }
+    }
+
+    fun handleRightDoubleTap() {
+        when (gesturePreferences.rightDoubleTapGesture().get()) {
+            SingleActionGesture.Seek -> {
+                rightSeek()
+            }
+            SingleActionGesture.PlayPause -> {
+                pauseUnpause()
+            }
+            SingleActionGesture.Custom -> {
+                MPVLib.command(arrayOf("keypress", CustomKeyCodes.DoubleTapRight.keyCode))
+            }
+            SingleActionGesture.None -> {}
+            SingleActionGesture.Switch -> changeEpisode(false)
+        }
+    }
+
+    override fun onCleared() {
+        if (currentEpisode.value != null) {
+            saveWatchingProgress(currentEpisode.value!!)
+            episodeToDownload?.let {
+                downloadManager.addDownloadsToStartOfQueue(listOf(it))
+            }
+        }
+    }
+
+    // ====== OLD ======
+
+    private val eventChannel = Channel<Event>()
+    val eventFlow = eventChannel.receiveAsFlow()
+
+    private val incognitoMode = basePreferences.incognitoMode().get()
+    private val downloadAheadAmount = downloadPreferences.autoDownloadWhileWatching().get()
+
+    internal val relativeTime = uiPreferences.relativeTime().get()
+    internal val dateFormat = UiPreferences.dateFormat(uiPreferences.dateFormat().get())
 
     /**
      * The position in the current video. Used to restore from process kill.
@@ -140,7 +786,7 @@ class PlayerViewModel @JvmOverloads constructor(
     /**
      * The current video's quality index. Used to restore from process kill.
      */
-    var qualityIndex = savedState.get<Int>("quality_index") ?: 0
+    private var qualityIndex = savedState.get<Int>("quality_index") ?: 0
         set(value) {
             savedState["quality_index"] = value
             field = value
@@ -160,7 +806,7 @@ class PlayerViewModel @JvmOverloads constructor(
     private var currentVideoList: List<Video>? = null
 
     private fun filterEpisodeList(episodes: List<Episode>): List<Episode> {
-        val anime = currentAnime ?: return episodes
+        val anime = currentAnime.value ?: return episodes
         val selectedEpisode = episodes.find { it.id == episodeId }
             ?: error("Requested episode of id $episodeId not found in episode list")
 
@@ -197,26 +843,25 @@ class PlayerViewModel @JvmOverloads constructor(
     }
 
     fun getCurrentEpisodeIndex(): Int {
-        return this.currentPlaylist.indexOfFirst { currentEpisode?.id == it.id }
+        return currentPlaylist.value.indexOfFirst { currentEpisode.value?.id == it.id }
     }
 
-    fun getAdjacentEpisodeId(previous: Boolean): Long {
+    private fun getAdjacentEpisodeId(previous: Boolean): Long {
         val newIndex = if (previous) getCurrentEpisodeIndex() - 1 else getCurrentEpisodeIndex() + 1
 
         return when {
             previous && getCurrentEpisodeIndex() == 0 -> -1L
-            !previous && this.currentPlaylist.lastIndex == getCurrentEpisodeIndex() -> -1L
-            else -> this.currentPlaylist[newIndex].id ?: -1L
+            !previous && currentPlaylist.value.lastIndex == getCurrentEpisodeIndex() -> -1L
+            else -> currentPlaylist.value.getOrNull(newIndex)?.id ?: -1L
         }
     }
 
-    override fun onCleared() {
-        if (currentEpisode != null) {
-            saveWatchingProgress(currentEpisode!!)
-            episodeToDownload?.let {
-                downloadManager.addDownloadsToStartOfQueue(listOf(it))
-            }
-        }
+    fun updateHasNextEpisode(value: Boolean) {
+        _hasNextEpisode.update { _ -> value }
+    }
+
+    fun updateHasPreviousEpisode(value: Boolean) {
+        _hasPreviousEpisode.update { _ -> value }
     }
 
     /**
@@ -224,7 +869,7 @@ class PlayerViewModel @JvmOverloads constructor(
      * to persist the current progress of the active episode.
      */
     fun onSaveInstanceStateNonConfigurationChange() {
-        val currentEpisode = currentEpisode ?: return
+        val currentEpisode = currentEpisode.value ?: return
         viewModelScope.launchNonCancellable {
             saveEpisodeProgress(currentEpisode)
         }
@@ -234,7 +879,7 @@ class PlayerViewModel @JvmOverloads constructor(
      * Whether this presenter is initialized yet.
      */
     private fun needsInit(): Boolean {
-        return currentAnime == null || currentEpisode == null
+        return currentAnime.value == null || currentEpisode.value == null
     }
 
     /**
@@ -252,20 +897,27 @@ class PlayerViewModel @JvmOverloads constructor(
         return try {
             val anime = getAnime.await(animeId)
             if (anime != null) {
+                animeTitle.update { _ -> anime.title }
                 sourceManager.isInitialized.first { it }
                 if (episodeId == -1L) episodeId = initialEpisodeId
 
                 checkTrackers(anime)
 
-                mutableState.update { it.copy(episodeList = initEpisodeList(anime)) }
-                val episode = this.currentPlaylist.first { it.id == episodeId }
+                updateEpisodeList(initEpisodeList(anime))
+
+                val episode = currentPlaylist.value.first { it.id == episodeId }
+                mediaTitle.update { _ -> episode.name }
 
                 val source = sourceManager.getOrStub(anime.source)
 
-                mutableState.update { it.copy(episode = episode, anime = anime, source = source) }
+                _currentEpisode.update { _ -> episode }
+                _currentAnime.update { _ -> anime }
+                _currentSource.update { _ -> source }
 
-                val currentEp = currentEpisode ?: throw Exception("No episode loaded.")
+                _hasPreviousEpisode.update { _ -> getCurrentEpisodeIndex() != 0 }
+                _hasNextEpisode.update { _ -> getCurrentEpisodeIndex() != currentPlaylist.value.size - 1 }
 
+                val currentEp = currentEpisode.value ?: throw Exception("No episode loaded.")
                 if (vidList.isNotBlank()) {
                     currentVideoList = vidList.toVideoList().ifEmpty {
                         currentVideoList = null
@@ -324,27 +976,17 @@ class PlayerViewModel @JvmOverloads constructor(
         hasTrackers = tracks.isNotEmpty()
     }
 
-    fun isEpisodeOnline(): Boolean? {
-        val anime = currentAnime ?: return null
-        val episode = currentEpisode ?: return null
-        return currentSource is AnimeHttpSource &&
-            !EpisodeLoader.isDownload(
-                episode.toDomainEpisode()!!,
-                anime,
-            )
-    }
-
     suspend fun loadEpisode(episodeId: Long?): Pair<List<Video>?, String>? {
-        val anime = currentAnime ?: return null
+        val anime = currentAnime.value ?: return null
         val source = sourceManager.getOrStub(anime.source)
 
-        val chosenEpisode = this.currentPlaylist.firstOrNull { ep -> ep.id == episodeId } ?: return null
+        val chosenEpisode = currentPlaylist.value.firstOrNull { ep -> ep.id == episodeId } ?: return null
 
-        mutableState.update { it.copy(episode = chosenEpisode) }
+        _currentEpisode.update { _ -> chosenEpisode }
 
         return withIOContext {
             try {
-                val currentEpisode = currentEpisode ?: throw Exception("No episode loaded.")
+                val currentEpisode = currentEpisode.value ?: throw Exception("No episode loaded.")
                 currentVideoList = EpisodeLoader.getLinks(
                     currentEpisode.toDomainEpisode()!!,
                     anime,
@@ -363,9 +1005,9 @@ class PlayerViewModel @JvmOverloads constructor(
      * Called every time a second is reached in the player. Used to mark the flag of episode being
      * seen, update tracking services, enqueue downloaded episode deletion and download next episode.
      */
-    fun onSecondReached(position: Int, duration: Int) {
-        if (state.value.isLoadingEpisode) return
-        val currentEp = currentEpisode ?: return
+    private fun onSecondReached(position: Int, duration: Int) {
+        if (isLoadingEpisode.value) return
+        val currentEp = currentEpisode.value ?: return
         if (episodeId == -1L) return
 
         val seconds = position * 1000L
@@ -394,13 +1036,13 @@ class PlayerViewModel @JvmOverloads constructor(
 
     private fun downloadNextEpisodes() {
         if (downloadAheadAmount == 0) return
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
 
         // Only download ahead if current + next episode is already downloaded too to avoid jank
-        if (getCurrentEpisodeIndex() == this.currentPlaylist.lastIndex) return
-        val currentEpisode = currentEpisode ?: return
+        if (getCurrentEpisodeIndex() == currentPlaylist.value.lastIndex) return
+        val currentEpisode = currentEpisode.value ?: return
 
-        val nextEpisode = this.currentPlaylist[getCurrentEpisodeIndex() + 1]
+        val nextEpisode = currentPlaylist.value[getCurrentEpisodeIndex() + 1]
         val episodesAreDownloaded =
             EpisodeLoader.isDownload(currentEpisode.toDomainEpisode()!!, anime) &&
                 EpisodeLoader.isDownload(nextEpisode.toDomainEpisode()!!, anime)
@@ -422,9 +1064,9 @@ class PlayerViewModel @JvmOverloads constructor(
      */
     private fun deleteEpisodeIfNeeded(chosenEpisode: Episode) {
         // Determine which episode should be deleted and enqueue
-        val currentEpisodePosition = this.currentPlaylist.indexOf(chosenEpisode)
+        val currentEpisodePosition = currentPlaylist.value.indexOf(chosenEpisode)
         val removeAfterSeenSlots = downloadPreferences.removeAfterReadSlots().get()
-        val episodeToDelete = this.currentPlaylist.getOrNull(
+        val episodeToDelete = currentPlaylist.value.getOrNull(
             currentEpisodePosition - removeAfterSeenSlots,
         )
         // If episode is completely seen no need to download it
@@ -437,7 +1079,7 @@ class PlayerViewModel @JvmOverloads constructor(
     }
 
     fun saveCurrentEpisodeWatchingProgress() {
-        currentEpisode?.let { saveWatchingProgress(it) }
+        currentEpisode.value?.let { saveWatchingProgress(it) }
     }
 
     /**
@@ -495,12 +1137,25 @@ class PlayerViewModel @JvmOverloads constructor(
         }
     }
 
+    fun takeScreenshot(cachePath: String, showSubtitles: Boolean): InputStream? {
+        val filename = cachePath + "/${System.currentTimeMillis()}_mpv_screenshot_tmp.png"
+        val subtitleFlag = if (showSubtitles) "subtitles" else "video"
+
+        MPVLib.command(arrayOf("screenshot-to-file", filename, subtitleFlag))
+        val tempFile = File(filename).takeIf { it.exists() } ?: return null
+        val newFile = File("$cachePath/mpv_screenshot.png")
+
+        newFile.delete()
+        tempFile.renameTo(newFile)
+        return newFile.takeIf { it.exists() }?.inputStream()
+    }
+
     /**
      * Saves the screenshot on the pictures directory and notifies the UI of the result.
      * There's also a notification to allow sharing the image somewhere else or deleting it.
      */
     fun saveImage(imageStream: () -> InputStream, timePos: Int?) {
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
 
         val context = Injekt.get<Application>()
         val notifier = SaveImageNotifier(context)
@@ -539,7 +1194,7 @@ class PlayerViewModel @JvmOverloads constructor(
      * image will be kept so it won't be taking lots of internal disk space.
      */
     fun shareImage(imageStream: () -> InputStream, timePos: Int?) {
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
 
         val context = Injekt.get<Application>()
         val destDir = context.cacheImageDir
@@ -568,7 +1223,7 @@ class PlayerViewModel @JvmOverloads constructor(
      * Sets the screenshot as cover and notifies the UI of the result.
      */
     fun setAsCover(imageStream: () -> InputStream) {
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
 
         viewModelScope.launchNonCancellable {
             val result = try {
@@ -597,7 +1252,7 @@ class PlayerViewModel @JvmOverloads constructor(
         if (basePreferences.incognitoMode().get() || !hasTrackers) return
         if (!trackPreferences.autoUpdateTrack().get()) return
 
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
         val context = Injekt.get<Application>()
 
         viewModelScope.launchNonCancellable {
@@ -611,7 +1266,7 @@ class PlayerViewModel @JvmOverloads constructor(
      */
     private fun enqueueDeleteSeenEpisodes(episode: Episode) {
         if (!episode.seen) return
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
         viewModelScope.launchNonCancellable {
             downloadManager.enqueueEpisodesToDelete(listOf(episode.toDomainEpisode()!!), anime)
         }
@@ -631,8 +1286,8 @@ class PlayerViewModel @JvmOverloads constructor(
      * Returns the skipIntroLength used by this anime or the default one.
      */
     fun getAnimeSkipIntroLength(resolveDefault: Boolean = true): Int {
-        val default = playerPreferences.defaultIntroLength().get()
-        val anime = currentAnime ?: return default
+        val default = gesturePreferences.defaultIntroLength().get()
+        val anime = currentAnime.value ?: return default
         val skipIntroLength = anime.skipIntroLength
         return when {
             resolveDefault && skipIntroLength <= 0 -> default
@@ -644,16 +1299,11 @@ class PlayerViewModel @JvmOverloads constructor(
      * Updates the skipIntroLength for the open anime.
      */
     fun setAnimeSkipIntroLength(skipIntroLength: Long) {
-        val anime = currentAnime ?: return
+        val anime = currentAnime.value ?: return
         viewModelScope.launchIO {
             setAnimeViewerFlags.awaitSetSkipIntroLength(anime.id, skipIntroLength)
             logcat(LogPriority.INFO) { "New Skip Intro Length is ${anime.skipIntroLength}" }
-            mutableState.update {
-                it.copy(
-                    anime = getAnime.await(anime.id),
-                )
-            }
-            eventChannel.send(Event.SetAnimeSkipIntro(getAnimeSkipIntroLength()))
+            _currentAnime.update { _ -> getAnime.await(anime.id) }
         }
     }
 
@@ -664,7 +1314,7 @@ class PlayerViewModel @JvmOverloads constructor(
         anime: Anime,
         timePos: String,
     ): String? {
-        val episode = currentEpisode ?: return null
+        val episode = currentEpisode.value ?: return null
         val filenameSuffix = " - $timePos"
         return DiskUtil.buildValidFilename(
             "${anime.title} - ${episode.name}".takeBytes(
@@ -678,10 +1328,10 @@ class PlayerViewModel @JvmOverloads constructor(
      * just works if tracking is enabled.
      */
     suspend fun aniSkipResponse(playerDuration: Int?): List<Stamp>? {
-        val animeId = currentAnime?.id ?: return null
+        val animeId = currentAnime.value?.id ?: return null
         val trackerManager = Injekt.get<TrackerManager>()
         var malId: Long?
-        val episodeNumber = currentEpisode?.episode_number?.toInt() ?: return null
+        val episodeNumber = currentEpisode.value?.episode_number?.toInt() ?: return null
         if (getTracks.await(animeId).isEmpty()) {
             logcat { "AniSkip: No tracks found for anime $animeId" }
             return null
@@ -702,77 +1352,110 @@ class PlayerViewModel @JvmOverloads constructor(
         return null
     }
 
-    fun showEpisodeList() {
-        mutableState.update { it.copy(dialog = Dialog.EpisodeList) }
-    }
-
-    fun showSpeedPicker() {
-        mutableState.update { it.copy(dialog = Dialog.SpeedPicker) }
-    }
-
-    fun showSkipIntroLength() {
-        mutableState.update { it.copy(dialog = Dialog.SkipIntroLength) }
-    }
-
-    fun showSubtitleSettings() {
-        mutableState.update { it.copy(sheet = Sheet.SubtitleSettings) }
-    }
-
-    fun showScreenshotOptions() {
-        mutableState.update { it.copy(sheet = Sheet.ScreenshotOptions) }
-    }
-
-    fun showPlayerSettings() {
-        mutableState.update { it.copy(sheet = Sheet.PlayerSettings) }
-    }
-
-    fun showVideoChapters() {
-        mutableState.update { it.copy(sheet = Sheet.VideoChapters) }
-    }
-
-    fun showStreamsCatalog() {
-        mutableState.update { it.copy(sheet = Sheet.StreamsCatalog) }
-    }
-
-    fun closeDialogSheet() {
-        mutableState.update { it.copy(dialog = null, sheet = null) }
+    val aniSkipEnable = gesturePreferences.aniSkipEnabled().get()
+    private val netflixStyle = gesturePreferences.enableNetflixStyleAniSkip().get()
+
+    var aniSkipInterval: List<Stamp>? = null
+    private val defaultWaitingTime = gesturePreferences.waitingTimeAniSkip().get()
+    var waitingAniSkip = defaultWaitingTime
+
+    private var skipType: SkipType? = null
+
+    fun aniSkipStuff(position: Long) {
+        if (!aniSkipEnable) return
+        // if it doesn't find any interval it will show the +85 button
+        if (aniSkipInterval == null) return
+
+        val autoSkipAniSkip = gesturePreferences.autoSkipAniSkip().get()
+
+        skipType =
+            aniSkipInterval
+                ?.firstOrNull {
+                    it.interval.startTime <= position &&
+                        it.interval.endTime > position
+                }?.skipType
+        skipType?.let { skipType ->
+            if (netflixStyle) {
+                // show a toast with the seconds before the skip
+                if (waitingAniSkip == defaultWaitingTime) {
+                    activity.toast(
+                        "AniSkip: ${activity.stringResource(
+                            MR.strings.player_aniskip_dontskip_toast,
+                            skipType.getString(),
+                            waitingAniSkip,
+                        )}",
+                    )
+                }
+                showAniskipButton(aniSkipInterval!!, skipType, waitingAniSkip)
+                waitingAniSkip--
+            } else if (autoSkipAniSkip) {
+                rightSeekToWithText(
+                    seekDuration = aniSkipInterval!!.first { it.skipType == skipType }.interval.endTime.toInt(),
+                    text = activity.stringResource(MR.strings.player_aniskip_skip, skipType.getString()),
+                )
+            } else {
+                showAniskipButton(skipType)
+            }
+        } ?: run {
+            updateAniskipButton(null)
+            waitingAniSkip = defaultWaitingTime
+        }
     }
 
-    @Immutable
-    data class State(
-        val episodeList: List<Episode> = emptyList(),
-        val episode: Episode? = null,
-        val anime: Anime? = null,
-        val source: AnimeSource? = null,
-        val videoStreams: VideoStreams = VideoStreams(),
-        val isLoadingEpisode: Boolean = false,
-        val dialog: Dialog? = null,
-        val sheet: Sheet? = null,
-    )
+    private fun showAniskipButton(skipType: SkipType) {
+        val skipButtonString = when (skipType) {
+            SkipType.ED -> MR.strings.player_aniskip_ed
+            SkipType.OP -> MR.strings.player_aniskip_op
+            SkipType.RECAP -> MR.strings.player_aniskip_recap
+            SkipType.MIXED_OP -> MR.strings.player_aniskip_mixedOp
+        }
 
-    class VideoStreams(val quality: Stream, val subtitle: Stream, val audio: Stream) {
-        constructor() : this(Stream(), Stream(), Stream())
-        class Stream(var index: Int = 0, var tracks: Array<Track> = emptyArray())
+        updateAniskipButton(activity.stringResource(skipButtonString))
     }
 
-    sealed class Dialog {
-        object EpisodeList : Dialog()
-        object SpeedPicker : Dialog()
-        object SkipIntroLength : Dialog()
+    private fun showAniskipButton(aniSkipResponse: List<Stamp>, skipType: SkipType, waitingTime: Int) {
+        val skipTime = when (skipType) {
+            SkipType.ED -> aniSkipResponse.first { it.skipType == SkipType.ED }.interval
+            SkipType.OP -> aniSkipResponse.first { it.skipType == SkipType.OP }.interval
+            SkipType.RECAP -> aniSkipResponse.first { it.skipType == SkipType.RECAP }.interval
+            SkipType.MIXED_OP -> aniSkipResponse.first { it.skipType == SkipType.MIXED_OP }.interval
+        }
+        if (waitingTime > -1) {
+            if (waitingTime > 0) {
+                updateAniskipButton(activity.stringResource(MR.strings.player_aniskip_dontskip))
+            } else {
+                rightSeekToWithText(
+                    seekDuration = skipTime.endTime.toInt(),
+                    text = activity.stringResource(MR.strings.player_aniskip_skip, skipType.getString()),
+                )
+            }
+        } else {
+            // when waitingTime is -1, it means that the user cancelled the skip
+            showAniskipButton(skipType)
+        }
     }
 
-    sealed class Sheet {
-        object SubtitleSettings : Sheet()
-        object ScreenshotOptions : Sheet()
-        object PlayerSettings : Sheet()
-        object VideoChapters : Sheet()
-        object StreamsCatalog : Sheet()
+    fun aniskipPressed() {
+        if (skipType != null) {
+            // this stops the counter
+            if (waitingAniSkip > 0 && netflixStyle) {
+                waitingAniSkip = -1
+                return
+            }
+            rightSeekToWithText(
+                seekDuration = aniSkipInterval!!.first { it.skipType == skipType }.interval.endTime.toInt(),
+                text = activity.stringResource(MR.strings.player_aniskip_skip, skipType!!.getString()),
+            )
+        }
     }
 
     sealed class Event {
-        data class SetAnimeSkipIntro(val duration: Int) : Event()
         data class SetCoverResult(val result: SetAsCover) : Event()
         data class SavedImage(val result: SaveImageResult) : Event()
         data class ShareImage(val uri: Uri, val seconds: String) : Event()
     }
 }
+
+fun Float.normalize(inMin: Float, inMax: Float, outMin: Float, outMax: Float): Float {
+    return (this - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/BottomLeftPlayerControls.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/BottomLeftPlayerControls.kt
new file mode 100644
index 0000000000..6ec150e3ca
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/BottomLeftPlayerControls.kt
@@ -0,0 +1,86 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.animation.AnimatedVisibility
+import androidx.compose.animation.fadeIn
+import androidx.compose.animation.fadeOut
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.LockOpen
+import androidx.compose.material.icons.filled.ScreenRotation
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import dev.vivvvek.seeker.Segment
+import eu.kanade.tachiyomi.ui.player.Sheets
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import eu.kanade.tachiyomi.ui.player.controls.components.CurrentChapter
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.i18n.stringResource
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun BottomLeftPlayerControls(
+    playbackSpeed: Float,
+    currentChapter: Segment?,
+    onLockControls: () -> Unit,
+    onCycleRotation: () -> Unit,
+    onPlaybackSpeedChange: (Float) -> Unit,
+    onOpenSheet: (Sheets) -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+
+    Row(
+        modifier = modifier.fillMaxWidth(),
+        verticalAlignment = Alignment.CenterVertically,
+    ) {
+        ControlsButton(
+            Icons.Default.LockOpen,
+            onClick = onLockControls,
+        )
+        ControlsButton(
+            icon = Icons.Default.ScreenRotation,
+            onClick = onCycleRotation,
+        )
+        ControlsButton(
+            text = stringResource(MR.strings.player_speed, playbackSpeed),
+            onClick = {
+                val newSpeed = if (playbackSpeed >= 2) 0.25f else playbackSpeed + 0.25f
+                onPlaybackSpeedChange(newSpeed)
+                playerPreferences.playerSpeed().set(newSpeed)
+            },
+            onLongClick = { onOpenSheet(Sheets.PlaybackSpeed) },
+        )
+        AnimatedVisibility(
+            currentChapter != null && playerPreferences.showCurrentChapter().get(),
+            enter = fadeIn(),
+            exit = fadeOut(),
+        ) {
+            CurrentChapter(
+                chapter = currentChapter!!,
+                onClick = { onOpenSheet(Sheets.Chapters) },
+            )
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/BottomRightPlayerControls.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/BottomRightPlayerControls.kt
new file mode 100644
index 0000000000..ed4eb9cae1
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/BottomRightPlayerControls.kt
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.foundation.combinedClickable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.AspectRatio
+import androidx.compose.material.icons.filled.PictureInPictureAlt
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import tachiyomi.presentation.core.components.material.Button
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun BottomRightPlayerControls(
+    // TODO(customButton)
+    // customButton: CustomButtonEntity?,
+    aniskipButton: String?,
+    onPressAniSkipButton: () -> Unit,
+    isPipAvailable: Boolean,
+    onAspectClick: () -> Unit,
+    onPipClick: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(modifier) {
+        if (aniskipButton != null) {
+            Box(
+                modifier = Modifier.padding(end = MaterialTheme.padding.small),
+            ) {
+                Button(onClick = {}) {
+                    Text(text = aniskipButton)
+                }
+                Box(
+                    modifier = Modifier
+                        .matchParentSize()
+                        .combinedClickable(
+                            onClick = onPressAniSkipButton,
+                            interactionSource = remember { MutableInteractionSource() },
+                            indication = null,
+                        ),
+                )
+            }
+        }
+        // TODO(customButton)
+        // if (customButton != null) {
+        //     Box(
+        //         modifier = Modifier.padding(end = MaterialTheme.spacing.smaller),
+        //     ) {
+        //         Button(onClick = {}) {
+        //             Text(text = customButton.title)
+        //         }
+        //         Box(
+        //             modifier = Modifier
+        //                 .matchParentSize()
+        //                 .combinedClickable(
+        //                     onClick = customButton::execute,
+        //                     onLongClick = customButton::executeLongClick,
+        //                     interactionSource = remember { MutableInteractionSource() },
+        //                     indication = null,
+        //                 ),
+        //         )
+        //     }
+        // }
+
+        if (isPipAvailable) {
+            ControlsButton(
+                Icons.Default.PictureInPictureAlt,
+                onClick = onPipClick,
+            )
+        }
+
+        ControlsButton(
+            Icons.Default.AspectRatio,
+            onClick = onAspectClick,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/GestureHandler.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/GestureHandler.kt
new file mode 100644
index 0000000000..97c6acadf7
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/GestureHandler.kt
@@ -0,0 +1,357 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.foundation.background
+import androidx.compose.foundation.gestures.detectHorizontalDragGestures
+import androidx.compose.foundation.gestures.detectTapGestures
+import androidx.compose.foundation.gestures.detectVerticalDragGestures
+import androidx.compose.foundation.indication
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.interaction.PressInteraction
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.WindowInsets
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.safeGestures
+import androidx.compose.foundation.layout.windowInsetsPadding
+import androidx.compose.material3.LocalRippleConfiguration
+import androidx.compose.material3.Text
+import androidx.compose.material3.ripple
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.CompositionLocalProvider
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.hapticfeedback.HapticFeedbackType
+import androidx.compose.ui.input.pointer.pointerInput
+import androidx.compose.ui.platform.LocalHapticFeedback
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.sp
+import eu.kanade.presentation.player.components.LeftSideOvalShape
+import eu.kanade.presentation.player.components.RightSideOvalShape
+import eu.kanade.presentation.theme.playerRippleConfiguration
+import eu.kanade.tachiyomi.ui.player.Panels
+import eu.kanade.tachiyomi.ui.player.PlayerUpdates
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel
+import eu.kanade.tachiyomi.ui.player.Sheets
+import eu.kanade.tachiyomi.ui.player.controls.components.DoubleTapSeekTriangles
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import `is`.xyz.mpv.MPVLib
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.update
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.i18n.pluralStringResource
+import tachiyomi.presentation.core.util.collectAsState
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun GestureHandler(
+    viewModel: PlayerViewModel,
+    interactionSource: MutableInteractionSource,
+    modifier: Modifier = Modifier,
+) {
+    val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+    val gesturePreferences = remember { Injekt.get<GesturePreferences>() }
+    val audioPreferences = remember { Injekt.get<AudioPreferences>() }
+
+    val panelShown by viewModel.panelShown.collectAsState()
+    val allowGesturesInPanels by playerPreferences.allowGestures().collectAsState()
+    val duration by viewModel.duration.collectAsState()
+    val position by viewModel.pos.collectAsState()
+    val controlsShown by viewModel.controlsShown.collectAsState()
+    val areControlsLocked by viewModel.areControlsLocked.collectAsState()
+    val seekAmount by viewModel.doubleTapSeekAmount.collectAsState()
+    val isSeekingForwards by viewModel.isSeekingForwards.collectAsState()
+    var isDoubleTapSeeking by remember { mutableStateOf(false) }
+
+    LaunchedEffect(seekAmount) {
+        delay(800)
+        isDoubleTapSeeking = false
+        viewModel.updateSeekAmount(0)
+        viewModel.updateSeekText(null)
+        delay(100)
+        viewModel.hideSeekBar()
+    }
+
+    val gestureVolumeBrightness = playerPreferences.gestureVolumeBrightness().get()
+    val swapVolumeBrightness by playerPreferences.swapVolumeBrightness().collectAsState()
+    val seekGesture by gesturePreferences.gestureHorizontalSeek().collectAsState()
+    val preciseSeeking by gesturePreferences.playerSmoothSeek().collectAsState()
+    val showSeekbar by gesturePreferences.showSeekBar().collectAsState()
+    var isLongPressing by remember { mutableStateOf(false) }
+    val currentVolume by viewModel.currentVolume.collectAsState()
+    val currentMPVVolume by viewModel.currentMPVVolume.collectAsState()
+    val currentBrightness by viewModel.currentBrightness.collectAsState()
+    val volumeBoostingCap = audioPreferences.volumeBoostCap().get()
+    val haptics = LocalHapticFeedback.current
+
+    Box(
+        modifier = modifier
+            .fillMaxSize()
+            .windowInsetsPadding(WindowInsets.safeGestures)
+            .pointerInput(Unit) {
+                val originalSpeed = viewModel.playbackSpeed.value
+                detectTapGestures(
+                    onTap = {
+                        if (controlsShown) viewModel.hideControls() else viewModel.showControls()
+                    },
+                    onDoubleTap = {
+                        if (isDoubleTapSeeking) return@detectTapGestures
+                        if (it.x > size.width * 3 / 5) {
+                            if (!isSeekingForwards) viewModel.updateSeekAmount(0)
+                            viewModel.handleRightDoubleTap()
+                        } else if (it.x < size.width * 2 / 5) {
+                            if (isSeekingForwards) viewModel.updateSeekAmount(0)
+                            viewModel.handleLeftDoubleTap()
+                        } else {
+                            viewModel.handleCenterDoubleTap()
+                        }
+                        isDoubleTapSeeking = true
+                    },
+                    onPress = {
+                        if (panelShown != Panels.None && !allowGesturesInPanels) {
+                            viewModel.panelShown.update { Panels.None }
+                        }
+                        val press = PressInteraction.Press(
+                            it.copy(x = if (it.x > size.width * 3 / 5) it.x - size.width * 0.6f else it.x),
+                        )
+                        if (isDoubleTapSeeking) {
+                            if (it.x > size.width * 3 / 5) {
+                                if (!isSeekingForwards) viewModel.updateSeekAmount(0)
+                                viewModel.handleRightDoubleTap()
+                            } else if (it.x < size.width * 2 / 5) {
+                                if (isSeekingForwards) viewModel.updateSeekAmount(0)
+                                viewModel.handleLeftDoubleTap()
+                            } else {
+                                viewModel.handleCenterDoubleTap()
+                            }
+                        }
+                        interactionSource.emit(press)
+                        tryAwaitRelease()
+                        if (isLongPressing) {
+                            isLongPressing = false
+                            MPVLib.setPropertyDouble("speed", originalSpeed.toDouble())
+                            viewModel.playerUpdate.update { PlayerUpdates.None }
+                        }
+                        interactionSource.emit(PressInteraction.Release(press))
+                    },
+                    onLongPress = {
+                        if (areControlsLocked) return@detectTapGestures
+                        if (!isLongPressing) {
+                            haptics.performHapticFeedback(HapticFeedbackType.LongPress)
+                            isLongPressing = true
+                            viewModel.pause()
+                            viewModel.sheetShown.update { Sheets.Screenshot }
+                        }
+                    },
+                )
+            }
+            .pointerInput(areControlsLocked) {
+                if (!seekGesture || areControlsLocked) return@pointerInput
+                var startingPosition = position.toInt()
+                var startingX = 0f
+                var wasPlayerAlreadyPause = false
+                detectHorizontalDragGestures(
+                    onDragStart = {
+                        startingPosition = position.toInt()
+                        startingX = it.x
+                        wasPlayerAlreadyPause = viewModel.paused.value
+                        viewModel.pause()
+                    },
+                    onDragEnd = {
+                        viewModel.gestureSeekAmount.update { null }
+                        viewModel.hideSeekBar()
+                        if (!wasPlayerAlreadyPause) viewModel.unpause()
+                    },
+                ) { change, dragAmount ->
+                    if (position <= 0f && dragAmount < 0) return@detectHorizontalDragGestures
+                    if (position >= duration && dragAmount > 0) return@detectHorizontalDragGestures
+                    calculateNewHorizontalGestureValue(startingPosition, startingX, change.position.x, 0.15f).let {
+                        viewModel.gestureSeekAmount.update { _ ->
+                            Pair(
+                                startingPosition,
+                                (it - startingPosition)
+                                    .coerceIn(0 - startingPosition, (duration - startingPosition).toInt()),
+                            )
+                        }
+                        viewModel.seekTo(it, preciseSeeking)
+                    }
+
+                    if (showSeekbar) viewModel.showSeekBar()
+                }
+            }
+            .pointerInput(areControlsLocked) {
+                if (!gestureVolumeBrightness || areControlsLocked) return@pointerInput
+                var startingY = 0f
+                var mpvVolumeStartingY = 0f
+                var originalVolume = currentVolume
+                var originalMPVVolume = currentMPVVolume
+                var originalBrightness = currentBrightness
+                val brightnessGestureSens = 0.001f
+                val volumeGestureSens = 0.03f
+                val mpvVolumeGestureSens = 0.02f
+                val isIncreasingVolumeBoost: (Float) -> Boolean = {
+                    volumeBoostingCap > 0 &&
+                        currentVolume == viewModel.maxVolume &&
+                        currentMPVVolume - 100 < volumeBoostingCap &&
+                        it < 0
+                }
+                val isDecreasingVolumeBoost: (Float) -> Boolean = {
+                    volumeBoostingCap > 0 &&
+                        currentVolume == viewModel.maxVolume &&
+                        currentMPVVolume - 100 in 1..volumeBoostingCap &&
+                        it > 0
+                }
+                detectVerticalDragGestures(
+                    onDragEnd = { startingY = 0f },
+                    onDragStart = {
+                        startingY = 0f
+                        mpvVolumeStartingY = 0f
+                        originalVolume = currentVolume
+                        originalMPVVolume = currentMPVVolume
+                        originalBrightness = currentBrightness
+                    },
+                ) { change, amount ->
+                    val changeVolume: () -> Unit = {
+                        if (isIncreasingVolumeBoost(amount) || isDecreasingVolumeBoost(amount)) {
+                            if (mpvVolumeStartingY == 0f) {
+                                startingY = 0f
+                                originalVolume = currentVolume
+                                mpvVolumeStartingY = change.position.y
+                            }
+                            viewModel.changeMPVVolumeTo(
+                                calculateNewVerticalGestureValue(
+                                    originalMPVVolume,
+                                    mpvVolumeStartingY,
+                                    change.position.y,
+                                    mpvVolumeGestureSens,
+                                )
+                                    .coerceIn(100..volumeBoostingCap + 100),
+                            )
+                        } else {
+                            if (startingY == 0f) {
+                                mpvVolumeStartingY = 0f
+                                originalMPVVolume = currentMPVVolume
+                                startingY = change.position.y
+                            }
+                            viewModel.changeVolumeTo(
+                                calculateNewVerticalGestureValue(
+                                    originalVolume,
+                                    startingY,
+                                    change.position.y,
+                                    volumeGestureSens,
+                                ),
+                            )
+                        }
+                        viewModel.displayVolumeSlider()
+                    }
+                    val changeBrightness: () -> Unit = {
+                        if (startingY == 0f) startingY = change.position.y
+                        viewModel.changeBrightnessTo(
+                            calculateNewVerticalGestureValue(
+                                originalBrightness,
+                                startingY,
+                                change.position.y,
+                                brightnessGestureSens,
+                            ),
+                        )
+                        viewModel.displayBrightnessSlider()
+                    }
+                    if (swapVolumeBrightness) {
+                        if (change.position.x > size.width / 2) changeBrightness() else changeVolume()
+                    } else {
+                        if (change.position.x < size.width / 2) changeBrightness() else changeVolume()
+                    }
+                }
+            },
+    )
+}
+
+@Composable
+fun DoubleTapToSeekOvals(
+    amount: Int,
+    text: String?,
+    interactionSource: MutableInteractionSource,
+    modifier: Modifier = Modifier,
+) {
+    val alpha by animateFloatAsState(if (amount == 0) 0f else 0.2f, label = "double_tap_animation_alpha")
+    Box(
+        modifier = modifier.fillMaxSize(),
+        contentAlignment = if (amount > 0) Alignment.CenterEnd else Alignment.CenterStart,
+    ) {
+        CompositionLocalProvider(
+            LocalRippleConfiguration provides playerRippleConfiguration,
+        ) {
+            if (amount != 0 || text != null) {
+                Box(
+                    modifier = Modifier
+                        .fillMaxHeight()
+                        .fillMaxWidth(0.4f), // 2 fifths
+                    contentAlignment = Alignment.Center,
+                ) {
+                    Box(
+                        modifier = Modifier
+                            .fillMaxSize()
+                            .clip(if (amount > 0) RightSideOvalShape else LeftSideOvalShape)
+                            .background(Color.White.copy(alpha))
+                            .indication(interactionSource, ripple()),
+                    )
+                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
+                        DoubleTapSeekTriangles(isForward = amount > 0)
+                        Text(
+                            text = pluralStringResource(MR.plurals.seconds, amount, amount),
+                            fontSize = 12.sp,
+                            textAlign = TextAlign.Center,
+                            color = Color.White,
+                        )
+                    }
+                }
+            }
+        }
+    }
+}
+
+fun calculateNewVerticalGestureValue(originalValue: Int, startingY: Float, newY: Float, sensitivity: Float): Int {
+    return originalValue + ((startingY - newY) * sensitivity).toInt()
+}
+
+fun calculateNewVerticalGestureValue(originalValue: Float, startingY: Float, newY: Float, sensitivity: Float): Float {
+    return originalValue + ((startingY - newY) * sensitivity)
+}
+
+fun calculateNewHorizontalGestureValue(originalValue: Int, startingX: Float, newX: Float, sensitivity: Float): Int {
+    return originalValue + ((newX - startingX) * sensitivity).toInt()
+}
+
+fun calculateNewHorizontalGestureValue(originalValue: Float, startingX: Float, newX: Float, sensitivity: Float): Float {
+    return originalValue + ((newX - startingX) * sensitivity)
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/MiddlePlayerControls.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/MiddlePlayerControls.kt
new file mode 100644
index 0000000000..29099d2eba
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/MiddlePlayerControls.kt
@@ -0,0 +1,144 @@
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.animation.AnimatedVisibility
+import androidx.compose.animation.EnterTransition
+import androidx.compose.animation.ExitTransition
+import androidx.compose.animation.graphics.res.animatedVectorResource
+import androidx.compose.animation.graphics.res.rememberAnimatedVectorPainter
+import androidx.compose.animation.graphics.vector.AnimatedImageVector
+import androidx.compose.foundation.Image
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.SkipNext
+import androidx.compose.material.icons.filled.SkipPrevious
+import androidx.compose.material3.CircularProgressIndicator
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.ripple
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.Shadow
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.unit.dp
+import eu.kanade.tachiyomi.R
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import `is`.xyz.mpv.Utils
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import kotlin.math.abs
+
+@Composable
+fun MiddlePlayerControls(
+    // previous
+    hasPrevious: Boolean,
+    onSkipPrevious: () -> Unit,
+
+    // middle
+    isLoading: Boolean,
+    isLoadingEpisode: Boolean,
+    controlsShown: Boolean,
+    areControlsLocked: Boolean,
+    showLoadingCircle: Boolean,
+    paused: Boolean,
+    gestureSeekAmount: Pair<Int, Int>?,
+    onPlayPauseClick: () -> Unit,
+
+    // next
+    hasNext: Boolean,
+    onSkipNext: () -> Unit,
+
+    enter: EnterTransition,
+    exit: ExitTransition,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier,
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.large),
+    ) {
+        AnimatedVisibility(
+            visible = controlsShown && !areControlsLocked,
+            enter = enter,
+            exit = exit,
+        ) {
+            if (gestureSeekAmount == null) {
+                ControlsButton(
+                    Icons.Filled.SkipPrevious,
+                    onClick = onSkipPrevious,
+                    iconSize = 48.dp,
+                    enabled = hasPrevious,
+                )
+            }
+        }
+
+        val icon = AnimatedImageVector.animatedVectorResource(R.drawable.anim_play_to_pause)
+        val interaction = remember { MutableInteractionSource() }
+        when {
+            gestureSeekAmount != null -> {
+                Text(
+                    stringResource(
+                        MR.strings.player_gesture_seek_indicator,
+                        if (gestureSeekAmount.second >= 0) '+' else '-',
+                        Utils.prettyTime(abs(gestureSeekAmount.second)),
+                        Utils.prettyTime(gestureSeekAmount.first + gestureSeekAmount.second),
+                    ),
+                    style = MaterialTheme.typography.headlineMedium.copy(
+                        shadow = Shadow(Color.Black, blurRadius = 5f),
+                    ),
+                    fontWeight = FontWeight.Bold,
+                    textAlign = TextAlign.Center,
+                )
+            }
+
+            (isLoading || isLoadingEpisode) && showLoadingCircle -> CircularProgressIndicator(Modifier.size(96.dp))
+            else -> {
+                AnimatedVisibility(
+                    visible = controlsShown && !areControlsLocked,
+                    enter = enter,
+                    exit = exit,
+                ) {
+                    Image(
+                        painter = rememberAnimatedVectorPainter(icon, !paused),
+                        modifier = Modifier
+                            .size(96.dp)
+                            .clip(CircleShape)
+                            .clickable(
+                                interaction,
+                                ripple(),
+                                onClick = onPlayPauseClick,
+                            )
+                            .padding(MaterialTheme.padding.medium),
+                        contentDescription = null,
+                    )
+                }
+            }
+        }
+
+        AnimatedVisibility(
+            visible = controlsShown && !areControlsLocked,
+            enter = enter,
+            exit = exit,
+        ) {
+            if (gestureSeekAmount == null) {
+                ControlsButton(
+                    Icons.Filled.SkipNext,
+                    onClick = onSkipNext,
+                    iconSize = 48.dp,
+                    enabled = hasNext,
+                )
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerControls.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerControls.kt
new file mode 100644
index 0000000000..d7f58c70d1
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerControls.kt
@@ -0,0 +1,669 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.animation.AnimatedVisibility
+import androidx.compose.animation.core.FastOutSlowInEasing
+import androidx.compose.animation.core.FiniteAnimationSpec
+import androidx.compose.animation.core.LinearOutSlowInEasing
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.animation.core.tween
+import androidx.compose.animation.fadeIn
+import androidx.compose.animation.fadeOut
+import androidx.compose.animation.slideInHorizontally
+import androidx.compose.animation.slideInVertically
+import androidx.compose.animation.slideOutHorizontally
+import androidx.compose.animation.slideOutVertically
+import androidx.compose.foundation.background
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Lock
+import androidx.compose.material3.LocalContentColor
+import androidx.compose.material3.LocalRippleConfiguration
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.CompositionLocalProvider
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.runtime.staticCompositionLocalOf
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.platform.LocalLayoutDirection
+import androidx.compose.ui.unit.LayoutDirection
+import androidx.constraintlayout.compose.ConstraintLayout
+import androidx.constraintlayout.compose.Dimension
+import eu.kanade.presentation.theme.playerRippleConfiguration
+import eu.kanade.tachiyomi.ui.player.Dialogs
+import eu.kanade.tachiyomi.ui.player.Panels
+import eu.kanade.tachiyomi.ui.player.PlayerActivity
+import eu.kanade.tachiyomi.ui.player.PlayerUpdates
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel
+import eu.kanade.tachiyomi.ui.player.Sheets
+import eu.kanade.tachiyomi.ui.player.VideoAspect
+import eu.kanade.tachiyomi.ui.player.controls.components.BrightnessSlider
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import eu.kanade.tachiyomi.ui.player.controls.components.SeekbarWithTimers
+import eu.kanade.tachiyomi.ui.player.controls.components.TextPlayerUpdate
+import eu.kanade.tachiyomi.ui.player.controls.components.VolumeSlider
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.toFixed
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
+import `is`.xyz.mpv.MPVLib
+import kotlinx.collections.immutable.toImmutableList
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.flow.update
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import tachiyomi.presentation.core.util.collectAsState
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Suppress("CompositionLocalAllowlist")
+val LocalPlayerButtonsClickEvent = staticCompositionLocalOf { {} }
+
+@Composable
+fun PlayerControls(
+    viewModel: PlayerViewModel,
+    onBackPress: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    val spacing = MaterialTheme.padding
+    val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+    val gesturePreferences = remember { Injekt.get<GesturePreferences>() }
+    val audioPreferences = remember { Injekt.get<AudioPreferences>() }
+    val subtitlePreferences = remember { Injekt.get<SubtitlePreferences>() }
+    val interactionSource = remember { MutableInteractionSource() }
+
+    val controlsShown by viewModel.controlsShown.collectAsState()
+    val areControlsLocked by viewModel.areControlsLocked.collectAsState()
+    val seekBarShown by viewModel.seekBarShown.collectAsState()
+    val isLoading by viewModel.isLoading.collectAsState()
+    val isLoadingEpisode by viewModel.isLoadingEpisode.collectAsState()
+    val duration by viewModel.duration.collectAsState()
+    val position by viewModel.pos.collectAsState()
+    val paused by viewModel.paused.collectAsState()
+    val gestureSeekAmount by viewModel.gestureSeekAmount.collectAsState()
+    val doubleTapSeekAmount by viewModel.doubleTapSeekAmount.collectAsState()
+    val seekText by viewModel.seekText.collectAsState()
+    val currentChapter by viewModel.currentChapter.collectAsState()
+    val chapters by viewModel.chapters.collectAsState()
+
+    val playerTimeToDisappear by playerPreferences.playerTimeToDisappear().collectAsState()
+    var isSeeking by remember { mutableStateOf(false) }
+    var resetControls by remember { mutableStateOf(true) }
+
+    val onOpenSheet: (Sheets) -> Unit = {
+        viewModel.sheetShown.update { _ -> it }
+        if (it == Sheets.None) {
+            viewModel.showControls()
+        } else {
+            viewModel.hideControls()
+            viewModel.panelShown.update { Panels.None }
+            viewModel.dialogShown.update { Dialogs.None }
+        }
+    }
+    val onOpenPanel: (Panels) -> Unit = {
+        viewModel.panelShown.update { _ -> it }
+        if (it == Panels.None) {
+            viewModel.showControls()
+        } else {
+            viewModel.hideControls()
+            viewModel.sheetShown.update { Sheets.None }
+            viewModel.dialogShown.update { Dialogs.None }
+        }
+    }
+    val onOpenDialog: (Dialogs) -> Unit = {
+        viewModel.dialogShown.update { _ -> it }
+        if (it == Dialogs.None) {
+            viewModel.showControls()
+        } else {
+            viewModel.hideControls()
+            viewModel.sheetShown.update { Sheets.None }
+            viewModel.panelShown.update { Panels.None }
+        }
+    }
+
+    // TODO(customButtons)
+    // val customButtons by viewModel.customButtons.collectAsState()
+    // val primaryCustomButtonId by playerPreferences.primaryCustomButtonId.collectAsState()
+    // val customButton by remember {
+    //     derivedStateOf {
+    //         customButtons.getButtons().firstOrNull { it.id == primaryCustomButtonId }
+    //     }
+    // }
+
+    LaunchedEffect(
+        controlsShown,
+        paused,
+        isSeeking,
+        resetControls,
+    ) {
+        if (controlsShown && !paused && !isSeeking) {
+            delay(playerTimeToDisappear.toLong())
+            viewModel.hideControls()
+        }
+    }
+
+    val transparentOverlay by animateFloatAsState(
+        if (controlsShown && !areControlsLocked) .8f else 0f,
+        animationSpec = playerControlsExitAnimationSpec(),
+        label = "controls_transparent_overlay",
+    )
+    GestureHandler(
+        viewModel = viewModel,
+        interactionSource = interactionSource,
+    )
+    DoubleTapToSeekOvals(doubleTapSeekAmount, seekText, interactionSource)
+    CompositionLocalProvider(
+        LocalRippleConfiguration provides playerRippleConfiguration,
+        LocalPlayerButtonsClickEvent provides { resetControls = !resetControls },
+        LocalContentColor provides Color.White,
+    ) {
+        CompositionLocalProvider(
+            LocalLayoutDirection provides LayoutDirection.Ltr,
+        ) {
+            ConstraintLayout(
+                modifier = modifier
+                    .fillMaxSize()
+                    .background(
+                        Brush.verticalGradient(
+                            Pair(0f, Color.Black),
+                            Pair(.2f, Color.Transparent),
+                            Pair(.7f, Color.Transparent),
+                            Pair(1f, Color.Black),
+                        ),
+                        alpha = transparentOverlay,
+                    )
+                    .padding(horizontal = MaterialTheme.padding.medium),
+            ) {
+                val (topLeftControls, topRightControls) = createRefs()
+                val (volumeSlider, brightnessSlider) = createRefs()
+                val unlockControlsButton = createRef()
+                val (bottomRightControls, bottomLeftControls) = createRefs()
+                val centerControls = createRef()
+                val seekbar = createRef()
+                val (playerUpdates) = createRefs()
+
+                val hasPreviousEpisode by viewModel.hasPreviousEpisode.collectAsState()
+                val hasNextEpisode by viewModel.hasNextEpisode.collectAsState()
+                val isBrightnessSliderShown by viewModel.isBrightnessSliderShown.collectAsState()
+                val isVolumeSliderShown by viewModel.isVolumeSliderShown.collectAsState()
+                val brightness by viewModel.currentBrightness.collectAsState()
+                val volume by viewModel.currentVolume.collectAsState()
+                val mpvVolume by viewModel.currentMPVVolume.collectAsState()
+                val swapVolumeAndBrightness by playerPreferences.swapVolumeBrightness().collectAsState()
+                val reduceMotion by playerPreferences.reduceMotion().collectAsState()
+
+                LaunchedEffect(volume, mpvVolume, isVolumeSliderShown) {
+                    delay(2000)
+                    if (isVolumeSliderShown) viewModel.isVolumeSliderShown.update { false }
+                }
+                LaunchedEffect(brightness, isBrightnessSliderShown) {
+                    delay(2000)
+                    if (isBrightnessSliderShown) viewModel.isBrightnessSliderShown.update { false }
+                }
+                AnimatedVisibility(
+                    isBrightnessSliderShown,
+                    enter =
+                    if (!reduceMotion) {
+                        slideInHorizontally(playerControlsEnterAnimationSpec()) {
+                            if (swapVolumeAndBrightness) -it else it
+                        } +
+                            fadeIn(
+                                playerControlsEnterAnimationSpec(),
+                            )
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit =
+                    if (!reduceMotion) {
+                        slideOutHorizontally(playerControlsExitAnimationSpec()) {
+                            if (swapVolumeAndBrightness) -it else it
+                        } +
+                            fadeOut(
+                                playerControlsExitAnimationSpec(),
+                            )
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(brightnessSlider) {
+                        if (swapVolumeAndBrightness) {
+                            start.linkTo(parent.start, spacing.medium)
+                        } else {
+                            end.linkTo(parent.end, spacing.medium)
+                        }
+                        top.linkTo(parent.top)
+                        bottom.linkTo(parent.bottom)
+                    },
+                ) { BrightnessSlider(brightness, 0f..1f) }
+
+                AnimatedVisibility(
+                    isVolumeSliderShown,
+                    enter =
+                    if (!reduceMotion) {
+                        slideInHorizontally(playerControlsEnterAnimationSpec()) {
+                            if (swapVolumeAndBrightness) it else -it
+                        } +
+                            fadeIn(
+                                playerControlsEnterAnimationSpec(),
+                            )
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit =
+                    if (!reduceMotion) {
+                        slideOutHorizontally(playerControlsExitAnimationSpec()) {
+                            if (swapVolumeAndBrightness) it else -it
+                        } +
+                            fadeOut(
+                                playerControlsExitAnimationSpec(),
+                            )
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(volumeSlider) {
+                        if (swapVolumeAndBrightness) {
+                            end.linkTo(parent.end, spacing.medium)
+                        } else {
+                            start.linkTo(parent.start, spacing.medium)
+                        }
+                        top.linkTo(parent.top)
+                        bottom.linkTo(parent.bottom)
+                    },
+                ) {
+                    val boostCap by audioPreferences.volumeBoostCap().collectAsState()
+                    val displayVolumeAsPercentage by playerPreferences.displayVolPer().collectAsState()
+                    VolumeSlider(
+                        volume,
+                        mpvVolume = mpvVolume,
+                        range = 0..viewModel.maxVolume,
+                        boostRange = if (boostCap > 0) 0..audioPreferences.volumeBoostCap().get() else null,
+                        displayAsPercentage = displayVolumeAsPercentage,
+                    )
+                }
+
+                val currentPlayerUpdate by viewModel.playerUpdate.collectAsState()
+                val aspectRatio by playerPreferences.aspectState().collectAsState()
+                LaunchedEffect(currentPlayerUpdate, aspectRatio) {
+                    if (currentPlayerUpdate is PlayerUpdates.DoubleSpeed || currentPlayerUpdate is PlayerUpdates.None) {
+                        return@LaunchedEffect
+                    }
+                    delay(2000)
+                    viewModel.playerUpdate.update { PlayerUpdates.None }
+                }
+                AnimatedVisibility(
+                    currentPlayerUpdate !is PlayerUpdates.None,
+                    enter = fadeIn(playerControlsEnterAnimationSpec()),
+                    exit = fadeOut(playerControlsExitAnimationSpec()),
+                    modifier = Modifier.constrainAs(playerUpdates) {
+                        linkTo(parent.start, parent.end)
+                        linkTo(parent.top, parent.bottom, bias = 0.2f)
+                    },
+                ) {
+                    when (currentPlayerUpdate) {
+                        // is PlayerUpdates.DoubleSpeed -> DoubleSpeedPlayerUpdate()
+                        is PlayerUpdates.AspectRatio -> TextPlayerUpdate(stringResource(aspectRatio.titleRes))
+                        is PlayerUpdates.ShowText -> TextPlayerUpdate(
+                            (currentPlayerUpdate as PlayerUpdates.ShowText).value,
+                        )
+                        is PlayerUpdates.ShowTextResource -> TextPlayerUpdate(
+                            stringResource((currentPlayerUpdate as PlayerUpdates.ShowTextResource).textResource),
+                        )
+                        else -> {}
+                    }
+                }
+
+                AnimatedVisibility(
+                    controlsShown && areControlsLocked,
+                    enter = fadeIn(),
+                    exit = fadeOut(),
+                    modifier = Modifier.constrainAs(unlockControlsButton) {
+                        top.linkTo(parent.top, spacing.medium)
+                        start.linkTo(parent.start, spacing.medium)
+                    },
+                ) {
+                    ControlsButton(
+                        Icons.Filled.Lock,
+                        onClick = { viewModel.unlockControls() },
+                    )
+                }
+                AnimatedVisibility(
+                    visible =
+                    (controlsShown && !areControlsLocked || gestureSeekAmount != null) ||
+                        isLoading ||
+                        isLoadingEpisode,
+                    enter = fadeIn(playerControlsEnterAnimationSpec()),
+                    exit = fadeOut(playerControlsExitAnimationSpec()),
+                    modifier = Modifier.constrainAs(centerControls) {
+                        end.linkTo(parent.absoluteRight)
+                        start.linkTo(parent.absoluteLeft)
+                        top.linkTo(parent.top)
+                        bottom.linkTo(parent.bottom)
+                    },
+                ) {
+                    val showLoadingCircle by playerPreferences.showLoadingCircle().collectAsState()
+                    MiddlePlayerControls(
+                        hasPrevious = hasPreviousEpisode,
+                        onSkipPrevious = { viewModel.changeEpisode(true) },
+                        hasNext = hasNextEpisode,
+                        onSkipNext = { viewModel.changeEpisode(false) },
+                        isLoading = isLoading,
+                        isLoadingEpisode = isLoadingEpisode,
+                        controlsShown = controlsShown,
+                        areControlsLocked = areControlsLocked,
+                        showLoadingCircle = showLoadingCircle,
+                        paused = paused,
+                        gestureSeekAmount = gestureSeekAmount,
+                        onPlayPauseClick = viewModel::pauseUnpause,
+                        enter = fadeIn(playerControlsEnterAnimationSpec()),
+                        exit = fadeOut(playerControlsExitAnimationSpec()),
+                    )
+                }
+                AnimatedVisibility(
+                    visible = (controlsShown || seekBarShown) && !areControlsLocked,
+                    enter = if (!reduceMotion) {
+                        slideInVertically(playerControlsEnterAnimationSpec()) { it } +
+                            fadeIn(playerControlsEnterAnimationSpec())
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit = if (!reduceMotion) {
+                        slideOutVertically(playerControlsExitAnimationSpec()) { it } +
+                            fadeOut(playerControlsExitAnimationSpec())
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(seekbar) {
+                        bottom.linkTo(parent.bottom, spacing.medium)
+                    },
+                ) {
+                    val invertDuration by playerPreferences.invertDuration().collectAsState()
+                    val readAhead by viewModel.readAhead.collectAsState()
+                    val preciseSeeking by gesturePreferences.playerSmoothSeek().collectAsState()
+                    SeekbarWithTimers(
+                        position = position,
+                        duration = duration,
+                        readAheadValue = readAhead,
+                        onValueChange = {
+                            isSeeking = true
+                            viewModel.updatePlayBackPos(it)
+                            viewModel.seekTo(it.toInt(), preciseSeeking)
+                        },
+                        onValueChangeFinished = { isSeeking = false },
+                        timersInverted = Pair(false, invertDuration),
+                        durationTimerOnCLick = { playerPreferences.invertDuration().set(!invertDuration) },
+                        positionTimerOnClick = {},
+                        chapters = chapters.map { it.toSegment() }.toImmutableList(),
+                    )
+                }
+                val mediaTitle by viewModel.mediaTitle.collectAsState()
+                val animeTitle by viewModel.animeTitle.collectAsState()
+                AnimatedVisibility(
+                    controlsShown && !areControlsLocked,
+                    enter = if (!reduceMotion) {
+                        slideInHorizontally(playerControlsEnterAnimationSpec()) { -it } +
+                            fadeIn(playerControlsEnterAnimationSpec())
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit = if (!reduceMotion) {
+                        slideOutHorizontally(playerControlsExitAnimationSpec()) { -it } +
+                            fadeOut(playerControlsExitAnimationSpec())
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(topLeftControls) {
+                        top.linkTo(parent.top, spacing.medium)
+                        start.linkTo(parent.start)
+                        width = Dimension.fillToConstraints
+                        end.linkTo(topRightControls.start)
+                    },
+                ) {
+                    TopLeftPlayerControls(
+                        animeTitle = animeTitle,
+                        mediaTitle = mediaTitle,
+                        onTitleClick = { onOpenDialog(Dialogs.EpisodeList) },
+                        onBackClick = onBackPress,
+                    )
+                }
+                // Top right controls
+                val autoPlayEnabled by playerPreferences.autoplayEnabled().collectAsState()
+                val videoList by viewModel.videoList.collectAsState()
+                AnimatedVisibility(
+                    controlsShown && !areControlsLocked,
+                    enter = if (!reduceMotion) {
+                        slideInHorizontally(playerControlsEnterAnimationSpec()) { it } +
+                            fadeIn(playerControlsEnterAnimationSpec())
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit = if (!reduceMotion) {
+                        slideOutHorizontally(playerControlsExitAnimationSpec()) { it } +
+                            fadeOut(playerControlsExitAnimationSpec())
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(topRightControls) {
+                        top.linkTo(parent.top, spacing.medium)
+                        end.linkTo(parent.end)
+                    },
+                ) {
+                    TopRightPlayerControls(
+                        autoPlayEnabled = autoPlayEnabled,
+                        onToggleAutoPlay = { viewModel.setAutoPlay(it) },
+                        onSubtitlesClick = { onOpenSheet(Sheets.SubtitleTracks) },
+                        onSubtitlesLongClick = { onOpenPanel(Panels.SubtitleSettings) },
+                        onAudioClick = { onOpenSheet(Sheets.AudioTracks) },
+                        onAudioLongClick = { onOpenPanel(Panels.AudioDelay) },
+                        onQualityClick = {
+                            if (videoList.isNotEmpty()) {
+                                onOpenSheet(Sheets.QualityTracks)
+                            }
+                        },
+                        isEpisodeOnline = viewModel.isEpisodeOnline(),
+                        onMoreClick = { onOpenSheet(Sheets.More) },
+                        onMoreLongClick = { onOpenPanel(Panels.VideoFilters) },
+                    )
+                }
+                // Bottom right controls
+                val aniskipButton by viewModel.aniskipButton.collectAsState()
+                AnimatedVisibility(
+                    controlsShown && !areControlsLocked,
+                    enter = if (!reduceMotion) {
+                        slideInHorizontally(playerControlsEnterAnimationSpec()) { it } +
+                            fadeIn(playerControlsEnterAnimationSpec())
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit = if (!reduceMotion) {
+                        slideOutHorizontally(playerControlsExitAnimationSpec()) { it } +
+                            fadeOut(playerControlsExitAnimationSpec())
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(bottomRightControls) {
+                        bottom.linkTo(seekbar.top)
+                        end.linkTo(seekbar.end)
+                    },
+                ) {
+                    val activity = LocalContext.current as PlayerActivity
+                    BottomRightPlayerControls(
+                        // TODO(customButton)
+                        // customButton = customButton,
+                        aniskipButton = aniskipButton,
+                        onPressAniSkipButton = viewModel::aniskipPressed,
+                        isPipAvailable = activity.isPipSupportedAndEnabled,
+                        onPipClick = {
+                            if (!viewModel.isLoadingEpisode.value) {
+                                activity.enterPictureInPictureMode(activity.createPipParams())
+                            }
+                        },
+                        onAspectClick = {
+                            viewModel.changeVideoAspect(
+                                when (aspectRatio) {
+                                    VideoAspect.Fit -> VideoAspect.Stretch
+                                    VideoAspect.Stretch -> VideoAspect.Crop
+                                    VideoAspect.Crop -> VideoAspect.Fit
+                                },
+                            )
+                        },
+                    )
+                }
+                // Bottom left controls
+                val playbackSpeed by viewModel.playbackSpeed.collectAsState()
+                AnimatedVisibility(
+                    controlsShown && !areControlsLocked,
+                    enter = if (!reduceMotion) {
+                        slideInHorizontally(playerControlsEnterAnimationSpec()) { -it } +
+                            fadeIn(playerControlsEnterAnimationSpec())
+                    } else {
+                        fadeIn(playerControlsEnterAnimationSpec())
+                    },
+                    exit = if (!reduceMotion) {
+                        slideOutHorizontally(playerControlsExitAnimationSpec()) { -it } +
+                            fadeOut(playerControlsExitAnimationSpec())
+                    } else {
+                        fadeOut(playerControlsExitAnimationSpec())
+                    },
+                    modifier = Modifier.constrainAs(bottomLeftControls) {
+                        bottom.linkTo(seekbar.top)
+                        start.linkTo(seekbar.start)
+                        width = Dimension.fillToConstraints
+                        end.linkTo(bottomRightControls.start)
+                    },
+                ) {
+                    BottomLeftPlayerControls(
+                        playbackSpeed,
+                        currentChapter = currentChapter?.toSegment(),
+                        onLockControls = viewModel::lockControls,
+                        onCycleRotation = viewModel::cycleScreenRotations,
+                        onPlaybackSpeedChange = {
+                            MPVLib.setPropertyDouble("speed", it.toDouble())
+                        },
+                        onOpenSheet = onOpenSheet,
+                    )
+                }
+            }
+        }
+
+        val sheetShown by viewModel.sheetShown.collectAsState()
+        val subtitles by viewModel.subtitleTracks.collectAsState()
+        val selectedSubtitles by viewModel.selectedSubtitles.collectAsState()
+        val audioTracks by viewModel.audioTracks.collectAsState()
+        val selectedAudio by viewModel.selectedAudio.collectAsState()
+        val videoList by viewModel.videoList.collectAsState()
+        val selectedVideoIndex by viewModel.selectedVideoIndex.collectAsState()
+        val decoder by viewModel.currentDecoder.collectAsState()
+        val speed by viewModel.playbackSpeed.collectAsState()
+        val sleepTimerTimeRemaining by viewModel.remainingTime.collectAsState()
+        val showSubtitles by subtitlePreferences.screenshotSubtitles().collectAsState()
+
+        PlayerSheets(
+            sheetShown = sheetShown,
+            subtitles = subtitles.toImmutableList(),
+            selectedSubtitles = selectedSubtitles.toList().toImmutableList(),
+            onAddSubtitle = viewModel::addSubtitle,
+            onSelectSubtitle = viewModel::selectSub,
+            audioTracks = audioTracks.toImmutableList(),
+            selectedAudio = selectedAudio,
+            onAddAudio = viewModel::addAudio,
+            onSelectAudio = viewModel::selectAudio,
+
+            videoList = videoList.toImmutableList(),
+            currentVideo = videoList.getOrNull(selectedVideoIndex),
+            onSelectVideo = { viewModel.selectVideo(it) },
+
+            chapter = currentChapter?.toSegment(),
+            chapters = chapters.map { it.toSegment() }.toImmutableList(),
+            onSeekToChapter = {
+                viewModel.selectChapter(it)
+                viewModel.unpause()
+            },
+            decoder = decoder,
+            onUpdateDecoder = viewModel::updateDecoder,
+            speed = speed,
+            onSpeedChange = { MPVLib.setPropertyDouble("speed", it.toFixed(2).toDouble()) },
+            sleepTimerTimeRemaining = sleepTimerTimeRemaining,
+            onStartSleepTimer = viewModel::startTimer,
+            // TODO(customButtons)
+            // buttons = customButtons.getButtons().toImmutableList(),
+
+            showSubtitles = showSubtitles,
+            onToggleShowSubtitles = { subtitlePreferences.screenshotSubtitles().set(it) },
+            cachePath = viewModel.cachePath,
+            onSetAsCover = viewModel::setAsCover,
+            onShare = { viewModel.shareImage(it, viewModel.pos.value.toInt()) },
+            onSave = { viewModel.saveImage(it, viewModel.pos.value.toInt()) },
+            takeScreenshot = viewModel::takeScreenshot,
+            onDismissScreenshot = {
+                onOpenSheet(Sheets.None)
+                viewModel.unpause()
+            },
+
+            onOpenPanel = onOpenPanel,
+            onDismissRequest = { onOpenSheet(Sheets.None) },
+        )
+        val panel by viewModel.panelShown.collectAsState()
+        PlayerPanels(
+            panelShown = panel,
+            onDismissRequest = { onOpenPanel(Panels.None) },
+        )
+
+        val activity = LocalContext.current as PlayerActivity
+        val dialog by viewModel.dialogShown.collectAsState()
+        val anime by viewModel.currentAnime.collectAsState()
+        val playlist by viewModel.currentPlaylist.collectAsState()
+
+        PlayerDialogs(
+            dialogShown = dialog,
+
+            episodeDisplayMode = anime!!.displayMode,
+            episodeList = playlist,
+            currentEpisodeIndex = viewModel.getCurrentEpisodeIndex(),
+            dateRelativeTime = viewModel.relativeTime,
+            dateFormat = viewModel.dateFormat,
+            onBookmarkClicked = viewModel::bookmarkEpisode,
+            onEpisodeClicked = {
+                onOpenDialog(Dialogs.None)
+                activity.changeEpisode(it)
+            },
+
+            onDismissRequest = { onOpenDialog(Dialogs.None) },
+        )
+    }
+}
+
+fun <T> playerControlsExitAnimationSpec(): FiniteAnimationSpec<T> = tween(
+    durationMillis = 300,
+    easing = FastOutSlowInEasing,
+)
+
+fun <T> playerControlsEnterAnimationSpec(): FiniteAnimationSpec<T> = tween(
+    durationMillis = 100,
+    easing = LinearOutSlowInEasing,
+)
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerDialogs.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerDialogs.kt
new file mode 100644
index 0000000000..27172bd74c
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerDialogs.kt
@@ -0,0 +1,39 @@
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.runtime.Composable
+import eu.kanade.tachiyomi.data.database.models.anime.Episode
+import eu.kanade.tachiyomi.ui.player.Dialogs
+import eu.kanade.tachiyomi.ui.player.controls.components.dialogs.EpisodeListDialog
+import java.time.format.DateTimeFormatter
+
+@Composable
+fun PlayerDialogs(
+    dialogShown: Dialogs,
+
+    // Episode list
+    episodeDisplayMode: Long,
+    currentEpisodeIndex: Int,
+    episodeList: List<Episode>,
+    dateRelativeTime: Boolean,
+    dateFormat: DateTimeFormatter,
+    onBookmarkClicked: (Long?, Boolean) -> Unit,
+    onEpisodeClicked: (Long?) -> Unit,
+
+    onDismissRequest: () -> Unit,
+) {
+    when (dialogShown) {
+        Dialogs.None -> {}
+        Dialogs.EpisodeList -> {
+            EpisodeListDialog(
+                displayMode = episodeDisplayMode,
+                currentEpisodeIndex = currentEpisodeIndex,
+                episodeList = episodeList,
+                dateRelativeTime = dateRelativeTime,
+                dateFormat = dateFormat,
+                onBookmarkClicked = onBookmarkClicked,
+                onEpisodeClicked = onEpisodeClicked,
+                onDismissRequest = onDismissRequest,
+            )
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerPanels.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerPanels.kt
new file mode 100644
index 0000000000..373b94ade3
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerPanels.kt
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.animation.AnimatedContent
+import androidx.compose.animation.fadeIn
+import androidx.compose.animation.fadeOut
+import androidx.compose.animation.slideInHorizontally
+import androidx.compose.animation.slideOutHorizontally
+import androidx.compose.animation.togetherWith
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.material3.CardColors
+import androidx.compose.material3.CardDefaults
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import eu.kanade.tachiyomi.ui.player.Panels
+import eu.kanade.tachiyomi.ui.player.controls.components.panels.AudioDelayPanel
+import eu.kanade.tachiyomi.ui.player.controls.components.panels.SubtitleDelayPanel
+import eu.kanade.tachiyomi.ui.player.controls.components.panels.SubtitleSettingsPanel
+import eu.kanade.tachiyomi.ui.player.controls.components.panels.VideoFiltersPanel
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun PlayerPanels(
+    panelShown: Panels,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    AnimatedContent(
+        targetState = panelShown,
+        label = "panels",
+        contentAlignment = Alignment.CenterEnd,
+        contentKey = { it.name },
+        transitionSpec = {
+            fadeIn() + slideInHorizontally { it / 3 } togetherWith fadeOut() + slideOutHorizontally { it / 2 }
+        },
+        modifier = modifier,
+    ) { currentPanel ->
+        when (currentPanel) {
+            Panels.None -> {
+                Box(Modifier.fillMaxHeight())
+            }
+            Panels.SubtitleSettings -> {
+                SubtitleSettingsPanel(onDismissRequest)
+            }
+            Panels.SubtitleDelay -> {
+                SubtitleDelayPanel(onDismissRequest)
+            }
+            Panels.AudioDelay -> {
+                AudioDelayPanel(onDismissRequest)
+            }
+            Panels.VideoFilters -> {
+                VideoFiltersPanel(onDismissRequest)
+            }
+        }
+    }
+}
+
+val CARDS_MAX_WIDTH = 420.dp
+val panelCardsColors: @Composable () -> CardColors = {
+    val playerPreferences = remember { Injekt.get<PlayerPreferences>() }
+
+    val colors = CardDefaults.cardColors()
+    colors.copy(
+        containerColor = MaterialTheme.colorScheme.surface.copy(playerPreferences.panelOpacity().get() / 100f),
+        disabledContainerColor = MaterialTheme.colorScheme.surfaceDim.copy(
+            playerPreferences.panelOpacity().get() / 100f,
+        ),
+    )
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerSheets.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerSheets.kt
new file mode 100644
index 0000000000..2afff84bbd
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/PlayerSheets.kt
@@ -0,0 +1,186 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import android.net.Uri
+import androidx.activity.compose.rememberLauncherForActivityResult
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.compose.runtime.Composable
+import dev.vivvvek.seeker.Segment
+import eu.kanade.tachiyomi.animesource.model.Video
+import eu.kanade.tachiyomi.ui.player.Decoder
+import eu.kanade.tachiyomi.ui.player.Panels
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel.VideoTrack
+import eu.kanade.tachiyomi.ui.player.Sheets
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.AudioTracksSheet
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.ChaptersSheet
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.MoreSheet
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.PlaybackSpeedSheet
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.QualitySheet
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.ScreenshotSheet
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.SubtitlesSheet
+import kotlinx.collections.immutable.ImmutableList
+import kotlinx.collections.immutable.toImmutableList
+import java.io.InputStream
+
+@Composable
+fun PlayerSheets(
+    sheetShown: Sheets,
+
+    // subtitles sheet
+    subtitles: ImmutableList<VideoTrack>,
+    selectedSubtitles: ImmutableList<Int>,
+    onAddSubtitle: (Uri) -> Unit,
+    onSelectSubtitle: (Int) -> Unit,
+
+    // audio sheet
+    audioTracks: ImmutableList<VideoTrack>,
+    selectedAudio: Int,
+    onAddAudio: (Uri) -> Unit,
+    onSelectAudio: (Int) -> Unit,
+
+    // video sheet
+    videoList: ImmutableList<Video>,
+    currentVideo: Video?,
+    onSelectVideo: (Video) -> Unit,
+
+    // chapters sheet
+    chapter: Segment?,
+    chapters: ImmutableList<Segment>,
+    onSeekToChapter: (Int) -> Unit,
+
+    // Decoders sheet
+    decoder: Decoder,
+    onUpdateDecoder: (Decoder) -> Unit,
+
+    // Speed sheet
+    speed: Float,
+    onSpeedChange: (Float) -> Unit,
+
+    // More sheet
+    sleepTimerTimeRemaining: Int,
+    onStartSleepTimer: (Int) -> Unit,
+    // TODO(customButtons)
+    // buttons: ImmutableList<CustomButtonEntity>,
+
+    // Screenshot sheet
+    showSubtitles: Boolean,
+    onToggleShowSubtitles: (Boolean) -> Unit,
+    cachePath: String,
+    onSetAsCover: (() -> InputStream) -> Unit,
+    onShare: (() -> InputStream) -> Unit,
+    onSave: (() -> InputStream) -> Unit,
+    takeScreenshot: (String, Boolean) -> InputStream?,
+    onDismissScreenshot: () -> Unit,
+
+    onOpenPanel: (Panels) -> Unit,
+    onDismissRequest: () -> Unit,
+) {
+    when (sheetShown) {
+        Sheets.None -> {}
+        Sheets.SubtitleTracks -> {
+            val subtitlesPicker = rememberLauncherForActivityResult(
+                ActivityResultContracts.OpenDocument(),
+            ) {
+                if (it == null) return@rememberLauncherForActivityResult
+                onAddSubtitle(it)
+            }
+            SubtitlesSheet(
+                tracks = subtitles.toImmutableList(),
+                selectedTracks = selectedSubtitles,
+                onSelect = onSelectSubtitle,
+                onAddSubtitle = { subtitlesPicker.launch(arrayOf("*/*")) },
+                onOpenSubtitleSettings = { onOpenPanel(Panels.SubtitleSettings) },
+                onOpenSubtitleDelay = { onOpenPanel(Panels.SubtitleDelay) },
+                onDismissRequest = onDismissRequest,
+            )
+        }
+
+        Sheets.AudioTracks -> {
+            val audioPicker = rememberLauncherForActivityResult(
+                ActivityResultContracts.OpenDocument(),
+            ) {
+                if (it == null) return@rememberLauncherForActivityResult
+                onAddAudio(it)
+            }
+            AudioTracksSheet(
+                tracks = audioTracks,
+                selectedId = selectedAudio,
+                onSelect = onSelectAudio,
+                onAddAudioTrack = { audioPicker.launch(arrayOf("*/*")) },
+                onOpenDelayPanel = { onOpenPanel(Panels.AudioDelay) },
+                onDismissRequest,
+            )
+        }
+
+        Sheets.QualityTracks -> {
+            if (videoList.isEmpty()) return
+            QualitySheet(
+                videoList = videoList,
+                currentVideo = currentVideo,
+                onClick = onSelectVideo,
+                onDismissRequest = onDismissRequest,
+            )
+        }
+
+        Sheets.Chapters -> {
+            if (chapter == null) return
+            ChaptersSheet(
+                chapters,
+                currentChapter = chapter,
+                onClick = { onSeekToChapter(chapters.indexOf(it)) },
+                onDismissRequest,
+            )
+        }
+
+        Sheets.More -> {
+            MoreSheet(
+                selectedDecoder = decoder,
+                onSelectDecoder = onUpdateDecoder,
+                remainingTime = sleepTimerTimeRemaining,
+                onStartTimer = onStartSleepTimer,
+                onDismissRequest = onDismissRequest,
+                onEnterFiltersPanel = { onOpenPanel(Panels.VideoFilters) },
+                // TODO(customButtons)
+                // customButtons = buttons,
+            )
+        }
+
+        Sheets.PlaybackSpeed -> {
+            PlaybackSpeedSheet(
+                speed,
+                onSpeedChange = onSpeedChange,
+                onDismissRequest = onDismissRequest,
+            )
+        }
+
+        Sheets.Screenshot -> {
+            ScreenshotSheet(
+                hasSubTracks = subtitles.isNotEmpty(),
+                showSubtitles = showSubtitles,
+                onToggleShowSubtitles = onToggleShowSubtitles,
+                cachePath = cachePath,
+                onSetAsCover = onSetAsCover,
+                onShare = onShare,
+                onSave = onSave,
+                takeScreenshot = takeScreenshot,
+                onDismissRequest = onDismissScreenshot,
+            )
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/TopLeftPlayerControls.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/TopLeftPlayerControls.kt
new file mode 100644
index 0000000000..cba9042a94
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/TopLeftPlayerControls.kt
@@ -0,0 +1,91 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.ArrowBack
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.style.TextOverflow
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.sp
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun TopLeftPlayerControls(
+    animeTitle: String,
+    mediaTitle: String,
+    onTitleClick: () -> Unit,
+    onBackClick: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier = modifier,
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.mediumSmall),
+    ) {
+        ControlsButton(
+            icon = Icons.AutoMirrored.Default.ArrowBack,
+            onClick = onBackClick,
+        )
+        Column(
+            verticalArrangement = Arrangement.spacedBy(-MaterialTheme.padding.extraSmall),
+            modifier = Modifier
+                .clickable(onClick = onTitleClick),
+        ) {
+            Text(
+                animeTitle,
+                fontSize = 16.sp,
+                maxLines = 1,
+                overflow = TextOverflow.Ellipsis,
+                color = Color.White,
+                style = MaterialTheme.typography.bodyLarge,
+            )
+            Text(
+                mediaTitle,
+                fontSize = 14.sp,
+                maxLines = 1,
+                overflow = TextOverflow.Ellipsis,
+                color = Color.White.copy(alpha = 0.5f),
+                style = MaterialTheme.typography.bodyLarge,
+                fontStyle = FontStyle.Italic,
+            )
+        }
+    }
+}
+
+@Preview
+@Composable
+fun TopLeftPlayerControlsPreview() {
+    TopLeftPlayerControls(
+        animeTitle = "Bleach",
+        mediaTitle = "Episode 1 - A Shinigami is born",
+        onTitleClick = {},
+        onBackClick = {},
+    )
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/TopRightPlayerControls.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/TopRightPlayerControls.kt
new file mode 100644
index 0000000000..4d4acfb7e1
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/TopRightPlayerControls.kt
@@ -0,0 +1,101 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Audiotrack
+import androidx.compose.material.icons.filled.HighQuality
+import androidx.compose.material.icons.filled.MoreVert
+import androidx.compose.material.icons.filled.Subtitles
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import eu.kanade.tachiyomi.ui.player.controls.components.AutoPlaySwitch
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun TopRightPlayerControls(
+    // auto-play
+    autoPlayEnabled: Boolean,
+    onToggleAutoPlay: (Boolean) -> Unit,
+
+    // subtitles
+    onSubtitlesClick: () -> Unit,
+    onSubtitlesLongClick: () -> Unit,
+
+    // audio
+    onAudioClick: () -> Unit,
+    onAudioLongClick: () -> Unit,
+
+    // video
+    onQualityClick: () -> Unit,
+    isEpisodeOnline: Boolean?,
+
+    // more
+    onMoreClick: () -> Unit,
+    onMoreLongClick: () -> Unit,
+
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier,
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.Absolute.SpaceEvenly,
+    ) {
+        AutoPlaySwitch(
+            isChecked = autoPlayEnabled,
+            onToggleAutoPlay = onToggleAutoPlay,
+            modifier = Modifier
+                .padding(vertical = MaterialTheme.padding.medium, horizontal = MaterialTheme.padding.mediumSmall)
+                .size(width = 48.dp, height = 24.dp),
+        )
+        ControlsButton(
+            icon = Icons.Default.Subtitles,
+            onClick = onSubtitlesClick,
+            onLongClick = onSubtitlesLongClick,
+            horizontalSpacing = MaterialTheme.padding.mediumSmall,
+        )
+        ControlsButton(
+            icon = Icons.Default.Audiotrack,
+            onClick = onAudioClick,
+            onLongClick = onAudioLongClick,
+            horizontalSpacing = MaterialTheme.padding.mediumSmall,
+        )
+        if (isEpisodeOnline == true) {
+            ControlsButton(
+                icon = Icons.Default.HighQuality,
+                onClick = onQualityClick,
+                onLongClick = onQualityClick,
+                horizontalSpacing = MaterialTheme.padding.mediumSmall,
+            )
+        }
+        ControlsButton(
+            icon = Icons.Default.MoreVert,
+            onClick = onMoreClick,
+            onLongClick = onMoreLongClick,
+            horizontalSpacing = MaterialTheme.padding.mediumSmall,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/AutoPlaySwitch.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/AutoPlaySwitch.kt
new file mode 100644
index 0000000000..4fba68f906
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/AutoPlaySwitch.kt
@@ -0,0 +1,94 @@
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.animation.core.Animatable
+import androidx.compose.animation.core.tween
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.indication
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.PauseCircle
+import androidx.compose.material.icons.filled.PlayCircle
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.ShapeDefaults
+import androidx.compose.material3.ripple
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.BiasAlignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.dp
+import eu.kanade.tachiyomi.ui.player.controls.LocalPlayerButtonsClickEvent
+
+@Composable
+fun AutoPlaySwitch(
+    isChecked: Boolean,
+    onToggleAutoPlay: (Boolean) -> Unit,
+    modifier: Modifier = Modifier,
+    iconSize: Dp = 24.dp,
+) {
+    val interactionSource = remember { MutableInteractionSource() }
+    val clickEvent = LocalPlayerButtonsClickEvent.current
+
+    val alignment = remember { Animatable(if (isChecked) 1f else -1f) }
+
+    LaunchedEffect(isChecked) {
+        alignment.animateTo(
+            targetValue = if (isChecked) 1f else -1f,
+            animationSpec = tween(durationMillis = 250),
+        )
+    }
+
+    val (thumbIcon, thumbColor, trackColor) = if (isChecked) {
+        Triple(
+            Icons.Filled.PlayCircle,
+            MaterialTheme.colorScheme.primary,
+            MaterialTheme.colorScheme.secondaryContainer,
+
+        )
+    } else {
+        Triple(
+            Icons.Filled.PauseCircle,
+            Color.White,
+            Color.LightGray,
+        )
+    }
+
+    Box(
+        modifier = modifier.clickable(
+            interactionSource = interactionSource,
+            indication = null,
+        ) {
+            clickEvent()
+            onToggleAutoPlay(!isChecked)
+        },
+        contentAlignment = Alignment.Center,
+    ) {
+        Box(
+            modifier = Modifier
+                .fillMaxWidth(fraction = 5 / 6f)
+                .fillMaxHeight(fraction = 2 / 3f)
+                .background(color = trackColor, shape = ShapeDefaults.ExtraLarge),
+        )
+
+        Icon(
+            imageVector = thumbIcon,
+            contentDescription = null,
+            modifier = Modifier
+                .size(iconSize)
+                .background(color = Color.Unspecified, shape = CircleShape)
+                .indication(interactionSource, ripple(bounded = false, radius = iconSize * 2 / 3))
+                .align(BiasAlignment(horizontalBias = alignment.value, verticalBias = 0f)),
+            tint = thumbColor,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/ControlsButton.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/ControlsButton.kt
new file mode 100644
index 0000000000..041ab029a3
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/ControlsButton.kt
@@ -0,0 +1,138 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.foundation.combinedClickable
+import androidx.compose.foundation.indication
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.shape.CircleShape
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.CatchingPokemon
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.ripple
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.vector.ImageVector
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.dp
+import eu.kanade.tachiyomi.ui.player.controls.LocalPlayerButtonsClickEvent
+import tachiyomi.presentation.core.components.material.DISABLED_ALPHA
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun ControlsButton(
+    icon: ImageVector,
+    onClick: () -> Unit,
+    onLongClick: () -> Unit = {},
+    title: String? = null,
+    color: Color = Color.White,
+    horizontalSpacing: Dp = MaterialTheme.padding.medium,
+    iconSize: Dp = 20.dp,
+    enabled: Boolean = true,
+    modifier: Modifier = Modifier,
+) {
+    val interactionSource = remember { MutableInteractionSource() }
+    val clickEvent = LocalPlayerButtonsClickEvent.current
+    val iconColor = if (enabled) color else color.copy(alpha = DISABLED_ALPHA)
+
+    Box(
+        modifier = modifier
+            .combinedClickable(
+                enabled = enabled,
+                onClick = {
+                    clickEvent()
+                    onClick()
+                },
+                onLongClick = onLongClick,
+                interactionSource = interactionSource,
+                indication = null,
+            )
+            .clip(CircleShape)
+            .indication(
+                interactionSource,
+                ripple(),
+            )
+            .padding(
+                vertical = MaterialTheme.padding.medium,
+                horizontal = horizontalSpacing,
+            ),
+    ) {
+        Icon(
+            icon,
+            title,
+            tint = iconColor,
+            modifier = Modifier.size(iconSize),
+        )
+    }
+}
+
+@Composable
+fun ControlsButton(
+    text: String,
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+    onLongClick: () -> Unit = {},
+    color: Color = Color.White,
+) {
+    val interactionSource = remember { MutableInteractionSource() }
+
+    val clickEvent = LocalPlayerButtonsClickEvent.current
+    Box(
+        modifier = modifier
+            .combinedClickable(
+                onClick = {
+                    clickEvent()
+                    onClick()
+                },
+                onLongClick = onLongClick,
+                interactionSource = interactionSource,
+                indication = null,
+
+            )
+            .clip(CircleShape)
+            .indication(
+                interactionSource,
+                ripple(),
+            )
+            .padding(MaterialTheme.padding.medium),
+    ) {
+        Text(
+            text,
+            color = color,
+            style = MaterialTheme.typography.bodyMedium,
+        )
+    }
+}
+
+@Preview
+@Composable
+private fun PreviewControlsButton() {
+    ControlsButton(
+        Icons.Default.CatchingPokemon,
+        onClick = {},
+    )
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/CurrentChapter.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/CurrentChapter.kt
new file mode 100644
index 0000000000..fa55d18f59
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/CurrentChapter.kt
@@ -0,0 +1,122 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.animation.AnimatedContent
+import androidx.compose.animation.SizeTransform
+import androidx.compose.animation.fadeIn
+import androidx.compose.animation.fadeOut
+import androidx.compose.animation.slideInVertically
+import androidx.compose.animation.slideOutVertically
+import androidx.compose.animation.togetherWith
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Bookmarks
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.text.style.TextOverflow
+import androidx.compose.ui.unit.dp
+import dev.vivvvek.seeker.Segment
+import `is`.xyz.mpv.Utils
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun CurrentChapter(
+    chapter: Segment,
+    modifier: Modifier = Modifier,
+    onClick: () -> Unit = {},
+) {
+    Box(
+        modifier = modifier
+            .clip(RoundedCornerShape(25))
+            .background(MaterialTheme.colorScheme.background.copy(alpha = 0.6F))
+            .clickable(onClick = onClick)
+            .padding(horizontal = MaterialTheme.padding.mediumSmall, vertical = MaterialTheme.padding.small),
+    ) {
+        AnimatedContent(
+            targetState = chapter,
+            transitionSpec = {
+                if (targetState.start > initialState.start) {
+                    (slideInVertically { height -> height } + fadeIn())
+                        .togetherWith(slideOutVertically { height -> -height } + fadeOut())
+                } else {
+                    (slideInVertically { height -> -height } + fadeIn())
+                        .togetherWith(slideOutVertically { height -> height } + fadeOut())
+                }.using(
+                    SizeTransform(clip = false),
+                )
+            },
+            label = "Chapter",
+        ) { currentChapter ->
+            Row(
+                verticalAlignment = Alignment.CenterVertically,
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+            ) {
+                Icon(
+                    imageVector = Icons.Default.Bookmarks,
+                    contentDescription = null,
+                    modifier = Modifier
+                        .padding(end = MaterialTheme.padding.extraSmall)
+                        .size(16.dp),
+                    tint = MaterialTheme.colorScheme.onBackground,
+                )
+                Text(
+                    text = Utils.prettyTime(currentChapter.start.toInt()),
+                    fontWeight = FontWeight.ExtraBold,
+                    style = MaterialTheme.typography.bodyMedium,
+                    maxLines = 1,
+                    overflow = TextOverflow.Clip,
+                    color = MaterialTheme.colorScheme.tertiary,
+                )
+                currentChapter.name.let {
+                    Text(
+                        text = Typography.bullet.toString(),
+                        textAlign = TextAlign.Center,
+                        style = MaterialTheme.typography.bodyMedium,
+                        maxLines = 1,
+                        color = MaterialTheme.colorScheme.onSurface,
+                        overflow = TextOverflow.Clip,
+                    )
+                    Text(
+                        text = it,
+                        textAlign = TextAlign.Center,
+                        style = MaterialTheme.typography.bodyMedium,
+                        maxLines = 1,
+                        overflow = TextOverflow.Ellipsis,
+                        fontWeight = FontWeight.Bold,
+                        color = MaterialTheme.colorScheme.onBackground,
+                    )
+                }
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/DoubleTapSeekTriangles.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/DoubleTapSeekTriangles.kt
new file mode 100644
index 0000000000..0e36245b5e
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/DoubleTapSeekTriangles.kt
@@ -0,0 +1,62 @@
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.animation.core.Animatable
+import androidx.compose.animation.core.tween
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.size
+import androidx.compose.material3.Icon
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.alpha
+import androidx.compose.ui.draw.rotate
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.unit.dp
+import eu.kanade.tachiyomi.R
+
+@Composable
+fun DoubleTapSeekTriangles(isForward: Boolean) {
+    val animationDuration = 750L
+
+    val alpha1 = remember { Animatable(0f) }
+    val alpha2 = remember { Animatable(0f) }
+    val alpha3 = remember { Animatable(0f) }
+
+    LaunchedEffect(animationDuration) {
+        while (true) {
+            alpha1.animateTo(1f, animationSpec = tween((animationDuration / 5).toInt()))
+            alpha2.animateTo(1f, animationSpec = tween((animationDuration / 5).toInt()))
+            alpha3.animateTo(1f, animationSpec = tween((animationDuration / 5).toInt()))
+            alpha1.animateTo(0f, animationSpec = tween((animationDuration / 5).toInt()))
+            alpha2.animateTo(0f, animationSpec = tween((animationDuration / 5).toInt()))
+            alpha3.animateTo(0f, animationSpec = tween((animationDuration / 5).toInt()))
+        }
+    }
+
+    val rotation = if (isForward) 0f else 180f
+    Row(
+        verticalAlignment = Alignment.CenterVertically,
+        modifier = Modifier.rotate(rotation),
+    ) {
+        DoubleTapArrow(alpha1.value)
+        DoubleTapArrow(alpha2.value)
+        DoubleTapArrow(alpha3.value)
+    }
+}
+
+@Composable
+private fun DoubleTapArrow(
+    alpha: Float,
+) {
+    Icon(
+        painter = painterResource(R.drawable.ic_play_seek_triangle),
+        contentDescription = null,
+        modifier = Modifier
+            .size(width = 16.dp, height = 20.dp)
+            .alpha(alpha = alpha),
+        tint = Color.White,
+    )
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/PlayerUpdates.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/PlayerUpdates.kt
new file mode 100644
index 0000000000..3623a70208
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/PlayerUpdates.kt
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.animation.animateContentSize
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.dp
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun PlayerUpdate(
+    modifier: Modifier = Modifier,
+    content: @Composable () -> Unit = {},
+) {
+    Box(
+        modifier = modifier
+            .clip(RoundedCornerShape(16.dp))
+            .background(Color.Black.copy(0.4f))
+            .padding(vertical = MaterialTheme.padding.small, horizontal = MaterialTheme.padding.medium)
+            .animateContentSize(),
+        contentAlignment = Alignment.Center,
+    ) { content() }
+}
+
+@Composable
+fun TextPlayerUpdate(
+    text: String,
+    modifier: Modifier = Modifier,
+) {
+    PlayerUpdate(modifier) {
+        Text(text)
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/SeekBar.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/SeekBar.kt
new file mode 100644
index 0000000000..f0d74f531a
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/SeekBar.kt
@@ -0,0 +1,164 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.width
+import androidx.compose.foundation.layout.wrapContentHeight
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.ripple
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.Immutable
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.text.style.TextAlign
+import androidx.compose.ui.tooling.preview.Preview
+import androidx.compose.ui.unit.dp
+import dev.vivvvek.seeker.Seeker
+import dev.vivvvek.seeker.SeekerDefaults
+import dev.vivvvek.seeker.Segment
+import eu.kanade.tachiyomi.ui.player.controls.LocalPlayerButtonsClickEvent
+import `is`.xyz.mpv.Utils
+import kotlinx.collections.immutable.ImmutableList
+import kotlinx.collections.immutable.persistentListOf
+import tachiyomi.presentation.core.components.material.padding
+
+@Immutable
+data class IndexedSegment(
+    val name: String,
+    val start: Float,
+    val color: Color = Color.Unspecified,
+    val index: Int = 0,
+) {
+    companion object {
+        val Unspecified = IndexedSegment(name = "", start = 0f)
+    }
+
+    fun toSegment(): Segment = Segment(name, start, color)
+}
+
+@Composable
+fun SeekbarWithTimers(
+    position: Float,
+    duration: Float,
+    readAheadValue: Float,
+    onValueChange: (Float) -> Unit,
+    onValueChangeFinished: () -> Unit,
+    timersInverted: Pair<Boolean, Boolean>,
+    positionTimerOnClick: () -> Unit,
+    durationTimerOnCLick: () -> Unit,
+    chapters: ImmutableList<Segment>,
+    modifier: Modifier = Modifier,
+) {
+    val clickEvent = LocalPlayerButtonsClickEvent.current
+    Row(
+        modifier = modifier.height(48.dp),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+    ) {
+        VideoTimer(
+            value = position,
+            timersInverted.first,
+            onClick = {
+                clickEvent()
+                positionTimerOnClick()
+            },
+            modifier = Modifier.width(92.dp),
+        )
+        Seeker(
+            value = position.coerceIn(0f, duration),
+            range = 0f..duration,
+            onValueChange = onValueChange,
+            onValueChangeFinished = onValueChangeFinished,
+            readAheadValue = readAheadValue,
+            segments = chapters
+                .filter { it.start in 0f..duration }
+                .let {
+                    // add an extra segment at 0 if it doesn't exist.
+                    if (it.isNotEmpty() && it[0].start != 0f) {
+                        persistentListOf(Segment("", 0f)) + it
+                    } else {
+                        it
+                    } + it
+                },
+            modifier = Modifier.weight(1f),
+            colors = SeekerDefaults.seekerColors(
+                progressColor = MaterialTheme.colorScheme.primary,
+                thumbColor = MaterialTheme.colorScheme.primary,
+                trackColor = MaterialTheme.colorScheme.background,
+                readAheadColor = MaterialTheme.colorScheme.inversePrimary,
+            ),
+        )
+        VideoTimer(
+            value = if (timersInverted.second) position - duration else duration,
+            isInverted = timersInverted.second,
+            onClick = {
+                clickEvent()
+                durationTimerOnCLick()
+            },
+            modifier = Modifier.width(92.dp),
+        )
+    }
+}
+
+@Composable
+fun VideoTimer(
+    value: Float,
+    isInverted: Boolean,
+    modifier: Modifier = Modifier,
+    onClick: () -> Unit = {},
+) {
+    val interactionSource = remember { MutableInteractionSource() }
+    Text(
+        modifier = modifier
+            .fillMaxHeight()
+            .clickable(
+                interactionSource = interactionSource,
+                indication = ripple(),
+                onClick = onClick,
+            )
+            .wrapContentHeight(Alignment.CenterVertically),
+        text = Utils.prettyTime(value.toInt(), isInverted),
+        color = Color.White,
+        textAlign = TextAlign.Center,
+    )
+}
+
+@Preview
+@Composable
+private fun PreviewSeekBar() {
+    SeekbarWithTimers(
+        5f,
+        20f,
+        4f,
+        {},
+        {},
+        Pair(false, true),
+        {},
+        {},
+        persistentListOf(),
+    )
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/VerticalSliders.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/VerticalSliders.kt
new file mode 100644
index 0000000000..4f384f0d79
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/VerticalSliders.kt
@@ -0,0 +1,245 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components
+
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.aspectRatio
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.VolumeDown
+import androidx.compose.material.icons.automirrored.filled.VolumeMute
+import androidx.compose.material.icons.automirrored.filled.VolumeOff
+import androidx.compose.material.icons.automirrored.filled.VolumeUp
+import androidx.compose.material.icons.filled.BrightnessHigh
+import androidx.compose.material.icons.filled.BrightnessLow
+import androidx.compose.material.icons.filled.BrightnessMedium
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
+import androidx.compose.ui.unit.dp
+import tachiyomi.presentation.core.components.material.padding
+import java.text.NumberFormat
+import kotlin.math.roundToInt
+
+fun percentage(value: Float, range: ClosedFloatingPointRange<Float>): Float {
+    return ((value - range.start) / (range.endInclusive - range.start)).coerceIn(0f, 1f)
+}
+
+fun percentage(value: Int, range: ClosedRange<Int>): Float {
+    return ((value - range.start - 0f) / (range.endInclusive - range.start)).coerceIn(0f, 1f)
+}
+
+@Composable
+fun VerticalSlider(
+    value: Float,
+    range: ClosedFloatingPointRange<Float>,
+    modifier: Modifier = Modifier,
+    overflowValue: Float? = null,
+    overflowRange: ClosedFloatingPointRange<Float>? = null,
+) {
+    require(range.contains(value)) { "Value must be within the provided range" }
+    Box(
+        modifier = modifier
+            .height(120.dp)
+            .aspectRatio(0.2f)
+            .clip(RoundedCornerShape(16.dp))
+            .background(MaterialTheme.colorScheme.background),
+        contentAlignment = Alignment.BottomCenter,
+    ) {
+        val targetHeight by animateFloatAsState(percentage(value, range), label = "vsliderheight")
+        Box(
+            Modifier
+                .fillMaxWidth()
+                .fillMaxHeight(targetHeight)
+                .background(MaterialTheme.colorScheme.tertiary),
+        )
+        if (overflowRange != null && overflowValue != null) {
+            val overflowHeight by animateFloatAsState(
+                percentage(overflowValue, overflowRange),
+                label = "vslideroverflowheight",
+            )
+            Box(
+                Modifier
+                    .fillMaxWidth()
+                    .fillMaxHeight(overflowHeight)
+                    .background(MaterialTheme.colorScheme.errorContainer),
+            )
+        }
+    }
+}
+
+@Composable
+fun VerticalSlider(
+    value: Int,
+    range: ClosedRange<Int>,
+    modifier: Modifier = Modifier,
+    overflowValue: Int? = null,
+    overflowRange: ClosedRange<Int>? = null,
+) {
+    require(range.contains(value)) { "Value must be within the provided range" }
+    Box(
+        modifier = modifier
+            .height(120.dp)
+            .aspectRatio(0.2f)
+            .clip(RoundedCornerShape(16.dp))
+            .background(MaterialTheme.colorScheme.background),
+        contentAlignment = Alignment.BottomCenter,
+    ) {
+        val targetHeight by animateFloatAsState(percentage(value, range), label = "vsliderheight")
+        Box(
+            Modifier
+                .fillMaxWidth()
+                .fillMaxHeight(targetHeight)
+                .background(MaterialTheme.colorScheme.tertiary),
+        )
+        if (overflowRange != null && overflowValue != null) {
+            val overflowHeight by animateFloatAsState(
+                percentage(overflowValue, overflowRange),
+                label = "vslideroverflowheight",
+            )
+            Box(
+                Modifier
+                    .fillMaxWidth()
+                    .fillMaxHeight(overflowHeight)
+                    .background(MaterialTheme.colorScheme.errorContainer),
+            )
+        }
+    }
+}
+
+@Composable
+fun BrightnessSlider(
+    brightness: Float,
+    range: ClosedFloatingPointRange<Float>,
+    modifier: Modifier = Modifier,
+) {
+    Column(
+        modifier = modifier,
+        horizontalAlignment = Alignment.CenterHorizontally,
+        verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+    ) {
+        Text(
+            (brightness * 100).toInt().toString(),
+            style = MaterialTheme.typography.bodySmall,
+        )
+        VerticalSlider(
+            brightness,
+            range,
+        )
+        Icon(
+            when (percentage(brightness, range)) {
+                in 0f..0.3f -> Icons.Default.BrightnessLow
+                in 0.3f..0.6f -> Icons.Default.BrightnessMedium
+                in 0.6f..1f -> Icons.Default.BrightnessHigh
+                else -> Icons.Default.BrightnessMedium
+            },
+            null,
+        )
+    }
+}
+
+@Composable
+fun VolumeSlider(
+    volume: Int,
+    mpvVolume: Int,
+    range: ClosedRange<Int>,
+    boostRange: ClosedRange<Int>?,
+    modifier: Modifier = Modifier,
+    displayAsPercentage: Boolean = false,
+) {
+    val percentage = (percentage(volume, range) * 100).roundToInt()
+    Column(
+        modifier = modifier,
+        horizontalAlignment = Alignment.CenterHorizontally,
+        verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+    ) {
+        val boostVolume = mpvVolume - 100
+        Text(
+            getVolumeSliderText(volume, mpvVolume, boostVolume, percentage, displayAsPercentage),
+            style = MaterialTheme.typography.bodySmall,
+        )
+        VerticalSlider(
+            if (displayAsPercentage) percentage else volume,
+            if (displayAsPercentage) 0..100 else range,
+            overflowValue = boostVolume,
+            overflowRange = boostRange,
+        )
+        Icon(
+            when (percentage) {
+                0 -> Icons.AutoMirrored.Default.VolumeOff
+                in 0..30 -> Icons.AutoMirrored.Default.VolumeMute
+                in 30..60 -> Icons.AutoMirrored.Default.VolumeDown
+                in 60..100 -> Icons.AutoMirrored.Default.VolumeUp
+                else -> Icons.AutoMirrored.Default.VolumeOff
+            },
+            null,
+        )
+    }
+}
+
+val getVolumeSliderText: @Composable (Int, Int, Int, Int, Boolean) -> String =
+    { volume, mpvVolume, boostVolume, percentageInt, displayAsPercentage ->
+        val percentFormat = remember { NumberFormat.getPercentInstance() }
+        val integerFormat = remember { NumberFormat.getIntegerInstance() }
+        val percentage = percentageInt / 100f
+
+        when (mpvVolume - 100) {
+            0 -> if (displayAsPercentage) {
+                percentFormat.format(percentage)
+            } else {
+                integerFormat.format(volume)
+            }
+
+            in 0..1000 -> {
+                if (displayAsPercentage) {
+                    "${percentFormat.format(percentage)} + ${integerFormat.format(boostVolume)}"
+                } else {
+                    "${integerFormat.format(volume)} + ${integerFormat.format(boostVolume)}"
+                }
+            }
+
+            in -100..-1 -> {
+                if (displayAsPercentage) {
+                    "${percentFormat.format(percentage)} - ${integerFormat.format(-boostVolume)}"
+                } else {
+                    "${integerFormat.format(volume)} - ${integerFormat.format(-boostVolume)}"
+                }
+            }
+
+            else -> {
+                if (displayAsPercentage) {
+                    "${percentFormat.format(percentage)} (${integerFormat.format(boostVolume)})"
+                } else {
+                    "${integerFormat.format(volume)} (${integerFormat.format(boostVolume)})"
+                }
+            }
+        }
+    }
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/EpisodeListDialog.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/dialogs/EpisodeListDialog.kt
similarity index 95%
rename from app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/EpisodeListDialog.kt
rename to app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/dialogs/EpisodeListDialog.kt
index fe4ff8a002..7478df90aa 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/EpisodeListDialog.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/dialogs/EpisodeListDialog.kt
@@ -1,4 +1,4 @@
-package eu.kanade.tachiyomi.ui.player.settings.dialogs
+package eu.kanade.tachiyomi.ui.player.controls.components.dialogs
 
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Column
@@ -24,6 +24,7 @@ import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.alpha
 import androidx.compose.ui.platform.LocalContext
@@ -175,7 +176,9 @@ private fun EpisodeListItem(
                 fontStyle = textStyle,
             )
 
-            Row {
+            Row(
+                verticalAlignment = Alignment.CenterVertically,
+            ) {
                 if (date != null) {
                     Text(
                         text = date,
@@ -187,7 +190,11 @@ private fun EpisodeListItem(
                         fontWeight = textWeight,
                         fontStyle = textStyle,
                     )
-                    if (episode.scanlator != null) DotSeparatorText()
+                    if (episode.scanlator != null) {
+                        DotSeparatorText(
+                            modifier = Modifier.alpha(textAlpha),
+                        )
+                    }
                 }
                 if (episode.scanlator != null) {
                     Text(
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/PlayerDialog.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/dialogs/PlayerDialog.kt
similarity index 91%
rename from app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/PlayerDialog.kt
rename to app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/dialogs/PlayerDialog.kt
index 382c5d810f..bb2da8128c 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/PlayerDialog.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/dialogs/PlayerDialog.kt
@@ -1,11 +1,11 @@
-package eu.kanade.tachiyomi.ui.player.settings.dialogs
+package eu.kanade.tachiyomi.ui.player.controls.components.dialogs
 
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.padding
-import androidx.compose.material3.AlertDialog
+import androidx.compose.material3.BasicAlertDialog
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Surface
 import androidx.compose.material3.Text
@@ -18,9 +18,6 @@ import tachiyomi.i18n.MR
 import tachiyomi.presentation.core.components.material.TextButton
 import tachiyomi.presentation.core.i18n.stringResource
 
-// TODO: (Merge_Change) stringResource "MR.strings.action_ok" to be replaced with
-//  "MR.strings.action_ok"
-
 @Composable
 fun PlayerDialog(
     titleRes: StringResource,
@@ -34,7 +31,7 @@ fun PlayerDialog(
         onDismissRequest()
     }
 
-    AlertDialog(
+    BasicAlertDialog(
         onDismissRequest = onDismissRequest,
         modifier = modifier,
         properties = DialogProperties(
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/AudioDelayPanel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/AudioDelayPanel.kt
new file mode 100644
index 0000000000..926714d409
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/AudioDelayPanel.kt
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Close
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import androidx.constraintlayout.compose.ConstraintLayout
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import `is`.xyz.mpv.MPVLib
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun AudioDelayPanel(
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    val preferences = remember { Injekt.get<AudioPreferences>() }
+
+    ConstraintLayout(
+        modifier = modifier
+            .fillMaxSize()
+            .padding(MaterialTheme.padding.medium),
+    ) {
+        val delayControlCard = createRef()
+
+        var delay by remember { mutableIntStateOf((MPVLib.getPropertyDouble("audio-delay") * 1000).toInt()) }
+        LaunchedEffect(delay) {
+            MPVLib.setPropertyDouble("audio-delay", delay / 1000.0)
+        }
+        DelayCard(
+            delay = delay,
+            onDelayChange = { delay = it },
+            onApply = { preferences.audioDelay().set(delay) },
+            onReset = { delay = 0 },
+            title = { AudioDelayCardTitle(onClose = onDismissRequest) },
+            delayType = DelayType.Audio,
+            modifier = Modifier.constrainAs(delayControlCard) {
+                linkTo(parent.top, parent.bottom, bias = 0.8f)
+                end.linkTo(parent.end)
+            },
+        )
+    }
+}
+
+@Composable
+fun AudioDelayCardTitle(
+    onClose: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier = modifier.fillMaxWidth(),
+        horizontalArrangement = Arrangement.SpaceBetween,
+        verticalAlignment = Alignment.CenterVertically,
+    ) {
+        Text(
+            stringResource(MR.strings.player_sheets_audio_delay_title),
+            style = MaterialTheme.typography.headlineMedium,
+        )
+        IconButton(onClose) {
+            Icon(
+                Icons.Default.Close,
+                null,
+                modifier = Modifier.size(32.dp),
+            )
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleDelayPanel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleDelayPanel.kt
new file mode 100644
index 0000000000..f24e8377a1
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleDelayPanel.kt
@@ -0,0 +1,372 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import androidx.compose.animation.animateContentSize
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.ColumnScope
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.ArrowDropDown
+import androidx.compose.material.icons.filled.Close
+import androidx.compose.material.icons.filled.Refresh
+import androidx.compose.material3.Button
+import androidx.compose.material3.Card
+import androidx.compose.material3.DropdownMenu
+import androidx.compose.material3.DropdownMenuItem
+import androidx.compose.material3.FilledIconButton
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableFloatStateOf
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import androidx.constraintlayout.compose.ConstraintLayout
+import dev.icerock.moko.resources.StringResource
+import eu.kanade.presentation.player.components.OutlinedNumericChooser
+import eu.kanade.tachiyomi.ui.player.controls.CARDS_MAX_WIDTH
+import eu.kanade.tachiyomi.ui.player.controls.panelCardsColors
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
+import `is`.xyz.mpv.MPVLib
+import kotlinx.coroutines.delay
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+import kotlin.math.round
+import kotlin.math.roundToInt
+
+@Composable
+fun SubtitleDelayPanel(
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    val preferences = remember { Injekt.get<SubtitlePreferences>() }
+
+    ConstraintLayout(
+        modifier = modifier
+            .fillMaxSize()
+            .padding(MaterialTheme.padding.medium),
+    ) {
+        val delayControlCard = createRef()
+
+        var affectedSubtitle by remember { mutableStateOf(SubtitleDelayType.Primary) }
+        var delay by remember { mutableIntStateOf((MPVLib.getPropertyDouble("sub-delay") * 1000).roundToInt()) }
+        var secondaryDelay by remember {
+            mutableIntStateOf((MPVLib.getPropertyDouble("secondary-sub-delay") * 1000).roundToInt())
+        }
+        var speed by remember { mutableFloatStateOf(MPVLib.getPropertyDouble("sub-speed").toFloat()) }
+        LaunchedEffect(speed) {
+            if (speed in 0.1f..1f) MPVLib.setPropertyDouble("sub-speed", speed.toDouble())
+        }
+        LaunchedEffect(delay, secondaryDelay) {
+            val finalDelay = (if (affectedSubtitle == SubtitleDelayType.Secondary) secondaryDelay else delay) / 1000.0
+            when (affectedSubtitle) {
+                SubtitleDelayType.Primary -> MPVLib.setPropertyDouble("sub-delay", finalDelay)
+                SubtitleDelayType.Secondary -> MPVLib.setPropertyDouble("secondary-sub-delay", finalDelay)
+                else -> {
+                    MPVLib.setPropertyDouble("sub-delay", finalDelay)
+                    MPVLib.setPropertyDouble("secondary-sub-delay", finalDelay)
+                }
+            }
+        }
+        LaunchedEffect(affectedSubtitle) {
+            secondaryDelay = (
+                MPVLib.getPropertyDouble(
+                    if (affectedSubtitle == SubtitleDelayType.Both) "sub-delay" else "secondary-sub-delay",
+                ) * 1000
+                ).toInt()
+            delay = (MPVLib.getPropertyDouble("sub-delay") * 1000).toInt()
+        }
+        SubtitleDelayCard(
+            delay = if (affectedSubtitle == SubtitleDelayType.Secondary) secondaryDelay else delay,
+            onDelayChange = {
+                if (affectedSubtitle == SubtitleDelayType.Secondary) {
+                    secondaryDelay = it
+                } else {
+                    delay = it
+                }
+            },
+            speed = speed,
+            onSpeedChange = { speed = round(it * 1000) / 1000f },
+            affectedSubtitle = affectedSubtitle,
+            onTypeChange = { affectedSubtitle = it },
+            onApply = {
+                preferences.subtitlesDelay().set(delay)
+                if (speed in 0.1f..10f) preferences.subtitlesSpeed().set(speed)
+            },
+            onReset = {
+                delay = 0
+                secondaryDelay = 0
+                speed = 1f
+            },
+            onClose = onDismissRequest,
+            modifier = Modifier.constrainAs(delayControlCard) {
+                linkTo(parent.top, parent.bottom, bias = 0.8f)
+                end.linkTo(parent.end)
+            },
+        )
+    }
+}
+
+@Composable
+fun SubtitleDelayCard(
+    delay: Int,
+    onDelayChange: (Int) -> Unit,
+    speed: Float,
+    onSpeedChange: (Float) -> Unit,
+    affectedSubtitle: SubtitleDelayType,
+    onTypeChange: (SubtitleDelayType) -> Unit,
+    onApply: () -> Unit,
+    onReset: () -> Unit,
+    onClose: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    DelayCard(
+        delay = delay,
+        onDelayChange = onDelayChange,
+        onApply = onApply,
+        onReset = onReset,
+        title = {
+            SubtitleDelayTitle(
+                affectedSubtitle = affectedSubtitle,
+                onClose = onClose,
+                onTypeChange = onTypeChange,
+            )
+        },
+        extraSettings = {
+            when (affectedSubtitle) {
+                SubtitleDelayType.Primary -> {
+                    OutlinedNumericChooser(
+                        label = { Text(stringResource(MR.strings.player_sheets_sub_delay_speed)) },
+                        value = speed,
+                        onChange = onSpeedChange,
+                        max = 10f,
+                        step = .01f,
+                        min = .1f,
+                    )
+                }
+
+                else -> {}
+            }
+        },
+        delayType = DelayType.Subtitle,
+        modifier = modifier,
+    )
+}
+
+enum class SubtitleDelayType(
+    val title: StringResource,
+) {
+    Primary(MR.strings.player_sheets_sub_delay_subtitle_type_primary),
+    Secondary(MR.strings.player_sheets_sub_delay_subtitle_type_secondary),
+    Both(MR.strings.player_sheets_sub_delay_subtitle_type_primary_and_secondary),
+}
+
+@Suppress("LambdaParameterInRestartableEffect") // Intentional
+@Composable
+fun DelayCard(
+    delay: Int,
+    onDelayChange: (Int) -> Unit,
+    onApply: () -> Unit,
+    onReset: () -> Unit,
+    title: @Composable () -> Unit,
+    delayType: DelayType,
+    modifier: Modifier = Modifier,
+    extraSettings: @Composable ColumnScope.() -> Unit = {},
+) {
+    Card(
+        modifier = modifier
+            .widthIn(max = CARDS_MAX_WIDTH)
+            .animateContentSize(),
+        colors = panelCardsColors(),
+    ) {
+        Column(
+            Modifier
+                .verticalScroll(rememberScrollState())
+                .padding(
+                    horizontal = MaterialTheme.padding.medium,
+                    vertical = MaterialTheme.padding.small,
+                ),
+            verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+        ) {
+            title()
+            OutlinedNumericChooser(
+                label = { Text(stringResource(MR.strings.player_sheets_sub_delay_delay)) },
+                value = delay,
+                onChange = onDelayChange,
+                step = 50,
+                min = Int.MIN_VALUE,
+                max = Int.MAX_VALUE,
+                suffix = { Text(stringResource(MR.strings.player_generic_unit_ms)) },
+            )
+            Column(
+                modifier = Modifier.animateContentSize(),
+            ) { extraSettings() }
+            // true (heard -> spotted), false (spotted -> heard)
+            var isDirectionPositive by remember { mutableStateOf<Boolean?>(null) }
+            Row(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            ) {
+                var timerStart by remember { mutableStateOf<Long?>(null) }
+                var finalDelay by remember { mutableIntStateOf(delay) }
+                LaunchedEffect(isDirectionPositive) {
+                    if (isDirectionPositive == null) {
+                        onDelayChange(finalDelay)
+                        return@LaunchedEffect
+                    }
+                    finalDelay = delay
+                    timerStart = System.currentTimeMillis()
+                    val startingDelay: Int = finalDelay
+                    while (isDirectionPositive != null && timerStart != null) {
+                        val elapsed = System.currentTimeMillis() - timerStart!!
+                        finalDelay = startingDelay + (if (isDirectionPositive!!) elapsed else -elapsed).toInt()
+                        // Arbitrary delay of 20ms
+                        delay(20)
+                    }
+                }
+                Button(
+                    onClick = {
+                        isDirectionPositive = if (isDirectionPositive == null) delayType == DelayType.Audio else null
+                    },
+                    modifier = Modifier.weight(1f),
+                    enabled = isDirectionPositive != (delayType == DelayType.Audio),
+                ) {
+                    Text(
+                        stringResource(
+                            if (delayType == DelayType.Audio) {
+                                MR.strings.player_sheets_sub_delay_audio_sound_heard
+                            } else {
+                                MR.strings.player_sheets_sub_delay_subtitle_voice_heard
+                            },
+                        ),
+                    )
+                }
+                Button(
+                    onClick = {
+                        isDirectionPositive = if (isDirectionPositive == null) delayType != DelayType.Audio else null
+                    },
+                    modifier = Modifier.weight(1f),
+                    enabled = isDirectionPositive != (delayType == DelayType.Subtitle),
+                ) {
+                    Text(
+                        stringResource(
+                            if (delayType == DelayType.Audio) {
+                                MR.strings.player_sheets_sub_delay_sound_sound_spotted
+                            } else {
+                                MR.strings.player_sheets_sub_delay_subtitle_text_seen
+                            },
+                        ),
+                    )
+                }
+            }
+            Row(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            ) {
+                Button(
+                    onClick = onApply,
+                    modifier = Modifier.weight(1f),
+                    enabled = isDirectionPositive == null,
+                ) {
+                    Text(stringResource(MR.strings.player_sheets_delay_set_as_default))
+                }
+                FilledIconButton(
+                    onClick = onReset,
+                    enabled = isDirectionPositive == null,
+                ) {
+                    Icon(Icons.Default.Refresh, null)
+                }
+            }
+        }
+    }
+}
+
+@Composable
+fun SubtitleDelayTitle(
+    affectedSubtitle: SubtitleDelayType,
+    onClose: () -> Unit,
+    onTypeChange: (SubtitleDelayType) -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        verticalAlignment = Alignment.Bottom,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+        modifier = modifier.fillMaxWidth(),
+    ) {
+        Text(
+            stringResource(MR.strings.player_sheets_sub_delay_title),
+            style = MaterialTheme.typography.headlineMedium,
+        )
+        var showDropDownMenu by remember { mutableStateOf(false) }
+        Row(modifier = Modifier.clickable { showDropDownMenu = true }) {
+            Text(
+                stringResource(affectedSubtitle.title),
+                color = MaterialTheme.colorScheme.onSurfaceVariant,
+                style = MaterialTheme.typography.bodyMedium,
+            )
+            Icon(Icons.Default.ArrowDropDown, null)
+            DropdownMenu(
+                expanded = showDropDownMenu,
+                onDismissRequest = { showDropDownMenu = false },
+            ) {
+                SubtitleDelayType.entries.forEach {
+                    DropdownMenuItem(
+                        text = { Text(stringResource(it.title)) },
+                        onClick = {
+                            onTypeChange(it)
+                            showDropDownMenu = false
+                        },
+                    )
+                }
+            }
+        }
+        Spacer(Modifier.weight(1f))
+        IconButton(onClose) {
+            Icon(
+                Icons.Default.Close,
+                null,
+                modifier = Modifier.size(32.dp),
+            )
+        }
+    }
+}
+
+enum class DelayType {
+    Audio,
+    Subtitle,
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsColorsCard.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsColorsCard.kt
new file mode 100644
index 0000000000..bc3bf9a331
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsColorsCard.kt
@@ -0,0 +1,250 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import androidx.compose.foundation.horizontalScroll
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.BorderColor
+import androidx.compose.material.icons.filled.FormatColorFill
+import androidx.compose.material.icons.filled.FormatColorReset
+import androidx.compose.material.icons.filled.FormatColorText
+import androidx.compose.material.icons.filled.Palette
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconToggleButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.core.graphics.alpha
+import androidx.core.graphics.blue
+import androidx.core.graphics.green
+import androidx.core.graphics.red
+import dev.icerock.moko.resources.StringResource
+import eu.kanade.presentation.player.components.ExpandableCard
+import eu.kanade.presentation.player.components.TintedSliderItem
+import eu.kanade.tachiyomi.ui.player.controls.CARDS_MAX_WIDTH
+import eu.kanade.tachiyomi.ui.player.controls.panelCardsColors
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
+import `is`.xyz.mpv.MPVLib
+import tachiyomi.core.common.preference.Preference
+import tachiyomi.core.common.preference.deleteAndGet
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun SubtitleSettingsColorsCard(
+    modifier: Modifier = Modifier,
+) {
+    val preferences = remember { Injekt.get<SubtitlePreferences>() }
+    var isExpanded by remember { mutableStateOf(true) }
+    ExpandableCard(
+        isExpanded = isExpanded,
+        onExpand = { isExpanded = !isExpanded },
+        title = {
+            Row(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
+            ) {
+                Icon(Icons.Default.Palette, null)
+                Text(stringResource(MR.strings.player_sheets_sub_colors_title))
+            }
+        },
+        modifier = modifier.widthIn(max = CARDS_MAX_WIDTH),
+        colors = panelCardsColors(),
+    ) {
+        Column {
+            var currentColorType by remember { mutableStateOf(SubColorType.Text) }
+            var currentColor by remember { mutableIntStateOf(getCurrentMPVColor(currentColorType)) }
+            LaunchedEffect(currentColorType) {
+                currentColor = getCurrentMPVColor(currentColorType)
+            }
+            Row(
+                horizontalArrangement = Arrangement.Center,
+                verticalAlignment = Alignment.CenterVertically,
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .horizontalScroll(rememberScrollState())
+                    .padding(start = MaterialTheme.padding.extraSmall, end = MaterialTheme.padding.medium),
+            ) {
+                SubColorType.entries.forEach { type ->
+                    IconToggleButton(
+                        checked = currentColorType == type,
+                        onCheckedChange = { currentColorType = type },
+                    ) {
+                        Icon(
+                            when (type) {
+                                SubColorType.Text -> Icons.Default.FormatColorText
+                                SubColorType.Border -> Icons.Default.BorderColor
+                                SubColorType.Background -> Icons.Default.FormatColorFill
+                            },
+                            null,
+                        )
+                    }
+                }
+                Text(stringResource(currentColorType.titleRes))
+                Spacer(Modifier.weight(1f))
+                TextButton(
+                    onClick = {
+                        resetColors(preferences, currentColorType)
+                        currentColor = getCurrentMPVColor(currentColorType)
+                    },
+                ) {
+                    Row(
+                        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+                        verticalAlignment = Alignment.CenterVertically,
+                    ) {
+                        Icon(Icons.Default.FormatColorReset, null)
+                        Text(stringResource(MR.strings.action_reset))
+                    }
+                }
+            }
+            SubtitlesColorPicker(
+                currentColor,
+                onColorChange = {
+                    currentColor = it
+                    currentColorType.preference(preferences).set(it)
+                    MPVLib.setPropertyString(currentColorType.property, it.toColorHexString())
+                },
+            )
+        }
+    }
+}
+
+fun Int.copyAsArgb(
+    alpha: Int = this.alpha,
+    red: Int = this.red,
+    green: Int = this.green,
+    blue: Int = this.blue,
+) = (alpha shl 24) or (red shl 16) or (green shl 8) or blue
+
+@OptIn(ExperimentalStdlibApi::class)
+fun Int.toColorHexString() = "#" + this.toHexString().uppercase()
+
+enum class SubColorType(
+    val titleRes: StringResource,
+    val property: String,
+    val preference: (SubtitlePreferences) -> Preference<Int>,
+) {
+    Text(
+        MR.strings.player_sheets_subtitles_color_text,
+        "sub-color",
+        preference = SubtitlePreferences::textColorSubtitles,
+    ),
+    Border(
+        MR.strings.player_sheets_subtitles_color_border,
+        "sub-border-color",
+        preference = SubtitlePreferences::borderColorSubtitles,
+    ),
+    Background(
+        MR.strings.player_sheets_subtitles_color_background,
+        "sub-back-color",
+        preference = SubtitlePreferences::backgroundColorSubtitles,
+    ),
+}
+
+fun resetColors(preferences: SubtitlePreferences, type: SubColorType) {
+    when (type) {
+        SubColorType.Text -> {
+            MPVLib.setPropertyString("sub-color", preferences.textColorSubtitles().deleteAndGet().toColorHexString())
+        }
+
+        SubColorType.Border -> {
+            MPVLib.setPropertyString(
+                "sub-border-color",
+                preferences.borderColorSubtitles().deleteAndGet().toColorHexString(),
+            )
+        }
+
+        SubColorType.Background -> {
+            MPVLib.setPropertyString(
+                "sub-back-color",
+                preferences.backgroundColorSubtitles().deleteAndGet().toColorHexString(),
+            )
+        }
+    }
+}
+
+val getCurrentMPVColor: (SubColorType) -> Int = { colorType ->
+    MPVLib.getPropertyString(colorType.property)?.let {
+        android.graphics.Color.parseColor(it.uppercase())
+    }!!
+}
+
+@Composable
+fun SubtitlesColorPicker(
+    color: Int,
+    onColorChange: (Int) -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Column(modifier) {
+        TintedSliderItem(
+            stringResource(MR.strings.player_sheets_sub_color_red),
+            color.red,
+            color.red.toString(),
+            onChange = { onColorChange(color.copyAsArgb(red = it)) },
+            max = 255,
+            tint = Color.Red,
+        )
+
+        TintedSliderItem(
+            stringResource(MR.strings.player_sheets_sub_color_green),
+            color.green,
+            color.green.toString(),
+            onChange = { onColorChange(color.copyAsArgb(green = it)) },
+            max = 255,
+            tint = Color.Green,
+        )
+
+        TintedSliderItem(
+            stringResource(MR.strings.player_sheets_sub_color_blue),
+            color.blue,
+            color.blue.toString(),
+            onChange = { onColorChange(color.copyAsArgb(blue = it)) },
+            max = 255,
+            tint = Color.Blue,
+        )
+
+        TintedSliderItem(
+            stringResource(MR.strings.player_sheets_sub_color_alpha),
+            color.alpha,
+            color.alpha.toString(),
+            onChange = { onColorChange(color.copyAsArgb(alpha = it)) },
+            max = 255,
+            tint = Color.White,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsMiscellaneousCard.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsMiscellaneousCard.kt
new file mode 100644
index 0000000000..7e390e6e22
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsMiscellaneousCard.kt
@@ -0,0 +1,156 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.AlignVerticalCenter
+import androidx.compose.material.icons.filled.EditOff
+import androidx.compose.material.icons.filled.FormatSize
+import androidx.compose.material.icons.filled.Tune
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import eu.kanade.presentation.player.components.ExpandableCard
+import eu.kanade.presentation.player.components.SliderItem
+import eu.kanade.presentation.player.components.SwitchPreference
+import eu.kanade.tachiyomi.ui.player.controls.CARDS_MAX_WIDTH
+import eu.kanade.tachiyomi.ui.player.controls.components.sheets.toFixed
+import eu.kanade.tachiyomi.ui.player.controls.panelCardsColors
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
+import `is`.xyz.mpv.MPVLib
+import tachiyomi.core.common.preference.deleteAndGet
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun SubtitlesMiscellaneousCard(modifier: Modifier = Modifier) {
+    val preferences = remember { Injekt.get<SubtitlePreferences>() }
+    var isExpanded by remember { mutableStateOf(true) }
+    ExpandableCard(
+        isExpanded,
+        title = {
+            Row(horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium)) {
+                Icon(Icons.Default.Tune, null)
+                Text(stringResource(MR.strings.player_sheets_sub_misc_title))
+            }
+        },
+        onExpand = { isExpanded = !isExpanded },
+        modifier.widthIn(max = CARDS_MAX_WIDTH),
+        colors = panelCardsColors(),
+    ) {
+        Column {
+            var overrideAssSubs by remember {
+                mutableStateOf(MPVLib.getPropertyString("sub-ass-override").also { println(it) } == "force")
+            }
+            SwitchPreference(
+                overrideAssSubs,
+                onValueChange = {
+                    overrideAssSubs = it
+                    preferences.overrideSubsASS().set(it)
+                    MPVLib.setPropertyString("sub-ass-override", if (it) "force" else "scale")
+                },
+                content = { Text(stringResource(MR.strings.player_sheets_sub_override_ass)) },
+                modifier = Modifier
+                    .padding(MaterialTheme.padding.medium)
+                    .fillMaxWidth(),
+            )
+            var subScale by remember {
+                mutableStateOf(MPVLib.getPropertyDouble("sub-scale").toFloat())
+            }
+            var subPos by remember {
+                mutableStateOf(MPVLib.getPropertyInt("sub-pos"))
+            }
+            SliderItem(
+                label = stringResource(MR.strings.player_sheets_sub_scale),
+                value = subScale,
+                valueText = subScale.toFixed(2).toString(),
+                onChange = {
+                    subScale = it
+                    preferences.subtitleFontScale().set(it)
+                    MPVLib.setPropertyDouble("sub-scale", it.toDouble())
+                },
+                max = 5f,
+                icon = {
+                    Icon(
+                        Icons.Default.FormatSize,
+                        null,
+                    )
+                },
+            )
+            SliderItem(
+                label = stringResource(MR.strings.player_sheets_sub_position),
+                value = subPos,
+                valueText = subPos.toString(),
+                onChange = {
+                    subPos = it
+                    preferences.subtitlePos().set(it)
+                    MPVLib.setPropertyInt("sub-pos", it)
+                },
+                max = 150,
+                icon = {
+                    Icon(
+                        Icons.Default.AlignVerticalCenter,
+                        null,
+                    )
+                },
+            )
+            Row(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(end = MaterialTheme.padding.medium, bottom = MaterialTheme.padding.medium),
+                horizontalArrangement = Arrangement.End,
+            ) {
+                TextButton(
+                    onClick = {
+                        preferences.subtitlePos().deleteAndGet().let {
+                            subPos = it
+                            MPVLib.setPropertyInt("sub-pos", it)
+                        }
+                        preferences.subtitleFontScale().deleteAndGet().let {
+                            subScale = it
+                            MPVLib.setPropertyDouble("sub-scale", it.toDouble())
+                        }
+                        preferences.overrideSubsASS().deleteAndGet().let { overrideAssSubs = it }
+                        MPVLib.setPropertyString("sub-ass-override", "scale") // mpv's default is 'scale'
+                    },
+                ) {
+                    Row {
+                        Icon(Icons.Default.EditOff, null)
+                        Text(stringResource(MR.strings.action_reset))
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsPanel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsPanel.kt
new file mode 100644
index 0000000000..9f6b228fe4
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsPanel.kt
@@ -0,0 +1,143 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import android.content.res.Configuration.ORIENTATION_PORTRAIT
+import androidx.activity.compose.BackHandler
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.PaddingValues
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.width
+import androidx.compose.foundation.pager.HorizontalPager
+import androidx.compose.foundation.pager.PageSize
+import androidx.compose.foundation.pager.rememberPagerState
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.ArrowBack
+import androidx.compose.material.icons.filled.Close
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.TopAppBar
+import androidx.compose.material3.TopAppBarDefaults
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.Shadow
+import androidx.compose.ui.platform.LocalConfiguration
+import androidx.compose.ui.unit.dp
+import androidx.constraintlayout.compose.ConstraintLayout
+import eu.kanade.tachiyomi.ui.player.controls.CARDS_MAX_WIDTH
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+
+@Composable
+fun SubtitleSettingsPanel(
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    BackHandler(onBack = onDismissRequest)
+    val orientation = LocalConfiguration.current.orientation
+
+    ConstraintLayout(modifier = modifier.fillMaxSize()) {
+        val subSettingsCards = createRef()
+        val cards: @Composable (Int, Modifier) -> Unit = { value, cardsModifier ->
+            when (value) {
+                0 -> SubtitleSettingsTypographyCard(cardsModifier)
+                1 -> SubtitleSettingsColorsCard(cardsModifier)
+                2 -> SubtitlesMiscellaneousCard(cardsModifier)
+                else -> {}
+            }
+        }
+
+        val pagerState = rememberPagerState { 3 }
+        if (orientation == ORIENTATION_PORTRAIT) {
+            Column(
+                modifier = Modifier.constrainAs(subSettingsCards) {
+                    top.linkTo(parent.top, 32.dp)
+                    start.linkTo(parent.start)
+                },
+                verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+            ) {
+                TopAppBar(
+                    title = {
+                        Text(
+                            text = stringResource(MR.strings.player_sheets_subtitles_settings_title),
+                            style = MaterialTheme.typography.headlineMedium.copy(shadow = Shadow(blurRadius = 20f)),
+                        )
+                    },
+                    navigationIcon = {
+                        IconButton(onClick = onDismissRequest) {
+                            Icon(imageVector = Icons.AutoMirrored.Default.ArrowBack, contentDescription = null)
+                        }
+                    },
+                    colors = TopAppBarDefaults.topAppBarColors().copy(containerColor = Color.Transparent),
+                )
+                HorizontalPager(
+                    state = pagerState,
+                    pageSize = PageSize.Fixed(LocalConfiguration.current.screenWidthDp.dp * 0.9f),
+                    verticalAlignment = Alignment.Top,
+                    pageSpacing = MaterialTheme.padding.small,
+                    contentPadding = PaddingValues(horizontal = MaterialTheme.padding.small),
+                    beyondViewportPageCount = 1,
+                ) { page ->
+                    cards(page, Modifier.fillMaxWidth())
+                }
+            }
+        } else {
+            Column(
+                horizontalAlignment = Alignment.Start,
+                verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+                modifier = Modifier
+                    .constrainAs(subSettingsCards) {
+                        top.linkTo(parent.top)
+                        end.linkTo(parent.end, 32.dp)
+                    }
+                    .verticalScroll(rememberScrollState()),
+            ) {
+                Spacer(Modifier.height(16.dp))
+                Row(
+                    Modifier
+                        .width(CARDS_MAX_WIDTH),
+                    horizontalArrangement = Arrangement.SpaceBetween,
+                ) {
+                    Text(
+                        text = stringResource(MR.strings.player_sheets_subtitles_settings_title),
+                        style = MaterialTheme.typography.headlineMedium.copy(
+                            shadow = Shadow(blurRadius = 20f),
+                        ),
+                    )
+                    IconButton(onDismissRequest) {
+                        Icon(imageVector = Icons.Default.Close, contentDescription = null)
+                    }
+                }
+                repeat(3) { cards(it, Modifier) }
+                Spacer(Modifier.height(16.dp))
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsTypographyCard.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsTypographyCard.kt
new file mode 100644
index 0000000000..35767816c6
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/SubtitleSettingsTypographyCard.kt
@@ -0,0 +1,341 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import android.annotation.SuppressLint
+import androidx.compose.foundation.horizontalScroll
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.BorderColor
+import androidx.compose.material.icons.filled.Check
+import androidx.compose.material.icons.filled.FormatBold
+import androidx.compose.material.icons.filled.FormatClear
+import androidx.compose.material.icons.filled.FormatColorText
+import androidx.compose.material.icons.filled.FormatItalic
+import androidx.compose.material.icons.filled.FormatSize
+import androidx.compose.material3.CircularProgressIndicator
+import androidx.compose.material3.DropdownMenuItem
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconToggleButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.unit.dp
+import com.yubyf.truetypeparser.TTFFile
+import dev.icerock.moko.resources.StringResource
+import eu.kanade.presentation.components.DropdownMenu
+import eu.kanade.presentation.player.components.ExpandableCard
+import eu.kanade.presentation.player.components.ExposedTextDropDownMenu
+import eu.kanade.presentation.player.components.SliderItem
+import eu.kanade.tachiyomi.R
+import eu.kanade.tachiyomi.ui.player.controls.CARDS_MAX_WIDTH
+import eu.kanade.tachiyomi.ui.player.controls.panelCardsColors
+import eu.kanade.tachiyomi.ui.player.settings.SubtitleJustification
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
+import `is`.xyz.mpv.MPVLib
+import kotlinx.collections.immutable.toImmutableList
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import tachiyomi.core.common.preference.deleteAndGet
+import tachiyomi.domain.storage.service.StorageManager
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@SuppressLint("MutableCollectionMutableState")
+@Composable
+fun SubtitleSettingsTypographyCard(
+    modifier: Modifier = Modifier,
+) {
+    val preferences = remember { Injekt.get<SubtitlePreferences>() }
+    val storageManager = remember { Injekt.get<StorageManager>() }
+    var isExpanded by remember { mutableStateOf(true) }
+
+    val fontsDir = storageManager.getFontsDirectory()
+    val fonts by remember { mutableStateOf(mutableListOf(preferences.subtitleFont().defaultValue())) }
+    var fontsLoadingIndicator: (@Composable () -> Unit)? by remember {
+        val indicator: (@Composable () -> Unit) = {
+            CircularProgressIndicator(Modifier.size(32.dp))
+        }
+        mutableStateOf(indicator)
+    }
+    LaunchedEffect(Unit) {
+        if (fontsDir == null) {
+            fontsLoadingIndicator = null
+            return@LaunchedEffect
+        }
+        withContext(Dispatchers.IO) {
+            fontsDir.listFiles()?.filter { file ->
+                file.name?.lowercase()?.matches(FONT_EXTENSION_REGEX) == true
+            }?.mapNotNull {
+                runCatching { TTFFile.open(it.openInputStream()).families.values.first() }.getOrNull()
+            }?.let {
+                fonts.addAll(
+                    it.distinct(),
+                )
+            }
+            fontsLoadingIndicator = null
+        }
+    }
+
+    ExpandableCard(
+        isExpanded = isExpanded,
+        onExpand = { isExpanded = !isExpanded },
+        title = {
+            Row(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
+            ) {
+                Icon(Icons.Default.FormatColorText, null)
+                Text(stringResource(MR.strings.player_sheets_sub_typography_title))
+            }
+        },
+        modifier = modifier.widthIn(max = CARDS_MAX_WIDTH),
+        colors = panelCardsColors(),
+    ) {
+        Column {
+            var isBold by remember { mutableStateOf(MPVLib.getPropertyBoolean("sub-bold")) }
+            var isItalic by remember { mutableStateOf(MPVLib.getPropertyBoolean("sub-italic")) }
+            var justify by remember {
+                mutableStateOf(
+                    SubtitleJustification.entries.first {
+                        it.value == MPVLib.getPropertyString("sub-justify")
+                    },
+                )
+            }
+            var font by remember { mutableStateOf(MPVLib.getPropertyString("sub-font")) }
+            var fontSize by remember {
+                mutableStateOf(MPVLib.getPropertyInt("sub-font-size"))
+            }
+            var borderStyle by remember {
+                mutableStateOf(
+                    SubtitlesBorderStyle.entries.first { it.value == MPVLib.getPropertyString("sub-border-style") },
+                )
+            }
+            var borderSize by remember {
+                mutableStateOf(
+                    MPVLib.getPropertyInt("sub-border-size"),
+                )
+            }
+            var shadowOffset by remember {
+                mutableStateOf(
+                    MPVLib.getPropertyInt("sub-shadow-offset"),
+                )
+            }
+            Row(
+                Modifier
+                    .fillMaxWidth()
+                    .horizontalScroll(rememberScrollState())
+                    .padding(start = MaterialTheme.padding.extraSmall, end = MaterialTheme.padding.medium),
+                verticalAlignment = Alignment.CenterVertically,
+            ) {
+                IconToggleButton(
+                    checked = isBold,
+                    onCheckedChange = {
+                        isBold = it
+                        preferences.boldSubtitles().set(it)
+                        MPVLib.setPropertyBoolean("sub-bold", it)
+                    },
+                ) {
+                    Icon(
+                        Icons.Default.FormatBold,
+                        null,
+                        modifier = Modifier.size(32.dp),
+                    )
+                }
+                IconToggleButton(
+                    checked = isItalic,
+                    onCheckedChange = {
+                        isItalic = it
+                        preferences.italicSubtitles().set(it)
+                        MPVLib.setPropertyBoolean("sub-italic", it)
+                    },
+                ) {
+                    Icon(
+                        Icons.Default.FormatItalic,
+                        null,
+                        modifier = Modifier.size(32.dp),
+                    )
+                }
+                SubtitleJustification.entries.minus(SubtitleJustification.Auto).forEach { justification ->
+                    IconToggleButton(
+                        checked = justify == justification,
+                        onCheckedChange = {
+                            justify = justification
+                            MPVLib.setPropertyBoolean("sub-ass-justify", it)
+                            if (it) {
+                                preferences.subtitleJustification().set(justification)
+                                MPVLib.setPropertyString("sub-justify", justification.value)
+                            } else {
+                                preferences.subtitleJustification().set(SubtitleJustification.Auto)
+                                MPVLib.setPropertyString("sub-justify", SubtitleJustification.Auto.value)
+                            }
+                        },
+                    ) {
+                        Icon(justification.icon, null)
+                    }
+                }
+                Spacer(Modifier.weight(1f))
+                TextButton(onClick = {
+                    resetTypography(preferences)
+                    isBold = MPVLib.getPropertyBoolean("sub-bold")
+                    isItalic = MPVLib.getPropertyBoolean("sub-italic")
+                    justify =
+                        SubtitleJustification.entries.first { it.value == MPVLib.getPropertyString("sub-justify") }
+                    font = MPVLib.getPropertyString("sub-font")
+                    fontSize = MPVLib.getPropertyInt("sub-font-size")
+                    borderStyle =
+                        SubtitlesBorderStyle.entries.first { it.value == MPVLib.getPropertyString("sub-border-style") }
+                    borderSize = MPVLib.getPropertyInt("sub-border-size")
+                    shadowOffset = MPVLib.getPropertyInt("sub-shadow-offset")
+                }) {
+                    Row(
+                        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+                        verticalAlignment = Alignment.CenterVertically,
+                    ) {
+                        Icon(Icons.Default.FormatClear, null)
+                        Text(stringResource(MR.strings.action_reset))
+                    }
+                }
+            }
+            Row(
+                modifier = Modifier.padding(horizontal = MaterialTheme.padding.medium),
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
+                verticalAlignment = Alignment.CenterVertically,
+            ) {
+                Icon(
+                    painterResource(R.drawable.outline_brand_family_24),
+                    null,
+                    modifier = Modifier.size(32.dp),
+                )
+                ExposedTextDropDownMenu(
+                    selectedValue = font,
+                    options = fonts.toImmutableList(),
+                    label = stringResource(MR.strings.player_sheets_sub_typography_font),
+                    onValueChangedEvent = {
+                        font = it
+                        preferences.subtitleFont().set(it)
+                        MPVLib.setPropertyString("sub-font", it)
+                    },
+                    leadingIcon = fontsLoadingIndicator,
+                )
+            }
+            SliderItem(
+                label = stringResource(MR.strings.player_sheets_sub_typography_font_size),
+                max = 100,
+                min = 1,
+                value = fontSize,
+                valueText = fontSize.toString(),
+                onChange = {
+                    fontSize = it
+                    preferences.subtitleFontSize().set(it)
+                    MPVLib.setPropertyInt("sub-font-size", it)
+                },
+            ) {
+                Icon(Icons.Default.FormatSize, null)
+            }
+
+            var selectingBorderStyle by remember { mutableStateOf(false) }
+            DropdownMenu(expanded = selectingBorderStyle, onDismissRequest = { selectingBorderStyle = false }) {
+                SubtitlesBorderStyle.entries.map {
+                    DropdownMenuItem(
+                        text = { Text(stringResource(it.titleRes)) },
+                        onClick = {
+                            borderStyle = it
+                            preferences.borderStyleSubtitles().set(it)
+                            MPVLib.setPropertyString("sub-border-style", it.value)
+                        },
+                        trailingIcon = {
+                            if (borderStyle == it) {
+                                Icon(
+                                    imageVector = Icons.Default.Check,
+                                    contentDescription = null,
+                                )
+                            }
+                        },
+                    )
+                }
+            }
+            SliderItem(
+                stringResource(MR.strings.player_sheets_sub_typography_border_size),
+                value = borderSize,
+                valueText = borderSize.toString(),
+                onChange = {
+                    borderSize = it
+                    preferences.subtitleBorderSize().set(it)
+                    MPVLib.setPropertyInt("sub-border-size", it)
+                },
+                max = 100,
+                icon = { Icon(Icons.Default.BorderColor, null) },
+            )
+            SliderItem(
+                stringResource(MR.strings.player_sheets_subtitles_shadow_offset),
+                value = shadowOffset,
+                valueText = shadowOffset.toString(),
+                onChange = {
+                    shadowOffset = it
+                    preferences.shadowOffsetSubtitles().set(it)
+                    MPVLib.setPropertyInt("sub-shadow-offset", it)
+                },
+                max = 100,
+                icon = { Icon(painterResource(R.drawable.sharp_shadow_24), null) },
+            )
+        }
+    }
+}
+
+private val FONT_EXTENSION_REGEX = Regex(""".*\.[ot]tf${'$'}""")
+
+fun resetTypography(preferences: SubtitlePreferences) {
+    MPVLib.setPropertyBoolean("sub-bold", preferences.boldSubtitles().deleteAndGet())
+    MPVLib.setPropertyBoolean("sub-italic", preferences.italicSubtitles().deleteAndGet())
+    MPVLib.setPropertyBoolean("sub-ass-justify", preferences.overrideSubsASS().deleteAndGet())
+    MPVLib.setPropertyString("sub-justify", preferences.subtitleJustification().deleteAndGet().value)
+    MPVLib.setPropertyString("sub-font", preferences.subtitleFont().deleteAndGet())
+    MPVLib.setPropertyInt("sub-font-size", preferences.subtitleFontSize().deleteAndGet())
+    MPVLib.setPropertyInt("sub-border-size", preferences.subtitleBorderSize().deleteAndGet())
+    MPVLib.setPropertyInt("sub-shadow-offset", preferences.shadowOffsetSubtitles().deleteAndGet())
+    MPVLib.setPropertyString("sub-border-style", preferences.borderStyleSubtitles().deleteAndGet().value)
+}
+
+enum class SubtitlesBorderStyle(
+    val value: String,
+    val titleRes: StringResource,
+) {
+    OutlineAndShadow("outline-and-shadow", MR.strings.player_sheets_subtitles_border_style_outline_and_shadow),
+    OpaqueBox("opaque-box", MR.strings.player_sheets_subtitles_border_style_opaque_box),
+    BackgroundBox("background-box", MR.strings.player_sheets_subtitles_border_style_background_box),
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/VideoFiltersPanel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/VideoFiltersPanel.kt
new file mode 100644
index 0000000000..717f4ab8ef
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/panels/VideoFiltersPanel.kt
@@ -0,0 +1,148 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.panels
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.items
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Close
+import androidx.compose.material.icons.outlined.Info
+import androidx.compose.material3.Card
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.constraintlayout.compose.ConstraintLayout
+import eu.kanade.presentation.player.components.SliderItem
+import eu.kanade.tachiyomi.ui.player.VideoFilters
+import eu.kanade.tachiyomi.ui.player.controls.CARDS_MAX_WIDTH
+import eu.kanade.tachiyomi.ui.player.controls.components.ControlsButton
+import eu.kanade.tachiyomi.ui.player.controls.panelCardsColors
+import eu.kanade.tachiyomi.ui.player.settings.DecoderPreferences
+import `is`.xyz.mpv.MPVLib
+import tachiyomi.core.common.preference.deleteAndGet
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import tachiyomi.presentation.core.util.collectAsState
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun VideoFiltersPanel(
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    ConstraintLayout(
+        modifier = modifier
+            .fillMaxSize()
+            .padding(MaterialTheme.padding.medium),
+    ) {
+        val filtersCard = createRef()
+
+        FiltersCard(
+            Modifier.constrainAs(filtersCard) {
+                linkTo(parent.top, parent.bottom, bias = 0.8f)
+                end.linkTo(parent.end)
+            },
+            onClose = onDismissRequest,
+        )
+    }
+}
+
+@Composable
+fun FiltersCard(
+    modifier: Modifier = Modifier,
+    onClose: () -> Unit,
+) {
+    val decoderPreferences = remember { Injekt.get<DecoderPreferences>() }
+    Card(
+        colors = panelCardsColors(),
+        modifier = modifier
+            .widthIn(max = CARDS_MAX_WIDTH),
+    ) {
+        Row(
+            Modifier
+                .fillMaxWidth()
+                .padding(start = MaterialTheme.padding.medium),
+            verticalAlignment = Alignment.CenterVertically,
+            horizontalArrangement = Arrangement.SpaceBetween,
+        ) {
+            Text(
+                stringResource(MR.strings.player_sheets_filters_title),
+                style = MaterialTheme.typography.headlineMedium,
+            )
+            Row(
+                verticalAlignment = Alignment.CenterVertically,
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+            ) {
+                TextButton(
+                    onClick = {
+                        VideoFilters.entries.forEach {
+                            MPVLib.setPropertyInt(it.mpvProperty, it.preference(decoderPreferences).deleteAndGet())
+                        }
+                    },
+                ) {
+                    Text(text = stringResource(MR.strings.action_reset))
+                }
+                ControlsButton(Icons.Default.Close, onClose)
+            }
+        }
+        LazyColumn {
+            items(VideoFilters.entries) { filter ->
+                val value by filter.preference(decoderPreferences).collectAsState()
+                SliderItem(
+                    label = stringResource(filter.titleRes),
+                    value = value,
+                    valueText = value.toString(),
+                    onChange = {
+                        filter.preference(decoderPreferences).set(it)
+                        MPVLib.setPropertyInt(filter.mpvProperty, it)
+                    },
+                    max = 100,
+                    min = -100,
+                )
+            }
+            item {
+                if (decoderPreferences.gpuNext().get()) return@item
+                Column(
+                    modifier = Modifier
+                        .padding(MaterialTheme.padding.medium)
+                        .fillMaxWidth(),
+                    verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
+                    horizontalAlignment = Alignment.Start,
+                ) {
+                    Icon(Icons.Outlined.Info, null)
+                    Text(stringResource(MR.strings.player_sheets_filters_warning))
+                }
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/AudioTracksSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/AudioTracksSheet.kt
new file mode 100644
index 0000000000..ecdb267424
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/AudioTracksSheet.kt
@@ -0,0 +1,103 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.MoreTime
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.RadioButton
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.font.FontWeight
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel.VideoTrack
+import kotlinx.collections.immutable.ImmutableList
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+
+@Composable
+fun AudioTracksSheet(
+    tracks: ImmutableList<VideoTrack>,
+    selectedId: Int,
+    onSelect: (Int) -> Unit,
+    onAddAudioTrack: () -> Unit,
+    onOpenDelayPanel: () -> Unit,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    GenericTracksSheet(
+        tracks,
+        onDismissRequest = onDismissRequest,
+        header = {
+            AddTrackRow(
+                stringResource(MR.strings.player_sheets_add_ext_audio),
+                onAddAudioTrack,
+                actions = {
+                    IconButton(onClick = onOpenDelayPanel) {
+                        Icon(Icons.Default.MoreTime, null)
+                    }
+                },
+            )
+        },
+        track = {
+            AudioTrackRow(
+                title = getTrackTitle(it),
+                isSelected = selectedId == it.id,
+                onClick = { onSelect(it.id) },
+            )
+        },
+        modifier = modifier,
+    )
+}
+
+@Composable
+fun AudioTrackRow(
+    title: String,
+    isSelected: Boolean,
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
+            .padding(start = MaterialTheme.padding.small, end = MaterialTheme.padding.medium),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+    ) {
+        RadioButton(
+            isSelected,
+            onClick,
+        )
+        Text(
+            title,
+            fontWeight = if (isSelected) FontWeight.ExtraBold else FontWeight.Normal,
+            fontStyle = if (isSelected) FontStyle.Italic else FontStyle.Normal,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/ChaptersSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/ChaptersSheet.kt
new file mode 100644
index 0000000000..02cf56e60a
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/ChaptersSheet.kt
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextOverflow
+import dev.vivvvek.seeker.Segment
+import `is`.xyz.mpv.Utils
+import kotlinx.collections.immutable.ImmutableList
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+
+@Composable
+fun ChaptersSheet(
+    chapters: ImmutableList<Segment>,
+    currentChapter: Segment,
+    onClick: (Segment) -> Unit,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    GenericTracksSheet(
+        chapters,
+        track = {
+            ChapterTrack(
+                it,
+                index = chapters.indexOf(it),
+                selected = currentChapter == it,
+                onClick = { onClick(it) },
+            )
+        },
+        onDismissRequest = onDismissRequest,
+        modifier = modifier
+            .padding(vertical = MaterialTheme.padding.medium),
+    )
+}
+
+@Composable
+fun ChapterTrack(
+    chapter: Segment,
+    index: Int,
+    selected: Boolean,
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
+            .padding(vertical = MaterialTheme.padding.small, horizontal = MaterialTheme.padding.medium),
+        horizontalArrangement = Arrangement.SpaceBetween,
+    ) {
+        Text(
+            stringResource(MR.strings.player_sheets_track_title_wo_lang, index + 1, chapter.name),
+            fontStyle = if (selected) FontStyle.Italic else FontStyle.Normal,
+            fontWeight = if (selected) FontWeight.ExtraBold else FontWeight.Normal,
+            maxLines = 1,
+            modifier = Modifier.weight(1f),
+            overflow = TextOverflow.Ellipsis,
+        )
+        Text(
+            Utils.prettyTime(chapter.start.toInt()),
+            fontStyle = if (selected) FontStyle.Italic else FontStyle.Normal,
+            fontWeight = if (selected) FontWeight.ExtraBold else FontWeight.Normal,
+        )
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/GenericTracksSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/GenericTracksSheet.kt
new file mode 100644
index 0000000000..509f9d2954
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/GenericTracksSheet.kt
@@ -0,0 +1,129 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.RowScope
+import androidx.compose.foundation.layout.fillMaxHeight
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.items
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Add
+import androidx.compose.material3.Icon
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import eu.kanade.presentation.player.components.PlayerSheet
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel.VideoTrack
+import kotlinx.collections.immutable.ImmutableList
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+
+@Composable
+fun <T> GenericTracksSheet(
+    tracks: ImmutableList<T>,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+    dismissEvent: Boolean = false,
+    header: @Composable () -> Unit = {},
+    track: @Composable (T) -> Unit = {},
+    footer: @Composable () -> Unit = {},
+) {
+    PlayerSheet(onDismissRequest, dismissEvent = dismissEvent) {
+        Column(modifier) {
+            header()
+            LazyColumn {
+                items(tracks) {
+                    track(it)
+                }
+                item {
+                    footer()
+                }
+            }
+        }
+    }
+}
+
+@Composable
+fun AddTrackRow(
+    title: String,
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+    actions: @Composable RowScope.() -> Unit = {},
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
+            .height(48.dp),
+        verticalAlignment = Alignment.CenterVertically,
+        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+    ) {
+        Row(
+            modifier = Modifier
+                .clickable(onClick = onClick)
+                .fillMaxHeight()
+                .weight(1f)
+                .padding(start = MaterialTheme.padding.medium),
+            horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            verticalAlignment = Alignment.CenterVertically,
+        ) {
+            Icon(
+                Icons.Default.Add,
+                null,
+                modifier = Modifier.size(32.dp),
+            )
+            Text(title)
+        }
+        actions()
+    }
+}
+
+@Composable
+fun getTrackTitle(track: VideoTrack): String {
+    return when {
+        track.id == -1 -> {
+            track.name
+        }
+
+        track.language.isNullOrBlank() && track.name.isNotBlank() -> {
+            stringResource(MR.strings.player_sheets_track_title_wo_lang, track.id, track.name)
+        }
+
+        !track.language.isNullOrBlank() && track.name.isNotBlank() -> {
+            stringResource(MR.strings.player_sheets_track_title_w_lang, track.id, track.name, track.language)
+        }
+
+        !track.language.isNullOrBlank() && track.name.isBlank() -> {
+            stringResource(MR.strings.player_sheets_track_lang_wo_title, track.id, track.language)
+        }
+
+        else -> stringResource(MR.strings.player_sheets_track_title_wo_lang, track.id, track.name)
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/MoreSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/MoreSheet.kt
new file mode 100644
index 0000000000..2ce4f6de95
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/MoreSheet.kt
@@ -0,0 +1,347 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import android.text.format.DateUtils
+import androidx.compose.animation.animateContentSize
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.IntrinsicSize
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.width
+import androidx.compose.foundation.lazy.LazyRow
+import androidx.compose.foundation.lazy.items
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.KeyboardAlt
+import androidx.compose.material.icons.filled.Tune
+import androidx.compose.material.icons.outlined.Schedule
+import androidx.compose.material.icons.outlined.Timer
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.FilterChip
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Surface
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.material3.TimeInput
+import androidx.compose.material3.TimePicker
+import androidx.compose.material3.rememberTimePickerState
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.window.Dialog
+import androidx.compose.ui.window.DialogProperties
+import eu.kanade.presentation.player.components.PlayerSheet
+import eu.kanade.tachiyomi.ui.player.Decoder
+import eu.kanade.tachiyomi.ui.player.settings.AdvancedPlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.AudioChannels
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import `is`.xyz.mpv.MPVLib
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import tachiyomi.presentation.core.util.collectAsState
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+
+@Composable
+fun MoreSheet(
+    selectedDecoder: Decoder,
+    onSelectDecoder: (Decoder) -> Unit,
+    remainingTime: Int,
+    onStartTimer: (Int) -> Unit,
+    onDismissRequest: () -> Unit,
+    onEnterFiltersPanel: () -> Unit,
+    // TODO(customButtons)
+    // customButtons: ImmutableList<CustomButtonEntity>,
+    modifier: Modifier = Modifier,
+) {
+    val advancedPreferences = remember { Injekt.get<AdvancedPlayerPreferences>() }
+    val audioPreferences = remember { Injekt.get<AudioPreferences>() }
+    val statisticsPage by advancedPreferences.playerStatisticsPage().collectAsState()
+
+    PlayerSheet(
+        onDismissRequest,
+        modifier,
+    ) {
+        Column(
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(MaterialTheme.padding.medium),
+            verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+        ) {
+            Row(
+                modifier = Modifier.fillMaxWidth(),
+                horizontalArrangement = Arrangement.SpaceBetween,
+                verticalAlignment = Alignment.CenterVertically,
+            ) {
+                Text(
+                    text = stringResource(MR.strings.player_sheets_more_title),
+                    style = MaterialTheme.typography.headlineMedium,
+                )
+                Row(
+                    verticalAlignment = Alignment.CenterVertically,
+                    horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+                ) {
+                    var isSleepTimerDialogShown by remember { mutableStateOf(false) }
+                    TextButton(onClick = { isSleepTimerDialogShown = true }) {
+                        Row(
+                            verticalAlignment = Alignment.CenterVertically,
+                            horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+                        ) {
+                            Icon(imageVector = Icons.Outlined.Timer, contentDescription = null)
+                            Text(
+                                text =
+                                if (remainingTime == 0) {
+                                    stringResource(MR.strings.timer_title)
+                                } else {
+                                    stringResource(
+                                        MR.strings.timer_remaining,
+                                        DateUtils.formatElapsedTime(remainingTime.toLong()),
+                                    )
+                                },
+                            )
+                            if (isSleepTimerDialogShown) {
+                                TimePickerDialog(
+                                    remainingTime = remainingTime,
+                                    onDismissRequest = { isSleepTimerDialogShown = false },
+                                    onTimeSelect = onStartTimer,
+                                )
+                            }
+                        }
+                    }
+                    TextButton(onClick = onEnterFiltersPanel) {
+                        Row(
+                            verticalAlignment = Alignment.CenterVertically,
+                            horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+                        ) {
+                            Icon(imageVector = Icons.Default.Tune, contentDescription = null)
+                            Text(text = stringResource(MR.strings.player_sheets_filters_title))
+                        }
+                    }
+                }
+            }
+
+            Text(stringResource(MR.strings.player_hwdec_mode))
+            LazyRow(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            ) {
+                items(Decoder.entries.minus(Decoder.Auto)) { decoder ->
+                    FilterChip(
+                        selected = decoder == selectedDecoder,
+                        onClick = { onSelectDecoder(decoder) },
+                        label = { Text(text = decoder.title) },
+                    )
+                }
+            }
+
+            Text(stringResource(MR.strings.player_sheets_stats_page_title))
+            LazyRow(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            ) {
+                items(6) { page ->
+                    FilterChip(
+                        label = {
+                            Text(
+                                stringResource(
+                                    if (page ==
+                                        0
+                                    ) {
+                                        MR.strings.player_sheets_tracks_off
+                                    } else {
+                                        MR.strings.player_sheets_stats_page_chip
+                                    },
+                                    page,
+                                ),
+                            )
+                        },
+                        onClick = {
+                            if ((page == 0) xor (statisticsPage == 0)) {
+                                MPVLib.command(arrayOf("script-binding", "stats/display-stats-toggle"))
+                            }
+                            if (page != 0) {
+                                MPVLib.command(arrayOf("script-binding", "stats/display-page-$page"))
+                            }
+                            advancedPreferences.playerStatisticsPage().set(page)
+                        },
+                        selected = statisticsPage == page,
+                    )
+                }
+            }
+
+            // TODO(customButtons)
+            // if (customButtons.isNotEmpty()) {
+            //    Text(text = stringResource(MR.strings.player_sheets_custom_buttons_title))
+            //    FlowRow(
+            //        verticalArrangement = Arrangement.spacedBy(MaterialTheme.spacing.small),
+            //        horizontalArrangement = Arrangement.spacedBy(MaterialTheme.spacing.smaller),
+            //        maxItemsInEachRow = Int.MAX_VALUE,
+            //    ) {
+            //        customButtons.forEach { button ->
+            //
+            //            val inputChipInteractionSource = remember { MutableInteractionSource() }
+            //
+            //            Box {
+            //                FilterChip(
+            //                    onClick = {},
+            //                    label = { Text(text = button.title) },
+            //                    selected = false,
+            //                    interactionSource = inputChipInteractionSource,
+            //                )
+            //                Box(
+            //                    modifier = Modifier
+            //                        .matchParentSize()
+            //                        .combinedClickable(
+            //                            onClick = button::execute,
+            //                            onLongClick = button::executeLongClick,
+            //                            interactionSource = inputChipInteractionSource,
+            //                            indication = null,
+            //                        )
+            //                )
+            //            }
+            //        }
+            //    }
+            // }
+            Text(text = stringResource(MR.strings.pref_audio_channels))
+            val audioChannels by audioPreferences.audioChannels().collectAsState()
+            LazyRow(
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            ) {
+                items(AudioChannels.entries) {
+                    FilterChip(
+                        selected = audioChannels == it,
+                        onClick = {
+                            audioPreferences.audioChannels().set(it)
+                            if (it == AudioChannels.ReverseStereo) {
+                                MPVLib.setPropertyString(AudioChannels.AutoSafe.property, AudioChannels.AutoSafe.value)
+                            } else {
+                                MPVLib.setPropertyString(AudioChannels.ReverseStereo.property, "")
+                            }
+                            MPVLib.setPropertyString(it.property, it.value)
+                        },
+                        label = { Text(text = stringResource(it.titleRes)) },
+                    )
+                }
+            }
+        }
+    }
+}
+
+@OptIn(ExperimentalMaterial3Api::class)
+@Composable
+fun TimePickerDialog(
+    onDismissRequest: () -> Unit,
+    onTimeSelect: (Int) -> Unit,
+    modifier: Modifier = Modifier,
+    remainingTime: Int = 0,
+) {
+    Dialog(
+        onDismissRequest = onDismissRequest,
+        properties = DialogProperties(usePlatformDefaultWidth = false),
+    ) {
+        Surface(
+            shape = MaterialTheme.shapes.medium,
+            color = MaterialTheme.colorScheme.surface,
+            modifier = modifier.padding(MaterialTheme.padding.medium),
+        ) {
+            Column(
+                modifier = Modifier
+                    .verticalScroll(rememberScrollState())
+                    .width(IntrinsicSize.Max)
+                    .animateContentSize()
+                    .padding(MaterialTheme.padding.medium),
+            ) {
+                var currentLayoutType by rememberSaveable { mutableIntStateOf(0) }
+                Text(
+                    text = stringResource(
+                        if (currentLayoutType == 1) {
+                            MR.strings.timer_picker_pick_time
+                        } else {
+                            MR.strings.timer_picker_enter_timer
+                        },
+                    ),
+                )
+
+                val state = rememberTimePickerState(
+                    remainingTime / 3600,
+                    (remainingTime % 3600) / 60,
+                    is24Hour = true,
+                )
+                Box(
+                    contentAlignment = Alignment.Center,
+                ) {
+                    if (currentLayoutType == 1) {
+                        TimePicker(state = state)
+                    } else {
+                        TimeInput(state = state)
+                    }
+                }
+                Row(
+                    horizontalArrangement = Arrangement.SpaceBetween,
+                    modifier = Modifier.fillMaxWidth(),
+                ) {
+                    IconButton(onClick = { currentLayoutType = if (currentLayoutType == 0) 1 else 0 }) {
+                        Icon(
+                            imageVector = if (currentLayoutType ==
+                                0
+                            ) {
+                                Icons.Outlined.Schedule
+                            } else {
+                                Icons.Default.KeyboardAlt
+                            },
+                            contentDescription = null,
+                        )
+                    }
+                    Row {
+                        if (remainingTime > 0) {
+                            TextButton(onClick = {
+                                onTimeSelect(0)
+                                onDismissRequest()
+                            }) {
+                                Text(stringResource(MR.strings.timer_cancel_timer))
+                            }
+                        }
+                        Spacer(modifier = Modifier.width(8.dp))
+                        TextButton(
+                            onClick = {
+                                onTimeSelect(state.hour * 3600 + state.minute * 60)
+                                onDismissRequest()
+                            },
+                        ) {
+                            Text(stringResource(MR.strings.action_ok))
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/PlaybackSpeedSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/PlaybackSpeedSheet.kt
new file mode 100644
index 0000000000..981d1e5ee1
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/PlaybackSpeedSheet.kt
@@ -0,0 +1,183 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.LazyRow
+import androidx.compose.foundation.lazy.items
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Add
+import androidx.compose.material.icons.filled.Close
+import androidx.compose.material.icons.filled.RestartAlt
+import androidx.compose.material3.Button
+import androidx.compose.material3.FilledIconButton
+import androidx.compose.material3.FilledTonalIconButton
+import androidx.compose.material3.Icon
+import androidx.compose.material3.InputChip
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import eu.kanade.presentation.player.components.PlayerSheet
+import eu.kanade.presentation.player.components.SliderItem
+import eu.kanade.presentation.player.components.SwitchPreference
+import eu.kanade.tachiyomi.ui.player.settings.AudioPreferences
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import `is`.xyz.mpv.MPVLib
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+import tachiyomi.presentation.core.util.collectAsState
+import uy.kohesive.injekt.Injekt
+import uy.kohesive.injekt.api.get
+import kotlin.math.pow
+import kotlin.math.roundToInt
+
+@Composable
+fun PlaybackSpeedSheet(
+    speed: Float,
+    onSpeedChange: (Float) -> Unit,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    val preferences = remember { Injekt.get<PlayerPreferences>() }
+    val audioPreferences = remember { Injekt.get<AudioPreferences>() }
+    PlayerSheet(onDismissRequest = onDismissRequest) {
+        Column(
+            modifier
+                .verticalScroll(rememberScrollState())
+                .padding(vertical = MaterialTheme.padding.medium),
+        ) {
+            SliderItem(
+                label = stringResource(MR.strings.player_sheets_speed_slider_label),
+                value = speed,
+                valueText = stringResource(MR.strings.player_speed, speed),
+                onChange = onSpeedChange,
+                max = 6f,
+                min = 0.01f,
+            )
+            val playbackSpeedPresets by preferences.speedPresets().collectAsState()
+            Row(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .padding(horizontal = MaterialTheme.padding.medium),
+                verticalAlignment = Alignment.CenterVertically,
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
+            ) {
+                FilledTonalIconButton(onClick = {
+                    preferences.speedPresets().delete()
+                }) {
+                    Icon(Icons.Default.RestartAlt, null)
+                }
+                LazyRow(
+                    modifier = Modifier
+                        .weight(1f),
+                    horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
+                ) {
+                    items(
+                        playbackSpeedPresets.map { it.toFloat() }.sorted(),
+                        key = { it },
+                    ) {
+                        InputChip(
+                            selected = speed == it,
+                            onClick = { onSpeedChange(it) },
+                            label = { Text(stringResource(MR.strings.player_speed, it)) },
+                            modifier = Modifier
+                                .animateItem(),
+                            trailingIcon = {
+                                Icon(
+                                    Icons.Default.Close,
+                                    null,
+                                    modifier = Modifier
+                                        .clickable {
+                                            preferences.speedPresets().set(
+                                                playbackSpeedPresets.minus(it.toFixed(2).toString()),
+                                            )
+                                        },
+                                )
+                            },
+                        )
+                    }
+                }
+                FilledTonalIconButton(
+                    onClick = {
+                        preferences.speedPresets().set(playbackSpeedPresets.plus(speed.toFixed(2).toString()))
+                    },
+                ) {
+                    Icon(Icons.Default.Add, null)
+                }
+            }
+            val pitchCorrection by audioPreferences.enablePitchCorrection().collectAsState()
+            SwitchPreference(
+                value = pitchCorrection,
+                onValueChange = {
+                    audioPreferences.enablePitchCorrection().set(it)
+                    MPVLib.setPropertyBoolean("audio-pitch-correction", it)
+                },
+                content = {
+                    Column(
+                        modifier = Modifier.weight(1f),
+                    ) {
+                        Text(text = stringResource(MR.strings.pref_audio_pitch_correction_title))
+                        Text(
+                            text = stringResource(MR.strings.pref_audio_pitch_correction_summary),
+                            style = MaterialTheme.typography.bodyMedium,
+                        )
+                    }
+                },
+                modifier = Modifier
+                    .padding(MaterialTheme.padding.medium),
+            )
+            Row(
+                modifier = Modifier
+                    .padding(horizontal = MaterialTheme.padding.medium),
+                horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
+            ) {
+                Button(
+                    modifier = Modifier.weight(1f),
+                    onClick = { preferences.playerSpeed().set(speed) },
+                ) {
+                    Text(text = stringResource(MR.strings.player_sheets_speed_make_default))
+                }
+                FilledIconButton(
+                    onClick = {
+                        preferences.playerSpeed().delete()
+                        onSpeedChange(1f)
+                    },
+                ) {
+                    Icon(imageVector = Icons.Default.RestartAlt, contentDescription = null)
+                }
+            }
+        }
+    }
+}
+
+fun Float.toFixed(precision: Int = 1): Float {
+    val factor = 10.0f.pow(precision)
+    return (this * factor).roundToInt() / factor
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/QualitySheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/QualitySheet.kt
new file mode 100644
index 0000000000..ff2b5b4a76
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/QualitySheet.kt
@@ -0,0 +1,77 @@
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextOverflow
+import eu.kanade.tachiyomi.animesource.model.Video
+import kotlinx.collections.immutable.ImmutableList
+import tachiyomi.presentation.core.components.material.padding
+
+@Composable
+fun QualitySheet(
+    videoList: ImmutableList<Video>,
+    currentVideo: Video?,
+    onClick: (Video) -> Unit,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    var shouldDismissSheet by remember { mutableStateOf(false) }
+
+    GenericTracksSheet(
+        videoList,
+        track = {
+            VideoTrack(
+                it,
+                selected = currentVideo == it,
+                onClick = {
+                    shouldDismissSheet = true
+                    onClick(it)
+                },
+            )
+        },
+        onDismissRequest = {
+            shouldDismissSheet = false
+            onDismissRequest()
+        },
+        dismissEvent = shouldDismissSheet,
+        modifier = modifier
+            .padding(vertical = MaterialTheme.padding.medium),
+    )
+}
+
+@Composable
+fun VideoTrack(
+    video: Video,
+    selected: Boolean,
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Text(
+        text = video.quality,
+        fontStyle = if (selected) FontStyle.Italic else FontStyle.Normal,
+        fontWeight = if (selected) FontWeight.ExtraBold else FontWeight.Normal,
+        style = MaterialTheme.typography.bodyMedium,
+        color = if (selected) MaterialTheme.colorScheme.primary else Color.Unspecified,
+        maxLines = 1,
+        overflow = TextOverflow.Ellipsis,
+        modifier = modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
+            .padding(
+                vertical = MaterialTheme.padding.small,
+                horizontal = MaterialTheme.padding.medium,
+            ),
+    )
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/ScreenshotOptionsSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/ScreenshotSheet.kt
similarity index 66%
rename from app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/ScreenshotOptionsSheet.kt
rename to app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/ScreenshotSheet.kt
index ea01eafbfc..a0d35c0b1a 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/ScreenshotOptionsSheet.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/ScreenshotSheet.kt
@@ -1,8 +1,7 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
 
 import androidx.compose.foundation.layout.Arrangement
 import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.PaddingValues
 import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.padding
@@ -11,36 +10,42 @@ import androidx.compose.material.icons.outlined.Photo
 import androidx.compose.material.icons.outlined.Save
 import androidx.compose.material.icons.outlined.Share
 import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.Modifier
-import eu.kanade.presentation.components.AdaptiveSheet
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import eu.kanade.tachiyomi.ui.player.settings.dialogs.PlayerDialog
+import eu.kanade.presentation.player.components.PlayerSheet
+import eu.kanade.presentation.player.components.SwitchPreference
+import eu.kanade.tachiyomi.ui.player.controls.components.dialogs.PlayerDialog
 import tachiyomi.i18n.MR
 import tachiyomi.presentation.core.components.ActionButton
 import tachiyomi.presentation.core.components.material.padding
 import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
 import java.io.InputStream
 
 @Composable
-fun ScreenshotOptionsSheet(
-    screenModel: PlayerSettingsScreenModel,
+fun ScreenshotSheet(
+    hasSubTracks: Boolean,
+    showSubtitles: Boolean,
+    onToggleShowSubtitles: (Boolean) -> Unit,
+
     cachePath: String,
     onSetAsCover: (() -> InputStream) -> Unit,
     onShare: (() -> InputStream) -> Unit,
     onSave: (() -> InputStream) -> Unit,
+    takeScreenshot: (String, Boolean) -> InputStream?,
+
     onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
 ) {
     var showSetCoverDialog by remember { mutableStateOf(false) }
-    val showSubtitles by remember { mutableStateOf(screenModel.preferences.screenshotSubtitles()) }
 
-    AdaptiveSheet(
-        onDismissRequest = onDismissRequest,
+    PlayerSheet(
+        onDismissRequest,
+        modifier,
     ) {
         Column {
             Row(
@@ -58,7 +63,7 @@ fun ScreenshotOptionsSheet(
                     title = stringResource(MR.strings.action_share),
                     icon = Icons.Outlined.Share,
                     onClick = {
-                        onShare { screenModel.takeScreenshot(cachePath, showSubtitles.get())!! }
+                        onShare { takeScreenshot(cachePath, showSubtitles)!! }
                         onDismissRequest()
                     },
                 )
@@ -67,19 +72,26 @@ fun ScreenshotOptionsSheet(
                     title = stringResource(MR.strings.action_save),
                     icon = Icons.Outlined.Save,
                     onClick = {
-                        onSave { screenModel.takeScreenshot(cachePath, showSubtitles.get())!! }
+                        onSave { takeScreenshot(cachePath, showSubtitles)!! }
                         onDismissRequest()
                     },
                 )
             }
 
-            if (screenModel.hasSubTracks) {
-                screenModel.ToggleableRow(
-                    textRes = MR.strings.screenshot_show_subs,
-                    paddingValues = PaddingValues(MaterialTheme.padding.medium),
-                    isChecked = showSubtitles.collectAsState().value,
-                    onClick = { screenModel.togglePreference { showSubtitles } },
-                    coloredText = true,
+            if (hasSubTracks) {
+                SwitchPreference(
+                    value = showSubtitles,
+                    onValueChange = onToggleShowSubtitles,
+                    modifier = Modifier.padding(
+                        MaterialTheme.padding.medium,
+                    ),
+                    content = {
+                        Text(
+                            text = stringResource(MR.strings.screenshot_show_subs),
+                            style = MaterialTheme.typography.labelLarge,
+                            color = MaterialTheme.colorScheme.primary,
+                        )
+                    },
                 )
             }
         }
@@ -91,9 +103,9 @@ fun ScreenshotOptionsSheet(
             modifier = Modifier.fillMaxWidth(fraction = 0.6F).padding(MaterialTheme.padding.medium),
             onConfirmRequest = {
                 onSetAsCover {
-                    screenModel.takeScreenshot(
+                    takeScreenshot(
                         cachePath,
-                        showSubtitles.get(),
+                        showSubtitles,
                     )!!
                 }
             },
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/SubtitleTracksSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/SubtitleTracksSheet.kt
new file mode 100644
index 0000000000..37edebb967
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/controls/components/sheets/SubtitleTracksSheet.kt
@@ -0,0 +1,130 @@
+/*
+ * Copyright 2024 Abdallah Mehiz
+ * https://github.com/abdallahmehiz/mpvKt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package eu.kanade.tachiyomi.ui.player.controls.components.sheets
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.MoreTime
+import androidx.compose.material.icons.filled.Palette
+import androidx.compose.material.icons.outlined.Info
+import androidx.compose.material3.Checkbox
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.font.FontStyle
+import androidx.compose.ui.text.font.FontWeight
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel.VideoTrack
+import kotlinx.collections.immutable.ImmutableList
+import tachiyomi.i18n.MR
+import tachiyomi.presentation.core.components.material.padding
+import tachiyomi.presentation.core.i18n.stringResource
+
+@Composable
+fun SubtitlesSheet(
+    tracks: ImmutableList<VideoTrack>,
+    selectedTracks: ImmutableList<Int>,
+    onSelect: (Int) -> Unit,
+    onAddSubtitle: () -> Unit,
+    onOpenSubtitleSettings: () -> Unit,
+    onOpenSubtitleDelay: () -> Unit,
+    onDismissRequest: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    GenericTracksSheet(
+        tracks,
+        onDismissRequest = onDismissRequest,
+        header = {
+            AddTrackRow(
+                stringResource(MR.strings.player_sheets_add_ext_sub),
+                onAddSubtitle,
+                actions = {
+                    IconButton(onClick = onOpenSubtitleSettings) {
+                        Icon(Icons.Default.Palette, null)
+                    }
+                    IconButton(onClick = onOpenSubtitleDelay) {
+                        Icon(Icons.Default.MoreTime, null)
+                    }
+                },
+            )
+        },
+        track = { track ->
+            SubtitleTrackRow(
+                title = getTrackTitle(track),
+                selected = selectedTracks.indexOf(track.id),
+                onClick = { onSelect(track.id) },
+            )
+        },
+        footer = {
+            Column(
+                modifier = modifier
+                    .padding(MaterialTheme.padding.medium)
+                    .fillMaxWidth(),
+                verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
+                horizontalAlignment = Alignment.Start,
+            ) {
+                Icon(Icons.Outlined.Info, null)
+                Text(stringResource(MR.strings.player_sheets_subtitles_footer_secondary_sid_no_styles))
+            }
+        },
+        modifier = modifier,
+    )
+}
+
+@Composable
+fun SubtitleTrackRow(
+    title: String,
+    selected: Int, // -1 unselected, otherwise return 0 and 1 for the selected indices
+    onClick: () -> Unit,
+    modifier: Modifier = Modifier,
+) {
+    Row(
+        modifier = modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
+            .padding(start = MaterialTheme.padding.small, end = MaterialTheme.padding.medium),
+        verticalAlignment = Alignment.CenterVertically,
+    ) {
+        Checkbox(
+            selected > -1,
+            onCheckedChange = { _ -> onClick() },
+        )
+        Text(
+            title,
+            fontStyle = if (selected > -1) FontStyle.Italic else FontStyle.Normal,
+            fontWeight = if (selected > -1) FontWeight.ExtraBold else FontWeight.Normal,
+        )
+        Spacer(modifier = Modifier.weight(1f))
+        if (selected != -1) {
+            Text(
+                "#${selected + 1}",
+                fontStyle = if (selected > -1) FontStyle.Italic else FontStyle.Normal,
+                fontWeight = if (selected > -1) FontWeight.ExtraBold else FontWeight.Normal,
+            )
+        }
+    }
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/AdvancedPlayerPreferences.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/AdvancedPlayerPreferences.kt
new file mode 100644
index 0000000000..f2bf48cfe8
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/AdvancedPlayerPreferences.kt
@@ -0,0 +1,15 @@
+package eu.kanade.tachiyomi.ui.player.settings
+
+import tachiyomi.core.common.preference.PreferenceStore
+
+class AdvancedPlayerPreferences(
+    private val preferenceStore: PreferenceStore,
+) {
+    fun mpvScripts() = preferenceStore.getBoolean("mpv_scripts", false)
+    fun mpvConf() = preferenceStore.getString("pref_mpv_conf", "")
+    fun mpvInput() = preferenceStore.getString("pref_mpv_input", "")
+
+    // Non-preference
+
+    fun playerStatisticsPage() = preferenceStore.getInt("pref_player_statistics_page", 0)
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/AudioPreferences.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/AudioPreferences.kt
new file mode 100644
index 0000000000..00e77057f9
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/AudioPreferences.kt
@@ -0,0 +1,28 @@
+package eu.kanade.tachiyomi.ui.player.settings
+
+import dev.icerock.moko.resources.StringResource
+import tachiyomi.core.common.preference.PreferenceStore
+import tachiyomi.core.common.preference.getEnum
+import tachiyomi.i18n.MR
+
+class AudioPreferences(
+    private val preferenceStore: PreferenceStore,
+) {
+    fun rememberAudioDelay() = preferenceStore.getBoolean("pref_remember_audio_delay", false)
+    fun preferredAudioLanguages() = preferenceStore.getString("pref_audio_lang", "")
+    fun enablePitchCorrection() = preferenceStore.getBoolean("pref_audio_pitch_correction", true)
+    fun audioChannels() = preferenceStore.getEnum("pref_audio_config", AudioChannels.AutoSafe)
+    fun volumeBoostCap() = preferenceStore.getInt("pref_audio_volume_boost_cap", 30)
+
+    // Non-preferences
+
+    fun audioDelay() = preferenceStore.getInt("pref_audio_delay", 0)
+}
+
+enum class AudioChannels(val titleRes: StringResource, val property: String, val value: String) {
+    Auto(MR.strings.pref_player_audio_channels_auto, "audio-channels", "auto-safe"),
+    AutoSafe(MR.strings.pref_player_audio_channels_auto_safe, "audio-channels", "auto"),
+    Mono(MR.strings.pref_player_audio_channels_mono, "audio-channels", "mono"),
+    Stereo(MR.strings.pref_player_audio_channels_stereo, "audio-channels", "stereo"),
+    ReverseStereo(MR.strings.pref_player_audio_channels_reverse_stereo, "af", "pan=[stereo|c0=c1|c1=c0]"),
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/DecoderPreferences.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/DecoderPreferences.kt
new file mode 100644
index 0000000000..9313fe1cd6
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/DecoderPreferences.kt
@@ -0,0 +1,22 @@
+package eu.kanade.tachiyomi.ui.player.settings
+
+import eu.kanade.tachiyomi.ui.player.Debanding
+import tachiyomi.core.common.preference.PreferenceStore
+import tachiyomi.core.common.preference.getEnum
+
+class DecoderPreferences(
+    private val preferenceStore: PreferenceStore,
+) {
+    fun tryHWDecoding() = preferenceStore.getBoolean("pref_try_hwdec", true)
+    fun gpuNext() = preferenceStore.getBoolean("pref_gpu_next", false)
+    fun videoDebanding() = preferenceStore.getEnum("pref_video_debanding", Debanding.None)
+    fun useYUV420P() = preferenceStore.getBoolean("use_yuv420p", true)
+
+    // Non-preferences
+
+    fun brightnessFilter() = preferenceStore.getInt("pref_player_filter_brightness")
+    fun saturationFilter() = preferenceStore.getInt("pref_player_filter_saturation")
+    fun contrastFilter() = preferenceStore.getInt("pref_player_filter_contrast")
+    fun gammaFilter() = preferenceStore.getInt("pref_player_filter_gamma")
+    fun hueFilter() = preferenceStore.getInt("pref_player_filter_hue")
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/GesturePreferences.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/GesturePreferences.kt
new file mode 100644
index 0000000000..b3ffaaf0fc
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/GesturePreferences.kt
@@ -0,0 +1,37 @@
+package eu.kanade.tachiyomi.ui.player.settings
+
+import eu.kanade.tachiyomi.ui.player.SingleActionGesture
+import tachiyomi.core.common.preference.PreferenceStore
+import tachiyomi.core.common.preference.getEnum
+
+class GesturePreferences(
+    private val preferenceStore: PreferenceStore,
+) {
+    // Seeking
+
+    fun gestureHorizontalSeek() = preferenceStore.getBoolean("pref_gesture_horizontal_seek", true)
+    fun showSeekBar() = preferenceStore.getBoolean("pref_show_seekbar", false)
+    fun defaultIntroLength() = preferenceStore.getInt("pref_default_intro_length", 85)
+    fun skipLengthPreference() = preferenceStore.getInt("pref_skip_length_preference", 10)
+    fun playerSmoothSeek() = preferenceStore.getBoolean("pref_player_smooth_seek", false)
+
+    fun aniSkipEnabled() = preferenceStore.getBoolean("pref_enable_ani_skip", false)
+    fun autoSkipAniSkip() = preferenceStore.getBoolean("pref_enable_auto_skip_ani_skip", false)
+    fun enableNetflixStyleAniSkip() = preferenceStore.getBoolean(
+        "pref_enable_netflixStyle_aniskip",
+        false,
+    )
+    fun waitingTimeAniSkip() = preferenceStore.getInt("pref_waiting_time_aniskip", 5)
+
+    // Double tap
+
+    fun leftDoubleTapGesture() = preferenceStore.getEnum("pref_left_double_tap", SingleActionGesture.Seek)
+    fun centerDoubleTapGesture() = preferenceStore.getEnum("pref_center_double_tap", SingleActionGesture.PlayPause)
+    fun rightDoubleTapGesture() = preferenceStore.getEnum("pref_right_double_tap", SingleActionGesture.Seek)
+
+    // Media controls
+
+    fun mediaPreviousGesture() = preferenceStore.getEnum("pref_media_previous", SingleActionGesture.Switch)
+    fun mediaPlayPauseGesture() = preferenceStore.getEnum("pref_media_playpause", SingleActionGesture.PlayPause)
+    fun mediaNextGesture() = preferenceStore.getEnum("pref_media_next", SingleActionGesture.Switch)
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerPreferences.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerPreferences.kt
index 25d61bb884..dbd90eb2eb 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerPreferences.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerPreferences.kt
@@ -1,30 +1,30 @@
 package eu.kanade.tachiyomi.ui.player.settings
 
-import eu.kanade.tachiyomi.ui.player.viewer.AspectState
-import eu.kanade.tachiyomi.ui.player.viewer.AudioChannels
-import eu.kanade.tachiyomi.ui.player.viewer.HwDecState
-import eu.kanade.tachiyomi.ui.player.viewer.InvertedPlayback
-import eu.kanade.tachiyomi.ui.player.viewer.SingleActionGesture
-import eu.kanade.tachiyomi.ui.player.viewer.VideoDebanding
+import eu.kanade.tachiyomi.ui.player.PlayerOrientation
+import eu.kanade.tachiyomi.ui.player.VideoAspect
 import tachiyomi.core.common.preference.PreferenceStore
 import tachiyomi.core.common.preference.getEnum
 
 class PlayerPreferences(
     private val preferenceStore: PreferenceStore,
 ) {
-    // ==== Internal player ====
-
     fun preserveWatchingPosition() = preferenceStore.getBoolean(
         "pref_preserve_watching_position",
         false,
     )
     fun progressPreference() = preferenceStore.getFloat("pref_progress_preference", 0.85F)
+    fun defaultPlayerOrientationType() = preferenceStore.getEnum(
+        "pref_default_player_orientation_type_key",
+        PlayerOrientation.SensorLandscape,
+    )
 
-    fun playerFullscreen() = preferenceStore.getBoolean("player_fullscreen", true)
-    fun hideControls() = preferenceStore.getBoolean("player_hide_controls", false)
-
-    // Internal player - Volume and brightness
+    // Controls
 
+    fun allowGestures() = preferenceStore.getBoolean("pref_allow_gestures_in_panels", false)
+    fun displayVolPer() = preferenceStore.getBoolean("pref_display_vol_as_per", true)
+    fun swapVolumeBrightness() = preferenceStore.getBoolean("pref_swap_volume_and_brightness", false)
+    fun showLoadingCircle() = preferenceStore.getBoolean("pref_show_loading", true)
+    fun showCurrentChapter() = preferenceStore.getBoolean("pref_show_current_chapter", true)
     fun gestureVolumeBrightness() = preferenceStore.getBoolean(
         "pref_gesture_volume_brightness",
         true,
@@ -34,33 +34,23 @@ class PlayerPreferences(
     fun rememberPlayerVolume() = preferenceStore.getBoolean("pref_remember_volume", false)
     fun playerVolumeValue() = preferenceStore.getFloat("player_volume_value", -1.0F)
 
-    // Internal player - Orientation
+    // Display
 
-    fun defaultPlayerOrientationType() = preferenceStore.getInt(
-        "pref_default_player_orientation_type_key",
-        10,
-    )
-    fun adjustOrientationVideoDimensions() = preferenceStore.getBoolean(
-        "pref_adjust_orientation_video_dimensions",
-        true,
-    )
-    fun defaultPlayerOrientationPortrait() = preferenceStore.getInt(
-        "pref_default_player_orientation_portrait_key",
-        7,
-    )
-    fun defaultPlayerOrientationLandscape() = preferenceStore.getInt(
-        "pref_default_player_orientation_landscape_key",
-        6,
-    )
+    fun playerFullscreen() = preferenceStore.getBoolean("player_fullscreen", true)
+    fun hideControls() = preferenceStore.getBoolean("player_hide_controls", false)
+    fun showSystemStatusBar() = preferenceStore.getBoolean("pref_show_system_status_bar", false)
+    fun reduceMotion() = preferenceStore.getBoolean("pref_reduce_motion", false)
+    fun playerTimeToDisappear() = preferenceStore.getInt("pref_player_time_to_disappear", 4000)
+    fun panelOpacity() = preferenceStore.getInt("pref_panel_opacity", 60)
 
-    // Internal player - PiP
+    // PiP
 
     fun enablePip() = preferenceStore.getBoolean("pref_enable_pip", true)
     fun pipEpisodeToasts() = preferenceStore.getBoolean("pref_pip_episode_toasts", true)
     fun pipOnExit() = preferenceStore.getBoolean("pref_pip_on_exit", false)
     fun pipReplaceWithPrevious() = preferenceStore.getBoolean("pip_replace_with_previous", false)
 
-    // Internal player - External player
+    // External player
 
     fun alwaysUseExternalPlayer() = preferenceStore.getBoolean(
         "pref_always_use_external_player",
@@ -68,103 +58,17 @@ class PlayerPreferences(
     )
     fun externalPlayerPreference() = preferenceStore.getString("external_player_preference", "")
 
-    // ==== Gestures ====
-    // Gestures - Seeking
+    // Non-preferences
 
-    fun skipLengthPreference() = preferenceStore.getInt("pref_skip_length_preference", 10)
-    fun gestureHorizontalSeek() = preferenceStore.getBoolean("pref_gesture_horizontal_seek", true)
-    fun defaultIntroLength() = preferenceStore.getInt("pref_default_intro_length", 85)
-    fun playerSmoothSeek() = preferenceStore.getBoolean("pref_player_smooth_seek", false)
-    fun mediaChapterSeek() = preferenceStore.getBoolean("pref_media_control_chapter_seeking", false)
-
-    fun aniSkipEnabled() = preferenceStore.getBoolean("pref_enable_ani_skip", false)
-    fun autoSkipAniSkip() = preferenceStore.getBoolean("pref_enable_auto_skip_ani_skip", false)
-    fun enableNetflixStyleAniSkip() = preferenceStore.getBoolean(
-        "pref_enable_netflixStyle_aniskip",
-        false,
+    fun playerSpeed() = preferenceStore.getFloat("pref_player_speed", 1f)
+    fun speedPresets() = preferenceStore.getStringSet(
+        "default_speed_presets",
+        setOf("0.25", "0.5", "0.75", "1.0", "1.25", "1.5", "1.75", "2.0", "2.5", "3.0", "3.5", "4.0"),
     )
-    fun waitingTimeAniSkip() = preferenceStore.getInt("pref_waiting_time_aniskip", 5)
-
-    // Gestures - Double tap
-
-    fun leftDoubleTapGesture() = preferenceStore.getEnum("pref_left_double_tap", SingleActionGesture.Seek)
-    fun centerDoubleTapGesture() = preferenceStore.getEnum("pref_center_double_tap", SingleActionGesture.PlayPause)
-    fun rightDoubleTapGesture() = preferenceStore.getEnum("pref_right_double_tap", SingleActionGesture.Seek)
-
-    // Gestures - Media controls
-
-    fun mediaPreviousGesture() = preferenceStore.getEnum("pref_media_previous", SingleActionGesture.Switch)
-    fun mediaPlayPauseGesture() = preferenceStore.getEnum("pref_media_playpause", SingleActionGesture.PlayPause)
-    fun mediaNextGesture() = preferenceStore.getEnum("pref_media_next", SingleActionGesture.Switch)
-
-    // ==== Decoder ====
-
-    fun tryHWDecoding() = preferenceStore.getBoolean("pref_try_hwdec", true)
-    fun gpuNext() = preferenceStore.getBoolean("pref_gpu_next", false)
-    fun videoDebanding() = preferenceStore.getEnum("pref_video_debanding", VideoDebanding.NONE)
-    fun useYUV420P() = preferenceStore.getBoolean("use_yuv420p", true)
+    fun invertDuration() = preferenceStore.getBoolean("invert_duration", false)
+    fun aspectState() = preferenceStore.getEnum("pref_player_aspect_state", VideoAspect.Fit)
 
-    // ==== Subtitle ====
-
-    fun preferredSubLanguages() = preferenceStore.getString("pref_subtitle_lang", "")
-    fun subtitleWhitelist() = preferenceStore.getString("pref_subtitle_whitelist", "")
-    fun subtitleBlacklist() = preferenceStore.getString("pref_subtitle_blacklist", "")
-
-    // ==== Audio ====
-
-    fun preferredAudioLanguages() = preferenceStore.getString("pref_audio_lang", "")
-    fun enablePitchCorrection() = preferenceStore.getBoolean("pref_audio_pitch_correction", true)
-    fun audioChannels() = preferenceStore.getEnum("pref_audio_config", AudioChannels.AutoSafe)
-    fun volumeBoostCap() = preferenceStore.getInt("pref_audio_volume_boost_cap", 30)
-
-    // ==== Advanced ====
-
-    fun mpvScripts() = preferenceStore.getBoolean("mpv_scripts", false)
-    fun mpvConf() = preferenceStore.getString("pref_mpv_conf", "")
-    fun mpvInput() = preferenceStore.getString("pref_mpv_input", "")
-
-    // ==== Non-preferences ====
+    // Old
 
     fun autoplayEnabled() = preferenceStore.getBoolean("pref_auto_play_enabled", false)
-
-    fun invertedPlayback() = preferenceStore.getEnum("pref_inverted_playback", InvertedPlayback.NONE)
-
-    fun subSelectConf() = preferenceStore.getString("pref_sub_select_conf", "")
-
-    fun playerSpeed() = preferenceStore.getFloat("pref_player_speed", 1F)
-
-    fun aspectState() = preferenceStore.getEnum("pref_player_aspect_state", AspectState.FIT)
-
-    fun screenshotSubtitles() = preferenceStore.getBoolean("pref_screenshot_subtitles", false)
-
-    fun playerStatisticsPage() = preferenceStore.getInt("pref_player_statistics_page", 0)
-
-    fun hardwareDecoding() = preferenceStore.getEnum("pref_hardware_decoding", HwDecState.defaultHwDec)
-
-    fun rememberAudioDelay() = preferenceStore.getBoolean("pref_remember_audio_delay", false)
-    fun audioDelay() = preferenceStore.getInt("pref_audio_delay", 0)
-
-    fun rememberSubtitlesDelay() = preferenceStore.getBoolean(
-        "pref_remember_subtitles_delay",
-        false,
-    )
-    fun subtitlesDelay() = preferenceStore.getInt("pref_subtitles_delay", 0)
-
-    fun overrideSubsASS() = preferenceStore.getBoolean("pref_override_subtitles_ass", false)
-
-    fun subtitleFont() = preferenceStore.getString("pref_subtitle_font", "Sans Serif")
-
-    fun subtitleFontSize() = preferenceStore.getInt("pref_subtitles_font_size", 55)
-    fun boldSubtitles() = preferenceStore.getBoolean("pref_bold_subtitles", false)
-    fun italicSubtitles() = preferenceStore.getBoolean("pref_italic_subtitles", false)
-
-    fun textColorSubtitles() = preferenceStore.getInt("pref_text_color_subtitles", -1)
-    fun borderColorSubtitles() = preferenceStore.getInt("pref_border_color_subtitles", -16777216)
-    fun backgroundColorSubtitles() = preferenceStore.getInt("pref_background_color_subtitles", 0)
-
-    fun brightnessFilter() = preferenceStore.getInt("pref_player_filter_brightness")
-    fun saturationFilter() = preferenceStore.getInt("pref_player_filter_saturation")
-    fun contrastFilter() = preferenceStore.getInt("pref_player_filter_contrast")
-    fun gammaFilter() = preferenceStore.getInt("pref_player_filter_gamma")
-    fun hueFilter() = preferenceStore.getInt("pref_player_filter_hue")
 }
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerSettingsScreenModel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerSettingsScreenModel.kt
deleted file mode 100644
index 81303891de..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/PlayerSettingsScreenModel.kt
+++ /dev/null
@@ -1,182 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings
-
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.PaddingValues
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.size
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.outlined.Info
-import androidx.compose.material3.Icon
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Switch
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.unit.dp
-import cafe.adriel.voyager.core.model.ScreenModel
-import dev.icerock.moko.resources.StringResource
-import eu.kanade.tachiyomi.ui.player.settings.dialogs.PlayerDialog
-import `is`.xyz.mpv.MPVLib
-import tachiyomi.core.common.preference.Preference
-import tachiyomi.core.common.preference.toggle
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.material.TextButton
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
-import uy.kohesive.injekt.Injekt
-import uy.kohesive.injekt.api.get
-import java.io.File
-import java.io.InputStream
-
-val sheetDialogPadding = PaddingValues(
-    vertical = MaterialTheme.padding.small,
-    horizontal = MaterialTheme.padding.medium,
-)
-
-class PlayerSettingsScreenModel(
-    val preferences: PlayerPreferences = Injekt.get(),
-    val hasSubTracks: Boolean = true,
-) : ScreenModel {
-
-    fun togglePreference(preference: (PlayerPreferences) -> Preference<Boolean>) =
-        preference(preferences).toggle()
-
-    @Composable
-    fun ToggleableRow(
-        textRes: StringResource,
-        paddingValues: PaddingValues = sheetDialogPadding,
-        isChecked: Boolean,
-        onClick: () -> Unit,
-        coloredText: Boolean = false,
-    ) {
-        Row(
-            modifier = Modifier
-                .fillMaxWidth()
-                .clickable(onClick = onClick)
-                .padding(paddingValues),
-            horizontalArrangement = Arrangement.SpaceBetween,
-            verticalAlignment = Alignment.CenterVertically,
-        ) {
-            Text(
-                text = stringResource(textRes),
-                color = if (coloredText) MaterialTheme.colorScheme.primary else Color.Unspecified,
-                style = MaterialTheme.typography.titleSmall,
-            )
-            Switch(
-                checked = isChecked,
-                onCheckedChange = null,
-            )
-        }
-    }
-
-    @Composable
-    fun OverrideSubtitlesSwitch(
-        content: @Composable () -> Unit,
-    ) {
-        val overrideSubsASS by preferences.overrideSubsASS().collectAsState()
-
-        val updateOverrideASS = {
-            val newOverrideValue = togglePreference(PlayerPreferences::overrideSubsASS)
-            val overrideType = if (newOverrideValue) "force" else "scale"
-            MPVLib.setPropertyString("sub-ass-override", overrideType)
-        }
-
-        var showDialog by rememberSaveable { mutableStateOf(false) }
-        if (showDialog) {
-            ResetSubtitlesDialog(onDismissRequest = { showDialog = false })
-        }
-
-        Column(
-            horizontalAlignment = Alignment.CenterHorizontally,
-        ) {
-            NoSubtitlesWarning()
-
-            content()
-
-            ToggleableRow(
-                textRes = MR.strings.player_override_ass_subtitles,
-                isChecked = overrideSubsASS,
-                onClick = updateOverrideASS,
-            )
-
-            TextButton(onClick = { showDialog = true }) {
-                Text(stringResource(MR.strings.action_reset))
-            }
-        }
-    }
-
-    @Composable
-    private fun ResetSubtitlesDialog(
-        onDismissRequest: () -> Unit,
-    ) {
-        val resetSubtitles = {
-            with(preferences) {
-                overrideSubsASS().delete()
-
-                subtitleFontSize().delete()
-                boldSubtitles().delete()
-                italicSubtitles().delete()
-
-                textColorSubtitles().delete()
-                borderColorSubtitles().delete()
-                backgroundColorSubtitles().delete()
-            }
-        }
-
-        PlayerDialog(
-            titleRes = MR.strings.player_reset_subtitles,
-            modifier = Modifier
-                .fillMaxWidth(fraction = 0.6F)
-                .padding(MaterialTheme.padding.medium),
-            onConfirmRequest = resetSubtitles,
-            onDismissRequest = onDismissRequest,
-        )
-    }
-
-    @Composable
-    fun NoSubtitlesWarning() {
-        if (!hasSubTracks) {
-            Row(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(horizontal = MaterialTheme.padding.medium),
-                verticalAlignment = Alignment.CenterVertically,
-            ) {
-                Icon(
-                    imageVector = Icons.Outlined.Info,
-                    contentDescription = null,
-                    modifier = Modifier.size(14.dp),
-                )
-                Text(
-                    text = stringResource(MR.strings.player_subtitle_empty_warning),
-                    style = MaterialTheme.typography.labelMedium,
-                    maxLines = 1,
-                )
-            }
-        }
-    }
-
-    fun takeScreenshot(cachePath: String, showSubtitles: Boolean): InputStream? {
-        val filename = cachePath + "/${System.currentTimeMillis()}_mpv_screenshot_tmp.png"
-        val subtitleFlag = if (showSubtitles) "subtitles" else "video"
-
-        MPVLib.command(arrayOf("screenshot-to-file", filename, subtitleFlag))
-        val tempFile = File(filename).takeIf { it.exists() } ?: return null
-        val newFile = File("$cachePath/mpv_screenshot.png")
-
-        newFile.delete()
-        tempFile.renameTo(newFile)
-        return newFile.takeIf { it.exists() }?.inputStream()
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/SubtitlePreferences.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/SubtitlePreferences.kt
new file mode 100644
index 0000000000..5a855ee3a3
--- /dev/null
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/SubtitlePreferences.kt
@@ -0,0 +1,69 @@
+package eu.kanade.tachiyomi.ui.player.settings
+
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.FormatAlignLeft
+import androidx.compose.material.icons.automirrored.filled.FormatAlignRight
+import androidx.compose.material.icons.filled.FormatAlignCenter
+import androidx.compose.material.icons.filled.FormatAlignJustify
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.toArgb
+import androidx.compose.ui.graphics.vector.ImageVector
+import eu.kanade.tachiyomi.ui.player.controls.components.panels.SubtitlesBorderStyle
+import tachiyomi.core.common.preference.PreferenceStore
+import tachiyomi.core.common.preference.getEnum
+
+class SubtitlePreferences(
+    private val preferenceStore: PreferenceStore,
+) {
+    fun rememberSubtitlesDelay() = preferenceStore.getBoolean(
+        "pref_remember_subtitles_delay",
+        false,
+    )
+
+    fun preferredSubLanguages() = preferenceStore.getString("pref_subtitle_lang", "")
+    fun subtitleWhitelist() = preferenceStore.getString("pref_subtitle_whitelist", "")
+    fun subtitleBlacklist() = preferenceStore.getString("pref_subtitle_blacklist", "")
+
+    // Non-preferences
+
+    fun screenshotSubtitles() = preferenceStore.getBoolean("pref_screenshot_subtitles", false)
+
+    fun subtitleFont() = preferenceStore.getString("pref_subtitle_font", "Sans Serif")
+    fun subtitleFontSize() = preferenceStore.getInt("pref_subtitles_font_size", 55)
+    fun subtitleFontScale() = preferenceStore.getFloat("pref_sub_scale", 1f)
+    fun subtitleBorderSize() = preferenceStore.getInt("pref_sub_border_size", 3)
+    fun boldSubtitles() = preferenceStore.getBoolean("pref_bold_subtitles", false)
+    fun italicSubtitles() = preferenceStore.getBoolean("pref_italic_subtitles", false)
+
+    fun textColorSubtitles() = preferenceStore.getInt("pref_text_color_subtitles", Color.White.toArgb())
+
+    fun borderColorSubtitles() = preferenceStore.getInt("pref_border_color_subtitles", Color.Black.toArgb())
+    fun borderStyleSubtitles() = preferenceStore.getEnum(
+        "pref_border_style_subtitles",
+        SubtitlesBorderStyle.OutlineAndShadow,
+    )
+    fun shadowOffsetSubtitles() = preferenceStore.getInt("sub_shadow_offset", 0)
+    fun backgroundColorSubtitles() = preferenceStore.getInt(
+        "pref_background_color_subtitles",
+        Color.Transparent.toArgb(),
+    )
+
+    fun subtitleJustification() = preferenceStore.getEnum("pref_sub_justify", SubtitleJustification.Auto)
+    fun subtitlePos() = preferenceStore.getInt("pref_sub_pos", 100)
+
+    fun overrideSubsASS() = preferenceStore.getBoolean("pref_override_subtitles_ass", false)
+
+    fun subtitlesDelay() = preferenceStore.getInt("pref_subtitles_delay", 0)
+    fun subtitlesSpeed() = preferenceStore.getFloat("pref_subtitles_speed", 1f)
+    fun subtitlesSecondaryDelay() = preferenceStore.getInt("pref_subtitles_secondary_delay", 0)
+}
+
+enum class SubtitleJustification(
+    val value: String,
+    val icon: ImageVector,
+) {
+    Left("left", Icons.AutoMirrored.Default.FormatAlignLeft),
+    Center("center", Icons.Default.FormatAlignCenter),
+    Right("right", Icons.AutoMirrored.Default.FormatAlignRight),
+    Auto("auto", Icons.Default.FormatAlignJustify),
+}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/SkipIntroLengthDialog.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/SkipIntroLengthDialog.kt
deleted file mode 100644
index 22cdf600c3..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/SkipIntroLengthDialog.kt
+++ /dev/null
@@ -1,53 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.dialogs
-
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.remember
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import kotlinx.collections.immutable.toImmutableList
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.WheelTextPicker
-import tachiyomi.presentation.core.i18n.stringResource
-
-@Composable
-fun SkipIntroLengthDialog(
-    currentSkipIntroLength: Int,
-    defaultSkipIntroLength: Int,
-    fromPlayer: Boolean,
-    updateSkipIntroLength: (Long) -> Unit,
-    onDismissRequest: () -> Unit,
-) {
-    var newLength = 0
-
-    PlayerDialog(
-        titleRes = MR.strings.action_change_intro_length,
-        modifier = Modifier.fillMaxWidth(fraction = if (fromPlayer) 0.5F else 0.8F),
-        onConfirmRequest = if (fromPlayer) {
-            null
-        } else {
-            {}
-        },
-        onDismissRequest = {
-            updateSkipIntroLength(newLength.toLong())
-            onDismissRequest()
-        },
-    ) {
-        Box(
-            modifier = Modifier.fillMaxWidth(),
-            content = {
-                WheelTextPicker(
-                    modifier = Modifier.align(Alignment.Center),
-                    items = remember { 1..255 }.map { stringResource(MR.strings.seconds_short, it) }.toImmutableList(),
-                    onSelectionChanged = { newLength = it + 1 },
-                    startIndex = if (currentSkipIntroLength > 0) {
-                        currentSkipIntroLength - 1
-                    } else {
-                        defaultSkipIntroLength
-                    },
-                )
-            },
-        )
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/SpeedPickerDialog.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/SpeedPickerDialog.kt
deleted file mode 100644
index 248b103257..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/dialogs/SpeedPickerDialog.kt
+++ /dev/null
@@ -1,59 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.dialogs
-
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Slider
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.unit.dp
-import tachiyomi.i18n.MR
-import java.math.BigDecimal
-import java.math.RoundingMode
-
-@Composable
-fun SpeedPickerDialog(
-    currentSpeed: Double,
-    onSpeedChanged: (Float) -> Unit,
-    onDismissRequest: () -> Unit,
-) {
-    fun Double.toHundredths(): BigDecimal {
-        return BigDecimal(this).setScale(2, RoundingMode.FLOOR)
-    }
-
-    var speed by remember { mutableStateOf(currentSpeed.toHundredths()) }
-
-    PlayerDialog(
-        titleRes = MR.strings.playback_speed_dialog_title,
-        modifier = Modifier.fillMaxWidth(fraction = 0.8F),
-        onDismissRequest = onDismissRequest,
-    ) {
-        Column {
-            Spacer(Modifier.height(8.dp))
-            Text(
-                text = speed.toString(),
-                style = MaterialTheme.typography.bodyLarge,
-                maxLines = 1,
-                fontWeight = FontWeight.Bold,
-                modifier = Modifier.align(Alignment.CenterHorizontally),
-            )
-            Spacer(Modifier.height(4.dp))
-            Slider(
-                value = speed.toFloat(),
-                onValueChange = { speed = it.toDouble().toHundredths() },
-                valueRange = 0.2f..6f,
-                onValueChangeFinished = { onSpeedChanged(speed.toFloat()) },
-            )
-            Spacer(Modifier.height(4.dp))
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/PlayerSettingsSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/PlayerSettingsSheet.kt
deleted file mode 100644
index 3577a5d678..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/PlayerSettingsSheet.kt
+++ /dev/null
@@ -1,193 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets
-
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.rememberScrollState
-import androidx.compose.foundation.verticalScroll
-import androidx.compose.material3.FilterChip
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableIntStateOf
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.unit.sp
-import eu.kanade.presentation.components.AdaptiveSheet
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import eu.kanade.tachiyomi.ui.player.viewer.AudioChannels
-import eu.kanade.tachiyomi.ui.player.viewer.HwDecState
-import eu.kanade.tachiyomi.ui.player.viewer.PlayerStatsPage
-import `is`.xyz.mpv.MPVLib
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
-
-@Composable
-fun PlayerSettingsSheet(
-    screenModel: PlayerSettingsScreenModel,
-    onDismissRequest: () -> Unit,
-) {
-    val verticalGesture by remember {
-        mutableStateOf(
-            screenModel.preferences.gestureVolumeBrightness(),
-        )
-    }
-    val horizontalGesture by remember {
-        mutableStateOf(
-            screenModel.preferences.gestureHorizontalSeek(),
-        )
-    }
-    var audioChannel by remember {
-        mutableStateOf(
-            screenModel.preferences.audioChannels().get(),
-        )
-    }
-    var statisticsPage by remember {
-        mutableIntStateOf(
-            screenModel.preferences.playerStatisticsPage().get(),
-        )
-    }
-    var decoder by remember { mutableStateOf(screenModel.preferences.hardwareDecoding().get()) }
-
-    val changeAudioChannel: (AudioChannels) -> Unit = { channel ->
-        audioChannel = channel
-        screenModel.preferences.audioChannels().set(channel)
-        if (channel == AudioChannels.ReverseStereo) {
-            // clean the `audio-channels` property when using reverse stereo
-            MPVLib.setPropertyString(AudioChannels.Auto.propertyName, AudioChannels.Auto.propertyName)
-        } else {
-            // clean the `af` property when not using reverse stereo
-            MPVLib.setPropertyString(AudioChannels.ReverseStereo.propertyName, "")
-        }
-        MPVLib.setPropertyString(channel.propertyName, channel.propertyValue)
-    }
-
-    // TODO: Shift to MPV-Lib
-    val togglePlayerStatsPage: (Int) -> Unit = { page ->
-        if ((statisticsPage == 0) xor (page == 0)) {
-            MPVLib.command(arrayOf("script-binding", "stats/display-stats-toggle"))
-        }
-        if (page != 0) {
-            MPVLib.command(arrayOf("script-binding", "stats/display-page-$page"))
-        }
-        statisticsPage = page
-        screenModel.preferences.playerStatisticsPage().set(page)
-    }
-
-    val togglePlayerDecoder: (HwDecState) -> Unit = { hwDecState ->
-        MPVLib.setOptionString("hwdec", hwDecState.mpvValue)
-        decoder = hwDecState
-        screenModel.preferences.hardwareDecoding().set(hwDecState)
-    }
-
-    AdaptiveSheet(
-        onDismissRequest = onDismissRequest,
-    ) {
-        Column(
-            modifier = Modifier
-                .padding(MaterialTheme.padding.medium)
-                .verticalScroll(rememberScrollState()),
-            verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.medium),
-        ) {
-            Text(
-                text = stringResource(MR.strings.settings_dialog_header),
-                style = MaterialTheme.typography.titleMedium,
-                fontSize = 20.sp,
-            )
-
-            screenModel.ToggleableRow(
-                textRes = MR.strings.enable_volume_brightness_gestures,
-                isChecked = verticalGesture.collectAsState().value,
-                onClick = { screenModel.togglePreference { verticalGesture } },
-            )
-
-            screenModel.ToggleableRow(
-                textRes = MR.strings.enable_horizontal_seek_gesture,
-                isChecked = horizontalGesture.collectAsState().value,
-                onClick = { screenModel.togglePreference { horizontalGesture } },
-            )
-
-            // TODO: (Merge_Change) below two Columns to be switched to using 'SettingsChipRow'
-            //  from 'SettingsItems.kt'
-
-            Column(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(horizontal = MaterialTheme.padding.medium),
-            ) {
-                Text(
-                    text = stringResource(MR.strings.player_hwdec_mode),
-                    style = MaterialTheme.typography.titleSmall,
-                )
-
-                Row(
-                    modifier = Modifier.padding(vertical = MaterialTheme.padding.extraSmall),
-                    horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
-                ) {
-                    HwDecState.entries.forEach {
-                        FilterChip(
-                            selected = decoder == it,
-                            onClick = { togglePlayerDecoder(it) },
-                            label = { Text(it.title) },
-                        )
-                    }
-                }
-            }
-
-            Column(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(horizontal = MaterialTheme.padding.medium),
-            ) {
-                Text(
-                    text = stringResource(MR.strings.pref_player_audio_channels),
-                    style = MaterialTheme.typography.titleSmall,
-                )
-
-                Row(
-                    modifier = Modifier.padding(vertical = MaterialTheme.padding.extraSmall),
-                    horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
-                ) {
-                    AudioChannels.entries.forEach {
-                        FilterChip(
-                            selected = audioChannel == it,
-                            onClick = { changeAudioChannel(it) },
-                            label = { Text(stringResource(it.textRes)) },
-                        )
-                    }
-                }
-            }
-
-            Column(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(horizontal = MaterialTheme.padding.medium),
-            ) {
-                Text(
-                    text = stringResource(MR.strings.toggle_player_statistics_page),
-                    style = MaterialTheme.typography.titleSmall,
-                )
-
-                Row(
-                    modifier = Modifier.padding(vertical = MaterialTheme.padding.extraSmall),
-                    horizontalArrangement = Arrangement.spacedBy(MaterialTheme.padding.small),
-                ) {
-                    PlayerStatsPage.entries.forEach {
-                        FilterChip(
-                            selected = statisticsPage == it.ordinal,
-                            onClick = { togglePlayerStatsPage(it.ordinal) },
-                            label = { Text(stringResource(it.stringRes)) },
-                        )
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/StreamsCatalogSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/StreamsCatalogSheet.kt
deleted file mode 100644
index a7e6848cbd..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/StreamsCatalogSheet.kt
+++ /dev/null
@@ -1,208 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets
-
-import android.content.Context
-import android.content.Intent
-import android.net.Uri
-import androidx.activity.compose.rememberLauncherForActivityResult
-import androidx.activity.result.contract.ActivityResultContracts
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.rememberScrollState
-import androidx.compose.foundation.verticalScroll
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Add
-import androidx.compose.material.icons.outlined.Settings
-import androidx.compose.material3.Icon
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.text.font.FontStyle
-import androidx.compose.ui.text.font.FontWeight
-import eu.kanade.presentation.components.TabbedDialog
-import eu.kanade.presentation.components.TabbedDialogPaddings
-import eu.kanade.tachiyomi.animesource.model.Track
-import eu.kanade.tachiyomi.ui.player.PlayerViewModel
-import eu.kanade.tachiyomi.ui.player.settings.sheetDialogPadding
-import `is`.xyz.mpv.MPVLib
-import kotlinx.collections.immutable.toImmutableList
-import tachiyomi.core.common.i18n.stringResource
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import java.io.File
-
-@Composable
-fun StreamsCatalogSheet(
-    isEpisodeOnline: Boolean?,
-    videoStreams: PlayerViewModel.VideoStreams,
-    openContentFd: (Uri) -> String?,
-    onQualitySelected: (Int) -> Unit,
-    onSubtitleSelected: (Int) -> Unit,
-    onAudioSelected: (Int) -> Unit,
-    onSettingsClicked: () -> Unit,
-    onDismissRequest: () -> Unit,
-) {
-    val tabTitles = mutableListOf(
-        stringResource(MR.strings.subtitle_dialog_header),
-        stringResource(MR.strings.audio_dialog_header),
-    )
-    if (isEpisodeOnline == true) {
-        tabTitles.add(0, stringResource(MR.strings.quality_dialog_header))
-    }
-
-    TabbedDialog(
-        onDismissRequest = onDismissRequest,
-        tabTitles = tabTitles.toImmutableList(),
-        onOverflowMenuClicked = onSettingsClicked,
-        overflowIcon = Icons.Outlined.Settings,
-    ) { page ->
-        Column(
-            modifier = Modifier
-                .padding(vertical = TabbedDialogPaddings.Vertical),
-        ) {
-            @Composable
-            fun QualityTracksPage() = StreamsPageBuilder(
-                externalTrackCode = null,
-                stream = videoStreams.quality,
-                openContentFd = openContentFd,
-                onTrackSelected = onQualitySelected,
-            )
-
-            @Composable
-            fun SubtitleTracksPage() = StreamsPageBuilder(
-                externalTrackCode = "sub",
-                stream = videoStreams.subtitle,
-                openContentFd = openContentFd,
-                onTrackSelected = onSubtitleSelected,
-            )
-
-            @Composable
-            fun AudioTracksPage() = StreamsPageBuilder(
-                externalTrackCode = "audio",
-                stream = videoStreams.audio,
-                openContentFd = openContentFd,
-                onTrackSelected = onAudioSelected,
-            )
-
-            when (page) {
-                0 -> if (isEpisodeOnline == true) QualityTracksPage() else SubtitleTracksPage()
-                1 -> if (isEpisodeOnline == true) SubtitleTracksPage() else AudioTracksPage()
-                2 -> if (isEpisodeOnline == true) AudioTracksPage()
-            }
-        }
-    }
-}
-
-@Composable
-private fun StreamsPageBuilder(
-    externalTrackCode: String?,
-    stream: PlayerViewModel.VideoStreams.Stream,
-    openContentFd: (Uri) -> String?,
-    onTrackSelected: (Int) -> Unit,
-) {
-    var tracks by remember { mutableStateOf(stream.tracks) }
-    var index by remember { mutableStateOf(stream.index) }
-
-    val onSelected: (Int) -> Unit = {
-        onTrackSelected(it)
-        index = it
-        stream.index = it
-    }
-
-    if (externalTrackCode != null) {
-        val addExternalTrack = rememberLauncherForActivityResult(
-            object : ActivityResultContracts.GetContent() {
-                override fun createIntent(context: Context, input: String): Intent {
-                    val intent = super.createIntent(context, input)
-                    return if (externalTrackCode == "audio") {
-                        Intent.createChooser(
-                            intent,
-                            context.stringResource(MR.strings.player_add_external_audio_intent),
-                        )
-                    } else {
-                        Intent.createChooser(
-                            intent,
-                            context.stringResource(MR.strings.player_add_external_subtitles_intent),
-                        )
-                    }
-                }
-            },
-        ) {
-            if (it != null) {
-                val url = it.toString()
-                val path = if (url.startsWith("content://")) {
-                    openContentFd(Uri.parse(url))
-                } else {
-                    url
-                } ?: return@rememberLauncherForActivityResult
-                MPVLib.command(arrayOf("$externalTrackCode-add", path, "cached"))
-                val title = File(path).name
-                tracks += Track(path, title)
-                stream.tracks += Track(path, title)
-                index = tracks.lastIndex
-                stream.index = tracks.lastIndex
-            }
-        }
-
-        val addTrackRes =
-            if (externalTrackCode == "sub") {
-                MR.strings.player_add_external_subtitles
-            } else {
-                MR.strings.player_add_external_audio
-            }
-
-        Row(
-            modifier = Modifier
-                .fillMaxWidth()
-                .clickable(onClick = { addExternalTrack.launch("*/*") })
-                .padding(sheetDialogPadding),
-            verticalAlignment = Alignment.CenterVertically,
-        ) {
-            Icon(
-                modifier = Modifier.padding(end = MaterialTheme.padding.extraSmall),
-                imageVector = Icons.Default.Add,
-                contentDescription = stringResource(addTrackRes),
-            )
-
-            Text(
-                text = stringResource(addTrackRes),
-                style = MaterialTheme.typography.bodyMedium,
-            )
-        }
-    }
-
-    Column(
-        modifier = Modifier
-            .fillMaxWidth()
-            .verticalScroll(rememberScrollState()),
-    ) {
-        tracks.forEachIndexed { i, track ->
-            val selected = index == i
-
-            Row(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .clickable(onClick = { onSelected(i) })
-                    .padding(sheetDialogPadding),
-            ) {
-                Text(
-                    text = track.lang,
-                    fontWeight = if (selected) FontWeight.Bold else FontWeight.Normal,
-                    fontStyle = if (selected) FontStyle.Italic else FontStyle.Normal,
-                    style = MaterialTheme.typography.bodyMedium,
-                    color = if (selected) MaterialTheme.colorScheme.primary else Color.Unspecified,
-                )
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/VideoChaptersSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/VideoChaptersSheet.kt
deleted file mode 100644
index a886789494..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/VideoChaptersSheet.kt
+++ /dev/null
@@ -1,89 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets
-
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.rememberScrollState
-import androidx.compose.foundation.verticalScroll
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.text.font.FontStyle
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.unit.sp
-import eu.kanade.presentation.components.AdaptiveSheet
-import eu.kanade.tachiyomi.ui.player.settings.sheetDialogPadding
-import `is`.xyz.mpv.Utils
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import kotlin.math.roundToInt
-import `is`.xyz.mpv.MPVView.Chapter as VideoChapter
-
-@Composable
-fun VideoChaptersSheet(
-    timePosition: Int,
-    videoChapters: List<VideoChapter>,
-    onVideoChapterSelected: (VideoChapter, String) -> Unit,
-    onDismissRequest: () -> Unit,
-) {
-    var currentTimePosition by remember { mutableStateOf(timePosition) }
-
-    AdaptiveSheet(
-        onDismissRequest = onDismissRequest,
-    ) {
-        Column(
-            modifier = Modifier
-                .padding(MaterialTheme.padding.medium)
-                .verticalScroll(rememberScrollState()),
-        ) {
-            Text(
-                text = stringResource(MR.strings.chapter_dialog_header),
-                style = MaterialTheme.typography.titleMedium,
-                fontSize = 20.sp,
-            )
-
-            val currentChapter = videoChapters.last { it.time <= currentTimePosition }
-
-            videoChapters.forEach { videoChapter ->
-                val videoChapterTime = videoChapter.time.roundToInt()
-                val videoChapterName = if (videoChapter.title.isNullOrBlank()) {
-                    Utils.prettyTime(videoChapterTime)
-                } else {
-                    "${videoChapter.title} (${Utils.prettyTime(videoChapterTime)})"
-                }
-
-                val selected = videoChapter == currentChapter
-
-                val onClick = {
-                    currentTimePosition = videoChapter.time.roundToInt()
-                    onVideoChapterSelected(videoChapter, videoChapterName)
-                    onDismissRequest()
-                }
-
-                Row(
-                    modifier = Modifier
-                        .fillMaxWidth()
-                        .clickable(onClick = onClick)
-                        .padding(sheetDialogPadding),
-                ) {
-                    Text(
-                        text = videoChapterName,
-                        fontWeight = if (selected) FontWeight.Bold else FontWeight.Normal,
-                        fontStyle = if (selected) FontStyle.Italic else FontStyle.Normal,
-                        style = MaterialTheme.typography.bodyMedium,
-                        color = if (selected) MaterialTheme.colorScheme.primary else Color.Unspecified,
-                    )
-                }
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleColorPage.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleColorPage.kt
deleted file mode 100644
index 637f7feee8..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleColorPage.kt
+++ /dev/null
@@ -1,310 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle
-
-import androidx.compose.foundation.Canvas
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.Spacer
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.requiredSize
-import androidx.compose.foundation.layout.width
-import androidx.compose.foundation.layout.wrapContentSize
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.outlined.ArrowDropDown
-import androidx.compose.material3.Icon
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Slider
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.geometry.CornerRadius
-import androidx.compose.ui.geometry.Offset
-import androidx.compose.ui.geometry.Size
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.drawscope.DrawScope
-import androidx.compose.ui.graphics.drawscope.Fill
-import androidx.compose.ui.graphics.drawscope.Stroke
-import androidx.compose.ui.unit.dp
-import dev.icerock.moko.resources.StringResource
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import `is`.xyz.mpv.MPVLib
-import tachiyomi.core.common.preference.Preference
-import tachiyomi.core.common.preference.getAndSet
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
-import kotlin.math.floor
-import kotlin.math.max
-
-@Composable
-fun SubtitleColorPage(screenModel: PlayerSettingsScreenModel) {
-    screenModel.OverrideSubtitlesSwitch {
-        SubtitleColors(screenModel = screenModel)
-    }
-}
-
-@Composable
-private fun SubtitleColors(
-    screenModel: PlayerSettingsScreenModel,
-) {
-    var subsColor by remember { mutableStateOf(SubsColor.NONE) }
-
-    fun updateType(newColor: SubsColor) {
-        subsColor = if (newColor != subsColor) newColor else SubsColor.NONE
-    }
-
-    val textColorPref = screenModel.preferences.textColorSubtitles()
-    val borderColorPref = screenModel.preferences.borderColorSubtitles()
-    val backgroundColorPref = screenModel.preferences.backgroundColorSubtitles()
-
-    val font by screenModel.preferences.subtitleFont().collectAsState()
-
-    Row(horizontalArrangement = Arrangement.SpaceEvenly, modifier = Modifier.fillMaxWidth()) {
-        SubtitleColorSelector(
-            label = MR.strings.player_subtitle_text_color,
-            onClick = { updateType(SubsColor.TEXT) },
-            selected = subsColor == SubsColor.TEXT,
-            preference = textColorPref,
-        )
-        SubtitleColorSelector(
-            label = MR.strings.player_subtitle_border_color,
-            onClick = { updateType(SubsColor.BORDER) },
-            selected = subsColor == SubsColor.BORDER,
-            preference = borderColorPref,
-        )
-        SubtitleColorSelector(
-            label = MR.strings.player_subtitle_background_color,
-            onClick = { updateType(SubsColor.BACKGROUND) },
-            selected = subsColor == SubsColor.BACKGROUND,
-            preference = backgroundColorPref,
-        )
-    }
-
-    Column(horizontalAlignment = Alignment.CenterHorizontally) {
-        SubtitlePreview(
-            font = font,
-            isBold = screenModel.preferences.boldSubtitles().collectAsState().value,
-            isItalic = screenModel.preferences.italicSubtitles().collectAsState().value,
-            textColor = Color(textColorPref.collectAsState().value),
-            borderColor = Color(borderColorPref.collectAsState().value),
-            backgroundColor = Color(backgroundColorPref.collectAsState().value),
-        )
-    }
-
-    Column(verticalArrangement = Arrangement.SpaceEvenly) {
-        if (subsColor != SubsColor.NONE) {
-            SubtitleColorSlider(
-                argb = ARGBValue.RED,
-                subsColor = subsColor,
-                preference = subsColor.preference(screenModel.preferences),
-            )
-
-            SubtitleColorSlider(
-                argb = ARGBValue.GREEN,
-                subsColor = subsColor,
-                preference = subsColor.preference(screenModel.preferences),
-            )
-
-            SubtitleColorSlider(
-                argb = ARGBValue.BLUE,
-                subsColor = subsColor,
-                preference = subsColor.preference(screenModel.preferences),
-            )
-
-            SubtitleColorSlider(
-                argb = ARGBValue.ALPHA,
-                subsColor = subsColor,
-                preference = subsColor.preference(screenModel.preferences),
-            )
-        }
-    }
-}
-
-@Composable
-private fun SubtitleColorSelector(
-    label: StringResource,
-    selected: Boolean,
-    onClick: () -> Unit,
-    preference: Preference<Int>,
-) {
-    val colorCode by preference.collectAsState()
-
-    val borderColor = MaterialTheme.colorScheme.onSurface
-    Column(
-        modifier = Modifier
-            .clickable(onClick = onClick)
-            .padding(MaterialTheme.padding.extraSmall),
-        verticalArrangement = Arrangement.SpaceEvenly,
-        horizontalAlignment = Alignment.CenterHorizontally,
-    ) {
-        Text(text = stringResource(label))
-
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.extraSmall))
-
-        Canvas(
-            modifier = Modifier
-                .wrapContentSize(Alignment.Center)
-                .requiredSize(20.dp),
-        ) {
-            drawColorBox(
-                boxColor = Color(colorCode),
-                borderColor = borderColor,
-                radius = floor(2.dp.toPx()),
-                strokeWidth = floor(2.dp.toPx()),
-            )
-        }
-
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.extraSmall))
-
-        Text(text = colorCode.toHexString())
-
-        if (selected) {
-            Icon(imageVector = Icons.Outlined.ArrowDropDown, contentDescription = null)
-        }
-    }
-}
-
-@Composable
-private fun SubtitleColorSlider(
-    argb: ARGBValue,
-    subsColor: SubsColor,
-    preference: Preference<Int>,
-) {
-    val colorCode by preference.collectAsState()
-
-    fun getColorValue(currentColor: Int, color: Float, mask: Long, bitShift: Int): Int {
-        return (color.toInt() shl bitShift) or (currentColor and mask.inv().toInt())
-    }
-
-    Row(verticalAlignment = Alignment.CenterVertically) {
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.small))
-
-        Text(
-            text = stringResource(argb.label),
-            style = MaterialTheme.typography.bodyMedium,
-        )
-
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.small))
-
-        val borderColor = MaterialTheme.colorScheme.onSurface
-        Canvas(
-            modifier = Modifier
-                .wrapContentSize(Alignment.Center)
-                .requiredSize(20.dp),
-        ) {
-            drawColorBox(
-                boxColor = argb.asColor(colorCode),
-                borderColor = borderColor,
-                radius = floor(2.dp.toPx()),
-                strokeWidth = floor(2.dp.toPx()),
-            )
-        }
-
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.small))
-
-        Slider(
-            modifier = Modifier.weight(1f),
-            value = argb.toValue(colorCode).toFloat(),
-            onValueChange = { newColorValue ->
-                preference.getAndSet { getColorValue(it, newColorValue, argb.mask, argb.bitShift) }
-                MPVLib.setPropertyString(subsColor.mpvProperty, colorCode.toHexString())
-            },
-            valueRange = 0f..255f,
-            steps = 255,
-        )
-
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.small))
-
-        Text(text = String.format("%03d", argb.toValue(colorCode)))
-
-        Spacer(modifier = Modifier.width(MaterialTheme.padding.small))
-    }
-}
-
-private enum class SubsColor(
-    val mpvProperty: String,
-    val preference: (PlayerPreferences) -> Preference<Int>,
-) {
-    NONE("", PlayerPreferences::textColorSubtitles),
-    TEXT("sub-color", PlayerPreferences::textColorSubtitles),
-    BORDER("sub-border-color", PlayerPreferences::borderColorSubtitles),
-    BACKGROUND("sub-back-color", PlayerPreferences::backgroundColorSubtitles),
-}
-
-private enum class ARGBValue(
-    val label: StringResource,
-    val mask: Long,
-    val bitShift: Int,
-    val toValue: (Int) -> Int,
-    val asColor: (Int) -> Color,
-) {
-
-    ALPHA(MR.strings.color_filter_a_value, 0xFF000000L, 24, ::toAlpha, ::asAlpha),
-    RED(MR.strings.color_filter_r_value, 0x00FF0000L, 16, ::toRed, ::asRed),
-    GREEN(MR.strings.color_filter_g_value, 0x0000FF00L, 8, ::toGreen, ::asGreen),
-    BLUE(MR.strings.color_filter_b_value, 0x000000FFL, 0, ::toBlue, ::asBlue),
-}
-
-private fun toAlpha(color: Int) = (color ushr 24) and 0xFF
-private fun asAlpha(color: Int) = Color((color.toLong() and 0xFF000000L) or 0x00FFFFFFL)
-
-private fun toRed(color: Int) = (color ushr 16) and 0xFF
-private fun asRed(color: Int) = Color((color.toLong() and 0x00FF0000L) or 0xFF000000L)
-
-private fun toGreen(color: Int) = (color ushr 8) and 0xFF
-private fun asGreen(color: Int) = Color((color.toLong() and 0x0000FF00L) or 0xFF000000L)
-
-private fun toBlue(color: Int) = (color ushr 0) and 0xFF
-private fun asBlue(color: Int) = Color((color.toLong() and 0x000000FFL) or 0xFF000000L)
-
-fun Int.toHexString(): String {
-    val colorCodeAlpha = String.format("%02X", toAlpha(this))
-    val colorCodeRed = String.format("%02X", toRed(this))
-    val colorCodeGreen = String.format("%02X", toGreen(this))
-    val colorCodeBlue = String.format("%02X", toBlue(this))
-
-    return "#$colorCodeAlpha$colorCodeRed$colorCodeGreen$colorCodeBlue"
-}
-
-private fun DrawScope.drawColorBox(
-    boxColor: Color,
-    borderColor: Color,
-    radius: Float,
-    strokeWidth: Float,
-) {
-    val halfStrokeWidth = strokeWidth / 2.0f
-    val stroke = Stroke(strokeWidth)
-    val checkboxSize = size.width
-    if (boxColor == borderColor) {
-        drawRoundRect(
-            boxColor,
-            size = Size(checkboxSize, checkboxSize),
-            cornerRadius = CornerRadius(radius),
-            style = Fill,
-        )
-    } else {
-        drawRoundRect(
-            boxColor,
-            topLeft = Offset(strokeWidth, strokeWidth),
-            size = Size(checkboxSize - strokeWidth * 2, checkboxSize - strokeWidth * 2),
-            cornerRadius = CornerRadius(max(0f, radius - strokeWidth)),
-            style = Fill,
-        )
-        drawRoundRect(
-            borderColor,
-            topLeft = Offset(halfStrokeWidth, halfStrokeWidth),
-            size = Size(checkboxSize - strokeWidth, checkboxSize - strokeWidth),
-            cornerRadius = CornerRadius(radius - halfStrokeWidth),
-            style = stroke,
-        )
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleDelayPage.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleDelayPage.kt
deleted file mode 100644
index 83f0324247..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleDelayPage.kt
+++ /dev/null
@@ -1,101 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle
-
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.padding
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import `is`.xyz.mpv.MPVLib
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.OutlinedNumericChooser
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
-
-@Composable
-fun StreamsDelayPage(
-    screenModel: PlayerSettingsScreenModel,
-) {
-    Column(verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall)) {
-        val audioDelay by remember { mutableStateOf(screenModel.preferences.rememberAudioDelay()) }
-        val subDelay by remember { mutableStateOf(screenModel.preferences.rememberSubtitlesDelay()) }
-        var currentSubDelay by rememberSaveable {
-            mutableStateOf(
-                (MPVLib.getPropertyDouble(Streams.SUBTITLES.mpvProperty) * 1000)
-                    .toInt(),
-            )
-        }
-        var currentAudioDelay by rememberSaveable {
-            mutableStateOf(
-                (MPVLib.getPropertyDouble(Streams.AUDIO.mpvProperty) * 1000)
-                    .toInt(),
-            )
-        }
-        screenModel.ToggleableRow(
-            textRes = MR.strings.player_audio_remember_delay,
-            isChecked = audioDelay.collectAsState().value,
-            onClick = { screenModel.togglePreference { audioDelay } },
-        )
-
-        Row(
-            modifier = Modifier.fillMaxWidth().padding(bottom = MaterialTheme.padding.medium),
-            verticalAlignment = Alignment.CenterVertically,
-            horizontalArrangement = Arrangement.SpaceEvenly,
-        ) {
-            OutlinedNumericChooser(
-                label = stringResource(MR.strings.player_audio_delay),
-                placeholder = "0",
-                suffix = "ms",
-                value = currentAudioDelay,
-                step = 100,
-                onValueChanged = {
-                    MPVLib.setPropertyDouble(Streams.AUDIO.mpvProperty, it / 1000.0)
-                    screenModel.preferences.audioDelay().set(it)
-                    currentAudioDelay = it
-                },
-            )
-        }
-
-        screenModel.NoSubtitlesWarning()
-
-        screenModel.ToggleableRow(
-            textRes = MR.strings.player_subtitle_remember_delay,
-            isChecked = subDelay.collectAsState().value,
-            onClick = { screenModel.togglePreference { subDelay } },
-        )
-
-        Row(
-            modifier = Modifier.fillMaxWidth().padding(bottom = MaterialTheme.padding.medium),
-            verticalAlignment = Alignment.CenterVertically,
-            horizontalArrangement = Arrangement.SpaceEvenly,
-        ) {
-            OutlinedNumericChooser(
-                label = stringResource(MR.strings.player_subtitle_delay),
-                placeholder = "0",
-                suffix = "ms",
-                value = currentSubDelay,
-                step = 100,
-                onValueChanged = {
-                    MPVLib.setPropertyDouble(Streams.SUBTITLES.mpvProperty, it / 1000.0)
-                    screenModel.preferences.subtitlesDelay().set(it)
-                    currentSubDelay = it
-                },
-            )
-        }
-    }
-}
-
-private enum class Streams(val mpvProperty: String) {
-    SUBTITLES("sub-delay"),
-    AUDIO("audio-delay"),
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleFontPage.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleFontPage.kt
deleted file mode 100644
index ae53008cbe..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleFontPage.kt
+++ /dev/null
@@ -1,177 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle
-
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.size
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Check
-import androidx.compose.material.icons.outlined.FormatBold
-import androidx.compose.material.icons.outlined.FormatItalic
-import androidx.compose.material.icons.outlined.FormatSize
-import androidx.compose.material3.DropdownMenuItem
-import androidx.compose.material3.Icon
-import androidx.compose.material3.IconButton
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.derivedStateOf
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.alpha
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.unit.dp
-import com.yubyf.truetypeparser.TTFFile
-import eu.kanade.presentation.components.DropdownMenu
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import `is`.xyz.mpv.MPVLib
-import tachiyomi.core.common.storage.extension
-import tachiyomi.domain.storage.service.StorageManager
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.OutlinedNumericChooser
-import tachiyomi.presentation.core.components.material.DISABLED_ALPHA
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
-import uy.kohesive.injekt.Injekt
-import uy.kohesive.injekt.api.get
-
-@Composable
-fun SubtitleFontPage(screenModel: PlayerSettingsScreenModel) {
-    screenModel.OverrideSubtitlesSwitch {
-        SubtitleFont(screenModel = screenModel)
-    }
-}
-
-@Composable
-private fun SubtitleFont(
-    screenModel: PlayerSettingsScreenModel,
-) {
-    val font by screenModel.preferences.subtitleFont().collectAsState()
-    val boldSubtitles by screenModel.preferences.boldSubtitles().collectAsState()
-    val italicSubtitles by screenModel.preferences.italicSubtitles().collectAsState()
-    val subtitleFontSize by screenModel.preferences.subtitleFontSize().collectAsState()
-    val textColor by screenModel.preferences.textColorSubtitles().collectAsState()
-    val borderColor by screenModel.preferences.borderColorSubtitles().collectAsState()
-    val backgroundColor by screenModel.preferences.backgroundColorSubtitles().collectAsState()
-
-    val updateBold = {
-        val toBold = if (boldSubtitles) "no" else "yes"
-        screenModel.togglePreference(PlayerPreferences::boldSubtitles)
-        MPVLib.setPropertyString("sub-bold", toBold)
-    }
-
-    val updateItalic = {
-        val toItalicize = if (italicSubtitles) "no" else "yes"
-        screenModel.togglePreference(PlayerPreferences::italicSubtitles)
-        MPVLib.setPropertyString("sub-italic", toItalicize)
-    }
-
-    val onSizeChanged: (Int) -> Unit = {
-        MPVLib.setPropertyInt("sub-font-size", it)
-        screenModel.preferences.subtitleFontSize().set(it)
-    }
-
-    val updateFont: (String) -> Unit = {
-        MPVLib.setPropertyString("sub-font", it)
-        screenModel.preferences.subtitleFont().set(it)
-    }
-
-    val fontList by remember {
-        derivedStateOf {
-            val storageManager: StorageManager = Injekt.get()
-            val fontsDir = storageManager.getFontsDirectory()
-            val customFonts = fontsDir?.listFiles()?.filter { file ->
-                file.extension!!.equals("ttf", true) ||
-                    file.extension!!.equals("otf", true)
-            }?.associate {
-                TTFFile.open(it.openInputStream()).families.values.toTypedArray()[0] to it.uri
-            } ?: emptyMap()
-            mapOf("Sans Serif" to ("" to null)) + customFonts
-        }
-    }
-    var selectingFont by remember { mutableStateOf(false) }
-
-    Column(
-        horizontalAlignment = Alignment.CenterHorizontally,
-        verticalArrangement = Arrangement.spacedBy(MaterialTheme.padding.extraSmall),
-    ) {
-        Row(
-            verticalAlignment = Alignment.CenterVertically,
-            horizontalArrangement = Arrangement.SpaceEvenly,
-            modifier = Modifier.fillMaxWidth(),
-        ) {
-            IconButton(onClick = { selectingFont = true }) {
-                Icon(
-                    imageVector = Icons.Outlined.FormatSize,
-                    contentDescription = null,
-                    modifier = Modifier.size(32.dp),
-                )
-            }
-
-            OutlinedNumericChooser(
-                label = stringResource(MR.strings.player_font_size_text_field),
-                placeholder = "55",
-                suffix = "",
-                value = subtitleFontSize,
-                step = 1,
-                min = 1,
-                onValueChanged = onSizeChanged,
-            )
-
-            val boldAlpha = if (boldSubtitles) 1f else DISABLED_ALPHA
-            Icon(
-                imageVector = Icons.Outlined.FormatBold,
-                contentDescription = null,
-                modifier = Modifier
-                    .alpha(boldAlpha)
-                    .size(32.dp)
-                    .clickable(onClick = updateBold),
-            )
-
-            val italicAlpha = if (italicSubtitles) 1f else DISABLED_ALPHA
-            Icon(
-                imageVector = Icons.Outlined.FormatItalic,
-                contentDescription = null,
-                modifier = Modifier
-                    .alpha(italicAlpha)
-                    .size(32.dp)
-                    .clickable(onClick = updateItalic),
-            )
-        }
-
-        DropdownMenu(expanded = selectingFont, onDismissRequest = { selectingFont = false }) {
-            fontList.map {
-                val fontName = it.key
-                DropdownMenuItem(
-                    text = { Text(fontName) },
-                    onClick = { updateFont(fontName) },
-                    trailingIcon = {
-                        if (font == fontName) {
-                            Icon(
-                                imageVector = Icons.Default.Check,
-                                contentDescription = null,
-                            )
-                        }
-                    },
-                )
-            }
-        }
-
-        SubtitlePreview(
-            font = font,
-            isBold = boldSubtitles,
-            isItalic = italicSubtitles,
-            textColor = Color(textColor),
-            borderColor = Color(borderColor),
-            backgroundColor = Color(backgroundColor),
-        )
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleSettingsSheet.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleSettingsSheet.kt
deleted file mode 100644
index 9507a150f2..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/SubtitleSettingsSheet.kt
+++ /dev/null
@@ -1,207 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle
-
-import android.graphics.Rect
-import android.graphics.Typeface
-import android.os.Build
-import androidx.annotation.RequiresApi
-import androidx.compose.foundation.Canvas
-import androidx.compose.foundation.background
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.foundation.layout.fillMaxWidth
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.rememberScrollState
-import androidx.compose.foundation.verticalScroll
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.Paint
-import androidx.compose.ui.graphics.Shadow
-import androidx.compose.ui.graphics.drawscope.drawIntoCanvas
-import androidx.compose.ui.graphics.nativeCanvas
-import androidx.compose.ui.graphics.toArgb
-import androidx.compose.ui.platform.LocalContext
-import androidx.compose.ui.text.TextStyle
-import androidx.compose.ui.text.font.FontFamily
-import androidx.compose.ui.text.font.FontStyle
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.text.style.TextAlign
-import androidx.compose.ui.unit.dp
-import com.yubyf.truetypeparser.TTFFile
-import eu.kanade.presentation.components.TabbedDialog
-import eu.kanade.presentation.components.TabbedDialogPaddings
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import kotlinx.collections.immutable.persistentListOf
-import tachiyomi.core.common.storage.UniFileTempFileManager
-import tachiyomi.core.common.storage.extension
-import tachiyomi.domain.storage.service.StorageManager
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.material.padding
-import tachiyomi.presentation.core.i18n.stringResource
-import uy.kohesive.injekt.Injekt
-import uy.kohesive.injekt.api.get
-
-@Composable
-fun SubtitleSettingsSheet(
-    screenModel: PlayerSettingsScreenModel,
-    onDismissRequest: () -> Unit,
-) {
-    TabbedDialog(
-        onDismissRequest = onDismissRequest,
-        tabTitles = persistentListOf(
-            stringResource(MR.strings.player_subtitle_settings_filters),
-            stringResource(MR.strings.player_subtitle_settings_delay_tab),
-            stringResource(MR.strings.player_subtitle_settings_font_tab),
-            stringResource(MR.strings.player_subtitle_settings_color_tab),
-        ),
-    ) { page ->
-        Column(
-            modifier = Modifier
-                .padding(top = TabbedDialogPaddings.Vertical)
-                .verticalScroll(rememberScrollState()),
-        ) {
-            when (page) {
-                0 -> FiltersPage(screenModel)
-                1 -> StreamsDelayPage(screenModel)
-                2 -> SubtitleFontPage(screenModel)
-                3 -> SubtitleColorPage(screenModel)
-            }
-        }
-    }
-}
-
-@RequiresApi(Build.VERSION_CODES.P)
-@Composable
-fun OutLineText(
-    text: String,
-    font: Typeface,
-    outlineColor: Color = Color.Black,
-    textColor: Color = Color.White,
-    isBold: Boolean = false,
-    isItalic: Boolean = false,
-    backgroundColor: Color = Color.Black,
-) {
-    val textPaintStroke = Paint().asFrameworkPaint().apply {
-        typeface = font
-        isAntiAlias = true
-        style = android.graphics.Paint.Style.STROKE
-        textSize = 48f
-        color = outlineColor.toArgb()
-        strokeWidth = 12f
-        strokeMiter = 8f
-        strokeJoin = android.graphics.Paint.Join.ROUND
-        // change the text alignment from left to center (basically shift the anchor point of the text)
-        // keep in mind that this only affects horizontal alignment
-        // https://developer.android.com/reference/android/graphics/Paint.Align
-        textAlign = android.graphics.Paint.Align.CENTER
-        isFakeBoldText = isBold
-        textSkewX = if (isItalic) -0.25f else 0f
-    }
-    val textPaint = Paint().asFrameworkPaint().apply {
-        typeface = font
-        isAntiAlias = true
-        style = android.graphics.Paint.Style.FILL
-        textSize = 48f
-        color = textColor.toArgb()
-        textAlign = android.graphics.Paint.Align.CENTER
-        isFakeBoldText = isBold
-        textSkewX = if (isItalic) -0.25f else 0f
-    }
-    Canvas(modifier = Modifier.fillMaxSize()) {
-        drawIntoCanvas {
-            it.nativeCanvas.drawRect(
-                Rect(
-                    0,
-                    size.height.toInt(),
-                    size.width.toInt(),
-                    0,
-                ),
-                Paint().asFrameworkPaint().apply {
-                    style = android.graphics.Paint.Style.FILL
-                    color = backgroundColor.toArgb()
-                },
-            )
-            // Considering that the canvas's top left corner is at (0,0),
-            // position the text at the center of the canvas, which is at (width/2),
-            // and place it in the third quarter of the canvas, aligning it with the top.
-            // Essentially, it will be at the bottom center.
-            // It's approximately centered, I guess.
-            it.nativeCanvas.drawText(
-                text,
-                size.width / 2,
-                (size.height * 3) / 4,
-                textPaintStroke,
-            )
-            it.nativeCanvas.drawText(
-                text,
-                size.width / 2,
-                (size.height * 3) / 4,
-                textPaint,
-            )
-        }
-    }
-}
-
-@Composable
-fun SubtitlePreview(
-    font: String,
-    isBold: Boolean,
-    isItalic: Boolean,
-    textColor: Color,
-    borderColor: Color,
-    backgroundColor: Color,
-) {
-    val storageManager: StorageManager = Injekt.get()
-    val tempFileManager: UniFileTempFileManager = UniFileTempFileManager(LocalContext.current)
-    val fontsDir = storageManager.getFontsDirectory()
-    val fontMap = fontsDir?.listFiles()?.filter { file ->
-        file.extension!!.equals("ttf", true) ||
-            file.extension!!.equals("otf", true)
-    }?.associate {
-        TTFFile.open(it.openInputStream()).families.values.toTypedArray()[0] to it
-    } ?: emptyMap()
-
-    val fontFile = fontMap.keys.firstOrNull { it.contains(font, true) }
-        ?.let {
-            Typeface.createFromFile(fontMap[it]?.let { fontFile -> tempFileManager.createTempFile(fontFile) })
-        } ?: Typeface.createFromAsset(LocalContext.current.assets, "subfont.ttf")
-
-    Box(
-        modifier = Modifier
-            .padding(vertical = MaterialTheme.padding.medium)
-            .height(32.dp),
-    ) {
-        Column(modifier = Modifier.fillMaxWidth(0.8f).background(color = backgroundColor)) {
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
-                OutLineText(
-                    text = stringResource(MR.strings.player_subtitle_settings_example),
-                    font = fontFile,
-                    outlineColor = borderColor,
-                    textColor = textColor,
-                    isBold = isBold,
-                    isItalic = isItalic,
-                    backgroundColor = backgroundColor,
-                )
-            } else {
-                Text(
-                    text = stringResource(MR.strings.player_subtitle_settings_example),
-                    modifier = Modifier.align(Alignment.CenterHorizontally),
-                    style = TextStyle(
-                        fontFamily = FontFamily.SansSerif,
-                        fontSize = MaterialTheme.typography.titleMedium.fontSize,
-                        fontWeight = if (isBold) FontWeight.Bold else FontWeight.Normal,
-                        fontStyle = if (isItalic) FontStyle.Italic else FontStyle.Normal,
-                        shadow = Shadow(color = borderColor, blurRadius = 7.5f),
-                        color = textColor,
-                        textAlign = TextAlign.Center,
-                    ),
-                )
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/VideoFiltersPage.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/VideoFiltersPage.kt
deleted file mode 100644
index 521422ee1f..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/settings/sheets/subtitle/VideoFiltersPage.kt
+++ /dev/null
@@ -1,89 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle
-
-import androidx.compose.foundation.layout.Arrangement
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.padding
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.outlined.Info
-import androidx.compose.material3.Icon
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.unit.dp
-import dev.icerock.moko.resources.StringResource
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import eu.kanade.tachiyomi.ui.player.settings.PlayerSettingsScreenModel
-import `is`.xyz.mpv.MPVLib
-import tachiyomi.core.common.preference.Preference
-import tachiyomi.i18n.MR
-import tachiyomi.presentation.core.components.SliderItem
-import tachiyomi.presentation.core.i18n.stringResource
-import tachiyomi.presentation.core.util.collectAsState
-
-@Composable
-fun FiltersPage(
-    screenModel: PlayerSettingsScreenModel,
-    modifier: Modifier = Modifier,
-) {
-    if (!screenModel.preferences.gpuNext().get()) {
-        Row(
-            modifier = Modifier.padding(16.dp),
-            verticalAlignment = Alignment.CenterVertically,
-            horizontalArrangement = Arrangement.spacedBy(16.dp),
-        ) {
-            Icon(Icons.Outlined.Info, null)
-            Text(stringResource(MR.strings.player_filters_warning))
-        }
-    }
-    Column(modifier) {
-        VideoFilters.entries.forEach { filter ->
-            val value by filter.preference(screenModel.preferences).collectAsState()
-            SliderItem(
-                label = stringResource(filter.title),
-                value = value,
-                valueText = value.toString(),
-                onChange = {
-                    filter.preference(screenModel.preferences).set(it)
-                    MPVLib.setPropertyInt(filter.mpvProperty, it)
-                },
-                max = 100,
-                min = -100,
-            )
-        }
-    }
-}
-
-enum class VideoFilters(
-    val title: StringResource,
-    val preference: (PlayerPreferences) -> Preference<Int>,
-    val mpvProperty: String,
-) {
-    BRIGHTNESS(
-        MR.strings.player_filters_brightness,
-        { it.brightnessFilter() },
-        "brightness",
-    ),
-    SATURATION(
-        MR.strings.player_filters_saturation,
-        { it.saturationFilter() },
-        "saturation",
-    ),
-    CONTRAST(
-        MR.strings.player_filters_contrast,
-        { it.contrastFilter() },
-        "contrast",
-    ),
-    GAMMA(
-        MR.strings.player_filters_gamma,
-        { it.gammaFilter() },
-        "gamma",
-    ),
-    HUE(
-        MR.strings.player_filters_hue,
-        { it.hueFilter() },
-        "hue",
-    ),
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/GestureHandler.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/GestureHandler.kt
deleted file mode 100644
index 4eff335e6e..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/GestureHandler.kt
+++ /dev/null
@@ -1,188 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer
-
-import android.annotation.SuppressLint
-import android.view.GestureDetector
-import android.view.MotionEvent
-import android.view.View
-import eu.kanade.tachiyomi.ui.player.PlayerActivity
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import uy.kohesive.injekt.injectLazy
-import kotlin.math.abs
-
-class GestureHandler(
-    private val activity: PlayerActivity,
-    private val width: Float,
-    private val height: Float,
-) : GestureDetector.SimpleOnGestureListener(), View.OnTouchListener {
-    private var scrollState = STATE_UP
-
-    private val trigger = width.coerceAtMost(height) / 25
-
-    private val preferences: PlayerPreferences by injectLazy()
-
-    val interval = preferences.skipLengthPreference().get()
-
-    override fun onDown(event: MotionEvent): Boolean {
-        return true
-    }
-
-    private val playerControls = activity.playerControls
-
-    override fun onSingleTapUp(e: MotionEvent): Boolean {
-        if (SeekState.mode == SeekState.LOCKED ||
-            SeekState.mode != SeekState.DOUBLE_TAP ||
-            activity.player.timePos == null ||
-            activity.player.duration == null
-        ) {
-            return false
-        }
-
-        when {
-            e.x < width * 0.4F && interval != 0 -> if (activity.player.timePos!! > 0) {
-                activity.doubleTapSeek(
-                    -interval,
-                    e,
-                )
-            } else {
-                return false
-            }
-            e.x > width * 0.6F && interval != 0 -> if (activity.player.timePos!! < activity.player.duration!!) {
-                activity.doubleTapSeek(
-                    interval,
-                    e,
-                )
-            } else {
-                return false
-            }
-            else -> return false
-        }
-        return true
-    }
-
-    override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
-        if (SeekState.mode != SeekState.DOUBLE_TAP) playerControls.toggleControls(isTapped = true)
-        return true
-    }
-
-    override fun onDoubleTap(e: MotionEvent): Boolean {
-        if (SeekState.mode == SeekState.LOCKED) {
-            playerControls.toggleControls()
-            return false
-        }
-        if (activity.player.timePos == null || activity.player.duration == null) return false
-        when {
-            e.x < width * 0.4F && interval != 0 -> if (activity.player.timePos!! > 0) {
-                activity.doubleTapSeek(
-                    -interval,
-                    e,
-                )
-            } else {
-                return false
-            }
-            e.x > width * 0.6F && interval != 0 -> if (activity.player.timePos!! < activity.player.duration!!) {
-                activity.doubleTapSeek(
-                    interval,
-                    e,
-                )
-            } else {
-                return false
-            }
-            else -> activity.doubleTapPlayPause()
-        }
-        return true
-    }
-
-    private var scrollDiff: Float? = null
-
-    override fun onScroll(
-        e1: MotionEvent?,
-        e2: MotionEvent,
-        distanceX: Float,
-        distanceY: Float,
-    ): Boolean {
-        if (e1 != null) {
-            if (SeekState.mode == SeekState.LOCKED) {
-                playerControls.toggleControls()
-                return false
-            }
-            if (e1.y < height * 0.05F || e1.y > height * 0.95F) return false
-            val dx = e1.x - e2.x
-            val dy = e1.y - e2.y
-            when (scrollState) {
-                STATE_UP -> {
-                    if (abs(dx) >= trigger) {
-                        if (e1.x < width * 0.05F || e1.x > width * 0.95F) return false
-                        scrollState = STATE_HORIZONTAL
-                        activity.initSeek()
-                    } else if (abs(dy) > trigger) {
-                        scrollState = when {
-                            e1.x > width * 0.6F -> STATE_VERTICAL_RIGHT
-                            e1.x < width * 0.4F -> STATE_VERTICAL_LEFT
-                            else -> STATE_UP
-                        }
-                    }
-                }
-
-                STATE_VERTICAL_LEFT -> {
-                    val diff = 1.5F * distanceY / height
-                    if (preferences.gestureVolumeBrightness().get()) {
-                        activity.verticalScrollLeft(
-                            diff,
-                        )
-                    }
-                }
-
-                STATE_VERTICAL_RIGHT -> {
-                    val diff = 1.5F * distanceY / height
-                    if (preferences.gestureVolumeBrightness().get()) {
-                        activity.verticalScrollRight(
-                            diff,
-                        )
-                    }
-                }
-
-                STATE_HORIZONTAL -> {
-                    val diff = 150F * -dx / width
-                    scrollDiff = diff
-                    if (preferences.gestureHorizontalSeek().get()) activity.horizontalScroll(diff)
-                }
-            }
-        }
-        return true
-    }
-
-    @SuppressLint("ClickableViewAccessibility")
-    override fun onTouch(v: View, event: MotionEvent): Boolean {
-        if (event.action == MotionEvent.ACTION_UP) {
-            if (scrollState == STATE_HORIZONTAL) {
-                scrollDiff?.let {
-                    if (preferences.gestureHorizontalSeek().get()) {
-                        activity.horizontalScroll(
-                            it,
-                            final = true,
-                        )
-                    }
-                }
-                scrollDiff = null
-                playerControls.resetControlsFade()
-            }
-            if (scrollState != STATE_UP) {
-                scrollState = STATE_UP
-            }
-        }
-        return false
-    }
-
-    override fun onLongPress(e: MotionEvent) {
-        if (SeekState.mode == SeekState.LOCKED) {
-            playerControls.toggleControls()
-            return
-        }
-        activity.viewModel.showScreenshotOptions()
-    }
-}
-
-private const val STATE_UP = 0
-private const val STATE_HORIZONTAL = 1
-private const val STATE_VERTICAL_LEFT = 2
-private const val STATE_VERTICAL_RIGHT = 3
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PictureInPictureHandler.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PictureInPictureHandler.kt
deleted file mode 100644
index 7fe10adaf3..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PictureInPictureHandler.kt
+++ /dev/null
@@ -1,139 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer
-
-import android.app.PendingIntent
-import android.app.PictureInPictureParams
-import android.app.RemoteAction
-import android.content.Context
-import android.content.Intent
-import android.graphics.drawable.Icon
-import android.os.Build
-import android.util.Rational
-import dev.icerock.moko.resources.StringResource
-import eu.kanade.tachiyomi.R
-import tachiyomi.core.common.i18n.stringResource
-import tachiyomi.i18n.MR
-
-class PictureInPictureHandler {
-
-    fun update(
-        context: Context,
-        title: String,
-        subtitle: String,
-        paused: Boolean,
-        replaceWithPrevious: Boolean,
-        pipOnExit: Boolean,
-        videoAspect: Double,
-        playlistCount: Int,
-        playlistPosition: Int,
-    ): PictureInPictureParams {
-        val aspectRatio = videoAspect.let { aspect ->
-            when {
-                aspect >= 23900 -> 23899
-                aspect <= 4184 -> 4185
-                else -> aspect.toInt()
-            }
-        }
-
-        val pictureInPictureParams = PictureInPictureParams.Builder()
-            .setActions(pipActions(context, paused, replaceWithPrevious, playlistCount, playlistPosition))
-            .setAspectRatio(Rational(aspectRatio, 10000))
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
-            pictureInPictureParams.setAutoEnterEnabled(pipOnExit).setSeamlessResizeEnabled(false)
-        }
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
-            pictureInPictureParams.setTitle(title).setSubtitle(subtitle)
-        }
-
-        return pictureInPictureParams.build()
-    }
-
-    private fun pipActions(
-        context: Context,
-        paused: Boolean,
-        replaceWithPrevious: Boolean,
-        playlistCount: Int,
-        playlistPosition: Int,
-    ): ArrayList<RemoteAction> {
-        return arrayListOf(
-            if (replaceWithPrevious) {
-                createRemoteAction(
-                    context,
-                    R.drawable.ic_skip_previous_24dp,
-                    MR.strings.action_previous_episode,
-                    PIP_PREVIOUS,
-                    PIP_PREVIOUS,
-                    playlistPosition != 0,
-                )
-            } else {
-                createRemoteAction(
-                    context,
-                    R.drawable.ic_forward_10_24dp,
-                    MR.strings.pref_skip_10,
-                    PIP_SKIP,
-                    PIP_SKIP,
-                )
-            },
-            if (paused) {
-                createRemoteAction(
-                    context,
-                    R.drawable.ic_play_arrow_24dp,
-                    MR.strings.action_play,
-                    PIP_PLAY,
-                    PIP_PLAY,
-                )
-            } else {
-                createRemoteAction(
-                    context,
-                    R.drawable.ic_pause_24dp,
-                    MR.strings.action_pause,
-                    PIP_PAUSE,
-                    PIP_PAUSE,
-                )
-            },
-            createRemoteAction(
-                context,
-                R.drawable.ic_skip_next_24dp,
-                MR.strings.action_next_episode,
-                PIP_NEXT,
-                PIP_NEXT,
-                playlistPosition != playlistCount - 1,
-            ),
-        )
-    }
-
-    private fun createRemoteAction(
-        context: Context,
-        iconResId: Int,
-        titleRes: StringResource,
-        requestCode: Int,
-        controlType: Int,
-        isEnabled: Boolean = true,
-    ): RemoteAction {
-        val action = RemoteAction(
-            Icon.createWithResource(context, iconResId),
-            context.stringResource(titleRes),
-            context.stringResource(titleRes),
-            PendingIntent.getBroadcast(
-                context,
-                requestCode,
-                Intent(ACTION_MEDIA_CONTROL).putExtra(EXTRA_CONTROL_TYPE, controlType).setPackage(context.packageName),
-                PendingIntent.FLAG_IMMUTABLE,
-            ),
-        )
-        action.isEnabled = isEnabled
-        return action
-    }
-}
-
-// TODO: https://developer.android.com/develop/ui/views/picture-in-picture#setautoenterenabled
-
-internal const val PIP_PLAY = 1
-internal const val PIP_PAUSE = 2
-internal const val PIP_PREVIOUS = 3
-internal const val PIP_NEXT = 4
-internal const val PIP_SKIP = 5
-
-internal const val ACTION_MEDIA_CONTROL = "media_control"
-internal const val EXTRA_CONTROL_TYPE = "control_type"
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PlayerControlsView.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PlayerControlsView.kt
deleted file mode 100644
index d2ef3cb1f1..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PlayerControlsView.kt
+++ /dev/null
@@ -1,622 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer
-
-import android.annotation.SuppressLint
-import android.content.Context
-import android.content.ContextWrapper
-import android.content.res.ColorStateList
-import android.os.Handler
-import android.os.Looper
-import android.util.AttributeSet
-import android.view.LayoutInflater
-import android.view.View
-import android.view.animation.AnimationUtils
-import android.widget.LinearLayout
-import androidx.core.content.ContextCompat
-import androidx.core.view.isVisible
-import eu.kanade.tachiyomi.R
-import eu.kanade.tachiyomi.databinding.PlayerControlsBinding
-import eu.kanade.tachiyomi.ui.player.PlayerActivity
-import eu.kanade.tachiyomi.ui.player.viewer.components.CurrentChapter
-import eu.kanade.tachiyomi.ui.player.viewer.components.Seekbar
-import `is`.xyz.mpv.MPVLib
-import `is`.xyz.mpv.Utils
-import tachiyomi.core.common.i18n.stringResource
-import tachiyomi.core.common.util.lang.withUIContext
-import kotlin.math.abs
-
-class PlayerControlsView @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null) :
-    LinearLayout(context, attrs) {
-
-    internal val binding: PlayerControlsBinding =
-        PlayerControlsBinding.inflate(LayoutInflater.from(context), this, false)
-
-    private tailrec fun Context.getActivity(): PlayerActivity? = this as? PlayerActivity
-        ?: (this as? ContextWrapper)?.baseContext?.getActivity()
-
-    private val activity: PlayerActivity = context.getActivity()!!
-
-    private val playerPreferences = activity.playerPreferences
-
-    private val player get() = activity.player
-
-    val seekbar: Seekbar = Seekbar(
-        view = binding.playbackSeekbar,
-        onValueChange = ::onValueChange,
-        onValueChangeFinished = ::onValueChangeFinished,
-    )
-
-    val chapterText: CurrentChapter = CurrentChapter(
-        view = binding.currentChapter,
-        onClick = { activity.viewModel.showVideoChapters() },
-    )
-
-    private fun onValueChange(value: Float, wasSeeking: Boolean) {
-        if (!wasSeeking) {
-            SeekState.mode = SeekState.SEEKBAR
-            activity.initSeek()
-        }
-
-        MPVLib.command(arrayOf("seek", value.toInt().toString(), "absolute+keyframes"))
-
-        val duration = player.duration ?: 0
-        if (duration == 0 || activity.initialSeek < 0) {
-            return
-        }
-
-        val difference = value.toInt() - activity.initialSeek
-
-        showSeekText(value.toInt(), difference)
-    }
-
-    private fun onValueChangeFinished(value: Float) {
-        if (SeekState.mode == SeekState.SEEKBAR) {
-            if (playerPreferences.playerSmoothSeek().get()) {
-                player.timePos = value.toInt()
-            } else {
-                MPVLib.command(
-                    arrayOf("seek", value.toInt().toString(), "absolute+keyframes"),
-                )
-            }
-            SeekState.mode = SeekState.NONE
-            animationHandler.removeCallbacks(hideUiForSeekRunnable)
-            animationHandler.removeCallbacks(fadeOutControlsRunnable)
-            animationHandler.postDelayed(hideUiForSeekRunnable, 500L)
-            animationHandler.postDelayed(fadeOutControlsRunnable, 3500L)
-        } else {
-            MPVLib.command(arrayOf("seek", value.toInt().toString(), "absolute+keyframes"))
-        }
-    }
-
-    init {
-        addView(binding.root)
-    }
-
-    @Suppress("DEPRECATION")
-    override fun onViewAdded(child: View?) {
-        binding.backArrowBtn.setOnClickListener { activity.onBackPressed() }
-
-        // Lock and Unlock controls
-        binding.lockBtn.setOnClickListener { lockControls(true) }
-        binding.unlockBtn.setOnClickListener { lockControls(false) }
-
-        // Long click controls
-        binding.cycleSpeedBtn.setOnLongClickListener {
-            activity.viewModel.showSpeedPicker()
-            true
-        }
-
-        binding.prevBtn.setOnClickListener { switchEpisode(previous = true) }
-        binding.playBtn.setOnClickListener { playPause() }
-        binding.nextBtn.setOnClickListener { switchEpisode(previous = false) }
-
-        binding.pipBtn.setOnClickListener { activity.updatePip(start = true) }
-
-        binding.pipBtn.isVisible = !playerPreferences.pipOnExit().get() && activity.supportedAndEnabled
-
-        binding.controlsSkipIntroBtn.setOnLongClickListener {
-            activity.viewModel.showSkipIntroLength()
-            true
-        }
-
-        binding.playbackPositionBtn.setOnClickListener {
-            if (player.timePos != null && player.duration != null) {
-                with(playerPreferences.invertedPlayback()) {
-                    this.set(
-                        if (this.get() == InvertedPlayback.POSITION) {
-                            InvertedPlayback.NONE
-                        } else {
-                            InvertedPlayback.POSITION
-                        },
-                    )
-                }
-                updatePlaybackPos(player.timePos!!)
-                updatePlaybackDuration(player.duration!!)
-            }
-        }
-
-        binding.playbackDurationBtn.setOnClickListener {
-            if (player.timePos != null && player.duration != null) {
-                with(playerPreferences.invertedPlayback()) {
-                    this.set(
-                        if (this.get() == InvertedPlayback.DURATION) {
-                            InvertedPlayback.NONE
-                        } else {
-                            InvertedPlayback.DURATION
-                        },
-                    )
-                }
-                updatePlaybackPos(player.timePos!!)
-                updatePlaybackDuration(player.duration!!)
-            }
-        }
-
-        binding.toggleAutoplay.setOnCheckedChangeListener { _, isChecked ->
-            toggleAutoplay(
-                isChecked,
-            )
-        }
-
-        binding.cycleViewModeBtn.setOnClickListener { cycleViewMode() }
-
-        binding.settingsBtn.setOnClickListener { activity.viewModel.showPlayerSettings() }
-
-        binding.streamsBtn.setOnClickListener { activity.viewModel.showStreamsCatalog() }
-
-        binding.titleMainTxt.setOnClickListener { activity.viewModel.showEpisodeList() }
-
-        binding.titleSecondaryTxt.setOnClickListener { activity.viewModel.showEpisodeList() }
-
-        binding.episodeListBtn.setOnClickListener { activity.viewModel.showEpisodeList() }
-    }
-
-    private fun switchEpisode(previous: Boolean) {
-        return activity.changeEpisode(activity.viewModel.getAdjacentEpisodeId(previous = previous))
-    }
-
-    internal suspend fun updateEpisodeText() {
-        val viewModel = activity.viewModel
-        val skipIntroText = activity.getString(
-            R.string.player_controls_skip_intro_text,
-            viewModel.getAnimeSkipIntroLength(),
-        )
-        withUIContext {
-            binding.titleMainTxt.text = viewModel.currentAnime?.title
-            binding.titleSecondaryTxt.text = viewModel.currentEpisode?.name
-            binding.controlsSkipIntroBtn.text = skipIntroText
-        }
-    }
-
-    internal suspend fun updatePlaylistButtons() {
-        val viewModel = activity.viewModel
-        val plCount = viewModel.currentPlaylist.size
-        val plPos = viewModel.getCurrentEpisodeIndex()
-
-        val grey = ContextCompat.getColor(context, R.color.tint_disabled)
-        val white = ContextCompat.getColor(context, R.color.tint_normal)
-        withUIContext {
-            with(binding.prevBtn) {
-                this.imageTintList = ColorStateList.valueOf(if (plPos == 0) grey else white)
-                this.isClickable = plPos != 0
-            }
-            with(binding.nextBtn) {
-                this.imageTintList =
-                    ColorStateList.valueOf(if (plPos == plCount - 1) grey else white)
-                this.isClickable = plPos != plCount - 1
-            }
-        }
-    }
-
-    internal suspend fun updateSpeedButton() {
-        withUIContext {
-            binding.cycleSpeedBtn.text = context.getString(R.string.ui_speed, player.playbackSpeed)
-            player.playbackSpeed?.let { playerPreferences.playerSpeed().set(it.toFloat()) }
-        }
-    }
-
-    private var showControls = false
-    private var wasPausedBeforeSeeking = false
-
-    private val nonSeekViewRunnable = Runnable {
-        binding.topControlsGroup.visibility = View.VISIBLE
-        binding.middleControlsGroup.visibility = View.VISIBLE
-        binding.bottomControlsGroup.visibility = View.VISIBLE
-    }
-
-    private val hideUiForSeekRunnable = Runnable {
-        SeekState.mode = SeekState.NONE
-        player.paused = wasPausedBeforeSeeking
-        if (showControls) {
-            AnimationUtils.loadAnimation(context, R.anim.player_fade_in).also { fadeAnimation ->
-                binding.topControlsGroup.startAnimation(fadeAnimation)
-                binding.topControlsGroup.visibility = View.VISIBLE
-
-                binding.middleControlsGroup.startAnimation(fadeAnimation)
-                binding.middleControlsGroup.visibility = View.VISIBLE
-
-                binding.bottomControlsGroup.startAnimation(fadeAnimation)
-                binding.bottomControlsGroup.visibility = View.VISIBLE
-            }
-            showControls = false
-        } else {
-            showControls = true
-
-            animationHandler.removeCallbacks(fadeOutControlsRunnable)
-            animationHandler.postDelayed(fadeOutControlsRunnable, 500L)
-            animationHandler.removeCallbacks(nonSeekViewRunnable)
-            animationHandler.postDelayed(
-                nonSeekViewRunnable,
-                600L + resources.getInteger(R.integer.player_animation_duration).toLong(),
-            )
-        }
-    }
-
-    internal fun hideUiForSeek() {
-        animationHandler.removeCallbacks(fadeOutControlsRunnable)
-        animationHandler.removeCallbacks(hideUiForSeekRunnable)
-
-        if (!(
-                binding.topControlsGroup.visibility == View.INVISIBLE &&
-                    binding.middleControlsGroup.visibility == INVISIBLE &&
-                    binding.bottomControlsGroup.visibility == INVISIBLE
-                )
-        ) {
-            wasPausedBeforeSeeking = player.paused!!
-            showControls = binding.unlockedView.isVisible
-            binding.topControlsGroup.visibility = View.INVISIBLE
-            binding.middleControlsGroup.visibility = View.INVISIBLE
-            binding.bottomControlsGroup.visibility = View.INVISIBLE
-            player.paused = true
-            animationHandler.removeCallbacks(volumeViewRunnable)
-            animationHandler.removeCallbacks(brightnessViewRunnable)
-            animationHandler.removeCallbacks(seekTextRunnable)
-            binding.volumeView.visibility = View.GONE
-            binding.brightnessView.visibility = View.GONE
-            activity.binding.seekView.visibility = View.GONE
-            binding.seekBarGroup.visibility = View.VISIBLE
-            binding.unlockedView.visibility = View.VISIBLE
-            SeekState.mode = SeekState.SCROLL
-        }
-
-        val delay = if (SeekState.mode == SeekState.DOUBLE_TAP) 1000L else 500L
-
-        animationHandler.postDelayed(hideUiForSeekRunnable, delay)
-    }
-
-    private val animationHandler = Handler(Looper.getMainLooper())
-
-    // Fade out Player controls
-    internal val fadeOutControlsRunnable = Runnable { fadeOutControls() }
-
-    internal fun lockControls(locked: Boolean) {
-        SeekState.mode = if (locked) SeekState.LOCKED else SeekState.NONE
-        val itemView = if (locked) binding.unlockedView else binding.lockedView
-        itemView.visibility = View.GONE
-        showAndFadeControls()
-    }
-
-    internal fun toggleControls(isTapped: Boolean = false) {
-        val isControlsVisible = binding.lockedView.isVisible || binding.unlockedView.isVisible
-        if (!isControlsVisible && !player.paused!!) {
-            showAndFadeControls()
-        } else if (!isControlsVisible && player.paused!!) {
-            fadeInControls()
-        } else if (isTapped) {
-            fadeOutControls()
-        }
-    }
-
-    internal fun hideControls(hide: Boolean) {
-        animationHandler.removeCallbacks(fadeOutControlsRunnable)
-        if (hide) {
-            binding.unlockedView.visibility = View.GONE
-            binding.lockedView.visibility = View.GONE
-        } else {
-            showAndFadeControls()
-        }
-    }
-
-    @SuppressLint("SetTextI18n")
-    internal fun updatePlaybackPos(position: Int) {
-        val duration = player.duration
-        val invertedPlayback = playerPreferences.invertedPlayback().get()
-
-        if (duration != null) {
-            binding.playbackPositionBtn.text = when (invertedPlayback) {
-                InvertedPlayback.POSITION -> "-${Utils.prettyTime(duration - position)}"
-                InvertedPlayback.DURATION -> Utils.prettyTime(position)
-                InvertedPlayback.NONE -> Utils.prettyTime(position)
-            }
-            binding.playbackDurationBtn.text = when (invertedPlayback) {
-                InvertedPlayback.POSITION -> Utils.prettyTime(duration)
-                InvertedPlayback.DURATION -> "-${Utils.prettyTime(duration - position)}"
-                InvertedPlayback.NONE -> Utils.prettyTime(duration)
-            }
-            activity.viewModel.onSecondReached(position, duration)
-        }
-        seekbar.updateSeekbar(value = position.toFloat())
-        chapterText.updateCurrentChapterText(value = position.toFloat())
-    }
-
-    @SuppressLint("SetTextI18n")
-    internal fun updatePlaybackDuration(duration: Int) {
-        val position = player.timePos
-        val invertedPlayback = playerPreferences.invertedPlayback().get()
-        if (position != null) {
-            binding.playbackDurationBtn.text = when (invertedPlayback) {
-                InvertedPlayback.POSITION -> Utils.prettyTime(duration)
-                InvertedPlayback.DURATION -> "-${Utils.prettyTime(duration - position)}"
-                InvertedPlayback.NONE -> Utils.prettyTime(duration)
-            }
-        }
-
-        seekbar.updateSeekbar(duration = duration.toFloat())
-    }
-
-    internal fun updateBufferPosition(bufferPosition: Int) {
-        seekbar.updateSeekbar(readAheadValue = bufferPosition.toFloat())
-    }
-
-    internal fun showAndFadeControls() {
-        val itemView = if (SeekState.mode == SeekState.LOCKED) binding.lockedView else binding.unlockedView
-        if (!itemView.isVisible) fadeInControls()
-        itemView.visibility = View.VISIBLE
-        resetControlsFade()
-    }
-
-    internal fun resetControlsFade() {
-        val itemView = if (SeekState.mode == SeekState.LOCKED) binding.lockedView else binding.unlockedView
-        if (!itemView.isVisible) return
-        animationHandler.removeCallbacks(fadeOutControlsRunnable)
-        if (SeekState.mode == SeekState.SEEKBAR) return
-        animationHandler.postDelayed(fadeOutControlsRunnable, 3500L)
-    }
-
-    private fun fadeOutControls() {
-        animationHandler.removeCallbacks(fadeOutControlsRunnable)
-
-        AnimationUtils.loadAnimation(context, R.anim.player_fade_out).also { fadeAnimation ->
-            val itemView = if (SeekState.mode == SeekState.LOCKED) binding.lockedView else binding.unlockedView
-            itemView.startAnimation(fadeAnimation)
-            itemView.visibility = View.GONE
-        }
-
-        binding.seekBarGroup.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_exit_bottom),
-        )
-        if (!showControls) {
-            binding.topControlsGroup.startAnimation(
-                AnimationUtils.loadAnimation(context, R.anim.player_exit_top),
-            )
-            binding.bottomRightControlsGroup.startAnimation(
-                AnimationUtils.loadAnimation(context, R.anim.player_exit_right),
-            )
-            binding.bottomLeftControlsGroup.startAnimation(
-                AnimationUtils.loadAnimation(context, R.anim.player_exit_left),
-            )
-            binding.currentChapter.startAnimation(
-                AnimationUtils.loadAnimation(context, R.anim.player_exit_left),
-            )
-            binding.middleControlsGroup.startAnimation(
-                AnimationUtils.loadAnimation(context, R.anim.player_fade_out),
-            )
-        }
-        showControls = false
-    }
-
-    private fun fadeInControls() {
-        animationHandler.removeCallbacks(fadeOutControlsRunnable)
-
-        AnimationUtils.loadAnimation(context, R.anim.player_fade_in).also { fadeAnimation ->
-            val itemView = if (SeekState.mode == SeekState.LOCKED) binding.lockedView else binding.unlockedView
-            itemView.startAnimation(fadeAnimation)
-            itemView.visibility = View.VISIBLE
-        }
-
-        binding.seekBarGroup.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_enter_bottom),
-        )
-        binding.topControlsGroup.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_enter_top),
-        )
-        binding.bottomRightControlsGroup.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_enter_right),
-        )
-        binding.bottomLeftControlsGroup.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_enter_left),
-        )
-        binding.currentChapter.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_enter_left),
-        )
-        binding.middleControlsGroup.startAnimation(
-            AnimationUtils.loadAnimation(context, R.anim.player_fade_in),
-        )
-    }
-
-    internal fun playPause() {
-        player.cyclePause()
-        when {
-            player.paused!! -> animationHandler.removeCallbacks(fadeOutControlsRunnable)
-            binding.unlockedView.isVisible -> showAndFadeControls()
-        }
-    }
-
-    // Fade out Player information text
-    private val playerInformationRunnable = Runnable {
-        AnimationUtils.loadAnimation(context, R.anim.player_fade_out).also { fadeAnimation ->
-            binding.playerInformation.startAnimation(fadeAnimation)
-            binding.playerInformation.visibility = View.GONE
-        }
-    }
-
-    private fun cycleViewMode() {
-        AspectState.mode = when (AspectState.mode) {
-            AspectState.FIT -> AspectState.CROP
-            AspectState.CROP -> AspectState.STRETCH
-            else -> AspectState.FIT
-        }
-        setViewMode(showText = true)
-    }
-
-    internal fun setViewMode(showText: Boolean) {
-        binding.playerInformation.text = activity.stringResource(AspectState.mode.stringRes)
-        var aspect = "-1"
-        var pan = "1.0"
-        when (AspectState.mode) {
-            AspectState.CROP -> {
-                pan = "1.0"
-            }
-            AspectState.FIT -> {
-                pan = "0.0"
-            }
-            AspectState.STRETCH -> {
-                aspect = "${activity.deviceWidth}/${activity.deviceHeight}"
-                pan = "0.0"
-            }
-            AspectState.CUSTOM -> {
-                aspect = MPVLib.getPropertyString("video-aspect-override")
-            }
-        }
-
-        mpvUpdateAspect(aspect = aspect, pan = pan)
-        playerPreferences.aspectState().set(AspectState.mode)
-
-        if (showText) {
-            animationHandler.removeCallbacks(playerInformationRunnable)
-            binding.playerInformation.visibility = View.VISIBLE
-            animationHandler.postDelayed(playerInformationRunnable, 1000L)
-        }
-    }
-
-    private fun mpvUpdateAspect(aspect: String, pan: String) {
-        MPVLib.setPropertyString("video-aspect-override", aspect)
-        MPVLib.setPropertyString("panscan", pan)
-    }
-
-    internal fun toggleAutoplay(isAutoplay: Boolean) {
-        binding.toggleAutoplay.isChecked = isAutoplay
-        binding.toggleAutoplay.thumbDrawable = if (isAutoplay) {
-            ContextCompat.getDrawable(context, R.drawable.ic_play_circle_filled_24)
-        } else {
-            ContextCompat.getDrawable(context, R.drawable.ic_pause_circle_filled_24)
-        }
-
-        if (isAutoplay) {
-            binding.playerInformation.text = activity.getString(R.string.enable_auto_play)
-        } else {
-            binding.playerInformation.text = activity.getString(R.string.disable_auto_play)
-        }
-
-        if (!playerPreferences.autoplayEnabled().get() == isAutoplay) {
-            animationHandler.removeCallbacks(playerInformationRunnable)
-            binding.playerInformation.visibility = View.VISIBLE
-            animationHandler.postDelayed(playerInformationRunnable, 1000L)
-        }
-        playerPreferences.autoplayEnabled().set(isAutoplay)
-    }
-
-    // Fade out seek text
-    private val seekTextRunnable = Runnable {
-        activity.binding.seekView.visibility = View.GONE
-    }
-
-    // Slide out Volume Bar
-    private val volumeViewRunnable = Runnable {
-        AnimationUtils.loadAnimation(context, R.anim.player_exit_left).also { slideAnimation ->
-            if (SeekState.mode != SeekState.SCROLL) {
-                binding.volumeView.startAnimation(
-                    slideAnimation,
-                )
-            }
-            binding.volumeView.visibility = View.GONE
-        }
-    }
-
-    // Slide out Brightness Bar
-    private val brightnessViewRunnable = Runnable {
-        AnimationUtils.loadAnimation(context, R.anim.player_exit_right).also { slideAnimation ->
-            if (SeekState.mode != SeekState.SCROLL) {
-                binding.brightnessView.startAnimation(
-                    slideAnimation,
-                )
-            }
-            binding.brightnessView.visibility = View.GONE
-        }
-    }
-
-    private fun showGestureView(type: String) {
-        val callback: Runnable
-        val itemView: LinearLayout
-        val delay: Long
-        when (type) {
-            "seek" -> {
-                callback = seekTextRunnable
-                itemView = activity.binding.seekView
-                delay = 0L
-            }
-            "volume" -> {
-                callback = volumeViewRunnable
-                itemView = binding.volumeView
-                delay = 750L
-                if (!itemView.isVisible) {
-                    itemView.startAnimation(
-                        AnimationUtils.loadAnimation(context, R.anim.player_enter_left),
-                    )
-                }
-            }
-            "brightness" -> {
-                callback = brightnessViewRunnable
-                itemView = binding.brightnessView
-                delay = 750L
-                if (!itemView.isVisible) {
-                    itemView.startAnimation(
-                        AnimationUtils.loadAnimation(context, R.anim.player_enter_right),
-                    )
-                }
-            }
-            else -> return
-        }
-
-        animationHandler.removeCallbacks(callback)
-        itemView.visibility = View.VISIBLE
-        animationHandler.postDelayed(callback, delay)
-    }
-
-    internal fun showSeekText(position: Int, difference: Int) {
-        hideUiForSeek()
-        updatePlaybackPos(position)
-
-        val diffText = Utils.prettyTime(difference, true)
-        activity.binding.seekText.text = activity.getString(
-            R.string.ui_seek_distance,
-            Utils.prettyTime(position),
-            diffText,
-        )
-        showGestureView("seek")
-    }
-
-    internal fun showVolumeBar(showBar: Boolean, volume: Int) {
-        binding.volumeText.text = volume.toString()
-        binding.volumeBar.progress = volume
-        if (volume == 0) {
-            binding.volumeImg.setImageResource(R.drawable.ic_volume_off_24dp)
-        } else {
-            binding.volumeImg.setImageResource(R.drawable.ic_volume_on_20dp)
-        }
-        if (showBar) showGestureView("volume")
-    }
-
-    internal fun showBrightnessBar(showBar: Boolean, brightness: Int) {
-        binding.brightnessText.text = brightness.toString()
-        binding.brightnessBar.progress = abs(brightness)
-        if (brightness >= 0) {
-            binding.brightnessImg.setImageResource(R.drawable.ic_brightness_positive_20dp)
-            binding.brightnessBar.max = 100
-            binding.brightnessBar.secondaryProgress = 100
-        } else {
-            binding.brightnessImg.setImageResource(R.drawable.ic_brightness_negative_20dp)
-            binding.brightnessBar.max = 75
-            binding.brightnessBar.secondaryProgress = 75
-        }
-        if (showBar) showGestureView("brightness")
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PlayerEnums.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PlayerEnums.kt
deleted file mode 100644
index 414147a346..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/PlayerEnums.kt
+++ /dev/null
@@ -1,144 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer
-
-import android.os.Build
-import dev.icerock.moko.resources.StringResource
-import tachiyomi.i18n.MR
-
-/**
- * Results of the set as cover feature.
- */
-enum class SetAsCover {
-    Success,
-    AddToLibraryFirst,
-    Error,
-}
-
-/**
- * Player's inverted playback text handler
- */
-enum class InvertedPlayback {
-    NONE,
-    POSITION,
-    DURATION,
-}
-
-/**
- * Player's Picture-In-Picture state handler
- */
-enum class PipState {
-    OFF,
-    ON,
-    STARTED,
-    ;
-
-    companion object {
-        internal var mode: PipState = OFF
-    }
-}
-
-/**
- * Player's Seek state handler
- */
-enum class SeekState {
-    DOUBLE_TAP,
-    LOCKED,
-    NONE,
-    SCROLL,
-    SEEKBAR,
-    ;
-
-    companion object {
-        internal var mode = NONE
-    }
-}
-
-/**
- * Player's Video Aspect state handler
- */
-enum class AspectState(val stringRes: StringResource) {
-    CROP(stringRes = MR.strings.video_crop_screen),
-    FIT(stringRes = MR.strings.video_fit_screen),
-    STRETCH(stringRes = MR.strings.video_stretch_screen),
-    CUSTOM(stringRes = MR.strings.video_custom_screen),
-    ;
-
-    companion object {
-        internal var mode: AspectState = FIT
-    }
-}
-
-/**
- * Player's Hardware Decoder type handler
- */
-enum class HwDecState(val title: String, val mpvValue: String) {
-    HW_PLUS(title = "HW+", mpvValue = "mediacodec"),
-    HW(title = "HW", mpvValue = "mediacodec-copy"),
-    SW(title = "SW", mpvValue = "no"),
-    ;
-
-    companion object {
-        private val isWSA = Build.MODEL == "Subsystem for Android(TM)" ||
-            Build.BRAND == "Windows" ||
-            Build.BOARD == "windows"
-
-        internal val defaultHwDec = when {
-            isWSA -> SW
-            else -> HW_PLUS
-        }
-    }
-}
-
-/**
- * Player's Statistics Page handler
- */
-@Suppress("unused")
-enum class PlayerStatsPage(val stringRes: StringResource) {
-    OFF(stringRes = MR.strings.off),
-    PAGE1(stringRes = MR.strings.player_statistics_page_1),
-    PAGE2(stringRes = MR.strings.player_statistics_page_2),
-    PAGE3(stringRes = MR.strings.player_statistics_page_3),
-}
-
-/**
- * Player's debanding handler
- */
-enum class VideoDebanding(val stringRes: StringResource) {
-    NONE(stringRes = MR.strings.pref_debanding_none),
-    CPU(stringRes = MR.strings.pref_debanding_cpu),
-    GPU(stringRes = MR.strings.pref_debanding_gpu),
-}
-
-/**
- * Action performed by a button, like double tap or media controls
- */
-enum class SingleActionGesture(val stringRes: StringResource) {
-    None(stringRes = MR.strings.single_action_none),
-    Seek(stringRes = MR.strings.single_action_seek),
-    PlayPause(stringRes = MR.strings.single_action_playpause),
-    Switch(stringRes = MR.strings.single_action_switch),
-    Custom(stringRes = MR.strings.single_action_custom),
-}
-
-/**
- * Key codes sent through the `Custom` option in gestures
- */
-enum class CustomKeyCodes(val keyCode: String) {
-    DoubleTapLeft("0x10001"),
-    DoubleTapCenter("0x10002"),
-    DoubleTapRight("0x10003"),
-    MediaPrevious("0x10004"),
-    MediaPlay("0x10005"),
-    MediaNext("0x10006"),
-}
-
-enum class AudioChannels(val propertyName: String, val propertyValue: String, val textRes: StringResource) {
-    AutoSafe("audio-channels", "auto-safe", MR.strings.pref_player_audio_channels_auto_safe),
-    Auto("audio-channels", "auto", MR.strings.pref_player_audio_channels_auto),
-    Mono("audio-channels", "mono", MR.strings.pref_player_audio_channels_mono),
-    Stereo("audio-channels", "stereo", MR.strings.pref_player_audio_channels_stereo),
-    ReverseStereo(
-        "af",
-        "pan=[stereo|c0=c1|c1=c0]",
-        MR.strings.pref_player_audio_channels_reverse_stereo,
-    ),
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/CurrentChapter.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/CurrentChapter.kt
deleted file mode 100644
index 0d2c0b464a..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/CurrentChapter.kt
+++ /dev/null
@@ -1,133 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer.components
-
-import androidx.compose.animation.AnimatedContent
-import androidx.compose.animation.SizeTransform
-import androidx.compose.animation.fadeIn
-import androidx.compose.animation.fadeOut
-import androidx.compose.animation.slideInVertically
-import androidx.compose.animation.slideOutVertically
-import androidx.compose.animation.togetherWith
-import androidx.compose.foundation.background
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Row
-import androidx.compose.foundation.layout.padding
-import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.layout.wrapContentSize
-import androidx.compose.foundation.shape.RoundedCornerShape
-import androidx.compose.material3.Icon
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.draw.clip
-import androidx.compose.ui.graphics.vector.ImageVector
-import androidx.compose.ui.platform.ComposeView
-import androidx.compose.ui.res.vectorResource
-import androidx.compose.ui.text.font.FontWeight
-import androidx.compose.ui.text.style.TextAlign
-import androidx.compose.ui.text.style.TextOverflow
-import androidx.compose.ui.unit.dp
-import eu.kanade.tachiyomi.R
-import eu.kanade.tachiyomi.util.view.setComposeContent
-import `is`.xyz.mpv.MPVView.Chapter
-import `is`.xyz.mpv.Utils
-import tachiyomi.presentation.core.components.material.padding
-
-class CurrentChapter(
-    private val view: ComposeView,
-    private val onClick: () -> Unit,
-) {
-    private var value: Float = 0F
-    private var chapters: List<Chapter> = listOf()
-
-    fun updateCurrentChapterText(
-        value: Float? = null,
-        chapters: List<Chapter>? = null,
-    ) {
-        if (value != null) {
-            this.value = value
-        }
-        if (chapters != null) {
-            this.chapters = chapters
-        }
-        if (this.chapters.isEmpty()) {
-            return
-        }
-        val chapter = this.chapters.last { it.time <= (value ?: 0F).coerceAtLeast(0F) }
-        view.setComposeContent {
-            CurrentChapterComposable(
-                chapter = chapter,
-                onClick = onClick,
-                modifier = Modifier
-                    .padding(end = MaterialTheme.padding.large)
-                    .wrapContentSize(Alignment.CenterStart),
-            )
-        }
-    }
-
-    @Composable
-    private fun CurrentChapterComposable(
-        chapter: Chapter,
-        onClick: () -> Unit,
-        modifier: Modifier = Modifier,
-    ) {
-        Box(
-            modifier = modifier
-                .clip(RoundedCornerShape(25))
-                .background(MaterialTheme.colorScheme.background.copy(alpha = 0.6F))
-                .padding(horizontal = MaterialTheme.padding.medium, vertical = MaterialTheme.padding.small),
-        ) {
-            AnimatedContent(
-                targetState = chapter,
-                transitionSpec = {
-                    if (targetState.time > initialState.time) {
-                        (slideInVertically { height -> height } + fadeIn())
-                            .togetherWith(slideOutVertically { height -> -height } + fadeOut())
-                    } else {
-                        (slideInVertically { height -> -height } + fadeIn())
-                            .togetherWith(slideOutVertically { height -> height } + fadeOut())
-                    }.using(
-                        SizeTransform(clip = false),
-                    )
-                },
-                label = "Chapter",
-            ) { currentChapter ->
-                Row(modifier = Modifier.clickable { onClick() }) {
-                    Icon(
-                        imageVector = ImageVector.vectorResource(R.drawable.ic_video_chapter_20dp),
-                        contentDescription = null,
-                        modifier = Modifier
-                            .padding(end = MaterialTheme.padding.small)
-                            .size(16.dp),
-                    )
-                    Text(
-                        text = Utils.prettyTime(currentChapter.time.toInt()),
-                        textAlign = TextAlign.Center,
-                        fontWeight = FontWeight.ExtraBold,
-                        maxLines = 1,
-                        overflow = TextOverflow.Clip,
-                        color = MaterialTheme.colorScheme.tertiary,
-                    )
-                    currentChapter.title?.let {
-                        Text(
-                            text = " • ",
-                            textAlign = TextAlign.Center,
-                            maxLines = 1,
-                            overflow = TextOverflow.Clip,
-                        )
-                        Text(
-                            text = it,
-                            textAlign = TextAlign.Center,
-                            maxLines = 1,
-                            overflow = TextOverflow.Ellipsis,
-                            fontWeight = FontWeight.Bold,
-                            color = MaterialTheme.colorScheme.onBackground,
-                        )
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/DoubleTapSecondsView.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/DoubleTapSecondsView.kt
deleted file mode 100644
index d18f9ace4d..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/DoubleTapSecondsView.kt
+++ /dev/null
@@ -1,189 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer.components
-
-import android.animation.Animator
-import android.animation.ValueAnimator
-import android.content.Context
-import android.util.AttributeSet
-import android.view.LayoutInflater
-import android.widget.LinearLayout
-import androidx.annotation.DrawableRes
-import eu.kanade.tachiyomi.R
-import eu.kanade.tachiyomi.databinding.PlayerDoubleTapSeekViewBinding
-import tachiyomi.core.common.i18n.pluralStringResource
-import tachiyomi.i18n.MR
-
-/**
- * View that shows the arrows animation when double tapping to seek
- */
-class DoubleTapSecondsView(context: Context, attrs: AttributeSet?) : LinearLayout(context, attrs) {
-
-    var binding: PlayerDoubleTapSeekViewBinding
-
-    companion object {
-        const val ICON_ANIMATION_DURATION = 750L
-    }
-
-    var cycleDuration: Long = ICON_ANIMATION_DURATION
-        set(value) {
-            firstAnimator.duration = value / 5
-            secondAnimator.duration = value / 5
-            thirdAnimator.duration = value / 5
-            fourthAnimator.duration = value / 5
-            fifthAnimator.duration = value / 5
-            field = value
-        }
-
-    var seconds: Int = 0
-        set(value) {
-            binding.doubleTapSeconds.text = context.pluralStringResource(
-                MR.plurals.seconds,
-                value,
-                value,
-            )
-            field = value
-        }
-
-    var isForward: Boolean = true
-        set(value) {
-            binding.triangleContainer.rotation = if (value) 0f else 180f
-            field = value
-        }
-
-    @DrawableRes
-    var icon: Int = R.drawable.ic_play_seek_triangle
-        set(value) {
-            if (value > 0) {
-                binding.tri1.setImageResource(value)
-                binding.tri2.setImageResource(value)
-                binding.tri3.setImageResource(value)
-            }
-            field = value
-        }
-
-    init {
-        binding = PlayerDoubleTapSeekViewBinding.inflate(LayoutInflater.from(context), this)
-        orientation = VERTICAL
-        layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
-    }
-
-    fun start() {
-        stop()
-        firstAnimator.start()
-    }
-
-    fun stop() {
-        firstAnimator.cancel()
-        secondAnimator.cancel()
-        thirdAnimator.cancel()
-        fourthAnimator.cancel()
-        fifthAnimator.cancel()
-
-        reset()
-    }
-
-    private fun reset() {
-        binding.tri1.alpha = 0f
-        binding.tri2.alpha = 0f
-        binding.tri3.alpha = 0f
-    }
-
-    private val firstAnimator: ValueAnimator = CustomValueAnimator(
-        {
-            binding.tri1.alpha = 0f
-            binding.tri2.alpha = 0f
-            binding.tri3.alpha = 0f
-        },
-        {
-            binding.tri1.alpha = it
-        },
-        {
-            secondAnimator.start()
-        },
-    )
-
-    private val secondAnimator: ValueAnimator = CustomValueAnimator(
-        {
-            binding.tri1.alpha = 1f
-            binding.tri2.alpha = 0f
-            binding.tri3.alpha = 0f
-        },
-        {
-            binding.tri2.alpha = it
-        },
-        {
-            thirdAnimator.start()
-        },
-    )
-
-    private val thirdAnimator: ValueAnimator = CustomValueAnimator(
-        {
-            binding.tri1.alpha = 1f
-            binding.tri2.alpha = 1f
-            binding.tri3.alpha = 0f
-        },
-        {
-            binding.tri1.alpha = 1f - binding.tri3.alpha
-            binding.tri3.alpha = it
-        },
-        {
-            fourthAnimator.start()
-        },
-    )
-
-    private val fourthAnimator: ValueAnimator = CustomValueAnimator(
-        {
-            binding.tri1.alpha = 0f
-            binding.tri2.alpha = 1f
-            binding.tri3.alpha = 1f
-        },
-        {
-            binding.tri2.alpha = 1f - it
-        },
-        {
-            fifthAnimator.start()
-        },
-    )
-
-    private val fifthAnimator: ValueAnimator = CustomValueAnimator(
-        {
-            binding.tri1.alpha = 0f
-            binding.tri2.alpha = 0f
-            binding.tri3.alpha = 1f
-        },
-        {
-            binding.tri3.alpha = 1f - it
-        },
-        {
-            firstAnimator.start()
-        },
-    )
-
-    private inner class CustomValueAnimator(
-        start: () -> Unit,
-        update: (value: Float) -> Unit,
-        end: () -> Unit,
-    ) : ValueAnimator() {
-
-        init {
-            duration = cycleDuration / 5
-            setFloatValues(0f, 1f)
-
-            addUpdateListener { update(it.animatedValue as Float) }
-            addListener(
-                object : AnimatorListener {
-                    override fun onAnimationStart(animation: Animator) {
-                        start()
-                    }
-
-                    override fun onAnimationEnd(animation: Animator) {
-                        end()
-                    }
-
-                    override fun onAnimationCancel(animation: Animator) = Unit
-
-                    override fun onAnimationRepeat(animation: Animator) = Unit
-                },
-            )
-        }
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/Seekbar.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/Seekbar.kt
deleted file mode 100644
index 4895085b87..0000000000
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/viewer/components/Seekbar.kt
+++ /dev/null
@@ -1,132 +0,0 @@
-package eu.kanade.tachiyomi.ui.player.viewer.components
-
-import androidx.compose.animation.core.animateDpAsState
-import androidx.compose.foundation.interaction.MutableInteractionSource
-import androidx.compose.foundation.interaction.collectIsDraggedAsState
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableFloatStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.platform.ComposeView
-import androidx.compose.ui.unit.dp
-import dev.vivvvek.seeker.Seeker
-import dev.vivvvek.seeker.SeekerDefaults
-import dev.vivvvek.seeker.Segment
-import eu.kanade.tachiyomi.util.view.setComposeContent
-import `is`.xyz.mpv.MPVView.Chapter
-
-class Seekbar(
-    private val view: ComposeView,
-    private val onValueChange: (Float, Boolean) -> Unit,
-    private val onValueChangeFinished: (Float) -> Unit,
-) {
-    private var duration: Float = 1F
-    private var value: Float = 0F
-    private var readAheadValue: Float = 0F
-    private var chapters: List<Chapter> = listOf()
-    private var isDragging: Boolean = false
-
-    fun updateSeekbar(
-        duration: Float? = null,
-        value: Float? = null,
-        readAheadValue: Float? = null,
-        chapters: List<Chapter>? = null,
-    ) {
-        if (duration != null) {
-            this.duration = duration
-        }
-        if (value != null) {
-            this.value = value
-        }
-        if (readAheadValue != null) {
-            this.readAheadValue = readAheadValue
-        }
-        if (chapters != null) {
-            this.chapters = chapters
-        }
-
-        view.setComposeContent {
-            SeekbarComposable(
-                duration ?: this.duration,
-                value ?: this.value,
-                readAheadValue ?: this.readAheadValue,
-                chapters?.toSegments()
-                    ?: this.chapters.toSegments(),
-            )
-        }
-    }
-
-    @Composable
-    private fun SeekbarComposable(
-        duration: Float,
-        value: Float,
-        readAheadValue: Float,
-        segments: List<Segment>,
-    ) {
-        val range = 0F..duration
-        val validSegments = segments.filter { it.start in range }
-        var mutableValue by remember { mutableFloatStateOf(value) }
-        val interactionSource = remember { MutableInteractionSource() }
-        val isDragging by interactionSource.collectIsDraggedAsState()
-        val gap by animateDpAsState(if (isDragging) 5.dp else 2.dp, label = "gap")
-        val thumbRadius by animateDpAsState(if (isDragging) 10.dp else 8.dp, label = "thumbRadius")
-        val trackHeight by animateDpAsState(
-            targetValue = if (isDragging) 6.dp else 4.dp,
-            label = "trackHeight",
-        )
-        return Seeker(
-            value = value,
-            readAheadValue = readAheadValue,
-            range = range,
-            onValueChangeFinished = {
-                if (this.isDragging) {
-                    onValueChangeFinished(mutableValue)
-                    this.isDragging = false
-                }
-            },
-            onValueChange = {
-                mutableValue = it
-                if (isDragging) {
-                    val wasDragging = this.isDragging
-                    this.isDragging = true
-                    onValueChange(mutableValue, wasDragging)
-                } else {
-                    onValueChangeFinished(mutableValue)
-                }
-            },
-            segments = validSegments,
-            colors = SeekerDefaults.seekerColors(
-                progressColor = MaterialTheme.colorScheme.primary,
-                readAheadColor = MaterialTheme.colorScheme.onSurface,
-                trackColor = MaterialTheme.colorScheme.surface,
-                thumbColor = MaterialTheme.colorScheme.primary,
-            ),
-            dimensions = SeekerDefaults.seekerDimensions(
-                trackHeight = trackHeight,
-                gap = gap,
-                thumbRadius = thumbRadius,
-            ),
-            interactionSource = interactionSource,
-        )
-    }
-}
-
-@Composable
-private fun List<Chapter>.toSegments(): List<Segment> {
-    return this.sortedBy { it.time }.map {
-        // Color for AniSkip chapters
-        val color = if (it.index == -2) {
-            MaterialTheme.colorScheme.tertiary
-        } else {
-            Color.Unspecified
-        }
-        Segment(
-            it.title ?: "",
-            it.time.toFloat(),
-            color,
-        )
-    }
-}
diff --git a/app/src/main/java/eu/kanade/tachiyomi/util/AniSkipApi.kt b/app/src/main/java/eu/kanade/tachiyomi/util/AniSkipApi.kt
index cf475e0b87..42777ffde4 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/util/AniSkipApi.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/util/AniSkipApi.kt
@@ -1,15 +1,8 @@
 package eu.kanade.tachiyomi.util
 
-import android.annotation.SuppressLint
-import android.view.View
-import androidx.constraintlayout.widget.ConstraintLayout
-import androidx.core.view.updateLayoutParams
-import eu.kanade.tachiyomi.databinding.PlayerActivityBinding
 import eu.kanade.tachiyomi.network.GET
 import eu.kanade.tachiyomi.network.POST
 import eu.kanade.tachiyomi.network.jsonMime
-import eu.kanade.tachiyomi.ui.player.PlayerActivity
-import `is`.xyz.mpv.MPVLib
 import kotlinx.serialization.SerialName
 import kotlinx.serialization.Serializable
 import kotlinx.serialization.json.Json
@@ -17,9 +10,6 @@ import kotlinx.serialization.json.buildJsonObject
 import kotlinx.serialization.json.put
 import okhttp3.OkHttpClient
 import okhttp3.RequestBody.Companion.toRequestBody
-import tachiyomi.core.common.i18n.stringResource
-import tachiyomi.core.common.util.lang.withUIContext
-import tachiyomi.i18n.MR
 import uy.kohesive.injekt.injectLazy
 
 class AniSkipApi {
@@ -60,87 +50,6 @@ class AniSkipApi {
         return response.body.string().substringAfter("idMal\":").substringBefore("}")
             .toLongOrNull() ?: 0
     }
-
-    class PlayerUtils(
-        private val binding: PlayerActivityBinding,
-        private val aniSkipResponse: List<Stamp>,
-    ) {
-        private val playerControls get() = binding.playerControls
-        private val activity: PlayerActivity get() = binding.root.context as PlayerActivity
-
-        internal suspend fun showSkipButton(skipType: SkipType) {
-            val skipButtonString = when (skipType) {
-                SkipType.ED -> MR.strings.player_aniskip_ed
-                SkipType.OP -> MR.strings.player_aniskip_op
-                SkipType.RECAP -> MR.strings.player_aniskip_recap
-                SkipType.MIXED_OP -> MR.strings.player_aniskip_mixedOp
-            }
-            withUIContext {
-                playerControls.binding.controlsSkipIntroBtn.visibility = View.VISIBLE
-                playerControls.binding.controlsSkipIntroBtn.text = activity.stringResource(
-                    skipButtonString,
-                )
-            }
-        }
-
-        // this is used when netflixStyle is enabled
-        @SuppressLint("SetTextI18n")
-        suspend fun showSkipButton(skipType: SkipType, waitingTime: Int) {
-            val skipTime = when (skipType) {
-                SkipType.ED -> aniSkipResponse.first { it.skipType == SkipType.ED }.interval
-                SkipType.OP -> aniSkipResponse.first { it.skipType == SkipType.OP }.interval
-                SkipType.RECAP -> aniSkipResponse.first { it.skipType == SkipType.RECAP }.interval
-                SkipType.MIXED_OP -> aniSkipResponse.first { it.skipType == SkipType.MIXED_OP }.interval
-            }
-            if (waitingTime > -1) {
-                if (waitingTime > 0) {
-                    withUIContext {
-                        playerControls.binding.controlsSkipIntroBtn.visibility = View.VISIBLE
-                        playerControls.binding.controlsSkipIntroBtn.text = activity.stringResource(
-                            MR.strings.player_aniskip_dontskip,
-                        )
-                    }
-                } else {
-                    seekTo(skipTime.endTime)
-                    skipAnimation(skipType)
-                }
-            } else {
-                // when waitingTime is -1, it means that the user cancelled the skip
-                showSkipButton(skipType)
-            }
-        }
-
-        fun skipAnimation(skipType: SkipType) {
-            binding.secondsView.binding.doubleTapSeconds.text = activity.stringResource(
-                MR.strings.player_aniskip_skip,
-                skipType.getString(),
-            )
-
-            binding.secondsView.updateLayoutParams<ConstraintLayout.LayoutParams> {
-                rightToRight = ConstraintLayout.LayoutParams.PARENT_ID
-                leftToLeft = ConstraintLayout.LayoutParams.UNSET
-            }
-            binding.secondsView.visibility = View.VISIBLE
-            binding.secondsView.isForward = true
-
-            binding.ffwdBg.visibility = View.VISIBLE
-            binding.ffwdBg.animate().alpha(0.15f).setDuration(100).withEndAction {
-                binding.secondsView.animate().alpha(1f).setDuration(500).withEndAction {
-                    binding.secondsView.animate().alpha(0f).setDuration(500).withEndAction {
-                        binding.ffwdBg.animate().alpha(0f).setDuration(100).withEndAction {
-                            binding.ffwdBg.visibility = View.GONE
-                            binding.secondsView.visibility = View.GONE
-                            binding.secondsView.alpha = 1f
-                        }
-                    }
-                }
-            }.start()
-        }
-
-        private fun seekTo(time: Double) {
-            MPVLib.command(arrayOf("seek", time.toString(), "absolute"))
-        }
-    }
 }
 
 @Serializable
diff --git a/app/src/main/java/eu/kanade/tachiyomi/util/CrashLogUtil.kt b/app/src/main/java/eu/kanade/tachiyomi/util/CrashLogUtil.kt
index 6fda6e37e9..da6dc88429 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/util/CrashLogUtil.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/util/CrashLogUtil.kt
@@ -10,7 +10,6 @@ import eu.kanade.tachiyomi.util.system.WebViewUtil
 import eu.kanade.tachiyomi.util.system.createFileInCacheDir
 import eu.kanade.tachiyomi.util.system.toShareIntent
 import eu.kanade.tachiyomi.util.system.toast
-import `is`.xyz.mpv.Utils
 import tachiyomi.core.common.util.lang.withNonCancellableContext
 import tachiyomi.core.common.util.lang.withUIContext
 import uy.kohesive.injekt.Injekt
@@ -50,10 +49,15 @@ class CrashLogUtil(
             Device name: ${Build.DEVICE} (${Build.PRODUCT})
             Device model: ${Build.MODEL}
             WebView: ${WebViewUtil.getVersion(context)}
-            MPV version: ${Utils.VERSIONS.mpv}
-            Libplacebo version: ${Utils.VERSIONS.libPlacebo}
-            FFmpeg version: ${Utils.VERSIONS.ffmpeg}
+            MPV version: 6764488
+            Libplacebo version: v7.349.0
+            FFmpeg version: n7.1
         """.trimIndent()
+        // TODO: Use this again (from aniyomi-mpv-lib 1.17.n onwards):
+
+        //    MPV version: ${Utils.VERSIONS.mpv}
+        //    Libplacebo version: ${Utils.VERSIONS.libPlacebo}
+        //    FFmpeg version: ${Utils.VERSIONS.ffmpeg}
     }
 
     private fun getMangaExtensionsInfo(): String? {
diff --git a/app/src/main/java/eu/kanade/tachiyomi/util/SubtitleSelect.kt b/app/src/main/java/eu/kanade/tachiyomi/util/SubtitleSelect.kt
index 1770332282..f848e61ef5 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/util/SubtitleSelect.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/util/SubtitleSelect.kt
@@ -1,62 +1,48 @@
 package eu.kanade.tachiyomi.util
 
 import androidx.core.os.LocaleListCompat
-import eu.kanade.tachiyomi.animesource.model.Track
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
-import kotlinx.serialization.Serializable
-import kotlinx.serialization.SerializationException
-import kotlinx.serialization.json.Json
-import logcat.LogPriority
-import tachiyomi.core.common.util.system.logcat
-import uy.kohesive.injekt.injectLazy
+import eu.kanade.tachiyomi.ui.player.PlayerViewModel.VideoTrack
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
 import java.util.Locale
 
-class SubtitleSelect(private val playerPreferences: PlayerPreferences) {
+class SubtitleSelect(private val subtitlePreferences: SubtitlePreferences) {
 
-    private val json: Json by injectLazy()
+    fun getPreferredSubtitleIndex(tracks: List<VideoTrack>): VideoTrack? {
+        val prefLangs = subtitlePreferences.preferredSubLanguages().get().split(",")
+            .filter { it.isNotEmpty() }
+        val whitelist = subtitlePreferences.subtitleWhitelist().get().split(",")
+            .filter { it.isNotEmpty() }
+        val blacklist = subtitlePreferences.subtitleBlacklist().get().split(",")
+            .filter { it.isNotEmpty() }
 
-    fun getPreferredSubtitleIndex(tracks: List<Track>): Int? {
-        val config = try {
-            json.decodeFromString<SubConfig>(playerPreferences.subSelectConf().get())
-        } catch (e: SerializationException) {
-            logcat(LogPriority.WARN, e) { "Invalid subtitle select configuration" }
-            SubConfig()
-        }
-
-        val locales = config.lang.map(::Locale).ifEmpty {
+        val locales = prefLangs.map(::Locale).ifEmpty {
             listOf(LocaleListCompat.getDefault()[0]!!)
         }
+
         val chosenLocale = locales.firstOrNull { locale ->
-            tracks.any { t -> containsLang(t.lang, locale) }
+            tracks.any { t -> containsLang(t, locale) }
         } ?: return null
 
         val filtered = tracks.withIndex()
             .filterNot { (_, track) ->
-                config.blacklist.any { track.lang.contains(it, true) }
+                blacklist.any { track.name.contains(it, true) }
             }
             .filter { (_, track) ->
-                containsLang(track.lang, chosenLocale)
+                containsLang(track, chosenLocale)
             }
 
         return filtered.firstOrNull { (_, track) ->
-            config.whitelist.any { track.lang.contains(it, true) }
-        }?.index ?: filtered.getOrNull(0)?.index
+            whitelist.any { track.name.contains(it, true) }
+        }?.value ?: filtered.getOrNull(0)?.value
     }
 
-    private fun containsLang(title: String, locale: Locale): Boolean {
+    private fun containsLang(track: VideoTrack, locale: Locale): Boolean {
         val localName = locale.getDisplayName(locale)
         val englishName = locale.getDisplayName(Locale.ENGLISH).substringBefore(" (")
         val langRegex = Regex("""\b${locale.isO3Language}|${locale.language}\b""", RegexOption.IGNORE_CASE)
 
-        return title.contains(localName, true) ||
-            title.contains(englishName, true) ||
-            langRegex.find(title) != null
+        return track.name.contains(localName, true) ||
+            track.name.contains(englishName, true) ||
+            track.language?.let { langRegex.find(it) != null } == true
     }
-
-    @Serializable
-    data class SubConfig(
-        val lang: List<String> = emptyList(),
-        val blacklist: List<String> = emptyList(),
-        val whitelist: List<String> = emptyList(),
-    )
 }
diff --git a/app/src/main/java/mihon/core/migration/migrations/EnumsMigration.kt b/app/src/main/java/mihon/core/migration/migrations/EnumsMigration.kt
index 06bfc406c4..7ced737f9a 100644
--- a/app/src/main/java/mihon/core/migration/migrations/EnumsMigration.kt
+++ b/app/src/main/java/mihon/core/migration/migrations/EnumsMigration.kt
@@ -3,10 +3,8 @@ package mihon.core.migration.migrations
 import android.app.Application
 import androidx.core.content.edit
 import androidx.preference.PreferenceManager
-import eu.kanade.tachiyomi.ui.player.viewer.AspectState
-import eu.kanade.tachiyomi.ui.player.viewer.HwDecState
-import eu.kanade.tachiyomi.ui.player.viewer.InvertedPlayback
-import eu.kanade.tachiyomi.ui.player.viewer.VideoDebanding
+import eu.kanade.tachiyomi.ui.player.Debanding
+import eu.kanade.tachiyomi.ui.player.VideoAspect
 import mihon.core.migration.Migration
 import mihon.core.migration.MigrationContext
 import tachiyomi.core.common.preference.PreferenceStore
@@ -21,9 +19,6 @@ class EnumsMigration : Migration {
         val preferenceStore = migrationContext.get<PreferenceStore>() ?: return false
         val prefs = PreferenceManager.getDefaultSharedPreferences(context)
 
-        val invertedPosition = preferenceStore.getBoolean("pref_invert_playback_txt", false)
-        val invertedDuration = preferenceStore.getBoolean("pref_invert_duration_txt", false)
-        val hwDec = preferenceStore.getString("pref_hwdec", HwDecState.defaultHwDec.mpvValue)
         val deband = preferenceStore.getInt("pref_deband", 0)
         val playerViewMode = preferenceStore.getInt("pref_player_view_mode", 1)
         val gpuNext = preferenceStore.getBoolean("gpu_next", false)
@@ -36,19 +31,11 @@ class EnumsMigration : Migration {
             remove("pref_player_view_mode")
             remove("gpu_next")
 
-            val invertedPlayback = when {
-                invertedPosition.get() -> InvertedPlayback.POSITION
-                invertedDuration.get() -> InvertedPlayback.DURATION
-                else -> InvertedPlayback.NONE
-            }
-            val hardwareDecoding = HwDecState.entries.first { it.mpvValue == hwDec.get() }
-            val videoDebanding = VideoDebanding.entries.first { it.ordinal == deband.get() }
-            val aspectState = AspectState.entries.first { it.ordinal == playerViewMode.get() }
-
-            preferenceStore.getEnum("pref_inverted_playback", InvertedPlayback.NONE).set(invertedPlayback)
-            preferenceStore.getEnum("pref_hardware_decoding", HwDecState.defaultHwDec).set(hardwareDecoding)
-            preferenceStore.getEnum("pref_video_debanding", VideoDebanding.NONE).set(videoDebanding)
-            preferenceStore.getEnum("pref_player_aspect_state", AspectState.FIT).set(aspectState)
+            val videoDebanding = Debanding.entries.first { it.ordinal == deband.get() }
+            val aspectState = VideoAspect.entries.first { it.ordinal == playerViewMode.get() }
+
+            preferenceStore.getEnum("pref_video_debanding", Debanding.None).set(videoDebanding)
+            preferenceStore.getEnum("pref_player_aspect_state", VideoAspect.Fit).set(aspectState)
             preferenceStore.getBoolean("pref_gpu_next", false).set(gpuNext.get())
         }
 
diff --git a/app/src/main/java/mihon/core/migration/migrations/Migrations.kt b/app/src/main/java/mihon/core/migration/migrations/Migrations.kt
index 7e0eaae921..4d17c151fd 100644
--- a/app/src/main/java/mihon/core/migration/migrations/Migrations.kt
+++ b/app/src/main/java/mihon/core/migration/migrations/Migrations.kt
@@ -45,4 +45,5 @@ val migrations: List<Migration>
         EnumsMigration(),
         TrustExtensionRepositoryMigration(),
         VideoPlayerPreferenceMigration(),
+        VideoOrientationMigration(),
     )
diff --git a/app/src/main/java/mihon/core/migration/migrations/MovePlayerPreferencesMigration.kt b/app/src/main/java/mihon/core/migration/migrations/MovePlayerPreferencesMigration.kt
index de277be69a..4db5f2c4aa 100644
--- a/app/src/main/java/mihon/core/migration/migrations/MovePlayerPreferencesMigration.kt
+++ b/app/src/main/java/mihon/core/migration/migrations/MovePlayerPreferencesMigration.kt
@@ -4,6 +4,7 @@ import android.app.Application
 import android.content.Context
 import androidx.core.content.edit
 import androidx.preference.PreferenceManager
+import eu.kanade.tachiyomi.ui.player.settings.GesturePreferences
 import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
 import mihon.core.migration.Migration
 import mihon.core.migration.MigrationContext
@@ -16,13 +17,12 @@ class MovePlayerPreferencesMigration : Migration {
     override suspend fun invoke(migrationContext: MigrationContext): Boolean {
         val context = migrationContext.get<Application>() ?: return false
         val playerPreferences = migrationContext.get<PlayerPreferences>() ?: return false
+        val gesturePreferences = migrationContext.get<GesturePreferences>() ?: return false
         val prefs = PreferenceManager.getDefaultSharedPreferences(context)
 
         listOf(
             playerPreferences.defaultPlayerOrientationType(),
-            playerPreferences.defaultPlayerOrientationLandscape(),
-            playerPreferences.defaultPlayerOrientationPortrait(),
-            playerPreferences.skipLengthPreference(),
+            gesturePreferences.skipLengthPreference(),
         ).forEach { pref ->
             if (pref.isSet()) {
                 prefs.edit {
diff --git a/app/src/main/java/mihon/core/migration/migrations/VideoOrientationMigration.kt b/app/src/main/java/mihon/core/migration/migrations/VideoOrientationMigration.kt
new file mode 100644
index 0000000000..0dd5fa58f4
--- /dev/null
+++ b/app/src/main/java/mihon/core/migration/migrations/VideoOrientationMigration.kt
@@ -0,0 +1,52 @@
+package mihon.core.migration.migrations
+
+import android.app.Application
+import android.content.pm.ActivityInfo
+import androidx.core.content.edit
+import androidx.preference.PreferenceManager
+import eu.kanade.tachiyomi.ui.player.PlayerOrientation
+import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import mihon.core.migration.Migration
+import mihon.core.migration.MigrationContext
+import tachiyomi.core.common.preference.PreferenceStore
+import tachiyomi.core.common.preference.getEnum
+
+class VideoOrientationMigration : Migration {
+    override val version = 127f
+
+    override suspend fun invoke(migrationContext: MigrationContext): Boolean {
+        val context = migrationContext.get<Application>() ?: return false
+        val playerPreferences = migrationContext.get<PlayerPreferences>() ?: return false
+        val preferenceStore = migrationContext.get<PreferenceStore>() ?: return false
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+
+        val oldPref = prefs.getInt(
+            playerPreferences.defaultPlayerOrientationType().key(),
+            10,
+        )
+
+        val newPref = when (oldPref) {
+            ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR -> PlayerOrientation.Free
+            ActivityInfo.SCREEN_ORIENTATION_PORTRAIT -> PlayerOrientation.Portrait
+            ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT -> PlayerOrientation.ReversePortrait
+            ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE -> PlayerOrientation.Landscape
+            ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE -> PlayerOrientation.ReverseLandscape
+            ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT -> PlayerOrientation.SensorPortrait
+            ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE -> PlayerOrientation.SensorLandscape
+            else -> PlayerOrientation.Free
+        }
+
+        prefs.edit(commit = true) {
+            remove(playerPreferences.defaultPlayerOrientationType().key())
+        }
+
+        prefs.edit {
+            preferenceStore.getEnum(
+                playerPreferences.defaultPlayerOrientationType().key(),
+                PlayerOrientation.SensorLandscape,
+            ).set(newPref)
+        }
+
+        return true
+    }
+}
diff --git a/app/src/main/java/mihon/core/migration/migrations/VideoPlayerPreferenceMigration.kt b/app/src/main/java/mihon/core/migration/migrations/VideoPlayerPreferenceMigration.kt
index 97f504d4f3..6c3fdc1cac 100644
--- a/app/src/main/java/mihon/core/migration/migrations/VideoPlayerPreferenceMigration.kt
+++ b/app/src/main/java/mihon/core/migration/migrations/VideoPlayerPreferenceMigration.kt
@@ -3,7 +3,7 @@ package mihon.core.migration.migrations
 import android.app.Application
 import androidx.core.content.edit
 import androidx.preference.PreferenceManager
-import eu.kanade.tachiyomi.ui.player.settings.PlayerPreferences
+import eu.kanade.tachiyomi.ui.player.settings.SubtitlePreferences
 import kotlinx.serialization.Serializable
 import kotlinx.serialization.SerializationException
 import kotlinx.serialization.json.Json
@@ -18,7 +18,7 @@ class VideoPlayerPreferenceMigration : Migration {
 
     override suspend fun invoke(migrationContext: MigrationContext): Boolean {
         val context = migrationContext.get<Application>() ?: return false
-        val playerPreferences = migrationContext.get<PlayerPreferences>() ?: return false
+        val subtitlePreferences = migrationContext.get<SubtitlePreferences>() ?: return false
         val prefs = PreferenceManager.getDefaultSharedPreferences(context)
 
         val subtitleConf = prefs.getString("pref_sub_select_conf", "")!!
@@ -29,9 +29,9 @@ class VideoPlayerPreferenceMigration : Migration {
         }
 
         prefs.edit {
-            putString(playerPreferences.preferredSubLanguages().key(), subtitleData.lang.joinToString(","))
-            putString(playerPreferences.subtitleWhitelist().key(), subtitleData.whitelist.joinToString(","))
-            putString(playerPreferences.subtitleBlacklist().key(), subtitleData.blacklist.joinToString(","))
+            putString(subtitlePreferences.preferredSubLanguages().key(), subtitleData.lang.joinToString(","))
+            putString(subtitlePreferences.subtitleWhitelist().key(), subtitleData.whitelist.joinToString(","))
+            putString(subtitlePreferences.subtitleBlacklist().key(), subtitleData.blacklist.joinToString(","))
         }
 
         return true
diff --git a/app/src/main/res/drawable/anim_play_to_pause.xml b/app/src/main/res/drawable/anim_play_to_pause.xml
new file mode 100644
index 0000000000..7685144e4c
--- /dev/null
+++ b/app/src/main/res/drawable/anim_play_to_pause.xml
@@ -0,0 +1,44 @@
+<animated-vector
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt">
+    <aapt:attr name="android:drawable">
+        <vector
+            android:name="playtopause"
+            android:width="24dp"
+            android:height="24dp"
+            android:viewportWidth="24"
+            android:viewportHeight="24">
+            <group
+                android:name="group"
+                android:pivotX="12"
+                android:pivotY="12">
+                <path
+                    android:name="path"
+                    android:pathData="M 8 5 L 8 19 L 19 12 Z"
+                    android:fillColor="#FFF" />
+            </group>
+        </vector>
+    </aapt:attr>
+    <target android:name="path">
+        <aapt:attr name="android:animation">
+            <objectAnimator
+                android:propertyName="pathData"
+                android:duration="300"
+                android:valueFrom="M 8 5 L 8 12 L 19 12 L 19 12 L 8 5 M 8 12 L 8 19 L 19 12 L 19 12 L 8 12"
+                android:valueTo="M 5 6 L 5 10 L 19 10 L 19 6 L 5 6 M 5 14 L 5 18 L 19 18 L 19 14 L 5 14"
+                android:valueType="pathType"
+                android:interpolator="@android:interpolator/fast_out_slow_in"/>
+        </aapt:attr>
+    </target>
+    <target android:name="group">
+        <aapt:attr name="android:animation">
+            <objectAnimator
+                android:propertyName="rotation"
+                android:duration="300"
+                android:valueFrom="0"
+                android:valueTo="90"
+                android:valueType="floatType"
+                android:interpolator="@android:interpolator/fast_out_slow_in"/>
+        </aapt:attr>
+    </target>
+</animated-vector>
diff --git a/app/src/main/res/drawable/ic_arrow_back_20dp.xml b/app/src/main/res/drawable/ic_arrow_back_20dp.xml
deleted file mode 100644
index 06a672f63e..0000000000
--- a/app/src/main/res/drawable/ic_arrow_back_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-  <path
-      android:fillColor="#000"
-      android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_blank_24dp.xml b/app/src/main/res/drawable/ic_blank_24dp.xml
deleted file mode 100644
index 940db069fd..0000000000
--- a/app/src/main/res/drawable/ic_blank_24dp.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<shape xmlns:android="http://schemas.android.com/apk/res/android"
-    android:shape="rectangle">
-    <size
-        android:width="24dp"
-        android:height="24dp" />
-    <solid android:color="@android:color/transparent" />
-</shape>
diff --git a/app/src/main/res/drawable/ic_brightness_positive_20dp.xml b/app/src/main/res/drawable/ic_brightness_positive_20dp.xml
deleted file mode 100644
index 5c4839f0f3..0000000000
--- a/app/src/main/res/drawable/ic_brightness_positive_20dp.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="45.16"
-    android:viewportHeight="45.16">
-
-    <path
-        android:fillColor="#000000"
-        android:pathData="M22.58,11.269c-6.237,0-11.311,5.075-11.311,11.312s5.074,11.312,11.311,11.312c6.236,0,11.311-5.074,11.311-11.312 S28.816,11.269,22.58,11.269z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M22.58,7.944c-1.219,0-2.207-0.988-2.207-2.206V2.207C20.373,0.988,21.361,0,22.58,0c1.219,0,2.207,0.988,2.207,2.207 v3.531C24.787,6.956,23.798,7.944,22.58,7.944z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M22.58,37.215c-1.219,0-2.207,0.988-2.207,2.207v3.53c0,1.22,0.988,2.208,2.207,2.208c1.219,0,2.207-0.988,2.207-2.208 v-3.53C24.787,38.203,23.798,37.215,22.58,37.215z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M32.928,12.231c-0.861-0.862-0.861-2.259,0-3.121l2.497-2.497c0.861-0.861,2.259-0.861,3.121,0 c0.862,0.862,0.862,2.26,0,3.121l-2.497,2.497C35.188,13.093,33.791,13.093,32.928,12.231z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M12.231,32.93c-0.862-0.863-2.259-0.863-3.121,0l-2.497,2.496c-0.861,0.861-0.862,2.26,0,3.121 c0.862,0.861,2.26,0.861,3.121,0l2.497-2.498C13.093,35.188,13.093,33.79,12.231,32.93z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M37.215,22.58c0-1.219,0.988-2.207,2.207-2.207h3.531c1.219,0,2.207,0.988,2.207,2.207c0,1.219-0.988,2.206-2.207,2.206 h-3.531C38.203,24.786,37.215,23.799,37.215,22.58z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M7.944,22.58c0-1.219-0.988-2.207-2.207-2.207h-3.53C0.988,20.373,0,21.361,0,22.58c0,1.219,0.988,2.206,2.207,2.206 h3.531C6.956,24.786,7.944,23.799,7.944,22.58z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M32.928,32.93c0.862-0.861,2.26-0.861,3.121,0l2.497,2.497c0.862,0.86,0.862,2.259,0,3.12s-2.259,0.861-3.121,0 l-2.497-2.497C32.066,35.188,32.066,33.791,32.928,32.93z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M12.231,12.231c0.862-0.862,0.862-2.259,0-3.121L9.734,6.614c-0.862-0.862-2.259-0.862-3.121,0 c-0.862,0.861-0.862,2.259,0,3.12l2.497,2.497C9.972,13.094,11.369,13.094,12.231,12.231z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_fullscreen_black_20dp.xml b/app/src/main/res/drawable/ic_fullscreen_black_20dp.xml
deleted file mode 100644
index 61a16eb980..0000000000
--- a/app/src/main/res/drawable/ic_fullscreen_black_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-  <path
-      android:fillColor="#000"
-      android:pathData="M7,14L5,14v5h5v-2L7,17v-3zM5,10h2L7,7h3L10,5L5,5v5zM17,17h-3v2h5v-5h-2v3zM14,5v2h3v3h2L19,5h-5z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_lock_20dp.xml b/app/src/main/res/drawable/ic_lock_20dp.xml
deleted file mode 100644
index c9022deb98..0000000000
--- a/app/src/main/res/drawable/ic_lock_20dp.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-
-    <path
-        android:fillColor="#000"
-        android:pathData="M18,8h-1L17,6c0,-2.76 -2.24,-5 -5,-5S7,3.24 7,6v2L6,8c-1.1,0 -2,0.9 -2,2v10c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L20,10c0,-1.1 -0.9,-2 -2,-2zM12,17c-1.1,0 -2,-0.9 -2,-2s0.9,-2 2,-2 2,0.9 2,2 -0.9,2 -2,2zM15.1,8L8.9,8L8.9,6c0,-1.71 1.39,-3.1 3.1,-3.1 1.71,0 3.1,1.39 3.1,3.1v2z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_navigate_next_20dp.xml b/app/src/main/res/drawable/ic_navigate_next_20dp.xml
deleted file mode 100644
index fd810a00f9..0000000000
--- a/app/src/main/res/drawable/ic_navigate_next_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M10,6L8.59,7.41 13.17,12l-4.58,4.59L10,18l6,-6z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_overflow_20dp.xml b/app/src/main/res/drawable/ic_overflow_20dp.xml
deleted file mode 100644
index bcb0ab6db5..0000000000
--- a/app/src/main/res/drawable/ic_overflow_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M12,8c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM12,10c-1.1,0 -2,0.9 -2,2s0.9,2 2,2 2,-0.9 2,-2 -0.9,-2 -2,-2zM12,16c-1.1,0 -2,0.9 -2,2s0.9,2 2,2 2,-0.9 2,-2 -0.9,-2 -2,-2z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_pause_64dp.xml b/app/src/main/res/drawable/ic_pause_64dp.xml
deleted file mode 100644
index f6488ba49d..0000000000
--- a/app/src/main/res/drawable/ic_pause_64dp.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:height="64dp"
-    android:width="64dp"
-    android:tint="?attr/colorControlNormal"
-    android:viewportHeight="24"
-    android:viewportWidth="24" >
-    <path
-        android:fillColor="#FFF"
-        android:pathData="M6,19h4L10,5L6,5v14zM14,5v14h4L18,5h-4z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_picture_in_picture_20dp.xml b/app/src/main/res/drawable/ic_picture_in_picture_20dp.xml
deleted file mode 100644
index 7df3cd8f7e..0000000000
--- a/app/src/main/res/drawable/ic_picture_in_picture_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M19,11h-8v6h8v-6zM23,19L23,4.98C23,3.88 22.1,3 21,3L3,3c-1.1,0 -2,0.88 -2,1.98L1,19c0,1.1 0.9,2 2,2h18c1.1,0 2,-0.9 2,-2zM21,19.02L3,19.02L3,4.97h18v14.05z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_play_arrow_64dp.xml b/app/src/main/res/drawable/ic_play_arrow_64dp.xml
deleted file mode 100644
index bafcd2df25..0000000000
--- a/app/src/main/res/drawable/ic_play_arrow_64dp.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:height="64dp"
-    android:width="64dp"
-    android:tint="?attr/colorControlNormal"
-    android:viewportHeight="24"
-    android:viewportWidth="24" >
-    <path
-        android:fillColor="#FFF"
-        android:pathData="M8,5v14l11,-7z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_play_pause_bg.xml b/app/src/main/res/drawable/ic_play_pause_bg.xml
deleted file mode 100644
index e5710fac4e..0000000000
--- a/app/src/main/res/drawable/ic_play_pause_bg.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<shape xmlns:android="http://schemas.android.com/apk/res/android"
-    android:shape="oval">
-    <gradient android:startColor="#000000"
-        android:endColor="#00FFFFFF"
-        android:type="radial"
-        android:gradientRadius="40dp" />
-</shape>
diff --git a/app/src/main/res/drawable/ic_save_24dp.xml b/app/src/main/res/drawable/ic_save_24dp.xml
deleted file mode 100644
index 3b04bdb21e..0000000000
--- a/app/src/main/res/drawable/ic_save_24dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="24dp"
-    android:height="24dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-  <path
-      android:fillColor="#000"
-      android:pathData="M17,3L5,3c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2L21,7l-4,-4zM19,19L5,19L5,5h11.17L19,7.83L19,19zM12,12c-1.66,0 -3,1.34 -3,3s1.34,3 3,3 3,-1.34 3,-3 -1.34,-3 -3,-3zM6,6h9v4L6,10z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_screen_rotation_20dp.xml b/app/src/main/res/drawable/ic_screen_rotation_20dp.xml
deleted file mode 100644
index 2a255fd2e0..0000000000
--- a/app/src/main/res/drawable/ic_screen_rotation_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M16.48,2.52c3.27,1.55 5.61,4.72 5.97,8.48h1.5C23.44,4.84 18.29,0 12,0l-0.66,0.03 3.81,3.81 1.33,-1.32zM10.23,1.75c-0.59,-0.59 -1.54,-0.59 -2.12,0L1.75,8.11c-0.59,0.59 -0.59,1.54 0,2.12l12.02,12.02c0.59,0.59 1.54,0.59 2.12,0l6.36,-6.36c0.59,-0.59 0.59,-1.54 0,-2.12L10.23,1.75zM14.83,21.19L2.81,9.17l6.36,-6.36 12.02,12.02 -6.36,6.36zM7.52,21.48C4.25,19.94 1.91,16.76 1.55,13L0.05,13C0.56,19.16 5.71,24 12,24l0.66,-0.03 -3.81,-3.81 -1.33,1.32z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_skip_next_40dp.xml b/app/src/main/res/drawable/ic_skip_next_40dp.xml
deleted file mode 100644
index a53cbaf25d..0000000000
--- a/app/src/main/res/drawable/ic_skip_next_40dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="48dp"
-    android:height="48dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M6,18l8.5,-6L6,6v12zM16,6v12h2V6h-2z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_skip_previous_40dp.xml b/app/src/main/res/drawable/ic_skip_previous_40dp.xml
deleted file mode 100644
index 21d1974791..0000000000
--- a/app/src/main/res/drawable/ic_skip_previous_40dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="40dp"
-    android:height="40dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M6,6h2v12L6,18zM9.5,12l8.5,6L18,6z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_unlock_20dp.xml b/app/src/main/res/drawable/ic_unlock_20dp.xml
deleted file mode 100644
index d2f9f851e8..0000000000
--- a/app/src/main/res/drawable/ic_unlock_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportHeight="24"
-    android:viewportWidth="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M12,17c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM18,8h-1L17,6c0,-2.76 -2.24,-5 -5,-5S7,3.24 7,6h1.9c0,-1.71 1.39,-3.1 3.1,-3.1 1.71,0 3.1,1.39 3.1,3.1v2L6,8c-1.1,0 -2,0.9 -2,2v10c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L20,10c0,-1.1 -0.9,-2 -2,-2zM18,20L6,20L6,10h12v10z"/>
-</vector>
diff --git a/app/src/main/res/drawable/ic_video_settings_20dp.xml b/app/src/main/res/drawable/ic_video_settings_20dp.xml
deleted file mode 100644
index 8512ee95fd..0000000000
--- a/app/src/main/res/drawable/ic_video_settings_20dp.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-
-    <path
-        android:pathData="M 0 0 H 24 V 24 H 0 V 0 Z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M3,6h18v5h2V6c0-1.1-0.9-2-2-2H3C1.9,4,1,4.9,1,6v12c0,1.1,0.9,2,2,2h9v-2H3V6z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M 15 12 L 9 8 L 9 16 Z" />
-    <path
-        android:fillColor="#000000"
-        android:pathData="M22.71,18.43c0.03-0.29,0.04-0.58,0.01-0.86l1.07-0.85c0.1-0.08,0.12-0.21,0.06-0.32l-1.03-1.79 c-0.06-0.11-0.19-0.15-0.31-0.11L21.23,15c-0.23-0.17-0.48-0.31-0.75-0.42l-0.2-1.36C20.26,13.09,20.16,13,20.03,13h-2.07 c-0.12,0-0.23,0.09-0.25,0.21l-0.2,1.36c-0.26,0.11-0.51,0.26-0.74,0.42l-1.28-0.5c-0.12-0.05-0.25,0-0.31,0.11l-1.03,1.79 c-0.06,0.11-0.04,0.24,0.06,0.32l1.07,0.86c-0.03,0.29-0.04,0.58-0.01,0.86l-1.07,0.85c-0.1,0.08-0.12,0.21-0.06,0.32l1.03,1.79 c0.06,0.11,0.19,0.15,0.31,0.11l1.27-0.5c0.23,0.17,0.48,0.31,0.75,0.42l0.2,1.36c0.02,0.12,0.12,0.21,0.25,0.21h2.07 c0.12,0,0.23-0.09,0.25-0.21l0.2-1.36c0.26-0.11,0.51-0.26,0.74-0.42l1.28,0.5c0.12,0.05,0.25,0,0.31-0.11l1.03-1.79 c0.06-0.11,0.04-0.24-0.06-0.32L22.71,18.43z M19,19.5c-0.83,0-1.5-0.67-1.5-1.5s0.67-1.5,1.5-1.5s1.5,0.67,1.5,1.5 S19.83,19.5,19,19.5z" />
-</vector>
diff --git a/app/src/main/res/drawable/ic_volume_on_20dp.xml b/app/src/main/res/drawable/ic_volume_on_20dp.xml
deleted file mode 100644
index 7efdaf5df9..0000000000
--- a/app/src/main/res/drawable/ic_volume_on_20dp.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="20dp"
-    android:height="20dp"
-    android:viewportWidth="24"
-    android:viewportHeight="24">
-    <path
-        android:fillColor="#000"
-        android:pathData="M3,9v6h4l5,5L12,4L7,9L3,9zM16.5,12c0,-1.77 -1.02,-3.29 -2.5,-4.03v8.05c1.48,-0.73 2.5,-2.25 2.5,-4.02zM14,3.23v2.06c2.89,0.86 5,3.54 5,6.71s-2.11,5.85 -5,6.71v2.06c4.01,-0.91 7,-4.49 7,-8.77s-2.99,-7.86 -7,-8.77z"/>
-</vector>
diff --git a/app/src/main/res/drawable/outline_brand_family_24.xml b/app/src/main/res/drawable/outline_brand_family_24.xml
new file mode 100644
index 0000000000..e27f3f9f35
--- /dev/null
+++ b/app/src/main/res/drawable/outline_brand_family_24.xml
@@ -0,0 +1,5 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
+
+    <path android:fillColor="@android:color/white" android:pathData="M186,880Q132,880 106,858Q80,836 80,792Q80,734 129,718Q178,702 245,702L266,702L266,646Q266,612 265,590.5Q264,569 259,555Q254,541 247.5,535.5Q241,530 230,530Q221,530 213.5,533Q206,536 201,541Q197,546 196,551.5Q195,557 197,563Q203,574 211,584.5Q219,595 219,609Q219,634 201.5,651.5Q184,669 159,669Q134,669 116.5,651.5Q99,634 99,609Q99,582 111,565Q123,548 143.5,538Q164,528 191,524Q218,520 249,520Q334,520 367,550.5Q400,581 400,658L400,805Q400,824 404.5,833Q409,842 420,842Q432,842 439.5,824Q447,806 449,768L460,768Q457,830 436.5,855Q416,880 368,880Q325,880 300.5,866.5Q276,853 269,826Q259,855 239.5,867.5Q220,880 186,880ZM559,880Q539,880 526.5,863.5Q514,847 522,828L624,559Q631,542 646,531Q661,520 680,520Q699,520 714,531Q729,542 736,559L838,828Q846,847 833.5,863.5Q821,880 801,880Q789,880 779,873Q769,866 764,854L744,796L616,796L596,854Q592,865 582,872.5Q572,880 559,880ZM235,851Q248,851 257,830.5Q266,810 266,781L266,714Q240,714 228,729.5Q216,745 216,780L216,791Q216,827 220,839Q224,851 235,851ZM642,726L719,726L680,612L642,726ZM605,441Q557,441 528.5,407.5Q500,374 500,317Q500,213 566,146.5Q632,80 735,80Q777,80 803,89.5Q829,99 829,114Q829,120 827,126Q825,132 820,137Q815,144 807.5,147Q800,150 792,148Q778,144 760,141Q742,138 727,138Q656,138 613,186Q570,234 570,313Q570,335 578,359Q586,383 614,383Q625,383 635.5,378Q646,373 654,364Q671,346 685.5,304Q700,262 712,202Q714,189 722.5,183.5Q731,178 746,178Q764,178 773.5,187.5Q783,197 779,211Q767,254 761.5,286Q756,318 756,344Q756,364 761.5,373Q767,382 778,382Q789,382 799.5,374Q810,366 829,344Q831,341 844,337Q852,337 856,343Q860,349 860,360Q860,388 828,414Q796,440 761,440Q735,440 716.5,426Q698,412 691,386Q676,412 654,426.5Q632,441 605,441ZM120,440L120,220Q120,162 161,121Q202,80 260,80Q318,80 359,121Q400,162 400,220L400,440L320,440L320,360L200,360L200,440L120,440ZM200,280L320,280L320,220Q320,195 302.5,177.5Q285,160 260,160Q235,160 217.5,177.5Q200,195 200,220L200,280Z"/>
+
+</vector>
diff --git a/app/src/main/res/drawable/player_bar.xml b/app/src/main/res/drawable/player_bar.xml
deleted file mode 100644
index 8676241fa6..0000000000
--- a/app/src/main/res/drawable/player_bar.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:id="@android:id/background">
-        <shape>
-            <corners android:radius="50dp" />
-            <solid android:color="?attr/colorSecondaryVariant"/>
-        </shape>
-    </item>
-    <item android:id="@android:id/secondaryProgress">
-        <clip android:clipOrientation="vertical" android:gravity="bottom">
-            <shape>
-                <corners android:radius="50dp" />
-                <solid android:color="#99DDDDDD"/>
-            </shape>
-        </clip>
-    </item>
-    <item android:id="@android:id/progress">
-        <clip android:clipOrientation="vertical" android:gravity="bottom">
-            <shape>
-                <corners android:radius="50dp" />
-                <solid android:color="?attr/colorPrimary"/>
-            </shape>
-        </clip>
-    </item>
-</layer-list>
diff --git a/app/src/main/res/drawable/sharp_shadow_24.xml b/app/src/main/res/drawable/sharp_shadow_24.xml
new file mode 100644
index 0000000000..b608f5b7a8
--- /dev/null
+++ b/app/src/main/res/drawable/sharp_shadow_24.xml
@@ -0,0 +1,5 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="960" android:viewportWidth="960" android:width="24dp">
+
+    <path android:fillColor="@android:color/white" android:pathData="M80,880L80,240L240,240L240,80L880,80L880,720L720,720L720,880L80,880ZM320,640L800,640L800,160L320,160L320,640Z"/>
+
+</vector>
diff --git a/app/src/main/res/layout/player_activity.xml b/app/src/main/res/layout/player_activity.xml
deleted file mode 100644
index 6b874e16d7..0000000000
--- a/app/src/main/res/layout/player_activity.xml
+++ /dev/null
@@ -1,187 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/player_activity"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:clipChildren="false"
-    android:clipToPadding="false"
-    tools:context=".ui.player.PlayerActivity"
-    tools:ignore="RtlHardcoded,HardcodedText,ContentDescription" >
-
-    <is.xyz.mpv.MPVView
-        android:id="@+id/player"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent" />
-
-    <androidx.compose.ui.platform.ComposeView
-        android:id="@+id/dialog_root"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent" />
-
-    <androidx.compose.ui.platform.ComposeView
-        android:id="@+id/sheet_root"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent" />
-
-    <androidx.constraintlayout.widget.ConstraintLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:clipChildren="false"
-        android:orientation="horizontal"
-        android:layoutDirection="ltr">
-
-        <ImageView
-            android:id="@+id/rew_tap"
-            android:layout_width="0dp"
-            android:layout_height="match_parent"
-            android:layout_gravity="center_vertical"
-            android:layout_marginTop="-100dp"
-            android:layout_marginBottom="-100dp"
-            android:alpha="0"
-            android:src="@drawable/ic_circle_right_200dp"
-            app:tint="?attr/colorAccent"
-            app:layout_constraintLeft_toLeftOf="parent"
-            app:layout_constraintRight_toLeftOf="@id/mid_bg"/>
-
-        <ImageView
-            android:id="@+id/rew_bg"
-            android:layout_width="0dp"
-            android:layout_height="match_parent"
-            android:layout_gravity="center_vertical"
-            android:layout_marginTop="-100dp"
-            android:layout_marginBottom="-100dp"
-            android:alpha=".15"
-            android:src="@drawable/ic_circle_right_200dp"
-            android:visibility="gone"
-            app:tint="?attr/colorAccent"
-            app:layout_constraintLeft_toLeftOf="parent"
-            app:layout_constraintRight_toLeftOf="@id/mid_bg"/>
-
-
-        <View
-            android:id="@+id/mid_bg"
-            android:layout_width="100dp"
-            android:layout_height="match_parent"
-            android:layout_gravity="center_vertical"
-            app:layout_constraintLeft_toLeftOf="@id/rew_tap"
-            app:layout_constraintRight_toRightOf="@id/ffwd_tap" />
-
-        <ImageView
-            android:id="@+id/ffwd_tap"
-            android:layout_width="0dp"
-            android:layout_height="match_parent"
-            android:layout_gravity="center_vertical"
-            android:layout_marginTop="-100dp"
-            android:layout_marginBottom="-100dp"
-            android:alpha="0"
-            android:src="@drawable/ic_circle_200dp"
-            app:tint="?attr/colorAccent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintLeft_toRightOf="@id/mid_bg" />
-
-        <ImageView
-            android:id="@+id/ffwd_bg"
-            android:layout_width="0dp"
-            android:layout_height="match_parent"
-            android:layout_gravity="center_vertical"
-            android:layout_marginTop="-100dp"
-            android:layout_marginBottom="-100dp"
-            android:alpha=".15"
-            android:src="@drawable/ic_circle_200dp"
-            android:visibility="gone"
-            app:tint="?attr/colorAccent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintLeft_toRightOf="@id/mid_bg" />
-
-        <eu.kanade.tachiyomi.ui.player.viewer.PlayerControlsView
-            android:id="@+id/player_controls"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-
-        <!-- This LinearLayout only exists for Gesture  View -->
-
-        <LinearLayout
-            android:id="@+id/seekView"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintLeft_toLeftOf="parent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintTop_toTopOf="parent"
-            android:visibility="gone">
-
-            <TextView
-                android:id="@+id/seekText"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                android:gravity="center"
-                android:shadowColor="#000000"
-                android:shadowDx="0"
-                android:shadowDy="0"
-                android:shadowRadius="4"
-                android:text="[gesture]"
-                android:textAlignment="center"
-                android:textColor="#ffffff"
-                android:textSize="30sp"
-                android:textStyle="bold" />
-
-        </LinearLayout>
-
-        <ImageView
-            android:id="@+id/playPauseView"
-            android:layout_width="64dp"
-            android:layout_height="64dp"
-            android:layout_centerInParent="true"
-            android:contentDescription="Play/Pause"
-            android:background="@drawable/ic_play_pause_bg"
-            android:visibility="gone"
-            app:tint="?attr/colorOnPrimarySurface"
-            tools:src="@drawable/ic_play_arrow_64dp"
-            tools:visibility="visible"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintLeft_toLeftOf="parent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintTop_toTopOf="parent"/>
-
-        <com.google.android.material.progressindicator.CircularProgressIndicator
-            android:id="@+id/loading_indicator"
-            android:layout_width="72dp"
-            android:layout_height="72dp"
-            android:layout_centerInParent="true"
-            android:indeterminate="true"
-            app:indicatorColor="?attr/colorPrimary"
-            app:indicatorSize="64dp"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintLeft_toLeftOf="parent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintTop_toTopOf="parent"/>
-
-        <View
-            android:id="@+id/brightness_overlay"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:visibility="gone"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintLeft_toLeftOf="parent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintTop_toTopOf="parent"/>
-
-        <eu.kanade.tachiyomi.ui.player.viewer.components.DoubleTapSecondsView
-            android:id="@+id/seconds_view"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:clickable="false"
-            android:focusable="false"
-            android:visibility="gone"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintRight_toRightOf="parent"
-            app:layout_constraintTop_toTopOf="parent"
-            app:layout_constraintWidth_default="percent"
-            app:layout_constraintWidth_percent="0.5" />
-
-    </androidx.constraintlayout.widget.ConstraintLayout>
-
-</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/app/src/main/res/layout/player_chapters_item.xml b/app/src/main/res/layout/player_chapters_item.xml
deleted file mode 100644
index bd11e5624c..0000000000
--- a/app/src/main/res/layout/player_chapters_item.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<TextView xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="56dp"
-    android:clickable="true"
-    android:focusable="true"
-    android:foreground="?attr/selectableItemBackground"
-    android:gravity="center_vertical"
-    android:paddingHorizontal="16dp"
-    android:paddingVertical="8dp"
-    android:layout_marginVertical="16dp"
-    android:textColor="?attr/colorOnBackground"
-    app:drawableEndCompat="@drawable/ic_blank_24dp"
-    tools:text="1080p"
-    app:drawableTint="?attr/colorOnBackground" />
diff --git a/app/src/main/res/layout/player_controls.xml b/app/src/main/res/layout/player_controls.xml
deleted file mode 100644
index 47fdcbe78b..0000000000
--- a/app/src/main/res/layout/player_controls.xml
+++ /dev/null
@@ -1,475 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    tools:ignore="RtlHardcoded,HardcodedText">
-
-    <!-- Locked player check -->
-
-    <LinearLayout
-        android:id="@+id/lockedView"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:layout_alignParentLeft="true"
-        android:layout_marginTop="10dp"
-        android:layout_marginLeft="10dp"
-        android:visibility="gone">
-
-        <ImageButton
-            android:id="@+id/unlockBtn"
-            android:layout_width="50dp"
-            android:layout_height="50dp"
-            android:contentDescription="Unlock player"
-            android:src="@drawable/ic_unlock_20dp"
-            android:background="?attr/selectableItemBackgroundBorderless"
-            app:tint="?attr/colorOnPrimarySurface" />
-
-    </LinearLayout>
-
-    <RelativeLayout
-        android:id="@+id/unlocked_view"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:background="#70000000">
-
-        <androidx.constraintlayout.widget.ConstraintLayout
-            android:id="@+id/topControlsGroup"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:visibility="visible">
-
-
-            <!-- Top Controls (Right)-->
-
-            <ImageButton
-                android:id="@+id/backArrowBtn"
-                android:layout_width="50dp"
-                android:layout_height="50dp"
-                android:layout_marginLeft="10dp"
-                android:layout_marginTop="10dp"
-                android:background="?attr/selectableItemBackgroundBorderless"
-                android:contentDescription="Go back"
-                android:src="@drawable/ic_arrow_back_20dp"
-                app:layout_constraintLeft_toLeftOf="parent"
-                app:layout_constraintRight_toLeftOf="@id/titleMainTxt"
-                app:layout_constraintTop_toTopOf="parent"
-                app:tint="?attr/colorOnPrimarySurface" />
-
-            <TextView
-                android:id="@+id/titleMainTxt"
-                android:layout_width="0dp"
-                android:layout_height="wrap_content"
-                android:layout_marginHorizontal="10dp"
-                android:layout_marginTop="16dp"
-                android:textColor="?attr/colorOnPrimarySurface"
-                android:textSize="14sp"
-                android:textStyle="bold"
-                android:maxLines="1"
-                android:clickable="true"
-                android:focusable="true"
-                app:layout_constraintLeft_toRightOf="@id/backArrowBtn"
-                app:layout_constraintRight_toLeftOf="@id/episodeListBtn"
-                app:layout_constraintTop_toTopOf="parent"
-                tools:text="Anime Name" />
-
-            <TextView
-                android:id="@+id/titleSecondaryTxt"
-                android:layout_width="0dp"
-                android:layout_height="wrap_content"
-                android:layout_marginHorizontal="10dp"
-                android:alpha="0.5"
-                android:textColor="?attr/colorOnPrimarySurface"
-                android:textSize="12sp"
-                android:textStyle="italic"
-                android:maxLines="1"
-                android:clickable="true"
-                android:focusable="true"
-                app:layout_constraintLeft_toRightOf="@id/backArrowBtn"
-                app:layout_constraintRight_toLeftOf="@id/episodeListBtn"
-                app:layout_constraintTop_toBottomOf="@id/titleMainTxt"
-                tools:text="Episode Name" />
-
-            <ImageButton
-                android:id="@+id/episodeListBtn"
-                android:layout_width="50dp"
-                android:layout_height="50dp"
-                android:layout_marginRight="10dp"
-                android:layout_marginTop="10dp"
-                android:background="@android:color/transparent"
-                android:contentDescription="Episode list"
-                android:src="@drawable/ic_navigate_next_20dp"
-                app:layout_constraintTop_toTopOf="parent"
-                app:layout_constraintLeft_toRightOf="@id/titleMainTxt"
-                app:layout_constraintRight_toRightOf="parent"
-                app:tint="?attr/colorOnPrimarySurface" />
-
-            <!-- Top Controls (Left)-->
-
-            <ImageButton
-                android:id="@+id/settingsBtn"
-                android:layout_width="50dp"
-                android:layout_height="50dp"
-                android:layout_marginTop="10dp"
-                android:layout_marginRight="10dp"
-                android:background="?attr/selectableItemBackground"
-                android:contentDescription="Settings"
-                android:src="@drawable/ic_overflow_20dp"
-                app:layout_constraintLeft_toRightOf="@id/streamsBtn"
-                app:layout_constraintRight_toRightOf="parent"
-                app:layout_constraintTop_toBottomOf="@id/episodeListBtn"
-                app:tint="?attr/colorOnPrimarySurface" />
-
-            <ImageButton
-                android:id="@+id/streamsBtn"
-                android:layout_width="50dp"
-                android:layout_height="50dp"
-                android:background="?attr/selectableItemBackground"
-                android:contentDescription="Tracks"
-                android:src="@drawable/ic_video_settings_20dp"
-                app:layout_constraintLeft_toRightOf="@id/toggleAutoplay"
-                app:layout_constraintRight_toLeftOf="@id/settingsBtn"
-                app:layout_constraintTop_toTopOf="@id/settingsBtn"
-                app:tint="?attr/colorOnPrimarySurface" />
-
-            <com.google.android.material.switchmaterial.SwitchMaterial
-                android:id="@+id/toggleAutoplay"
-                android:layout_width="50dp"
-                android:layout_height="50dp"
-                tools:checked="true"
-                app:layout_constraintLeft_toLeftOf="parent"
-                app:layout_constraintRight_toLeftOf="@id/streamsBtn"
-                app:layout_constraintTop_toTopOf="@id/streamsBtn" />
-
-            <!-- Audio -->
-
-            <TextView
-                android:id="@+id/titleTextView"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:gravity="center"
-                android:text="-"
-                android:textColor="@color/tint_normal"
-                android:textSize="24sp"
-                android:visibility="gone"
-                app:layout_constraintBottom_toTopOf="@id/minorTitleTextView"
-                app:layout_constraintLeft_toLeftOf="parent" />
-
-            <TextView
-                android:id="@+id/minorTitleTextView"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:gravity="center"
-                android:text="-"
-                android:textColor="@color/tint_normal"
-                android:textSize="12sp"
-                android:layout_marginBottom="96dp"
-                android:visibility="gone"
-                app:layout_constraintBottom_toTopOf="parent"
-                app:layout_constraintLeft_toLeftOf="parent" />
-
-        </androidx.constraintlayout.widget.ConstraintLayout>
-
-        <androidx.constraintlayout.widget.ConstraintLayout
-            android:id="@+id/middleControlsGroup"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:visibility="visible">
-
-            <ImageButton
-                android:id="@+id/prevBtn"
-                android:layout_width="48dp"
-                android:layout_height="48dp"
-                android:layout_marginRight="256dp"
-                android:background="?attr/selectableItemBackgroundBorderless"
-                android:contentDescription="@string/action_previous_episode"
-                android:padding="@dimen/screen_edge_margin"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintLeft_toLeftOf="parent"
-                app:layout_constraintRight_toRightOf="parent"
-                app:layout_constraintTop_toTopOf="parent"
-                app:srcCompat="@drawable/ic_skip_previous_40dp"
-                app:tint="?attr/colorOnPrimarySurface" />
-
-            <ImageButton
-                android:id="@+id/play_btn"
-                android:layout_width="64dp"
-                android:layout_height="64dp"
-                android:background="?attr/selectableItemBackgroundBorderless"
-                android:contentDescription="Play/Pause"
-                android:textColor="#FFF"
-                android:visibility="gone"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintLeft_toLeftOf="parent"
-                app:layout_constraintRight_toRightOf="parent"
-                app:layout_constraintTop_toTopOf="parent"
-                app:tint="?attr/colorOnPrimarySurface"
-                tools:src="@drawable/ic_play_arrow_64dp"
-                tools:visibility="visible" />
-
-            <ImageButton
-                android:id="@+id/nextBtn"
-                android:layout_width="48dp"
-                android:layout_height="48dp"
-                android:layout_marginLeft="256dp"
-                android:background="?attr/selectableItemBackgroundBorderless"
-                android:contentDescription="@string/action_next_episode"
-                android:padding="@dimen/screen_edge_margin"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintLeft_toLeftOf="parent"
-                app:layout_constraintRight_toRightOf="parent"
-                app:layout_constraintTop_toTopOf="parent"
-                app:srcCompat="@drawable/ic_skip_next_40dp"
-                app:tint="?attr/colorOnPrimarySurface" />
-
-            <TextView
-                android:id="@+id/playerInformation"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="8dp"
-                android:gravity="left"
-                android:text="Information"
-                android:textColor="#FFFFFF"
-                android:textSize="12sp"
-                android:visibility="gone"
-                app:layout_constraintLeft_toLeftOf="parent"
-                app:layout_constraintRight_toRightOf="parent"
-                app:layout_constraintTop_toBottomOf="@id/play_btn"
-                tools:visibility="visible" />
-
-        </androidx.constraintlayout.widget.ConstraintLayout>
-
-        <androidx.constraintlayout.widget.ConstraintLayout
-            android:id="@+id/bottomControlsGroup"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_marginBottom="50dp"
-            android:layout_marginHorizontal="10dp"
-            android:layoutDirection="ltr"
-            android:visibility="visible">
-
-            <androidx.compose.ui.platform.ComposeView
-                android:id="@+id/currentChapter"
-                android:layout_width="0dp"
-                android:layout_height="50dp"
-                android:layout_gravity="center_vertical"
-                android:layout_weight="80"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintEnd_toStartOf="@+id/bottomRightControlsGroup"
-                app:layout_constraintStart_toEndOf="@+id/bottomLeftControlsGroup" />
-
-            <LinearLayout
-                android:id="@+id/bottomLeftControlsGroup"
-                android:layout_width="wrap_content"
-                android:layout_height="50dp"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintLeft_toLeftOf="parent">
-
-                <ImageButton
-                    android:id="@+id/lockBtn"
-                    android:layout_width="50dp"
-                    android:layout_height="match_parent"
-                    android:background="?attr/selectableItemBackground"
-                    android:contentDescription="Lock player"
-                    android:src="@drawable/ic_lock_20dp"
-                    app:tint="?attr/colorOnPrimarySurface" />
-
-                <ImageButton
-                    android:id="@+id/rotateBtn"
-                    android:layout_width="50dp"
-                    android:layout_height="match_parent"
-                    android:background="?attr/selectableItemBackground"
-                    android:contentDescription="Rotate player"
-                    android:onClick="rotatePlayer"
-                    android:src="@drawable/ic_screen_rotation_20dp"
-                    app:tint="?attr/colorOnPrimarySurface" />
-
-                <TextView
-                    android:id="@+id/cycleSpeedBtn"
-                    android:layout_width="80dp"
-                    android:layout_height="match_parent"
-                    android:background="?attr/selectableItemBackground"
-                    android:onClick="cycleSpeed"
-                    android:gravity="center"
-                    android:text="1.00x"
-                    android:textSize="12sp"
-                    android:textColor="?attr/colorOnPrimarySurface" />
-
-            </LinearLayout>
-
-            <LinearLayout
-                android:id="@+id/bottomRightControlsGroup"
-                android:layout_width="wrap_content"
-                android:layout_height="50dp"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintRight_toRightOf="parent">
-
-                <Button
-                    android:id="@+id/controls_skip_intro_btn"
-                    android:layout_width="wrap_content"
-                    android:layout_height="match_parent"
-                    android:backgroundTint="?attr/colorPrimary"
-                    android:onClick="skipIntro"
-                    android:text=""
-                    android:textSize="12sp"
-                    tools:text="+85s"
-                    android:textColor="?attr/colorOnPrimary" />
-
-                <ImageButton
-                    android:id="@+id/cycleViewModeBtn"
-                    android:layout_width="50dp"
-                    android:layout_height="match_parent"
-                    android:background="?attr/selectableItemBackground"
-                    android:contentDescription="Cycle view modes"
-                    android:src="@drawable/ic_fullscreen_black_20dp"
-                    app:tint="?attr/colorOnPrimarySurface" />
-
-                <ImageButton
-                    android:id="@+id/pipBtn"
-                    android:layout_width="50dp"
-                    android:layout_height="match_parent"
-                    android:background="?android:attr/selectableItemBackground"
-                    android:contentDescription="@string/action_player_pip"
-                    android:src="@drawable/ic_picture_in_picture_20dp"
-                    android:visibility="visible"
-                    app:tint="?attr/colorOnPrimarySurface" />
-
-            </LinearLayout>
-
-        </androidx.constraintlayout.widget.ConstraintLayout>
-
-
-        <androidx.constraintlayout.widget.ConstraintLayout
-            android:id="@+id/seekBarGroup"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_marginHorizontal="10dp"
-            android:layout_marginBottom="10dp"
-            android:visibility="visible">
-
-            <TextView
-                android:id="@+id/playbackPositionBtn"
-                android:layout_width="80dp"
-                android:layout_height="50dp"
-                android:gravity="center"
-                android:text="0:00"
-                android:textSize="12sp"
-                android:textColor="#FFF"
-                android:background="?attr/selectableItemBackground"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintLeft_toLeftOf="parent" />
-
-            <androidx.compose.ui.platform.ComposeView
-                android:id="@+id/playbackSeekbar"
-                android:layout_width="0dp"
-                android:layout_height="50dp"
-                android:layout_gravity="center_vertical"
-                android:layout_weight="80"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintLeft_toRightOf="@id/playbackPositionBtn"
-                app:layout_constraintRight_toLeftOf="@id/playbackDurationBtn" />
-
-            <TextView
-                android:id="@+id/playbackDurationBtn"
-                android:layout_width="80dp"
-                android:layout_height="50dp"
-                android:gravity="center"
-                android:text="0:00"
-                android:textSize="12sp"
-                android:textColor="#FFF"
-                android:background="?attr/selectableItemBackground"
-                app:layout_constraintBottom_toBottomOf="parent"
-                app:layout_constraintRight_toRightOf="parent" />
-
-        </androidx.constraintlayout.widget.ConstraintLayout>
-    </RelativeLayout>
-
-
-    <!-- Extra Controls -->
-
-    <LinearLayout
-        android:id="@+id/volumeView"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentLeft="true"
-        android:layout_centerInParent="true"
-        android:layout_marginLeft="18dp"
-        android:gravity="center"
-        android:orientation="vertical"
-        android:visibility="gone"
-        tools:visibility="visible">
-
-        <TextView
-            android:id="@+id/volumeText"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginBottom="5dp"
-            android:gravity="left"
-            android:text="10"
-            android:textColor="#FFFFFF"
-            android:textSize="12sp" />
-
-        <ProgressBar
-            android:id="@+id/volumeBar"
-            style="@android:style/Widget.ProgressBar.Horizontal"
-            android:layout_width="25dp"
-            android:layout_height="125dp"
-            android:progress="20"
-            android:secondaryProgress="100"
-            android:progressDrawable="@drawable/player_bar" />
-
-        <ImageView
-            android:id="@+id/volumeImg"
-            android:layout_width="30dp"
-            android:layout_height="20dp"
-            android:layout_marginTop="5dp"
-            android:src="@drawable/ic_volume_on_20dp"
-            app:tint="#FFFFFF"
-            tools:ignore="ContentDescription" />
-
-    </LinearLayout>
-
-    <LinearLayout
-        android:id="@+id/brightnessView"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentRight="true"
-        android:layout_centerInParent="true"
-        android:layout_marginRight="18dp"
-        android:gravity="center"
-        android:orientation="vertical"
-        android:visibility="gone"
-        tools:visibility="visible">
-
-        <TextView
-            android:id="@+id/brightnessText"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginBottom="5dp"
-            android:text="100"
-            android:textColor="#FFFFFF"
-            android:textSize="12sp" />
-
-        <ProgressBar
-            android:id="@+id/brightnessBar"
-            style="@android:style/Widget.ProgressBar.Horizontal"
-            android:layout_width="25dp"
-            android:layout_height="125dp"
-            android:progress="20"
-            android:secondaryProgress="100"
-            android:progressDrawable="@drawable/player_bar" />
-
-        <ImageView
-            android:id="@+id/brightnessImg"
-            android:layout_width="30dp"
-            android:layout_height="20dp"
-            android:layout_marginTop="5dp"
-            android:src="@drawable/ic_brightness_positive_20dp"
-            app:tint="#FFFFFF"
-            tools:ignore="ContentDescription" />
-
-    </LinearLayout>
-
-</RelativeLayout>
diff --git a/app/src/main/res/layout/player_double_tap_seek_view.xml b/app/src/main/res/layout/player_double_tap_seek_view.xml
deleted file mode 100644
index 014154bba4..0000000000
--- a/app/src/main/res/layout/player_double_tap_seek_view.xml
+++ /dev/null
@@ -1,52 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<merge xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    tools:ignore="ContentDescription"
-    tools:layout_height="wrap_content"
-    tools:layout_width="match_parent"
-    tools:orientation="vertical"
-    tools:parentTag="android.widget.LinearLayout"
-    tools:background="#555555">
-
-    <LinearLayout
-        android:id="@+id/triangle_container"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:gravity="center_horizontal"
-        android:orientation="horizontal">
-
-        <ImageView
-            android:id="@+id/tri_1"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            app:srcCompat="@drawable/ic_play_seek_triangle"
-            tools:alpha="0.18" />
-
-        <ImageView
-            android:id="@+id/tri_2"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            app:srcCompat="@drawable/ic_play_seek_triangle"
-            tools:alpha="0.5" />
-
-        <ImageView
-            android:id="@+id/tri_3"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            app:srcCompat="@drawable/ic_play_seek_triangle"
-            tools:alpha="1" />
-
-    </LinearLayout>
-
-    <TextView
-        android:id="@+id/double_tap_seconds"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:gravity="center"
-        android:padding="4dp"
-        android:textColor="#FFF"
-        android:textSize="12sp"
-        tools:text="10 seconds" />
-
-</merge>
diff --git a/app/src/main/res/layout/player_layout.xml b/app/src/main/res/layout/player_layout.xml
new file mode 100644
index 0000000000..1bdb810fcf
--- /dev/null
+++ b/app/src/main/res/layout/player_layout.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+android:layout_width="match_parent"
+android:layout_height="match_parent"
+android:fitsSystemWindows="false">
+
+<eu.kanade.tachiyomi.ui.player.AniyomiMPVView
+    android:id="@+id/player"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" />
+
+<androidx.compose.ui.platform.ComposeView
+    android:id="@+id/controls"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/app/src/main/res/layout/player_screenshot_sheet.xml b/app/src/main/res/layout/player_screenshot_sheet.xml
deleted file mode 100644
index 207335c544..0000000000
--- a/app/src/main/res/layout/player_screenshot_sheet.xml
+++ /dev/null
@@ -1,62 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:orientation="vertical">
-
-    <TextView
-        android:id="@+id/set_as_cover"
-        android:layout_width="match_parent"
-        android:layout_height="56dp"
-        android:clickable="true"
-        android:drawablePadding="32dp"
-        android:focusable="true"
-        android:foreground="?attr/selectableItemBackground"
-        android:gravity="center_vertical"
-        android:paddingHorizontal="16dp"
-        android:text="@string/set_as_cover"
-        android:textColor="?attr/colorOnBackground"
-        app:drawableStartCompat="@drawable/ic_photo_24dp"
-        app:drawableTint="?attr/colorOnBackground" />
-
-    <TextView
-        android:id="@+id/share"
-        android:layout_width="match_parent"
-        android:layout_height="56dp"
-        android:clickable="true"
-        android:drawablePadding="32dp"
-        android:focusable="true"
-        android:foreground="?attr/selectableItemBackground"
-        android:gravity="center_vertical"
-        android:paddingHorizontal="16dp"
-        android:text="@string/action_share"
-        android:textColor="?attr/colorOnBackground"
-        app:drawableStartCompat="@drawable/ic_share_24dp"
-        app:drawableTint="?attr/colorOnBackground" />
-
-    <TextView
-        android:id="@+id/save"
-        android:layout_width="match_parent"
-        android:layout_height="56dp"
-        android:clickable="true"
-        android:drawablePadding="32dp"
-        android:focusable="true"
-        android:foreground="?attr/selectableItemBackground"
-        android:gravity="center_vertical"
-        android:paddingHorizontal="16dp"
-        android:text="@string/action_save_screenshot"
-        android:textColor="?attr/colorOnBackground"
-        app:drawableStartCompat="@drawable/ic_save_24dp"
-        app:drawableTint="?attr/colorOnBackground" />
-
-    <com.google.android.material.switchmaterial.SwitchMaterial
-        android:id="@+id/toggleSubs"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingStart="16dp"
-        android:paddingEnd="16dp"
-        android:text="@string/screenshot_show_subs"
-        android:textColor="?android:attr/textColorSecondary" />
-
-</LinearLayout>
diff --git a/app/src/main/res/layout/player_tracks_item.xml b/app/src/main/res/layout/player_tracks_item.xml
deleted file mode 100644
index 22860723ba..0000000000
--- a/app/src/main/res/layout/player_tracks_item.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<TextView xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="56dp"
-    android:clickable="true"
-    android:focusable="true"
-    android:foreground="?attr/selectableItemBackground"
-    android:gravity="center_vertical"
-    android:paddingHorizontal="16dp"
-    android:paddingVertical="8dp"
-    android:layout_marginVertical="16dp"
-    android:textColor="?attr/colorOnBackground"
-    app:drawableEndCompat="@drawable/ic_blank_24dp"
-    tools:drawableEndCompat="@drawable/ic_check_24dp"
-    tools:text="1080p"
-    app:drawableTint="?attr/colorOnBackground" />
diff --git a/app/src/main/res/layout/pref_skip_intro_length.xml b/app/src/main/res/layout/pref_skip_intro_length.xml
deleted file mode 100644
index 37ae4e9d50..0000000000
--- a/app/src/main/res/layout/pref_skip_intro_length.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical">
-
-    <eu.kanade.tachiyomi.widget.MinMaxNumberPicker
-        android:id="@+id/skip_intro_column"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="center"
-        app:max="255"
-        app:min="1" />
-
-
-</LinearLayout>
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
deleted file mode 100644
index fa50804741..0000000000
--- a/app/src/main/res/values/arrays.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string-array name="playback_options">
-        <item>@string/playback_options_speed</item>
-        <item>@string/playback_options_quality</item>
-    </string-array>
-
-    <string-array name="stats_pages">
-        <item>@string/player_statistics_page_1</item>
-        <item>@string/player_statistics_page_2</item>
-        <item>@string/player_statistics_page_3</item>
-    </string-array>
-</resources>
diff --git a/core/common/src/main/java/tachiyomi/core/common/preference/Preference.kt b/core/common/src/main/java/tachiyomi/core/common/preference/Preference.kt
index d5b6b564f1..5f76a9de33 100644
--- a/core/common/src/main/java/tachiyomi/core/common/preference/Preference.kt
+++ b/core/common/src/main/java/tachiyomi/core/common/preference/Preference.kt
@@ -53,6 +53,11 @@ inline fun <reified T, R : T> Preference<T>.getAndSet(crossinline block: (T) ->
     block(get()),
 )
 
+inline fun <reified T> Preference<T>.deleteAndGet(): T {
+    delete()
+    return get()
+}
+
 operator fun <T> Preference<Set<T>>.plusAssign(item: T) {
     set(get() + item)
 }
diff --git a/gradle/androidx.versions.toml b/gradle/androidx.versions.toml
index 76fa6f522b..ab3ea6b471 100644
--- a/gradle/androidx.versions.toml
+++ b/gradle/androidx.versions.toml
@@ -11,6 +11,7 @@ annotation = "androidx.annotation:annotation:1.9.1"
 appcompat = "androidx.appcompat:appcompat:1.7.0"
 biometricktx = "androidx.biometric:biometric-ktx:1.2.0-alpha05"
 constraintlayout = "androidx.constraintlayout:constraintlayout:2.2.0"
+compose-constraintlayout = "androidx.constraintlayout:constraintlayout-compose:1.1.0"
 corektx = "androidx.core:core-ktx:1.13.1"
 splashscreen = "androidx.core:core-splashscreen:1.0.1"
 recyclerview = "androidx.recyclerview:recyclerview:1.3.2"
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index de6f7b9e83..3f0eaf87be 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -93,8 +93,8 @@ voyager-screenmodel = { module = "cafe.adriel.voyager:voyager-screenmodel", vers
 voyager-tab-navigator = { module = "cafe.adriel.voyager:voyager-tab-navigator", version.ref = "voyager" }
 voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }
 
-aniyomi-mpv = "com.github.aniyomiorg:aniyomi-mpv-lib:1.15.n"
-ffmpeg-kit = "com.github.jmir1:ffmpeg-kit:1.15"
+aniyomi-mpv = "com.github.aniyomiorg:aniyomi-mpv-lib:1.17.n"
+ffmpeg-kit = "com.github.jmir1:ffmpeg-kit:1.17"
 arthenica-smartexceptions = "com.arthenica:smart-exception-java:0.2.1"
 
 seeker = "io.github.2307vivek:seeker:1.2.2"
diff --git a/i18n/src/commonMain/moko-resources/base/strings.xml b/i18n/src/commonMain/moko-resources/base/strings.xml
index b54e7f0dc4..e326697e1f 100644
--- a/i18n/src/commonMain/moko-resources/base/strings.xml
+++ b/i18n/src/commonMain/moko-resources/base/strings.xml
@@ -195,22 +195,30 @@
     <string name="pref_progress_95" translatable="false">95%</string>
     <string name="pref_progress_100" translatable="false">100%</string>
     <string name="pref_preserve_watching_position">Preserve watch position on seen episodes</string>
-    <string name="pref_player_fullscreen">Show content in display cutout</string>
-    <string name="pref_player_hide_controls">Hide player controls when opening the player</string>
+    <string name="pref_category_player_orientation">Orientation</string>
+    <string name="rotation_video">Video</string>
+    <string name="rotation_reverse_landscape">Reverse landscape</string>
+    <string name="rotation_sensor_portrait">Sensor portrait</string>
+    <string name="rotation_sensor_landscape">Sensor landscape</string>
 
-    <string name="pref_category_volume_brightness">Volume and Brightness</string>
+    <string name="pref_category_controls">Controls</string>
+    <string name="pref_controls_allow_gestures_in_panels">Allow gesture in panels</string>
+    <string name="pref_controls_show_loading">Show loading circle</string>
+    <string name="pref_controls_show_chapter_indicator">Show current chapter indicator</string>
+    <string name="pref_controls_show_chapter_indicator_info">Only appears if the video has chapters</string>
     <string name="enable_volume_brightness_gestures">Enable Volume and Brightness Gestures</string>
+    <string name="pref_controls_display_volume_percentage">Display volume as percentage</string>
+    <string name="pref_controls_swap_vol_brightness">Swap volume and brightness slider</string>
     <string name="pref_remember_brightness">Remember and switch to the last used brightness</string>
     <string name="pref_remember_volume">Remember and switch to the last used volume</string>
 
-    <string name="pref_category_player_orientation">Orientation</string>
-    <string name="pref_default_player_orientation">Default orientation</string>
-    <string name="pref_adjust_orientation_video_dimensions">Adjust the orientation based on a video\'s dimensions</string>
-    <string name="pref_default_portrait_orientation">Default portrait</string>
-    <string name="pref_default_landscape_orientation">Default landscape</string>
-    <string name="rotation_reverse_landscape">Reverse landscape</string>
-    <string name="rotation_sensor_portrait">Sensor portrait</string>
-    <string name="rotation_sensor_landscape">Sensor landscape</string>
+    <string name="pref_player_fullscreen">Show content in display cutout</string>
+    <string name="pref_player_hide_controls">Hide player controls when opening the player</string>
+    <string name="pref_show_system_bar">Show system status bar with controls</string>
+    <string name="pref_reduce_motion">Reduce player animation</string>
+    <string name="pref_player_time_to_disappear">Hide player controls time</string>
+    <string name="pref_player_time_to_disappear_summary">%1$s ms</string>
+    <string name="pref_panel_opacity">Panel opacity</string>
 
     <string name="pref_category_pip">Picture-in-Picture (PiP)</string>
     <string name="pref_enable_pip">Enable the use of PiP mode</string>
@@ -226,6 +234,32 @@
     <string name="pref_player_gestures">Gestures</string>
     <string name="pref_player_gestures_summary">Seeking, double tap, media controls</string>
 
+    <string name="pref_category_player_seeking">Seeking</string>
+    <string name="enable_horizontal_seek_gesture">Enable Horizontal Seek Gesture</string>
+    <string name="pref_show_seekbar">Show seekbar when seeking</string>
+    <string name="pref_default_intro_length">Default skip intro length</string>
+    <string name="pref_intro_length">Skip intro length</string>
+    <string name="pref_skip_length">Double tap to skip length</string>
+    <string name="pref_skip_30" translatable="false">30s</string>
+    <string name="pref_skip_20" translatable="false">20s</string>
+    <string name="pref_skip_10" translatable="false">10s</string>
+    <string name="pref_skip_5" translatable="false">5s</string>
+    <string name="pref_skip_3" translatable="false">3s</string>
+    <string name="pref_skip_disable">Disable</string>
+    <string name="pref_player_smooth_seek">Enable precise seeking</string>
+    <string name="pref_player_smooth_seek_summary">When enabled, seeking will not focus on keyframes, leading to slower but precise seeking</string>
+    <string name="pref_category_player_aniskip_info">AniSkip requires the anime to be tracked with MAL or Anilist to work</string>
+    <string name="pref_enable_aniskip">Enable AniSkip</string>
+    <string name="pref_enable_auto_skip_ani_skip">Enable auto skip</string>
+    <string name="pref_enable_netflix_style_aniskip">Enable Netflix style</string>
+    <string name="pref_waiting_time_aniskip">Button timeout</string>
+    <string name="pref_waiting_time_aniskip_5">5 seconds</string>
+    <string name="pref_waiting_time_aniskip_6">6 seconds</string>
+    <string name="pref_waiting_time_aniskip_7">7 seconds</string>
+    <string name="pref_waiting_time_aniskip_8">8 seconds</string>
+    <string name="pref_waiting_time_aniskip_9">9 seconds</string>
+    <string name="pref_waiting_time_aniskip_10">10 seconds</string>
+
     <string name="pref_category_double_tap">Double tap</string>
     <string name="pref_left_double_tap">Double tap (left)</string>
     <string name="pref_center_double_tap">Double tap (center)</string>
@@ -234,7 +268,7 @@
     <string name="single_action_none">None</string>
     <string name="single_action_seek">Seek</string>
     <string name="single_action_playpause">Play/Pause</string>
-    <string name="single_action_switch">Switch episode</string>
+    <string name="single_action_switch">Change episode</string>
     <string name="single_action_custom">Custom</string>
 
     <string name="pref_category_media_controls">Media controls</string>
@@ -260,6 +294,7 @@
     <!-- Player settings - Subtitles -->
     <string name="pref_player_subtitle">Subtitles</string>
     <string name="pref_player_subtitle_summary">Preferred languages, whitelist, blacklist</string>
+    <string name="player_subtitle_remember_delay">Remember subtitle delay</string>
     <string name="pref_player_subtitle_lang">Preferred languages</string>
     <string name="pref_player_subtitle_lang_info">Subtitle language(s) to be selected by default on a video with multiple subtitles, Two- or three-letter languages codes work. Multiple values can be delimited by a comma.</string>
     <string name="pref_player_subtitle_whitelist">Whitelist</string>
@@ -270,6 +305,7 @@
     <!-- Player settings - Audio -->
     <string name="pref_player_audio">Audio</string>
     <string name="pref_player_audio_summary">Preferred languages, pitch correction, audio channels</string>
+    <string name="player_audio_remember_delay">Remember audio delay</string>
     <string name="pref_player_audio_lang">Preferred languages</string>
     <string name="pref_player_audio_lang_info">Audio language(s) to be selected by default on a video with multiple audio streams, Two- or three-letter languages codes work. Multiple values can be delimited by a comma.</string>
     <string name="pref_player_audio_pitch_correction">Enable audio pitch correction</string>
@@ -291,6 +327,140 @@
     <string name="pref_reset_mpv_conf">Reset MPV configuration file</string>
     <string name="pref_mpv_input">Edit MPV input file for keyboard mapping configuration</string>
 
+    <!-- Player -->
+
+    <!-- Player - aniskip -->
+    <string name="player_aniskip_op">Skip Opening</string>
+    <string name="player_aniskip_ed">Skip Ending</string>
+    <string name="player_aniskip_mixedOp">Skip MixedOp</string>
+    <string name="player_aniskip_recap">Skip Recap</string>
+
+    <!-- Player - Bottom left -->
+    <string name="player_speed" translatable="false">%.2fx</string>
+
+    <!-- Player - Bottom right -->
+    <string name="video_fit_screen">Fit to screen</string>
+    <string name="video_crop_screen">Cropped to screen</string>
+    <string name="video_stretch_screen">Stretched to screen</string>
+
+    <!-- Other -->
+    <string name="mpv_media_title">%1$s - E%2$s - %3$s</string>
+    <string name="toast_sleep_timer_ended">Sleep timer ended</string>
+    <string name="player_generic_unit_ms">ms</string>
+    <string name="player_gesture_seek_indicator" translatable="false">%c%s\n[%s]</string>
+    <string name="numeric_chooser_value_too_big">Value too big</string>
+    <string name="numeric_chooser_value_too_small">Value too small</string>
+    <string name="enable_auto_play">Auto-play is on</string>
+    <string name="disable_auto_play">Auto-play is off</string>
+    <string name="no_next_episode">Next Episode not found!</string>
+    <string name="no_prev_episode">Previous Episode not found!</string>
+    <string name="player_aniskip_dontskip">Don\'t skip</string>
+    <string name="player_aniskip_dontskip_toast">Skipping %s in %d seconds</string>
+    <string name="player_aniskip_skip">%s skipped</string>
+
+    <!-- Sheets -->
+
+    <string name="player_sheets_delay_set_as_default">Set as default</string>
+    <string name="player_sheets_track_title_w_lang" translatable="false">#%d: %s (%s)</string>
+    <string name="player_sheets_track_title_wo_lang" translatable="false">#%d: %s</string>
+    <string name="player_sheets_track_lang_wo_title" translatable="false">#%d: %s</string>
+
+    <!-- Sheets - Audio delay -->
+    <string name="player_sheets_audio_delay_title">Audio delay</string>
+    <string name="player_sheets_audio_delay_audio_sound_heard">Sound heard</string>
+    <string name="player_sheets_audio_delay_sound_sound_spotted">Sound spotted</string>
+
+    <!-- Sheets - Sub delay -->
+    <string name="player_sheets_sub_delay_title">Subtitle delay</string>
+    <string name="player_sheets_sub_delay_speed">Speed</string>
+    <string name="player_sheets_sub_delay_delay">Delay</string>
+    <string name="player_sheets_sub_delay_subtitle_type_primary">Primary</string>
+    <string name="player_sheets_sub_delay_subtitle_type_secondary">Secondary</string>
+    <string name="player_sheets_sub_delay_subtitle_type_primary_and_secondary">Both</string>
+    <string name="player_sheets_sub_delay_subtitle_voice_heard">Voice heard</string>
+    <string name="player_sheets_sub_delay_subtitle_text_seen">Text seen</string>
+    <string name="player_sheets_sub_delay_audio_sound_heard">Sound heard</string>
+    <string name="player_sheets_sub_delay_sound_sound_spotted">Sound spotted</string>
+
+    <!-- Sheets - Subtitle colors -->
+    <string name="player_sheets_sub_colors_title">Colors</string>
+    <string name="player_sheets_subtitles_color_text">Text</string>
+    <string name="player_sheets_subtitles_color_border">Border</string>
+    <string name="player_sheets_subtitles_color_background">Background</string>
+    <string name="player_sheets_sub_color_red">Red</string>
+    <string name="player_sheets_sub_color_green">Green</string>
+    <string name="player_sheets_sub_color_blue">Blue</string>
+    <string name="player_sheets_sub_color_alpha">Alpha</string>
+
+    <!-- Sheets - Subtitle settings -->
+    <string name="player_sheets_subtitles_settings_title">Subtitles settings</string>
+
+    <!-- Sheets - Subtitle Typography settings -->
+    <string name="player_sheets_sub_typography_title">Typography</string>
+    <string name="player_sheets_sub_typography_font">Font</string>
+    <string name="player_sheets_sub_typography_font_size">Font size</string>
+    <string name="player_sheets_sub_typography_border_size">Border size</string>
+    <string name="player_sheets_subtitles_shadow_offset">Shadow offset</string>
+    <string name="player_sheets_subtitles_border_style_outline_and_shadow">Outline and shadow</string>
+    <string name="player_sheets_subtitles_border_style_opaque_box">Opaque box</string>
+    <string name="player_sheets_subtitles_border_style_background_box">Background box</string>
+
+    <!-- Sheets - Miscellaneous -->
+    <string name="player_sheets_sub_misc_title">Miscellaneous</string>
+    <string name="player_sheets_sub_override_ass">Override ASS/SSA subtitles</string>
+    <string name="player_sheets_sub_scale">Scale</string>
+    <string name="player_sheets_sub_position">Position</string>
+
+    <!-- Sheets - Subtitles -->
+    <string name="player_sheets_subtitles_border_style_outline_and_shadow">Outline and shadow</string>
+    <string name="player_sheets_subtitles_border_style_opaque_box">Opaque box</string>
+    <string name="player_sheets_subtitles_border_style_background_box">Background box</string>
+
+    <!-- Sheets - Video filters -->
+    <string name="player_sheets_filters_title">Filters</string>
+    <string name="player_sheets_filters_brightness">Brightness</string>
+    <string name="player_sheets_filters_contrast">Contrast</string>
+    <string name="player_sheets_filters_gamma">Gamma</string>
+    <string name="player_sheets_filters_Saturation">Saturation</string>
+    <string name="player_sheets_filters_hue">Hue</string>
+    <string name="player_sheets_filters_warning">Some filters may not work on your current video driver</string>
+
+    <!-- Sheets - Audio tracks -->
+    <string name="player_sheets_add_ext_audio">Add external audio tracks</string>
+
+    <!-- Sheets - Decoders -->
+    <string name="player_sheets_decoder_formatted">%s (%s)</string>
+
+    <!-- Sheets - More Sheet -->
+    <string name="player_sheets_more_title">More</string>
+    <string name="player_hwdec_mode">Hardware decoding mode</string>
+    <string name="pref_audio_channels">Audio channels</string>
+    <string name="player_sheets_stats_page_title">Default statistics page</string>
+    <string name="player_sheets_tracks_off">Off</string>
+    <string name="player_sheets_stats_page_chip">Page %d</string>
+    <string name="player_sheets_custom_buttons_title">Custom buttons</string>
+    <string name="player_seek_n_seconds">%d seconds</string>
+    <string name="player_speed" translatable="false">%.2fx</string>
+    <string name="player_gesture_seek_indicator" translatable="false">%c%s\n[%s]</string>
+    <string name="timer_title">Sleep Timer</string>
+    <string name="timer_remaining">%s remaining</string>
+    <string name="timer_picker_enter_timer">Enter duration</string>
+    <string name="timer_picker_pick_time">Pick duration</string>
+    <string name="timer_cancel_timer">Cancel current timer</string>
+
+    <!-- Sheets - Playback Speed -->
+    <string name="player_sheets_speed_slider_label">Speed</string>
+    <string name="player_sheets_speed_make_default">Make default speed</string>
+    <string name="pref_audio_pitch_correction_title">Enable audio pitch correction</string>
+    <string name="pref_audio_pitch_correction_summary">Prevents the audio from becoming high-pitched at faster speeds and low-pitched at slower speeds</string>
+
+    <!-- Sheets - Subtitle tracks -->
+    <string name="player_sheets_add_ext_sub">Add external subtitles</string>
+    <string name="player_sheets_subtitles_footer_secondary_sid_no_styles">Secondary subtitles will have no ASS/SSA Styling.</string>
+
+    <!-- Sheets - screenshot -->
+    <string name="screenshot_show_subs">Include Subtitles</string>
+
     <!-- Subsections -->
     <string name="pref_category_general">General</string>
     <string name="pref_category_appearance">Appearance</string>
@@ -989,7 +1159,6 @@
     <string name="action_play">Play</string>
     <string name="action_next_episode">Next episode</string>
     <string name="action_screen_fit">Screen fit mode</string>
-    <string name="action_player_pip">PiP mode</string>
     <string name="action_show_manga">Show manga</string>
     <string name="action_show_anime">Show anime</string>
     <string name="action_display_download_badge_anime">Downloaded episodes</string>
@@ -1003,7 +1172,6 @@
     <string name="action_order_by_episode_number">By episode number</string>
     <string name="action_start_download_externally">Use external downloader</string>
     <string name="action_start_download_internally">Use internal downloader</string>
-    <string name="pref_player_summary">Progress control, internal player, external player</string>
     <string name="pref_bottom_nav_style">Bottom navigation style</string>
     <string name="pref_default_home_tab_library">Set start screen to Manga Tab</string>
     <string name="pref_update_only_completely_read">Skip entries with unseen episode(s)/unread chapter(s)</string>
@@ -1014,29 +1182,6 @@
     <string name="pref_anime_library_update_categories_details">Anime in excluded categories will not be updated even if they are also in included categories.</string>
     <string name="unofficial_extension_message_aniyomi">This extension is not from the official list.</string>
     <string name="unofficial_anime_extension_message">This extension is not from the official list.</string>
-    <string name="pref_category_player">Player</string>
-    <string name="pref_category_progress">Progress</string>
-    <string name="pref_category_internal_player">Internal player</string>
-    <string name="pref_category_player_seeking">Seeking</string>
-    <string name="pref_default_intro_length">Default skip intro length</string>
-    <string name="pref_intro_length">Skip intro length</string>
-    <string name="pref_skip_length">Double tap to skip length</string>
-    <string name="pref_skip_30" translatable="false">30s</string>
-    <string name="pref_skip_20" translatable="false">20s</string>
-    <string name="pref_skip_10" translatable="false">10s</string>
-    <string name="pref_skip_5" translatable="false">5s</string>
-    <string name="pref_skip_3" translatable="false">3s</string>
-    <string name="pref_skip_disable">Disable</string>
-    <string name="pref_media_control_chapter_seeking">Seek chapters with media controls</string>
-    <string name="pref_media_control_chapter_seeking_summary">When enabled, using next will invoke the skip intro button if no chapters are found</string>
-    <string name="go_to_next_chapter">Next chapter</string>
-    <string name="go_to_previous_chapter">Previous chapter</string>
-    <string name="go_to_after_opening">Skipped opening</string>
-    <string name="mpv_media_title">%1$s - E%2$s - %3$s</string>
-    <string name="pref_player_smooth_seek">Enable precise seeking</string>
-    <string name="pref_player_smooth_seek_summary">When enabled, seeking will not focus on keyframes, leading to slower but precise seeking</string>
-    <string name="pref_sub_select_conf">Edit advanced subtitle track select configuration</string>
-    <string name="player_title">%1$s - %2$s</string>
     <string name="episode_download_progress">%1$d%%</string>
     <string name="pref_category_delete_chapters">Delete chapters/episodes</string>
     <string name="pref_remove_after_marked_as_read">After manually marked as read/watched</string>
@@ -1104,15 +1249,6 @@
     <string name="share_screenshot_info">%1$s: %2$s, %3$s</string>
     <string name="episode_progress">Progress: %1$s/%2$s</string>
     <string name="episode_progress_no_total">Progress: %1$s</string>
-    <string name="screenshot_header">Take screenshot</string>
-    <string name="screenshot_show_subs">Include Subtitles</string>
-    <string name="enable_horizontal_seek_gesture">Enable Horizontal Seek Gesture</string>
-    <string name="toggle_player_statistics_page">Toggle statistics page</string>
-    <string name="player_statistics_page_1">Page 1</string>
-    <string name="player_statistics_page_2">Page 2</string>
-    <string name="player_statistics_page_3">Page 3</string>
-    <string name="pref_category_player_advanced">Advanced player settings</string>
-    <string name="pref_category_player_advanced_subtitle">Debanding, mpv.conf… etc</string>
     <string name="recent_anime_time">Ep. %1$s - %2$s</string>
     <string name="download_insufficient_space">Couldn\'t download due to low storage space</string>
     <string name="download_queue_size_warning">Warning: large bulk downloads may lead to sources becoming slower and/or blocking Aniyomi. Tap to learn more.</string>
@@ -1125,50 +1261,12 @@
     <string name="download_notifier_download_paused_episodes">Episode download paused</string>
     <string name="channel_new_chapters_episodes">Chapter/Episode updates</string>
     <string name="pref_invalidate_download_cache_summary">Force app to recheck downloaded chapters and episodes</string>
-    <string name="player_controls_skip_intro_text">+%1$d s</string>
-    <string name="no_next_episode">Next Episode not found!</string>
     <string name="label_storage">Storage</string>
     <string name="label_history">Manga</string>
     <string name="label_anime_history">Anime</string>
     <string name="label_updates">Manga</string>
     <string name="label_anime_updates">Anime</string>
-    <string name="player_overlay_back">Back</string>
-    <string name="enable_auto_play">Auto-play is on</string>
-    <string name="disable_auto_play">Auto-play is off</string>
-    <string name="video_fit_screen">Fit to screen</string>
-    <string name="video_crop_screen">Cropped to screen</string>
-    <string name="video_stretch_screen">Stretched to screen</string>
-    <string name="video_custom_screen">Custom aspect ratio</string>
-    <string name="playback_speed_dialog_title">Change playback speed:</string>
-    <string name="playback_speed_dialog_reset">Reset</string>
-    <string name="settings_dialog_header">Player settings</string>
-    <string name="quality_dialog_header">Video quality</string>
-    <string name="chapter_dialog_header">Seek to chapter</string>
-    <string name="subtitle_dialog_header">Subtitle</string>
-    <string name="audio_dialog_header">Audio</string>
-    <string name="playback_options_speed">Playback speed</string>
-    <string name="playback_options_quality">Video quality</string>
-    <string name="playback_options_title">Playback options</string>
     <string name="action_change_intro_length">Change intro length</string>
-    <string name="player_aniskip_op">Skip Opening</string>
-    <string name="player_aniskip_ed">Skip Ending</string>
-    <string name="player_aniskip_mixedOp">Skip MixedOp</string>
-    <string name="player_aniskip_recap">Skip Recap</string>
-    <string name="pref_category_player_aniskip_info">AniSkip requires the anime to be tracked with MAL or Anilist to work</string>
-    <string name="pref_enable_aniskip">Enable AniSkip</string>
-    <string name="pref_enable_auto_skip_ani_skip">Enable auto skip</string>
-    <string name="pref_waiting_time_aniskip">Button timeout</string>
-    <string name="pref_waiting_time_aniskip_5">5 seconds</string>
-    <string name="pref_waiting_time_aniskip_6">6 seconds</string>
-    <string name="pref_waiting_time_aniskip_7">7 seconds</string>
-    <string name="pref_waiting_time_aniskip_8">8 seconds</string>
-    <string name="pref_waiting_time_aniskip_9">9 seconds</string>
-    <string name="pref_waiting_time_aniskip_10">10 seconds</string>
-    <string name="pref_enable_netflix_style_aniskip">Enable Netflix style</string>
-    <string name="player_aniskip_dontskip">Don\'t skip</string>
-    <string name="player_aniskip_dontskip_toast">Skip in %d seconds</string>
-    <string name="player_aniskip_skip">%s skipped</string>
-    <string name="player_hwdec_mode">Hardware decoding mode</string>
     <string name="notification_episodes_single">Episode %1$s</string>
     <string name="notification_episodes_single_and_more">Episode %1$s and %2$d more</string>
     <string name="notification_episodes_multiple">Episodes %1$s</string>
@@ -1184,41 +1282,11 @@
     <string name="extension_settings">Extension settings</string>
     <string name="theme_cottoncandy">Cotton Candy</string>
     <string name="theme_mocha">Mocha</string>
-    <string name="action_save_screenshot">Save screenshot</string>
     <string name="pref_episode_swipe">Episode swipe</string>
     <string name="pref_episode_swipe_end">Swipe to right action</string>
     <string name="pref_episode_swipe_start">Swipe to left action</string>
     <string name="pref_category_hide_hidden">Hide hidden categories from categories and storage screen</string>
     <string name="pref_update_anime_release_grace_period">Expected anime release grace period</string>
-    <string name="player_subtitle_settings_example">Lorem ipsum dolor sit amet.</string>
-    <string name="player_subtitle_settings_filters">Filters</string>
-    <string name="player_subtitle_settings_delay_tab">Delay</string>
-    <string name="player_subtitle_settings_font_tab">Font</string>
-    <string name="player_subtitle_settings_color_tab">Color</string>
-    <string name="player_filters_brightness">Brightness</string>
-    <string name="player_filters_saturation">Saturation</string>
-    <string name="player_filters_contrast">Contrast</string>
-    <string name="player_filters_gamma">Gamma</string>
-    <string name="player_filters_hue">Hue</string>
-    <string name="player_filters_warning">Some filters may not work with your current video driver</string>
-    <string name="player_subtitle_settings">Subtitle settings</string>
-    <string name="player_add_external_audio">Add external audio</string>
-    <string name="player_add_external_audio_intent">Select an audio file.</string>
-    <string name="player_add_external_subtitles">Add external subtitles</string>
-    <string name="player_add_external_subtitles_intent">Select a subtitle file.</string>
-    <string name="player_subtitle_empty_warning">Has no effect because there aren\'t any subtitle tracks in this video</string>
-    <string name="player_override_ass_subtitles">Override ASS subtitles</string>
-    <string name="player_reset_subtitles">Reset subtitles to default</string>
-    <string name="player_subtitle_delay">Subtitle delay</string>
-    <string name="player_subtitle_remember_delay">Remember subtitle delay</string>
-    <string name="player_audio_delay">Audio delay</string>
-    <string name="player_audio_remember_delay">Remember audio delay</string>
-    <string name="player_track_delay_text_field">Delay(s)</string>
-    <string name="player_font_size_text_field">Font size</string>
-    <string name="player_subtitle_text_color">Text</string>
-    <string name="player_subtitle_border_color">Border</string>
-    <string name="player_subtitle_background_color">Background</string>
-    <string name="player_subtitle_font_text_field">Font Name</string>
     <string name="data_saver_exclude">Exclude from data saver</string>
     <string name="data_saver_stop_exclude">Stop excluding from data saver</string>
     <string name="data_saver">Data Saver</string>
diff --git a/presentation-core/src/main/java/tachiyomi/presentation/core/components/material/Constants.kt b/presentation-core/src/main/java/tachiyomi/presentation/core/components/material/Constants.kt
index 3f3a84319e..53f28fada4 100644
--- a/presentation-core/src/main/java/tachiyomi/presentation/core/components/material/Constants.kt
+++ b/presentation-core/src/main/java/tachiyomi/presentation/core/components/material/Constants.kt
@@ -17,6 +17,8 @@ class Padding {
 
     val medium = 16.dp
 
+    val mediumSmall = 12.dp
+
     val small = 8.dp
 
     val extraSmall = 4.dp
