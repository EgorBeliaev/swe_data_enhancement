diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt
index 177141cc21..d2c29bb46d 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerActivity.kt
@@ -369,6 +369,12 @@ class PlayerActivity : BaseActivity() {
         }
     }
 
+    private fun executeMPVCommand(commands: Array<String>) {
+        if (!player.isExiting) {
+            MPVLib.command(commands)
+        }
+    }
+
     private fun setupPlayerMPV() {
         val logLevel = if (networkPreferences.verboseLogging().get()) "info" else "warn"
 
@@ -716,6 +722,7 @@ class PlayerActivity : BaseActivity() {
     }
 
     private fun setupPlayerOrientation() {
+        if (player.isExiting) return
         requestedOrientation = when (playerPreferences.defaultPlayerOrientationType().get()) {
             PlayerOrientation.Free -> ActivityInfo.SCREEN_ORIENTATION_SENSOR
             PlayerOrientation.Video -> if ((player.getVideoOutAspect() ?: 0.0) > 1.0) {
@@ -1057,6 +1064,7 @@ class PlayerActivity : BaseActivity() {
     // at void eu.kanade.tachiyomi.ui.player.PlayerActivity.event(int) (PlayerActivity.kt:1566)
     // at void is.xyz.mpv.MPVLib.event(int) (MPVLib.java:86)
     private fun fileLoaded() {
+        if (player.isExiting) return
         setMpvMediaTitle()
         setupPlayerOrientation()
         setupTracks()
@@ -1075,6 +1083,7 @@ class PlayerActivity : BaseActivity() {
     }
 
     private fun setupTracks() {
+        if (player.isExiting) return
         viewModel.isLoadingTracks.update { _ -> true }
 
         val audioTracks = viewModel.videoList.value.getOrNull(viewModel.selectedVideoIndex.value)
@@ -1090,16 +1099,17 @@ class PlayerActivity : BaseActivity() {
         }
 
         audioTracks?.forEach { audio ->
-            MPVLib.command(arrayOf("audio-add", audio.url, "auto", audio.lang))
+            executeMPVCommand(arrayOf("audio-add", audio.url, "auto", audio.lang))
         }
         subtitleTracks?.forEach { sub ->
-            MPVLib.command(arrayOf("sub-add", sub.url, "auto", sub.lang))
+            executeMPVCommand(arrayOf("sub-add", sub.url, "auto", sub.lang))
         }
 
         viewModel.isLoadingTracks.update { _ -> false }
     }
 
     private fun setMpvMediaTitle() {
+        if (player.isExiting) return
         val anime = viewModel.currentAnime.value ?: return
         val episode = viewModel.currentEpisode.value ?: return
 
diff --git a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt
index e95672cfdd..e5fa36e1c9 100644
--- a/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt
+++ b/app/src/main/java/eu/kanade/tachiyomi/ui/player/PlayerViewModel.kt
@@ -897,6 +897,7 @@ class PlayerViewModel @JvmOverloads constructor(
         return try {
             val anime = getAnime.await(animeId)
             if (anime != null) {
+                _currentAnime.update { _ -> anime }
                 animeTitle.update { _ -> anime.title }
                 sourceManager.isInitialized.first { it }
                 if (episodeId == -1L) episodeId = initialEpisodeId
@@ -911,7 +912,6 @@ class PlayerViewModel @JvmOverloads constructor(
                 val source = sourceManager.getOrStub(anime.source)
 
                 _currentEpisode.update { _ -> episode }
-                _currentAnime.update { _ -> anime }
                 _currentSource.update { _ -> source }
 
                 _hasPreviousEpisode.update { _ -> getCurrentEpisodeIndex() != 0 }
