[
    {
        "title": "Subscriber drops fix"
    },
    {
        "author": {
            "login": "PR Description"
        },
        "body": "**Previously**, the `purchased.plan` field was not included when fetching the user record for task scoring. This meant that subscribers, who are meant to have greater ability to obtain drops, were not receiving the benefit in the calculation for obtaining items from tasks.\r\n\r\n**Now**, `purchased.plan` is retrieved, allowing subscribers to get all the drops they're owed again!\r\n\r\nNote... I looked into creating integration tests for this scenario, but need a way to control the randomness of drops during the task scoring operation. Using `sinon.stub` on `common.fns.predictableRandom` seems not to work, and in fact there are comments elsewhere in the test suite noting that we've run into that problem before. Thoughts?"
    },
    {
        "author": {
            "login": "phillipthelen"
        },
        "body": "[0001-Add-tests-for-drop-cap.patch](https://github.com/user-attachments/files/16906955/0001-Add-tests-for-drop-cap.patch)\r\n\r\n@SabreCat Here a patch file with 4 tests. I was able to stub `Math.random` which is what the drop system uses when no predictableRandom is passed in.\r\n\r\n1. user receives a drop\r\n2. non-subscriber does not receive a drop if they are at the drop cap\r\n3. subscriber receives a drop if they are over the regular drop cap but under the subscriber one\r\n4. subscriber does not receive a drop if they are at the subscriber drop cap."
    }
]